// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// **************************************************************************
// MoorGenerator
// **************************************************************************

class NfeDetEspecificoCombustivelsCompanion
    extends UpdateCompanion<NfeDetEspecificoCombustivel> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<int?> codigoAnp;
  final Value<String?> descricaoAnp;
  final Value<double?> percentualGlp;
  final Value<double?> percentualGasNacional;
  final Value<double?> percentualGasImportado;
  final Value<double?> valorPartida;
  final Value<String?> codif;
  final Value<double?> quantidadeTempAmbiente;
  final Value<String?> ufConsumo;
  final Value<double?> cideBaseCalculo;
  final Value<double?> cideAliquota;
  final Value<double?> cideValor;
  final Value<int?> encerranteBico;
  final Value<int?> encerranteBomba;
  final Value<int?> encerranteTanque;
  final Value<double?> encerranteValorInicio;
  final Value<double?> encerranteValorFim;
  const NfeDetEspecificoCombustivelsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoAnp = const Value.absent(),
    this.descricaoAnp = const Value.absent(),
    this.percentualGlp = const Value.absent(),
    this.percentualGasNacional = const Value.absent(),
    this.percentualGasImportado = const Value.absent(),
    this.valorPartida = const Value.absent(),
    this.codif = const Value.absent(),
    this.quantidadeTempAmbiente = const Value.absent(),
    this.ufConsumo = const Value.absent(),
    this.cideBaseCalculo = const Value.absent(),
    this.cideAliquota = const Value.absent(),
    this.cideValor = const Value.absent(),
    this.encerranteBico = const Value.absent(),
    this.encerranteBomba = const Value.absent(),
    this.encerranteTanque = const Value.absent(),
    this.encerranteValorInicio = const Value.absent(),
    this.encerranteValorFim = const Value.absent(),
  });
  NfeDetEspecificoCombustivelsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoAnp = const Value.absent(),
    this.descricaoAnp = const Value.absent(),
    this.percentualGlp = const Value.absent(),
    this.percentualGasNacional = const Value.absent(),
    this.percentualGasImportado = const Value.absent(),
    this.valorPartida = const Value.absent(),
    this.codif = const Value.absent(),
    this.quantidadeTempAmbiente = const Value.absent(),
    this.ufConsumo = const Value.absent(),
    this.cideBaseCalculo = const Value.absent(),
    this.cideAliquota = const Value.absent(),
    this.cideValor = const Value.absent(),
    this.encerranteBico = const Value.absent(),
    this.encerranteBomba = const Value.absent(),
    this.encerranteTanque = const Value.absent(),
    this.encerranteValorInicio = const Value.absent(),
    this.encerranteValorFim = const Value.absent(),
  });
  static Insertable<NfeDetEspecificoCombustivel> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<int>? codigoAnp,
    Expression<String>? descricaoAnp,
    Expression<double>? percentualGlp,
    Expression<double>? percentualGasNacional,
    Expression<double>? percentualGasImportado,
    Expression<double>? valorPartida,
    Expression<String>? codif,
    Expression<double>? quantidadeTempAmbiente,
    Expression<String>? ufConsumo,
    Expression<double>? cideBaseCalculo,
    Expression<double>? cideAliquota,
    Expression<double>? cideValor,
    Expression<int>? encerranteBico,
    Expression<int>? encerranteBomba,
    Expression<int>? encerranteTanque,
    Expression<double>? encerranteValorInicio,
    Expression<double>? encerranteValorFim,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (codigoAnp != null) 'CODIGO_ANP': codigoAnp,
      if (descricaoAnp != null) 'DESCRICAO_ANP': descricaoAnp,
      if (percentualGlp != null) 'PERCENTUAL_GLP': percentualGlp,
      if (percentualGasNacional != null)
        'PERCENTUAL_GAS_NACIONAL': percentualGasNacional,
      if (percentualGasImportado != null)
        'PERCENTUAL_GAS_IMPORTADO': percentualGasImportado,
      if (valorPartida != null) 'VALOR_PARTIDA': valorPartida,
      if (codif != null) 'CODIF': codif,
      if (quantidadeTempAmbiente != null)
        'QUANTIDADE_TEMP_AMBIENTE': quantidadeTempAmbiente,
      if (ufConsumo != null) 'UF_CONSUMO': ufConsumo,
      if (cideBaseCalculo != null) 'CIDE_BASE_CALCULO': cideBaseCalculo,
      if (cideAliquota != null) 'CIDE_ALIQUOTA': cideAliquota,
      if (cideValor != null) 'CIDE_VALOR': cideValor,
      if (encerranteBico != null) 'ENCERRANTE_BICO': encerranteBico,
      if (encerranteBomba != null) 'ENCERRANTE_BOMBA': encerranteBomba,
      if (encerranteTanque != null) 'ENCERRANTE_TANQUE': encerranteTanque,
      if (encerranteValorInicio != null)
        'ENCERRANTE_VALOR_INICIO': encerranteValorInicio,
      if (encerranteValorFim != null)
        'ENCERRANTE_VALOR_FIM': encerranteValorFim,
    });
  }

  NfeDetEspecificoCombustivelsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<int?>? codigoAnp,
      Value<String?>? descricaoAnp,
      Value<double?>? percentualGlp,
      Value<double?>? percentualGasNacional,
      Value<double?>? percentualGasImportado,
      Value<double?>? valorPartida,
      Value<String?>? codif,
      Value<double?>? quantidadeTempAmbiente,
      Value<String?>? ufConsumo,
      Value<double?>? cideBaseCalculo,
      Value<double?>? cideAliquota,
      Value<double?>? cideValor,
      Value<int?>? encerranteBico,
      Value<int?>? encerranteBomba,
      Value<int?>? encerranteTanque,
      Value<double?>? encerranteValorInicio,
      Value<double?>? encerranteValorFim}) {
    return NfeDetEspecificoCombustivelsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      codigoAnp: codigoAnp ?? this.codigoAnp,
      descricaoAnp: descricaoAnp ?? this.descricaoAnp,
      percentualGlp: percentualGlp ?? this.percentualGlp,
      percentualGasNacional:
          percentualGasNacional ?? this.percentualGasNacional,
      percentualGasImportado:
          percentualGasImportado ?? this.percentualGasImportado,
      valorPartida: valorPartida ?? this.valorPartida,
      codif: codif ?? this.codif,
      quantidadeTempAmbiente:
          quantidadeTempAmbiente ?? this.quantidadeTempAmbiente,
      ufConsumo: ufConsumo ?? this.ufConsumo,
      cideBaseCalculo: cideBaseCalculo ?? this.cideBaseCalculo,
      cideAliquota: cideAliquota ?? this.cideAliquota,
      cideValor: cideValor ?? this.cideValor,
      encerranteBico: encerranteBico ?? this.encerranteBico,
      encerranteBomba: encerranteBomba ?? this.encerranteBomba,
      encerranteTanque: encerranteTanque ?? this.encerranteTanque,
      encerranteValorInicio:
          encerranteValorInicio ?? this.encerranteValorInicio,
      encerranteValorFim: encerranteValorFim ?? this.encerranteValorFim,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (codigoAnp.present) {
      map['CODIGO_ANP'] = Variable<int>(codigoAnp.value);
    }
    if (descricaoAnp.present) {
      map['DESCRICAO_ANP'] = Variable<String>(descricaoAnp.value);
    }
    if (percentualGlp.present) {
      map['PERCENTUAL_GLP'] = Variable<double>(percentualGlp.value);
    }
    if (percentualGasNacional.present) {
      map['PERCENTUAL_GAS_NACIONAL'] =
          Variable<double>(percentualGasNacional.value);
    }
    if (percentualGasImportado.present) {
      map['PERCENTUAL_GAS_IMPORTADO'] =
          Variable<double>(percentualGasImportado.value);
    }
    if (valorPartida.present) {
      map['VALOR_PARTIDA'] = Variable<double>(valorPartida.value);
    }
    if (codif.present) {
      map['CODIF'] = Variable<String>(codif.value);
    }
    if (quantidadeTempAmbiente.present) {
      map['QUANTIDADE_TEMP_AMBIENTE'] =
          Variable<double>(quantidadeTempAmbiente.value);
    }
    if (ufConsumo.present) {
      map['UF_CONSUMO'] = Variable<String>(ufConsumo.value);
    }
    if (cideBaseCalculo.present) {
      map['CIDE_BASE_CALCULO'] = Variable<double>(cideBaseCalculo.value);
    }
    if (cideAliquota.present) {
      map['CIDE_ALIQUOTA'] = Variable<double>(cideAliquota.value);
    }
    if (cideValor.present) {
      map['CIDE_VALOR'] = Variable<double>(cideValor.value);
    }
    if (encerranteBico.present) {
      map['ENCERRANTE_BICO'] = Variable<int>(encerranteBico.value);
    }
    if (encerranteBomba.present) {
      map['ENCERRANTE_BOMBA'] = Variable<int>(encerranteBomba.value);
    }
    if (encerranteTanque.present) {
      map['ENCERRANTE_TANQUE'] = Variable<int>(encerranteTanque.value);
    }
    if (encerranteValorInicio.present) {
      map['ENCERRANTE_VALOR_INICIO'] =
          Variable<double>(encerranteValorInicio.value);
    }
    if (encerranteValorFim.present) {
      map['ENCERRANTE_VALOR_FIM'] = Variable<double>(encerranteValorFim.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoCombustivelsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoAnp: $codigoAnp, ')
          ..write('descricaoAnp: $descricaoAnp, ')
          ..write('percentualGlp: $percentualGlp, ')
          ..write('percentualGasNacional: $percentualGasNacional, ')
          ..write('percentualGasImportado: $percentualGasImportado, ')
          ..write('valorPartida: $valorPartida, ')
          ..write('codif: $codif, ')
          ..write('quantidadeTempAmbiente: $quantidadeTempAmbiente, ')
          ..write('ufConsumo: $ufConsumo, ')
          ..write('cideBaseCalculo: $cideBaseCalculo, ')
          ..write('cideAliquota: $cideAliquota, ')
          ..write('cideValor: $cideValor, ')
          ..write('encerranteBico: $encerranteBico, ')
          ..write('encerranteBomba: $encerranteBomba, ')
          ..write('encerranteTanque: $encerranteTanque, ')
          ..write('encerranteValorInicio: $encerranteValorInicio, ')
          ..write('encerranteValorFim: $encerranteValorFim')
          ..write(')'))
        .toString();
  }
}

class $NfeDetEspecificoCombustivelsTable extends NfeDetEspecificoCombustivels
    with
        TableInfo<$NfeDetEspecificoCombustivelsTable,
            NfeDetEspecificoCombustivel> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetEspecificoCombustivelsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _codigoAnpMeta = const VerificationMeta('codigoAnp');
  @override
  late final GeneratedColumn<int> codigoAnp = GeneratedColumn<int>(
      'CODIGO_ANP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _descricaoAnpMeta =
      const VerificationMeta('descricaoAnp');
  @override
  late final GeneratedColumn<String> descricaoAnp = GeneratedColumn<String>(
      'DESCRICAO_ANP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 95),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _percentualGlpMeta =
      const VerificationMeta('percentualGlp');
  @override
  late final GeneratedColumn<double> percentualGlp = GeneratedColumn<double>(
      'PERCENTUAL_GLP', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualGasNacionalMeta =
      const VerificationMeta('percentualGasNacional');
  @override
  late final GeneratedColumn<double> percentualGasNacional =
      GeneratedColumn<double>('PERCENTUAL_GAS_NACIONAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualGasImportadoMeta =
      const VerificationMeta('percentualGasImportado');
  @override
  late final GeneratedColumn<double> percentualGasImportado =
      GeneratedColumn<double>('PERCENTUAL_GAS_IMPORTADO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPartidaMeta =
      const VerificationMeta('valorPartida');
  @override
  late final GeneratedColumn<double> valorPartida = GeneratedColumn<double>(
      'VALOR_PARTIDA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _codifMeta = const VerificationMeta('codif');
  @override
  late final GeneratedColumn<String> codif = GeneratedColumn<String>(
      'CODIF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 21),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadeTempAmbienteMeta =
      const VerificationMeta('quantidadeTempAmbiente');
  @override
  late final GeneratedColumn<double> quantidadeTempAmbiente =
      GeneratedColumn<double>('QUANTIDADE_TEMP_AMBIENTE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _ufConsumoMeta = const VerificationMeta('ufConsumo');
  @override
  late final GeneratedColumn<String> ufConsumo = GeneratedColumn<String>(
      'UF_CONSUMO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cideBaseCalculoMeta =
      const VerificationMeta('cideBaseCalculo');
  @override
  late final GeneratedColumn<double> cideBaseCalculo =
      GeneratedColumn<double>('CIDE_BASE_CALCULO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _cideAliquotaMeta =
      const VerificationMeta('cideAliquota');
  @override
  late final GeneratedColumn<double> cideAliquota = GeneratedColumn<double>(
      'CIDE_ALIQUOTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _cideValorMeta = const VerificationMeta('cideValor');
  @override
  late final GeneratedColumn<double> cideValor = GeneratedColumn<double>(
      'CIDE_VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _encerranteBicoMeta =
      const VerificationMeta('encerranteBico');
  @override
  late final GeneratedColumn<int> encerranteBico = GeneratedColumn<int>(
      'ENCERRANTE_BICO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _encerranteBombaMeta =
      const VerificationMeta('encerranteBomba');
  @override
  late final GeneratedColumn<int> encerranteBomba = GeneratedColumn<int>(
      'ENCERRANTE_BOMBA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _encerranteTanqueMeta =
      const VerificationMeta('encerranteTanque');
  @override
  late final GeneratedColumn<int> encerranteTanque = GeneratedColumn<int>(
      'ENCERRANTE_TANQUE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _encerranteValorInicioMeta =
      const VerificationMeta('encerranteValorInicio');
  @override
  late final GeneratedColumn<double> encerranteValorInicio =
      GeneratedColumn<double>('ENCERRANTE_VALOR_INICIO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _encerranteValorFimMeta =
      const VerificationMeta('encerranteValorFim');
  @override
  late final GeneratedColumn<double> encerranteValorFim =
      GeneratedColumn<double>('ENCERRANTE_VALOR_FIM', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        codigoAnp,
        descricaoAnp,
        percentualGlp,
        percentualGasNacional,
        percentualGasImportado,
        valorPartida,
        codif,
        quantidadeTempAmbiente,
        ufConsumo,
        cideBaseCalculo,
        cideAliquota,
        cideValor,
        encerranteBico,
        encerranteBomba,
        encerranteTanque,
        encerranteValorInicio,
        encerranteValorFim
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DET_ESPECIFICO_COMBUSTIVEL';
  @override
  String get actualTableName => 'NFE_DET_ESPECIFICO_COMBUSTIVEL';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetEspecificoCombustivel> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('CODIGO_ANP')) {
      context.handle(_codigoAnpMeta,
          codigoAnp.isAcceptableOrUnknown(data['CODIGO_ANP']!, _codigoAnpMeta));
    }
    if (data.containsKey('DESCRICAO_ANP')) {
      context.handle(
          _descricaoAnpMeta,
          descricaoAnp.isAcceptableOrUnknown(
              data['DESCRICAO_ANP']!, _descricaoAnpMeta));
    }
    if (data.containsKey('PERCENTUAL_GLP')) {
      context.handle(
          _percentualGlpMeta,
          percentualGlp.isAcceptableOrUnknown(
              data['PERCENTUAL_GLP']!, _percentualGlpMeta));
    }
    if (data.containsKey('PERCENTUAL_GAS_NACIONAL')) {
      context.handle(
          _percentualGasNacionalMeta,
          percentualGasNacional.isAcceptableOrUnknown(
              data['PERCENTUAL_GAS_NACIONAL']!, _percentualGasNacionalMeta));
    }
    if (data.containsKey('PERCENTUAL_GAS_IMPORTADO')) {
      context.handle(
          _percentualGasImportadoMeta,
          percentualGasImportado.isAcceptableOrUnknown(
              data['PERCENTUAL_GAS_IMPORTADO']!, _percentualGasImportadoMeta));
    }
    if (data.containsKey('VALOR_PARTIDA')) {
      context.handle(
          _valorPartidaMeta,
          valorPartida.isAcceptableOrUnknown(
              data['VALOR_PARTIDA']!, _valorPartidaMeta));
    }
    if (data.containsKey('CODIF')) {
      context.handle(
          _codifMeta, codif.isAcceptableOrUnknown(data['CODIF']!, _codifMeta));
    }
    if (data.containsKey('QUANTIDADE_TEMP_AMBIENTE')) {
      context.handle(
          _quantidadeTempAmbienteMeta,
          quantidadeTempAmbiente.isAcceptableOrUnknown(
              data['QUANTIDADE_TEMP_AMBIENTE']!, _quantidadeTempAmbienteMeta));
    }
    if (data.containsKey('UF_CONSUMO')) {
      context.handle(_ufConsumoMeta,
          ufConsumo.isAcceptableOrUnknown(data['UF_CONSUMO']!, _ufConsumoMeta));
    }
    if (data.containsKey('CIDE_BASE_CALCULO')) {
      context.handle(
          _cideBaseCalculoMeta,
          cideBaseCalculo.isAcceptableOrUnknown(
              data['CIDE_BASE_CALCULO']!, _cideBaseCalculoMeta));
    }
    if (data.containsKey('CIDE_ALIQUOTA')) {
      context.handle(
          _cideAliquotaMeta,
          cideAliquota.isAcceptableOrUnknown(
              data['CIDE_ALIQUOTA']!, _cideAliquotaMeta));
    }
    if (data.containsKey('CIDE_VALOR')) {
      context.handle(_cideValorMeta,
          cideValor.isAcceptableOrUnknown(data['CIDE_VALOR']!, _cideValorMeta));
    }
    if (data.containsKey('ENCERRANTE_BICO')) {
      context.handle(
          _encerranteBicoMeta,
          encerranteBico.isAcceptableOrUnknown(
              data['ENCERRANTE_BICO']!, _encerranteBicoMeta));
    }
    if (data.containsKey('ENCERRANTE_BOMBA')) {
      context.handle(
          _encerranteBombaMeta,
          encerranteBomba.isAcceptableOrUnknown(
              data['ENCERRANTE_BOMBA']!, _encerranteBombaMeta));
    }
    if (data.containsKey('ENCERRANTE_TANQUE')) {
      context.handle(
          _encerranteTanqueMeta,
          encerranteTanque.isAcceptableOrUnknown(
              data['ENCERRANTE_TANQUE']!, _encerranteTanqueMeta));
    }
    if (data.containsKey('ENCERRANTE_VALOR_INICIO')) {
      context.handle(
          _encerranteValorInicioMeta,
          encerranteValorInicio.isAcceptableOrUnknown(
              data['ENCERRANTE_VALOR_INICIO']!, _encerranteValorInicioMeta));
    }
    if (data.containsKey('ENCERRANTE_VALOR_FIM')) {
      context.handle(
          _encerranteValorFimMeta,
          encerranteValorFim.isAcceptableOrUnknown(
              data['ENCERRANTE_VALOR_FIM']!, _encerranteValorFimMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetEspecificoCombustivel map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeDetEspecificoCombustivel.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetEspecificoCombustivelsTable createAlias(String alias) {
    return $NfeDetEspecificoCombustivelsTable(attachedDatabase, alias);
  }
}

class NfeDetEspecificoMedicamento extends DataClass
    implements Insertable<NfeDetEspecificoMedicamento> {
  final int? id;
  final int? idNfeDetalhe;
  final String? codigoAnvisa;
  final String? motivoIsencao;
  final double? precoMaximoConsumidor;
  NfeDetEspecificoMedicamento(
      {this.id,
      this.idNfeDetalhe,
      this.codigoAnvisa,
      this.motivoIsencao,
      this.precoMaximoConsumidor});
  factory NfeDetEspecificoMedicamento.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetEspecificoMedicamento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      codigoAnvisa: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_ANVISA']),
      motivoIsencao: ValueSqlType.stringType(data['${effectivePrefix}MOTIVO_ISENCAO']),
      precoMaximoConsumidor: ValueSqlType.doubleType(
          data['${effectivePrefix}PRECO_MAXIMO_CONSUMIDOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || codigoAnvisa != null) {
      map['CODIGO_ANVISA'] = Variable<String>(codigoAnvisa);
    }
    if (!nullToAbsent || motivoIsencao != null) {
      map['MOTIVO_ISENCAO'] = Variable<String>(motivoIsencao);
    }
    if (!nullToAbsent || precoMaximoConsumidor != null) {
      map['PRECO_MAXIMO_CONSUMIDOR'] = Variable<double>(precoMaximoConsumidor);
    }
    return map;
  }

  NfeDetEspecificoMedicamentosCompanion toCompanion(bool nullToAbsent) {
    return NfeDetEspecificoMedicamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      codigoAnvisa: codigoAnvisa == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoAnvisa),
      motivoIsencao: motivoIsencao == null && nullToAbsent
          ? const Value.absent()
          : Value(motivoIsencao),
      precoMaximoConsumidor: precoMaximoConsumidor == null && nullToAbsent
          ? const Value.absent()
          : Value(precoMaximoConsumidor),
    );
  }

  factory NfeDetEspecificoMedicamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetEspecificoMedicamento(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      codigoAnvisa: serializer.fromJson<String?>(json['codigoAnvisa']),
      motivoIsencao: serializer.fromJson<String?>(json['motivoIsencao']),
      precoMaximoConsumidor:
          serializer.fromJson<double?>(json['precoMaximoConsumidor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'codigoAnvisa': serializer.toJson<String?>(codigoAnvisa),
      'motivoIsencao': serializer.toJson<String?>(motivoIsencao),
      'precoMaximoConsumidor':
          serializer.toJson<double?>(precoMaximoConsumidor),
    };
  }

  NfeDetEspecificoMedicamento copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? codigoAnvisa,
          String? motivoIsencao,
          double? precoMaximoConsumidor}) =>
      NfeDetEspecificoMedicamento(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        codigoAnvisa: codigoAnvisa ?? this.codigoAnvisa,
        motivoIsencao: motivoIsencao ?? this.motivoIsencao,
        precoMaximoConsumidor:
            precoMaximoConsumidor ?? this.precoMaximoConsumidor,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoMedicamento(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoAnvisa: $codigoAnvisa, ')
          ..write('motivoIsencao: $motivoIsencao, ')
          ..write('precoMaximoConsumidor: $precoMaximoConsumidor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, idNfeDetalhe, codigoAnvisa, motivoIsencao, precoMaximoConsumidor);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetEspecificoMedicamento &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.codigoAnvisa == this.codigoAnvisa &&
          other.motivoIsencao == this.motivoIsencao &&
          other.precoMaximoConsumidor == this.precoMaximoConsumidor);
}

class NfeDetEspecificoMedicamentosCompanion
    extends UpdateCompanion<NfeDetEspecificoMedicamento> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> codigoAnvisa;
  final Value<String?> motivoIsencao;
  final Value<double?> precoMaximoConsumidor;
  const NfeDetEspecificoMedicamentosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoAnvisa = const Value.absent(),
    this.motivoIsencao = const Value.absent(),
    this.precoMaximoConsumidor = const Value.absent(),
  });
  NfeDetEspecificoMedicamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.codigoAnvisa = const Value.absent(),
    this.motivoIsencao = const Value.absent(),
    this.precoMaximoConsumidor = const Value.absent(),
  });
  static Insertable<NfeDetEspecificoMedicamento> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? codigoAnvisa,
    Expression<String>? motivoIsencao,
    Expression<double>? precoMaximoConsumidor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (codigoAnvisa != null) 'CODIGO_ANVISA': codigoAnvisa,
      if (motivoIsencao != null) 'MOTIVO_ISENCAO': motivoIsencao,
      if (precoMaximoConsumidor != null)
        'PRECO_MAXIMO_CONSUMIDOR': precoMaximoConsumidor,
    });
  }

  NfeDetEspecificoMedicamentosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? codigoAnvisa,
      Value<String?>? motivoIsencao,
      Value<double?>? precoMaximoConsumidor}) {
    return NfeDetEspecificoMedicamentosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      codigoAnvisa: codigoAnvisa ?? this.codigoAnvisa,
      motivoIsencao: motivoIsencao ?? this.motivoIsencao,
      precoMaximoConsumidor:
          precoMaximoConsumidor ?? this.precoMaximoConsumidor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (codigoAnvisa.present) {
      map['CODIGO_ANVISA'] = Variable<String>(codigoAnvisa.value);
    }
    if (motivoIsencao.present) {
      map['MOTIVO_ISENCAO'] = Variable<String>(motivoIsencao.value);
    }
    if (precoMaximoConsumidor.present) {
      map['PRECO_MAXIMO_CONSUMIDOR'] =
          Variable<double>(precoMaximoConsumidor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoMedicamentosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoAnvisa: $codigoAnvisa, ')
          ..write('motivoIsencao: $motivoIsencao, ')
          ..write('precoMaximoConsumidor: $precoMaximoConsumidor')
          ..write(')'))
        .toString();
  }
}

class $NfeDetEspecificoMedicamentosTable extends NfeDetEspecificoMedicamentos
    with
        TableInfo<$NfeDetEspecificoMedicamentosTable,
            NfeDetEspecificoMedicamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetEspecificoMedicamentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _codigoAnvisaMeta =
      const VerificationMeta('codigoAnvisa');
  @override
  late final GeneratedColumn<String> codigoAnvisa = GeneratedColumn<String>(
      'CODIGO_ANVISA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 13),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _motivoIsencaoMeta =
      const VerificationMeta('motivoIsencao');
  @override
  late final GeneratedColumn<String> motivoIsencao = GeneratedColumn<String>(
      'MOTIVO_ISENCAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _precoMaximoConsumidorMeta =
      const VerificationMeta('precoMaximoConsumidor');
  @override
  late final GeneratedColumn<double> precoMaximoConsumidor =
      GeneratedColumn<double>('PRECO_MAXIMO_CONSUMIDOR', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeDetalhe, codigoAnvisa, motivoIsencao, precoMaximoConsumidor];
  @override
  String get aliasedName => _alias ?? 'NFE_DET_ESPECIFICO_MEDICAMENTO';
  @override
  String get actualTableName => 'NFE_DET_ESPECIFICO_MEDICAMENTO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetEspecificoMedicamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('CODIGO_ANVISA')) {
      context.handle(
          _codigoAnvisaMeta,
          codigoAnvisa.isAcceptableOrUnknown(
              data['CODIGO_ANVISA']!, _codigoAnvisaMeta));
    }
    if (data.containsKey('MOTIVO_ISENCAO')) {
      context.handle(
          _motivoIsencaoMeta,
          motivoIsencao.isAcceptableOrUnknown(
              data['MOTIVO_ISENCAO']!, _motivoIsencaoMeta));
    }
    if (data.containsKey('PRECO_MAXIMO_CONSUMIDOR')) {
      context.handle(
          _precoMaximoConsumidorMeta,
          precoMaximoConsumidor.isAcceptableOrUnknown(
              data['PRECO_MAXIMO_CONSUMIDOR']!, _precoMaximoConsumidorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetEspecificoMedicamento map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeDetEspecificoMedicamento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetEspecificoMedicamentosTable createAlias(String alias) {
    return $NfeDetEspecificoMedicamentosTable(attachedDatabase, alias);
  }
}

class NfeDetEspecificoVeiculo extends DataClass
    implements Insertable<NfeDetEspecificoVeiculo> {
  final int? id;
  final int? idNfeDetalhe;
  final String? tipoOperacao;
  final String? chassi;
  final String? cor;
  final String? descricaoCor;
  final String? potenciaMotor;
  final String? cilindradas;
  final String? pesoLiquido;
  final String? pesoBruto;
  final String? numeroSerie;
  final String? tipoCombustivel;
  final String? numeroMotor;
  final String? capacidadeMaximaTracao;
  final String? distanciaEixos;
  final String? anoModelo;
  final String? anoFabricacao;
  final String? tipoPintura;
  final String? tipoVeiculo;
  final String? especieVeiculo;
  final String? condicaoVin;
  final String? condicaoVeiculo;
  final String? codigoMarcaModelo;
  final String? codigoCorDenatran;
  final int? lotacaoMaxima;
  final String? restricao;
  NfeDetEspecificoVeiculo(
      {this.id,
      this.idNfeDetalhe,
      this.tipoOperacao,
      this.chassi,
      this.cor,
      this.descricaoCor,
      this.potenciaMotor,
      this.cilindradas,
      this.pesoLiquido,
      this.pesoBruto,
      this.numeroSerie,
      this.tipoCombustivel,
      this.numeroMotor,
      this.capacidadeMaximaTracao,
      this.distanciaEixos,
      this.anoModelo,
      this.anoFabricacao,
      this.tipoPintura,
      this.tipoVeiculo,
      this.especieVeiculo,
      this.condicaoVin,
      this.condicaoVeiculo,
      this.codigoMarcaModelo,
      this.codigoCorDenatran,
      this.lotacaoMaxima,
      this.restricao});
  factory NfeDetEspecificoVeiculo.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetEspecificoVeiculo(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      tipoOperacao: ValueSqlType.stringType(data['${effectivePrefix}TIPO_OPERACAO']),
      chassi: ValueSqlType.stringType(data['${effectivePrefix}CHASSI']),
      cor: ValueSqlType.stringType(data['${effectivePrefix}COR']),
      descricaoCor: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO_COR']),
      potenciaMotor: ValueSqlType.stringType(data['${effectivePrefix}POTENCIA_MOTOR']),
      cilindradas: ValueSqlType.stringType(data['${effectivePrefix}CILINDRADAS']),
      pesoLiquido: ValueSqlType.stringType(data['${effectivePrefix}PESO_LIQUIDO']),
      pesoBruto: ValueSqlType.stringType(data['${effectivePrefix}PESO_BRUTO']),
      numeroSerie: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_SERIE']),
      tipoCombustivel: ValueSqlType.stringType(data['${effectivePrefix}TIPO_COMBUSTIVEL']),
      numeroMotor: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_MOTOR']),
      capacidadeMaximaTracao: ValueSqlType.stringType(
          data['${effectivePrefix}CAPACIDADE_MAXIMA_TRACAO']),
      distanciaEixos: ValueSqlType.stringType(data['${effectivePrefix}DISTANCIA_EIXOS']),
      anoModelo: ValueSqlType.stringType(data['${effectivePrefix}ANO_MODELO']),
      anoFabricacao: ValueSqlType.stringType(data['${effectivePrefix}ANO_FABRICACAO']),
      tipoPintura: ValueSqlType.stringType(data['${effectivePrefix}TIPO_PINTURA']),
      tipoVeiculo: ValueSqlType.stringType(data['${effectivePrefix}TIPO_VEICULO']),
      especieVeiculo: ValueSqlType.stringType(data['${effectivePrefix}ESPECIE_VEICULO']),
      condicaoVin: ValueSqlType.stringType(data['${effectivePrefix}CONDICAO_VIN']),
      condicaoVeiculo: ValueSqlType.stringType(data['${effectivePrefix}CONDICAO_VEICULO']),
      codigoMarcaModelo: ValueSqlType.stringType(
          data['${effectivePrefix}CODIGO_MARCA_MODELO']),
      codigoCorDenatran: ValueSqlType.stringType(
          data['${effectivePrefix}CODIGO_COR_DENATRAN']),
      lotacaoMaxima: ValueSqlType.intType(data['${effectivePrefix}LOTACAO_MAXIMA']),
      restricao: ValueSqlType.stringType(data['${effectivePrefix}RESTRICAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || tipoOperacao != null) {
      map['TIPO_OPERACAO'] = Variable<String>(tipoOperacao);
    }
    if (!nullToAbsent || chassi != null) {
      map['CHASSI'] = Variable<String>(chassi);
    }
    if (!nullToAbsent || cor != null) {
      map['COR'] = Variable<String>(cor);
    }
    if (!nullToAbsent || descricaoCor != null) {
      map['DESCRICAO_COR'] = Variable<String>(descricaoCor);
    }
    if (!nullToAbsent || potenciaMotor != null) {
      map['POTENCIA_MOTOR'] = Variable<String>(potenciaMotor);
    }
    if (!nullToAbsent || cilindradas != null) {
      map['CILINDRADAS'] = Variable<String>(cilindradas);
    }
    if (!nullToAbsent || pesoLiquido != null) {
      map['PESO_LIQUIDO'] = Variable<String>(pesoLiquido);
    }
    if (!nullToAbsent || pesoBruto != null) {
      map['PESO_BRUTO'] = Variable<String>(pesoBruto);
    }
    if (!nullToAbsent || numeroSerie != null) {
      map['NUMERO_SERIE'] = Variable<String>(numeroSerie);
    }
    if (!nullToAbsent || tipoCombustivel != null) {
      map['TIPO_COMBUSTIVEL'] = Variable<String>(tipoCombustivel);
    }
    if (!nullToAbsent || numeroMotor != null) {
      map['NUMERO_MOTOR'] = Variable<String>(numeroMotor);
    }
    if (!nullToAbsent || capacidadeMaximaTracao != null) {
      map['CAPACIDADE_MAXIMA_TRACAO'] =
          Variable<String>(capacidadeMaximaTracao);
    }
    if (!nullToAbsent || distanciaEixos != null) {
      map['DISTANCIA_EIXOS'] = Variable<String>(distanciaEixos);
    }
    if (!nullToAbsent || anoModelo != null) {
      map['ANO_MODELO'] = Variable<String>(anoModelo);
    }
    if (!nullToAbsent || anoFabricacao != null) {
      map['ANO_FABRICACAO'] = Variable<String>(anoFabricacao);
    }
    if (!nullToAbsent || tipoPintura != null) {
      map['TIPO_PINTURA'] = Variable<String>(tipoPintura);
    }
    if (!nullToAbsent || tipoVeiculo != null) {
      map['TIPO_VEICULO'] = Variable<String>(tipoVeiculo);
    }
    if (!nullToAbsent || especieVeiculo != null) {
      map['ESPECIE_VEICULO'] = Variable<String>(especieVeiculo);
    }
    if (!nullToAbsent || condicaoVin != null) {
      map['CONDICAO_VIN'] = Variable<String>(condicaoVin);
    }
    if (!nullToAbsent || condicaoVeiculo != null) {
      map['CONDICAO_VEICULO'] = Variable<String>(condicaoVeiculo);
    }
    if (!nullToAbsent || codigoMarcaModelo != null) {
      map['CODIGO_MARCA_MODELO'] = Variable<String>(codigoMarcaModelo);
    }
    if (!nullToAbsent || codigoCorDenatran != null) {
      map['CODIGO_COR_DENATRAN'] = Variable<String>(codigoCorDenatran);
    }
    if (!nullToAbsent || lotacaoMaxima != null) {
      map['LOTACAO_MAXIMA'] = Variable<int>(lotacaoMaxima);
    }
    if (!nullToAbsent || restricao != null) {
      map['RESTRICAO'] = Variable<String>(restricao);
    }
    return map;
  }

  NfeDetEspecificoVeiculosCompanion toCompanion(bool nullToAbsent) {
    return NfeDetEspecificoVeiculosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      tipoOperacao: tipoOperacao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoOperacao),
      chassi:
          chassi == null && nullToAbsent ? const Value.absent() : Value(chassi),
      cor: cor == null && nullToAbsent ? const Value.absent() : Value(cor),
      descricaoCor: descricaoCor == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoCor),
      potenciaMotor: potenciaMotor == null && nullToAbsent
          ? const Value.absent()
          : Value(potenciaMotor),
      cilindradas: cilindradas == null && nullToAbsent
          ? const Value.absent()
          : Value(cilindradas),
      pesoLiquido: pesoLiquido == null && nullToAbsent
          ? const Value.absent()
          : Value(pesoLiquido),
      pesoBruto: pesoBruto == null && nullToAbsent
          ? const Value.absent()
          : Value(pesoBruto),
      numeroSerie: numeroSerie == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSerie),
      tipoCombustivel: tipoCombustivel == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoCombustivel),
      numeroMotor: numeroMotor == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroMotor),
      capacidadeMaximaTracao: capacidadeMaximaTracao == null && nullToAbsent
          ? const Value.absent()
          : Value(capacidadeMaximaTracao),
      distanciaEixos: distanciaEixos == null && nullToAbsent
          ? const Value.absent()
          : Value(distanciaEixos),
      anoModelo: anoModelo == null && nullToAbsent
          ? const Value.absent()
          : Value(anoModelo),
      anoFabricacao: anoFabricacao == null && nullToAbsent
          ? const Value.absent()
          : Value(anoFabricacao),
      tipoPintura: tipoPintura == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoPintura),
      tipoVeiculo: tipoVeiculo == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoVeiculo),
      especieVeiculo: especieVeiculo == null && nullToAbsent
          ? const Value.absent()
          : Value(especieVeiculo),
      condicaoVin: condicaoVin == null && nullToAbsent
          ? const Value.absent()
          : Value(condicaoVin),
      condicaoVeiculo: condicaoVeiculo == null && nullToAbsent
          ? const Value.absent()
          : Value(condicaoVeiculo),
      codigoMarcaModelo: codigoMarcaModelo == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoMarcaModelo),
      codigoCorDenatran: codigoCorDenatran == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoCorDenatran),
      lotacaoMaxima: lotacaoMaxima == null && nullToAbsent
          ? const Value.absent()
          : Value(lotacaoMaxima),
      restricao: restricao == null && nullToAbsent
          ? const Value.absent()
          : Value(restricao),
    );
  }

  factory NfeDetEspecificoVeiculo.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetEspecificoVeiculo(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      tipoOperacao: serializer.fromJson<String?>(json['tipoOperacao']),
      chassi: serializer.fromJson<String?>(json['chassi']),
      cor: serializer.fromJson<String?>(json['cor']),
      descricaoCor: serializer.fromJson<String?>(json['descricaoCor']),
      potenciaMotor: serializer.fromJson<String?>(json['potenciaMotor']),
      cilindradas: serializer.fromJson<String?>(json['cilindradas']),
      pesoLiquido: serializer.fromJson<String?>(json['pesoLiquido']),
      pesoBruto: serializer.fromJson<String?>(json['pesoBruto']),
      numeroSerie: serializer.fromJson<String?>(json['numeroSerie']),
      tipoCombustivel: serializer.fromJson<String?>(json['tipoCombustivel']),
      numeroMotor: serializer.fromJson<String?>(json['numeroMotor']),
      capacidadeMaximaTracao:
          serializer.fromJson<String?>(json['capacidadeMaximaTracao']),
      distanciaEixos: serializer.fromJson<String?>(json['distanciaEixos']),
      anoModelo: serializer.fromJson<String?>(json['anoModelo']),
      anoFabricacao: serializer.fromJson<String?>(json['anoFabricacao']),
      tipoPintura: serializer.fromJson<String?>(json['tipoPintura']),
      tipoVeiculo: serializer.fromJson<String?>(json['tipoVeiculo']),
      especieVeiculo: serializer.fromJson<String?>(json['especieVeiculo']),
      condicaoVin: serializer.fromJson<String?>(json['condicaoVin']),
      condicaoVeiculo: serializer.fromJson<String?>(json['condicaoVeiculo']),
      codigoMarcaModelo:
          serializer.fromJson<String?>(json['codigoMarcaModelo']),
      codigoCorDenatran:
          serializer.fromJson<String?>(json['codigoCorDenatran']),
      lotacaoMaxima: serializer.fromJson<int?>(json['lotacaoMaxima']),
      restricao: serializer.fromJson<String?>(json['restricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'tipoOperacao': serializer.toJson<String?>(tipoOperacao),
      'chassi': serializer.toJson<String?>(chassi),
      'cor': serializer.toJson<String?>(cor),
      'descricaoCor': serializer.toJson<String?>(descricaoCor),
      'potenciaMotor': serializer.toJson<String?>(potenciaMotor),
      'cilindradas': serializer.toJson<String?>(cilindradas),
      'pesoLiquido': serializer.toJson<String?>(pesoLiquido),
      'pesoBruto': serializer.toJson<String?>(pesoBruto),
      'numeroSerie': serializer.toJson<String?>(numeroSerie),
      'tipoCombustivel': serializer.toJson<String?>(tipoCombustivel),
      'numeroMotor': serializer.toJson<String?>(numeroMotor),
      'capacidadeMaximaTracao':
          serializer.toJson<String?>(capacidadeMaximaTracao),
      'distanciaEixos': serializer.toJson<String?>(distanciaEixos),
      'anoModelo': serializer.toJson<String?>(anoModelo),
      'anoFabricacao': serializer.toJson<String?>(anoFabricacao),
      'tipoPintura': serializer.toJson<String?>(tipoPintura),
      'tipoVeiculo': serializer.toJson<String?>(tipoVeiculo),
      'especieVeiculo': serializer.toJson<String?>(especieVeiculo),
      'condicaoVin': serializer.toJson<String?>(condicaoVin),
      'condicaoVeiculo': serializer.toJson<String?>(condicaoVeiculo),
      'codigoMarcaModelo': serializer.toJson<String?>(codigoMarcaModelo),
      'codigoCorDenatran': serializer.toJson<String?>(codigoCorDenatran),
      'lotacaoMaxima': serializer.toJson<int?>(lotacaoMaxima),
      'restricao': serializer.toJson<String?>(restricao),
    };
  }

  NfeDetEspecificoVeiculo copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? tipoOperacao,
          String? chassi,
          String? cor,
          String? descricaoCor,
          String? potenciaMotor,
          String? cilindradas,
          String? pesoLiquido,
          String? pesoBruto,
          String? numeroSerie,
          String? tipoCombustivel,
          String? numeroMotor,
          String? capacidadeMaximaTracao,
          String? distanciaEixos,
          String? anoModelo,
          String? anoFabricacao,
          String? tipoPintura,
          String? tipoVeiculo,
          String? especieVeiculo,
          String? condicaoVin,
          String? condicaoVeiculo,
          String? codigoMarcaModelo,
          String? codigoCorDenatran,
          int? lotacaoMaxima,
          String? restricao}) =>
      NfeDetEspecificoVeiculo(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        tipoOperacao: tipoOperacao ?? this.tipoOperacao,
        chassi: chassi ?? this.chassi,
        cor: cor ?? this.cor,
        descricaoCor: descricaoCor ?? this.descricaoCor,
        potenciaMotor: potenciaMotor ?? this.potenciaMotor,
        cilindradas: cilindradas ?? this.cilindradas,
        pesoLiquido: pesoLiquido ?? this.pesoLiquido,
        pesoBruto: pesoBruto ?? this.pesoBruto,
        numeroSerie: numeroSerie ?? this.numeroSerie,
        tipoCombustivel: tipoCombustivel ?? this.tipoCombustivel,
        numeroMotor: numeroMotor ?? this.numeroMotor,
        capacidadeMaximaTracao:
            capacidadeMaximaTracao ?? this.capacidadeMaximaTracao,
        distanciaEixos: distanciaEixos ?? this.distanciaEixos,
        anoModelo: anoModelo ?? this.anoModelo,
        anoFabricacao: anoFabricacao ?? this.anoFabricacao,
        tipoPintura: tipoPintura ?? this.tipoPintura,
        tipoVeiculo: tipoVeiculo ?? this.tipoVeiculo,
        especieVeiculo: especieVeiculo ?? this.especieVeiculo,
        condicaoVin: condicaoVin ?? this.condicaoVin,
        condicaoVeiculo: condicaoVeiculo ?? this.condicaoVeiculo,
        codigoMarcaModelo: codigoMarcaModelo ?? this.codigoMarcaModelo,
        codigoCorDenatran: codigoCorDenatran ?? this.codigoCorDenatran,
        lotacaoMaxima: lotacaoMaxima ?? this.lotacaoMaxima,
        restricao: restricao ?? this.restricao,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoVeiculo(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoOperacao: $tipoOperacao, ')
          ..write('chassi: $chassi, ')
          ..write('cor: $cor, ')
          ..write('descricaoCor: $descricaoCor, ')
          ..write('potenciaMotor: $potenciaMotor, ')
          ..write('cilindradas: $cilindradas, ')
          ..write('pesoLiquido: $pesoLiquido, ')
          ..write('pesoBruto: $pesoBruto, ')
          ..write('numeroSerie: $numeroSerie, ')
          ..write('tipoCombustivel: $tipoCombustivel, ')
          ..write('numeroMotor: $numeroMotor, ')
          ..write('capacidadeMaximaTracao: $capacidadeMaximaTracao, ')
          ..write('distanciaEixos: $distanciaEixos, ')
          ..write('anoModelo: $anoModelo, ')
          ..write('anoFabricacao: $anoFabricacao, ')
          ..write('tipoPintura: $tipoPintura, ')
          ..write('tipoVeiculo: $tipoVeiculo, ')
          ..write('especieVeiculo: $especieVeiculo, ')
          ..write('condicaoVin: $condicaoVin, ')
          ..write('condicaoVeiculo: $condicaoVeiculo, ')
          ..write('codigoMarcaModelo: $codigoMarcaModelo, ')
          ..write('codigoCorDenatran: $codigoCorDenatran, ')
          ..write('lotacaoMaxima: $lotacaoMaxima, ')
          ..write('restricao: $restricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idNfeDetalhe,
        tipoOperacao,
        chassi,
        cor,
        descricaoCor,
        potenciaMotor,
        cilindradas,
        pesoLiquido,
        pesoBruto,
        numeroSerie,
        tipoCombustivel,
        numeroMotor,
        capacidadeMaximaTracao,
        distanciaEixos,
        anoModelo,
        anoFabricacao,
        tipoPintura,
        tipoVeiculo,
        especieVeiculo,
        condicaoVin,
        condicaoVeiculo,
        codigoMarcaModelo,
        codigoCorDenatran,
        lotacaoMaxima,
        restricao
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetEspecificoVeiculo &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.tipoOperacao == this.tipoOperacao &&
          other.chassi == this.chassi &&
          other.cor == this.cor &&
          other.descricaoCor == this.descricaoCor &&
          other.potenciaMotor == this.potenciaMotor &&
          other.cilindradas == this.cilindradas &&
          other.pesoLiquido == this.pesoLiquido &&
          other.pesoBruto == this.pesoBruto &&
          other.numeroSerie == this.numeroSerie &&
          other.tipoCombustivel == this.tipoCombustivel &&
          other.numeroMotor == this.numeroMotor &&
          other.capacidadeMaximaTracao == this.capacidadeMaximaTracao &&
          other.distanciaEixos == this.distanciaEixos &&
          other.anoModelo == this.anoModelo &&
          other.anoFabricacao == this.anoFabricacao &&
          other.tipoPintura == this.tipoPintura &&
          other.tipoVeiculo == this.tipoVeiculo &&
          other.especieVeiculo == this.especieVeiculo &&
          other.condicaoVin == this.condicaoVin &&
          other.condicaoVeiculo == this.condicaoVeiculo &&
          other.codigoMarcaModelo == this.codigoMarcaModelo &&
          other.codigoCorDenatran == this.codigoCorDenatran &&
          other.lotacaoMaxima == this.lotacaoMaxima &&
          other.restricao == this.restricao);
}

class NfeDetEspecificoVeiculosCompanion
    extends UpdateCompanion<NfeDetEspecificoVeiculo> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> tipoOperacao;
  final Value<String?> chassi;
  final Value<String?> cor;
  final Value<String?> descricaoCor;
  final Value<String?> potenciaMotor;
  final Value<String?> cilindradas;
  final Value<String?> pesoLiquido;
  final Value<String?> pesoBruto;
  final Value<String?> numeroSerie;
  final Value<String?> tipoCombustivel;
  final Value<String?> numeroMotor;
  final Value<String?> capacidadeMaximaTracao;
  final Value<String?> distanciaEixos;
  final Value<String?> anoModelo;
  final Value<String?> anoFabricacao;
  final Value<String?> tipoPintura;
  final Value<String?> tipoVeiculo;
  final Value<String?> especieVeiculo;
  final Value<String?> condicaoVin;
  final Value<String?> condicaoVeiculo;
  final Value<String?> codigoMarcaModelo;
  final Value<String?> codigoCorDenatran;
  final Value<int?> lotacaoMaxima;
  final Value<String?> restricao;
  const NfeDetEspecificoVeiculosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
    this.chassi = const Value.absent(),
    this.cor = const Value.absent(),
    this.descricaoCor = const Value.absent(),
    this.potenciaMotor = const Value.absent(),
    this.cilindradas = const Value.absent(),
    this.pesoLiquido = const Value.absent(),
    this.pesoBruto = const Value.absent(),
    this.numeroSerie = const Value.absent(),
    this.tipoCombustivel = const Value.absent(),
    this.numeroMotor = const Value.absent(),
    this.capacidadeMaximaTracao = const Value.absent(),
    this.distanciaEixos = const Value.absent(),
    this.anoModelo = const Value.absent(),
    this.anoFabricacao = const Value.absent(),
    this.tipoPintura = const Value.absent(),
    this.tipoVeiculo = const Value.absent(),
    this.especieVeiculo = const Value.absent(),
    this.condicaoVin = const Value.absent(),
    this.condicaoVeiculo = const Value.absent(),
    this.codigoMarcaModelo = const Value.absent(),
    this.codigoCorDenatran = const Value.absent(),
    this.lotacaoMaxima = const Value.absent(),
    this.restricao = const Value.absent(),
  });
  NfeDetEspecificoVeiculosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
    this.chassi = const Value.absent(),
    this.cor = const Value.absent(),
    this.descricaoCor = const Value.absent(),
    this.potenciaMotor = const Value.absent(),
    this.cilindradas = const Value.absent(),
    this.pesoLiquido = const Value.absent(),
    this.pesoBruto = const Value.absent(),
    this.numeroSerie = const Value.absent(),
    this.tipoCombustivel = const Value.absent(),
    this.numeroMotor = const Value.absent(),
    this.capacidadeMaximaTracao = const Value.absent(),
    this.distanciaEixos = const Value.absent(),
    this.anoModelo = const Value.absent(),
    this.anoFabricacao = const Value.absent(),
    this.tipoPintura = const Value.absent(),
    this.tipoVeiculo = const Value.absent(),
    this.especieVeiculo = const Value.absent(),
    this.condicaoVin = const Value.absent(),
    this.condicaoVeiculo = const Value.absent(),
    this.codigoMarcaModelo = const Value.absent(),
    this.codigoCorDenatran = const Value.absent(),
    this.lotacaoMaxima = const Value.absent(),
    this.restricao = const Value.absent(),
  });
  static Insertable<NfeDetEspecificoVeiculo> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? tipoOperacao,
    Expression<String>? chassi,
    Expression<String>? cor,
    Expression<String>? descricaoCor,
    Expression<String>? potenciaMotor,
    Expression<String>? cilindradas,
    Expression<String>? pesoLiquido,
    Expression<String>? pesoBruto,
    Expression<String>? numeroSerie,
    Expression<String>? tipoCombustivel,
    Expression<String>? numeroMotor,
    Expression<String>? capacidadeMaximaTracao,
    Expression<String>? distanciaEixos,
    Expression<String>? anoModelo,
    Expression<String>? anoFabricacao,
    Expression<String>? tipoPintura,
    Expression<String>? tipoVeiculo,
    Expression<String>? especieVeiculo,
    Expression<String>? condicaoVin,
    Expression<String>? condicaoVeiculo,
    Expression<String>? codigoMarcaModelo,
    Expression<String>? codigoCorDenatran,
    Expression<int>? lotacaoMaxima,
    Expression<String>? restricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (tipoOperacao != null) 'TIPO_OPERACAO': tipoOperacao,
      if (chassi != null) 'CHASSI': chassi,
      if (cor != null) 'COR': cor,
      if (descricaoCor != null) 'DESCRICAO_COR': descricaoCor,
      if (potenciaMotor != null) 'POTENCIA_MOTOR': potenciaMotor,
      if (cilindradas != null) 'CILINDRADAS': cilindradas,
      if (pesoLiquido != null) 'PESO_LIQUIDO': pesoLiquido,
      if (pesoBruto != null) 'PESO_BRUTO': pesoBruto,
      if (numeroSerie != null) 'NUMERO_SERIE': numeroSerie,
      if (tipoCombustivel != null) 'TIPO_COMBUSTIVEL': tipoCombustivel,
      if (numeroMotor != null) 'NUMERO_MOTOR': numeroMotor,
      if (capacidadeMaximaTracao != null)
        'CAPACIDADE_MAXIMA_TRACAO': capacidadeMaximaTracao,
      if (distanciaEixos != null) 'DISTANCIA_EIXOS': distanciaEixos,
      if (anoModelo != null) 'ANO_MODELO': anoModelo,
      if (anoFabricacao != null) 'ANO_FABRICACAO': anoFabricacao,
      if (tipoPintura != null) 'TIPO_PINTURA': tipoPintura,
      if (tipoVeiculo != null) 'TIPO_VEICULO': tipoVeiculo,
      if (especieVeiculo != null) 'ESPECIE_VEICULO': especieVeiculo,
      if (condicaoVin != null) 'CONDICAO_VIN': condicaoVin,
      if (condicaoVeiculo != null) 'CONDICAO_VEICULO': condicaoVeiculo,
      if (codigoMarcaModelo != null) 'CODIGO_MARCA_MODELO': codigoMarcaModelo,
      if (codigoCorDenatran != null) 'CODIGO_COR_DENATRAN': codigoCorDenatran,
      if (lotacaoMaxima != null) 'LOTACAO_MAXIMA': lotacaoMaxima,
      if (restricao != null) 'RESTRICAO': restricao,
    });
  }

  NfeDetEspecificoVeiculosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? tipoOperacao,
      Value<String?>? chassi,
      Value<String?>? cor,
      Value<String?>? descricaoCor,
      Value<String?>? potenciaMotor,
      Value<String?>? cilindradas,
      Value<String?>? pesoLiquido,
      Value<String?>? pesoBruto,
      Value<String?>? numeroSerie,
      Value<String?>? tipoCombustivel,
      Value<String?>? numeroMotor,
      Value<String?>? capacidadeMaximaTracao,
      Value<String?>? distanciaEixos,
      Value<String?>? anoModelo,
      Value<String?>? anoFabricacao,
      Value<String?>? tipoPintura,
      Value<String?>? tipoVeiculo,
      Value<String?>? especieVeiculo,
      Value<String?>? condicaoVin,
      Value<String?>? condicaoVeiculo,
      Value<String?>? codigoMarcaModelo,
      Value<String?>? codigoCorDenatran,
      Value<int?>? lotacaoMaxima,
      Value<String?>? restricao}) {
    return NfeDetEspecificoVeiculosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      tipoOperacao: tipoOperacao ?? this.tipoOperacao,
      chassi: chassi ?? this.chassi,
      cor: cor ?? this.cor,
      descricaoCor: descricaoCor ?? this.descricaoCor,
      potenciaMotor: potenciaMotor ?? this.potenciaMotor,
      cilindradas: cilindradas ?? this.cilindradas,
      pesoLiquido: pesoLiquido ?? this.pesoLiquido,
      pesoBruto: pesoBruto ?? this.pesoBruto,
      numeroSerie: numeroSerie ?? this.numeroSerie,
      tipoCombustivel: tipoCombustivel ?? this.tipoCombustivel,
      numeroMotor: numeroMotor ?? this.numeroMotor,
      capacidadeMaximaTracao:
          capacidadeMaximaTracao ?? this.capacidadeMaximaTracao,
      distanciaEixos: distanciaEixos ?? this.distanciaEixos,
      anoModelo: anoModelo ?? this.anoModelo,
      anoFabricacao: anoFabricacao ?? this.anoFabricacao,
      tipoPintura: tipoPintura ?? this.tipoPintura,
      tipoVeiculo: tipoVeiculo ?? this.tipoVeiculo,
      especieVeiculo: especieVeiculo ?? this.especieVeiculo,
      condicaoVin: condicaoVin ?? this.condicaoVin,
      condicaoVeiculo: condicaoVeiculo ?? this.condicaoVeiculo,
      codigoMarcaModelo: codigoMarcaModelo ?? this.codigoMarcaModelo,
      codigoCorDenatran: codigoCorDenatran ?? this.codigoCorDenatran,
      lotacaoMaxima: lotacaoMaxima ?? this.lotacaoMaxima,
      restricao: restricao ?? this.restricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (tipoOperacao.present) {
      map['TIPO_OPERACAO'] = Variable<String>(tipoOperacao.value);
    }
    if (chassi.present) {
      map['CHASSI'] = Variable<String>(chassi.value);
    }
    if (cor.present) {
      map['COR'] = Variable<String>(cor.value);
    }
    if (descricaoCor.present) {
      map['DESCRICAO_COR'] = Variable<String>(descricaoCor.value);
    }
    if (potenciaMotor.present) {
      map['POTENCIA_MOTOR'] = Variable<String>(potenciaMotor.value);
    }
    if (cilindradas.present) {
      map['CILINDRADAS'] = Variable<String>(cilindradas.value);
    }
    if (pesoLiquido.present) {
      map['PESO_LIQUIDO'] = Variable<String>(pesoLiquido.value);
    }
    if (pesoBruto.present) {
      map['PESO_BRUTO'] = Variable<String>(pesoBruto.value);
    }
    if (numeroSerie.present) {
      map['NUMERO_SERIE'] = Variable<String>(numeroSerie.value);
    }
    if (tipoCombustivel.present) {
      map['TIPO_COMBUSTIVEL'] = Variable<String>(tipoCombustivel.value);
    }
    if (numeroMotor.present) {
      map['NUMERO_MOTOR'] = Variable<String>(numeroMotor.value);
    }
    if (capacidadeMaximaTracao.present) {
      map['CAPACIDADE_MAXIMA_TRACAO'] =
          Variable<String>(capacidadeMaximaTracao.value);
    }
    if (distanciaEixos.present) {
      map['DISTANCIA_EIXOS'] = Variable<String>(distanciaEixos.value);
    }
    if (anoModelo.present) {
      map['ANO_MODELO'] = Variable<String>(anoModelo.value);
    }
    if (anoFabricacao.present) {
      map['ANO_FABRICACAO'] = Variable<String>(anoFabricacao.value);
    }
    if (tipoPintura.present) {
      map['TIPO_PINTURA'] = Variable<String>(tipoPintura.value);
    }
    if (tipoVeiculo.present) {
      map['TIPO_VEICULO'] = Variable<String>(tipoVeiculo.value);
    }
    if (especieVeiculo.present) {
      map['ESPECIE_VEICULO'] = Variable<String>(especieVeiculo.value);
    }
    if (condicaoVin.present) {
      map['CONDICAO_VIN'] = Variable<String>(condicaoVin.value);
    }
    if (condicaoVeiculo.present) {
      map['CONDICAO_VEICULO'] = Variable<String>(condicaoVeiculo.value);
    }
    if (codigoMarcaModelo.present) {
      map['CODIGO_MARCA_MODELO'] = Variable<String>(codigoMarcaModelo.value);
    }
    if (codigoCorDenatran.present) {
      map['CODIGO_COR_DENATRAN'] = Variable<String>(codigoCorDenatran.value);
    }
    if (lotacaoMaxima.present) {
      map['LOTACAO_MAXIMA'] = Variable<int>(lotacaoMaxima.value);
    }
    if (restricao.present) {
      map['RESTRICAO'] = Variable<String>(restricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoVeiculosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoOperacao: $tipoOperacao, ')
          ..write('chassi: $chassi, ')
          ..write('cor: $cor, ')
          ..write('descricaoCor: $descricaoCor, ')
          ..write('potenciaMotor: $potenciaMotor, ')
          ..write('cilindradas: $cilindradas, ')
          ..write('pesoLiquido: $pesoLiquido, ')
          ..write('pesoBruto: $pesoBruto, ')
          ..write('numeroSerie: $numeroSerie, ')
          ..write('tipoCombustivel: $tipoCombustivel, ')
          ..write('numeroMotor: $numeroMotor, ')
          ..write('capacidadeMaximaTracao: $capacidadeMaximaTracao, ')
          ..write('distanciaEixos: $distanciaEixos, ')
          ..write('anoModelo: $anoModelo, ')
          ..write('anoFabricacao: $anoFabricacao, ')
          ..write('tipoPintura: $tipoPintura, ')
          ..write('tipoVeiculo: $tipoVeiculo, ')
          ..write('especieVeiculo: $especieVeiculo, ')
          ..write('condicaoVin: $condicaoVin, ')
          ..write('condicaoVeiculo: $condicaoVeiculo, ')
          ..write('codigoMarcaModelo: $codigoMarcaModelo, ')
          ..write('codigoCorDenatran: $codigoCorDenatran, ')
          ..write('lotacaoMaxima: $lotacaoMaxima, ')
          ..write('restricao: $restricao')
          ..write(')'))
        .toString();
  }
}

class $NfeDetEspecificoVeiculosTable extends NfeDetEspecificoVeiculos
    with TableInfo<$NfeDetEspecificoVeiculosTable, NfeDetEspecificoVeiculo> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetEspecificoVeiculosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _tipoOperacaoMeta =
      const VerificationMeta('tipoOperacao');
  @override
  late final GeneratedColumn<String> tipoOperacao = GeneratedColumn<String>(
      'TIPO_OPERACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _chassiMeta = const VerificationMeta('chassi');
  @override
  late final GeneratedColumn<String> chassi = GeneratedColumn<String>(
      'CHASSI', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 17),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _corMeta = const VerificationMeta('cor');
  @override
  late final GeneratedColumn<String> cor = GeneratedColumn<String>(
      'COR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoCorMeta =
      const VerificationMeta('descricaoCor');
  @override
  late final GeneratedColumn<String> descricaoCor = GeneratedColumn<String>(
      'DESCRICAO_COR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _potenciaMotorMeta =
      const VerificationMeta('potenciaMotor');
  @override
  late final GeneratedColumn<String> potenciaMotor = GeneratedColumn<String>(
      'POTENCIA_MOTOR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cilindradasMeta =
      const VerificationMeta('cilindradas');
  @override
  late final GeneratedColumn<String> cilindradas = GeneratedColumn<String>(
      'CILINDRADAS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _pesoLiquidoMeta =
      const VerificationMeta('pesoLiquido');
  @override
  late final GeneratedColumn<String> pesoLiquido = GeneratedColumn<String>(
      'PESO_LIQUIDO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _pesoBrutoMeta = const VerificationMeta('pesoBruto');
  @override
  late final GeneratedColumn<String> pesoBruto = GeneratedColumn<String>(
      'PESO_BRUTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroSerieMeta =
      const VerificationMeta('numeroSerie');
  @override
  late final GeneratedColumn<String> numeroSerie = GeneratedColumn<String>(
      'NUMERO_SERIE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoCombustivelMeta =
      const VerificationMeta('tipoCombustivel');
  @override
  late final GeneratedColumn<String> tipoCombustivel =
      GeneratedColumn<String>('TIPO_COMBUSTIVEL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _numeroMotorMeta =
      const VerificationMeta('numeroMotor');
  @override
  late final GeneratedColumn<String> numeroMotor = GeneratedColumn<String>(
      'NUMERO_MOTOR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 21),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _capacidadeMaximaTracaoMeta =
      const VerificationMeta('capacidadeMaximaTracao');
  @override
  late final GeneratedColumn<String> capacidadeMaximaTracao =
      GeneratedColumn<String>('CAPACIDADE_MAXIMA_TRACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 9),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _distanciaEixosMeta =
      const VerificationMeta('distanciaEixos');
  @override
  late final GeneratedColumn<String> distanciaEixos = GeneratedColumn<String>(
      'DISTANCIA_EIXOS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _anoModeloMeta = const VerificationMeta('anoModelo');
  @override
  late final GeneratedColumn<String> anoModelo = GeneratedColumn<String>(
      'ANO_MODELO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _anoFabricacaoMeta =
      const VerificationMeta('anoFabricacao');
  @override
  late final GeneratedColumn<String> anoFabricacao = GeneratedColumn<String>(
      'ANO_FABRICACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoPinturaMeta =
      const VerificationMeta('tipoPintura');
  @override
  late final GeneratedColumn<String> tipoPintura = GeneratedColumn<String>(
      'TIPO_PINTURA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoVeiculoMeta =
      const VerificationMeta('tipoVeiculo');
  @override
  late final GeneratedColumn<String> tipoVeiculo = GeneratedColumn<String>(
      'TIPO_VEICULO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _especieVeiculoMeta =
      const VerificationMeta('especieVeiculo');
  @override
  late final GeneratedColumn<String> especieVeiculo = GeneratedColumn<String>(
      'ESPECIE_VEICULO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _condicaoVinMeta =
      const VerificationMeta('condicaoVin');
  @override
  late final GeneratedColumn<String> condicaoVin = GeneratedColumn<String>(
      'CONDICAO_VIN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _condicaoVeiculoMeta =
      const VerificationMeta('condicaoVeiculo');
  @override
  late final GeneratedColumn<String> condicaoVeiculo =
      GeneratedColumn<String>('CONDICAO_VEICULO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _codigoMarcaModeloMeta =
      const VerificationMeta('codigoMarcaModelo');
  @override
  late final GeneratedColumn<String> codigoMarcaModelo =
      GeneratedColumn<String>('CODIGO_MARCA_MODELO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 6),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _codigoCorDenatranMeta =
      const VerificationMeta('codigoCorDenatran');
  @override
  late final GeneratedColumn<String> codigoCorDenatran =
      GeneratedColumn<String>('CODIGO_COR_DENATRAN', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _lotacaoMaximaMeta =
      const VerificationMeta('lotacaoMaxima');
  @override
  late final GeneratedColumn<int> lotacaoMaxima = GeneratedColumn<int>(
      'LOTACAO_MAXIMA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _restricaoMeta = const VerificationMeta('restricao');
  @override
  late final GeneratedColumn<String> restricao = GeneratedColumn<String>(
      'RESTRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        tipoOperacao,
        chassi,
        cor,
        descricaoCor,
        potenciaMotor,
        cilindradas,
        pesoLiquido,
        pesoBruto,
        numeroSerie,
        tipoCombustivel,
        numeroMotor,
        capacidadeMaximaTracao,
        distanciaEixos,
        anoModelo,
        anoFabricacao,
        tipoPintura,
        tipoVeiculo,
        especieVeiculo,
        condicaoVin,
        condicaoVeiculo,
        codigoMarcaModelo,
        codigoCorDenatran,
        lotacaoMaxima,
        restricao
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DET_ESPECIFICO_VEICULO';
  @override
  String get actualTableName => 'NFE_DET_ESPECIFICO_VEICULO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetEspecificoVeiculo> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('TIPO_OPERACAO')) {
      context.handle(
          _tipoOperacaoMeta,
          tipoOperacao.isAcceptableOrUnknown(
              data['TIPO_OPERACAO']!, _tipoOperacaoMeta));
    }
    if (data.containsKey('CHASSI')) {
      context.handle(_chassiMeta,
          chassi.isAcceptableOrUnknown(data['CHASSI']!, _chassiMeta));
    }
    if (data.containsKey('COR')) {
      context.handle(
          _corMeta, cor.isAcceptableOrUnknown(data['COR']!, _corMeta));
    }
    if (data.containsKey('DESCRICAO_COR')) {
      context.handle(
          _descricaoCorMeta,
          descricaoCor.isAcceptableOrUnknown(
              data['DESCRICAO_COR']!, _descricaoCorMeta));
    }
    if (data.containsKey('POTENCIA_MOTOR')) {
      context.handle(
          _potenciaMotorMeta,
          potenciaMotor.isAcceptableOrUnknown(
              data['POTENCIA_MOTOR']!, _potenciaMotorMeta));
    }
    if (data.containsKey('CILINDRADAS')) {
      context.handle(
          _cilindradasMeta,
          cilindradas.isAcceptableOrUnknown(
              data['CILINDRADAS']!, _cilindradasMeta));
    }
    if (data.containsKey('PESO_LIQUIDO')) {
      context.handle(
          _pesoLiquidoMeta,
          pesoLiquido.isAcceptableOrUnknown(
              data['PESO_LIQUIDO']!, _pesoLiquidoMeta));
    }
    if (data.containsKey('PESO_BRUTO')) {
      context.handle(_pesoBrutoMeta,
          pesoBruto.isAcceptableOrUnknown(data['PESO_BRUTO']!, _pesoBrutoMeta));
    }
    if (data.containsKey('NUMERO_SERIE')) {
      context.handle(
          _numeroSerieMeta,
          numeroSerie.isAcceptableOrUnknown(
              data['NUMERO_SERIE']!, _numeroSerieMeta));
    }
    if (data.containsKey('TIPO_COMBUSTIVEL')) {
      context.handle(
          _tipoCombustivelMeta,
          tipoCombustivel.isAcceptableOrUnknown(
              data['TIPO_COMBUSTIVEL']!, _tipoCombustivelMeta));
    }
    if (data.containsKey('NUMERO_MOTOR')) {
      context.handle(
          _numeroMotorMeta,
          numeroMotor.isAcceptableOrUnknown(
              data['NUMERO_MOTOR']!, _numeroMotorMeta));
    }
    if (data.containsKey('CAPACIDADE_MAXIMA_TRACAO')) {
      context.handle(
          _capacidadeMaximaTracaoMeta,
          capacidadeMaximaTracao.isAcceptableOrUnknown(
              data['CAPACIDADE_MAXIMA_TRACAO']!, _capacidadeMaximaTracaoMeta));
    }
    if (data.containsKey('DISTANCIA_EIXOS')) {
      context.handle(
          _distanciaEixosMeta,
          distanciaEixos.isAcceptableOrUnknown(
              data['DISTANCIA_EIXOS']!, _distanciaEixosMeta));
    }
    if (data.containsKey('ANO_MODELO')) {
      context.handle(_anoModeloMeta,
          anoModelo.isAcceptableOrUnknown(data['ANO_MODELO']!, _anoModeloMeta));
    }
    if (data.containsKey('ANO_FABRICACAO')) {
      context.handle(
          _anoFabricacaoMeta,
          anoFabricacao.isAcceptableOrUnknown(
              data['ANO_FABRICACAO']!, _anoFabricacaoMeta));
    }
    if (data.containsKey('TIPO_PINTURA')) {
      context.handle(
          _tipoPinturaMeta,
          tipoPintura.isAcceptableOrUnknown(
              data['TIPO_PINTURA']!, _tipoPinturaMeta));
    }
    if (data.containsKey('TIPO_VEICULO')) {
      context.handle(
          _tipoVeiculoMeta,
          tipoVeiculo.isAcceptableOrUnknown(
              data['TIPO_VEICULO']!, _tipoVeiculoMeta));
    }
    if (data.containsKey('ESPECIE_VEICULO')) {
      context.handle(
          _especieVeiculoMeta,
          especieVeiculo.isAcceptableOrUnknown(
              data['ESPECIE_VEICULO']!, _especieVeiculoMeta));
    }
    if (data.containsKey('CONDICAO_VIN')) {
      context.handle(
          _condicaoVinMeta,
          condicaoVin.isAcceptableOrUnknown(
              data['CONDICAO_VIN']!, _condicaoVinMeta));
    }
    if (data.containsKey('CONDICAO_VEICULO')) {
      context.handle(
          _condicaoVeiculoMeta,
          condicaoVeiculo.isAcceptableOrUnknown(
              data['CONDICAO_VEICULO']!, _condicaoVeiculoMeta));
    }
    if (data.containsKey('CODIGO_MARCA_MODELO')) {
      context.handle(
          _codigoMarcaModeloMeta,
          codigoMarcaModelo.isAcceptableOrUnknown(
              data['CODIGO_MARCA_MODELO']!, _codigoMarcaModeloMeta));
    }
    if (data.containsKey('CODIGO_COR_DENATRAN')) {
      context.handle(
          _codigoCorDenatranMeta,
          codigoCorDenatran.isAcceptableOrUnknown(
              data['CODIGO_COR_DENATRAN']!, _codigoCorDenatranMeta));
    }
    if (data.containsKey('LOTACAO_MAXIMA')) {
      context.handle(
          _lotacaoMaximaMeta,
          lotacaoMaxima.isAcceptableOrUnknown(
              data['LOTACAO_MAXIMA']!, _lotacaoMaximaMeta));
    }
    if (data.containsKey('RESTRICAO')) {
      context.handle(_restricaoMeta,
          restricao.isAcceptableOrUnknown(data['RESTRICAO']!, _restricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetEspecificoVeiculo map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeDetEspecificoVeiculo.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetEspecificoVeiculosTable createAlias(String alias) {
    return $NfeDetEspecificoVeiculosTable(attachedDatabase, alias);
  }
}

class NfeDetalhe extends DataClass implements Insertable<NfeDetalhe> {
  final int? id;
  final int? idNfeCabecalho;
  final int? numeroItem;
  final String? codigoProduto;
  final String? gtin;
  final String? nomeProduto;
  final String? ncm;
  final String? nve;
  final String? cest;
  final String? indicadorEscalaRelevante;
  final String? cnpjFabricante;
  final String? codigoBeneficioFiscal;
  final int? exTipi;
  final int? cfop;
  final String? unidadeComercial;
  final double? quantidadeComercial;
  final String? numeroPedidoCompra;
  final int? itemPedidoCompra;
  final String? numeroFci;
  final String? numeroRecopi;
  final double? valorUnitarioComercial;
  final double? valorBrutoProduto;
  final String? gtinUnidadeTributavel;
  final String? unidadeTributavel;
  final double? quantidadeTributavel;
  final double? valorUnitarioTributavel;
  final double? valorFrete;
  final double? valorSeguro;
  final double? valorDesconto;
  final double? valorOutrasDespesas;
  final String? entraTotal;
  final double? valorTotalTributos;
  final double? percentualDevolvido;
  final double? valorIpiDevolvido;
  final String? informacoesAdicionais;
  final double? valorSubtotal;
  final double? valorTotal;
  NfeDetalhe(
      {this.id,
      this.idNfeCabecalho,
      this.numeroItem,
      this.codigoProduto,
      this.gtin,
      this.nomeProduto,
      this.ncm,
      this.nve,
      this.cest,
      this.indicadorEscalaRelevante,
      this.cnpjFabricante,
      this.codigoBeneficioFiscal,
      this.exTipi,
      this.cfop,
      this.unidadeComercial,
      this.quantidadeComercial,
      this.numeroPedidoCompra,
      this.itemPedidoCompra,
      this.numeroFci,
      this.numeroRecopi,
      this.valorUnitarioComercial,
      this.valorBrutoProduto,
      this.gtinUnidadeTributavel,
      this.unidadeTributavel,
      this.quantidadeTributavel,
      this.valorUnitarioTributavel,
      this.valorFrete,
      this.valorSeguro,
      this.valorDesconto,
      this.valorOutrasDespesas,
      this.entraTotal,
      this.valorTotalTributos,
      this.percentualDevolvido,
      this.valorIpiDevolvido,
      this.informacoesAdicionais,
      this.valorSubtotal,
      this.valorTotal});
  factory NfeDetalhe.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalhe(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      numeroItem: ValueSqlType.intType(data['${effectivePrefix}NUMERO_ITEM']),
      codigoProduto: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_PRODUTO']),
      gtin: ValueSqlType.stringType(data['${effectivePrefix}GTIN']),
      nomeProduto: ValueSqlType.stringType(data['${effectivePrefix}NOME_PRODUTO']),
      ncm: ValueSqlType.stringType(data['${effectivePrefix}NCM']),
      nve: ValueSqlType.stringType(data['${effectivePrefix}NVE']),
      cest: ValueSqlType.stringType(data['${effectivePrefix}CEST']),
      indicadorEscalaRelevante: ValueSqlType.stringType(
          data['${effectivePrefix}INDICADOR_ESCALA_RELEVANTE']),
      cnpjFabricante: ValueSqlType.stringType(data['${effectivePrefix}CNPJ_FABRICANTE']),
      codigoBeneficioFiscal: ValueSqlType.stringType(
          data['${effectivePrefix}CODIGO_BENEFICIO_FISCAL']),
      exTipi: ValueSqlType.intType(data['${effectivePrefix}EX_TIPI']),
      cfop: ValueSqlType.intType(data['${effectivePrefix}CFOP']),
      unidadeComercial: ValueSqlType.stringType(data['${effectivePrefix}UNIDADE_COMERCIAL']),
      quantidadeComercial: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_COMERCIAL']),
      numeroPedidoCompra: ValueSqlType.stringType(
          data['${effectivePrefix}NUMERO_PEDIDO_COMPRA']),
      itemPedidoCompra: ValueSqlType.intType(
          data['${effectivePrefix}ITEM_PEDIDO_COMPRA']),
      numeroFci: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_FCI']),
      numeroRecopi: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_RECOPI']),
      valorUnitarioComercial: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_UNITARIO_COMERCIAL']),
      valorBrutoProduto: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BRUTO_PRODUTO']),
      gtinUnidadeTributavel: ValueSqlType.stringType(
          data['${effectivePrefix}GTIN_UNIDADE_TRIBUTAVEL']),
      unidadeTributavel: ValueSqlType.stringType(
          data['${effectivePrefix}UNIDADE_TRIBUTAVEL']),
      quantidadeTributavel: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_TRIBUTAVEL']),
      valorUnitarioTributavel: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_UNITARIO_TRIBUTAVEL']),
      valorFrete: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_FRETE']),
      valorSeguro: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_SEGURO']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      valorOutrasDespesas: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_OUTRAS_DESPESAS']),
      entraTotal: ValueSqlType.stringType(data['${effectivePrefix}ENTRA_TOTAL']),
      valorTotalTributos: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_TRIBUTOS']),
      percentualDevolvido: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_DEVOLVIDO']),
      valorIpiDevolvido: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_IPI_DEVOLVIDO']),
      informacoesAdicionais: ValueSqlType.stringType(
          data['${effectivePrefix}INFORMACOES_ADICIONAIS']),
      valorSubtotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_SUBTOTAL']),
      valorTotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || numeroItem != null) {
      map['NUMERO_ITEM'] = Variable<int>(numeroItem);
    }
    if (!nullToAbsent || codigoProduto != null) {
      map['CODIGO_PRODUTO'] = Variable<String>(codigoProduto);
    }
    if (!nullToAbsent || gtin != null) {
      map['GTIN'] = Variable<String>(gtin);
    }
    if (!nullToAbsent || nomeProduto != null) {
      map['NOME_PRODUTO'] = Variable<String>(nomeProduto);
    }
    if (!nullToAbsent || ncm != null) {
      map['NCM'] = Variable<String>(ncm);
    }
    if (!nullToAbsent || nve != null) {
      map['NVE'] = Variable<String>(nve);
    }
    if (!nullToAbsent || cest != null) {
      map['CEST'] = Variable<String>(cest);
    }
    if (!nullToAbsent || indicadorEscalaRelevante != null) {
      map['INDICADOR_ESCALA_RELEVANTE'] =
          Variable<String>(indicadorEscalaRelevante);
    }
    if (!nullToAbsent || cnpjFabricante != null) {
      map['CNPJ_FABRICANTE'] = Variable<String>(cnpjFabricante);
    }
    if (!nullToAbsent || codigoBeneficioFiscal != null) {
      map['CODIGO_BENEFICIO_FISCAL'] = Variable<String>(codigoBeneficioFiscal);
    }
    if (!nullToAbsent || exTipi != null) {
      map['EX_TIPI'] = Variable<int>(exTipi);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || unidadeComercial != null) {
      map['UNIDADE_COMERCIAL'] = Variable<String>(unidadeComercial);
    }
    if (!nullToAbsent || quantidadeComercial != null) {
      map['QUANTIDADE_COMERCIAL'] = Variable<double>(quantidadeComercial);
    }
    if (!nullToAbsent || numeroPedidoCompra != null) {
      map['NUMERO_PEDIDO_COMPRA'] = Variable<String>(numeroPedidoCompra);
    }
    if (!nullToAbsent || itemPedidoCompra != null) {
      map['ITEM_PEDIDO_COMPRA'] = Variable<int>(itemPedidoCompra);
    }
    if (!nullToAbsent || numeroFci != null) {
      map['NUMERO_FCI'] = Variable<String>(numeroFci);
    }
    if (!nullToAbsent || numeroRecopi != null) {
      map['NUMERO_RECOPI'] = Variable<String>(numeroRecopi);
    }
    if (!nullToAbsent || valorUnitarioComercial != null) {
      map['VALOR_UNITARIO_COMERCIAL'] =
          Variable<double>(valorUnitarioComercial);
    }
    if (!nullToAbsent || valorBrutoProduto != null) {
      map['VALOR_BRUTO_PRODUTO'] = Variable<double>(valorBrutoProduto);
    }
    if (!nullToAbsent || gtinUnidadeTributavel != null) {
      map['GTIN_UNIDADE_TRIBUTAVEL'] = Variable<String>(gtinUnidadeTributavel);
    }
    if (!nullToAbsent || unidadeTributavel != null) {
      map['UNIDADE_TRIBUTAVEL'] = Variable<String>(unidadeTributavel);
    }
    if (!nullToAbsent || quantidadeTributavel != null) {
      map['QUANTIDADE_TRIBUTAVEL'] = Variable<double>(quantidadeTributavel);
    }
    if (!nullToAbsent || valorUnitarioTributavel != null) {
      map['VALOR_UNITARIO_TRIBUTAVEL'] =
          Variable<double>(valorUnitarioTributavel);
    }
    if (!nullToAbsent || valorFrete != null) {
      map['VALOR_FRETE'] = Variable<double>(valorFrete);
    }
    if (!nullToAbsent || valorSeguro != null) {
      map['VALOR_SEGURO'] = Variable<double>(valorSeguro);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorOutrasDespesas != null) {
      map['VALOR_OUTRAS_DESPESAS'] = Variable<double>(valorOutrasDespesas);
    }
    if (!nullToAbsent || entraTotal != null) {
      map['ENTRA_TOTAL'] = Variable<String>(entraTotal);
    }
    if (!nullToAbsent || valorTotalTributos != null) {
      map['VALOR_TOTAL_TRIBUTOS'] = Variable<double>(valorTotalTributos);
    }
    if (!nullToAbsent || percentualDevolvido != null) {
      map['PERCENTUAL_DEVOLVIDO'] = Variable<double>(percentualDevolvido);
    }
    if (!nullToAbsent || valorIpiDevolvido != null) {
      map['VALOR_IPI_DEVOLVIDO'] = Variable<double>(valorIpiDevolvido);
    }
    if (!nullToAbsent || informacoesAdicionais != null) {
      map['INFORMACOES_ADICIONAIS'] = Variable<String>(informacoesAdicionais);
    }
    if (!nullToAbsent || valorSubtotal != null) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    return map;
  }

  NfeDetalhesCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalhesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      numeroItem: numeroItem == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroItem),
      codigoProduto: codigoProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoProduto),
      gtin: gtin == null && nullToAbsent ? const Value.absent() : Value(gtin),
      nomeProduto: nomeProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeProduto),
      ncm: ncm == null && nullToAbsent ? const Value.absent() : Value(ncm),
      nve: nve == null && nullToAbsent ? const Value.absent() : Value(nve),
      cest: cest == null && nullToAbsent ? const Value.absent() : Value(cest),
      indicadorEscalaRelevante: indicadorEscalaRelevante == null && nullToAbsent
          ? const Value.absent()
          : Value(indicadorEscalaRelevante),
      cnpjFabricante: cnpjFabricante == null && nullToAbsent
          ? const Value.absent()
          : Value(cnpjFabricante),
      codigoBeneficioFiscal: codigoBeneficioFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoBeneficioFiscal),
      exTipi:
          exTipi == null && nullToAbsent ? const Value.absent() : Value(exTipi),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      unidadeComercial: unidadeComercial == null && nullToAbsent
          ? const Value.absent()
          : Value(unidadeComercial),
      quantidadeComercial: quantidadeComercial == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeComercial),
      numeroPedidoCompra: numeroPedidoCompra == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroPedidoCompra),
      itemPedidoCompra: itemPedidoCompra == null && nullToAbsent
          ? const Value.absent()
          : Value(itemPedidoCompra),
      numeroFci: numeroFci == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroFci),
      numeroRecopi: numeroRecopi == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroRecopi),
      valorUnitarioComercial: valorUnitarioComercial == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnitarioComercial),
      valorBrutoProduto: valorBrutoProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBrutoProduto),
      gtinUnidadeTributavel: gtinUnidadeTributavel == null && nullToAbsent
          ? const Value.absent()
          : Value(gtinUnidadeTributavel),
      unidadeTributavel: unidadeTributavel == null && nullToAbsent
          ? const Value.absent()
          : Value(unidadeTributavel),
      quantidadeTributavel: quantidadeTributavel == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeTributavel),
      valorUnitarioTributavel: valorUnitarioTributavel == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnitarioTributavel),
      valorFrete: valorFrete == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFrete),
      valorSeguro: valorSeguro == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSeguro),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorOutrasDespesas: valorOutrasDespesas == null && nullToAbsent
          ? const Value.absent()
          : Value(valorOutrasDespesas),
      entraTotal: entraTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(entraTotal),
      valorTotalTributos: valorTotalTributos == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalTributos),
      percentualDevolvido: percentualDevolvido == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualDevolvido),
      valorIpiDevolvido: valorIpiDevolvido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIpiDevolvido),
      informacoesAdicionais: informacoesAdicionais == null && nullToAbsent
          ? const Value.absent()
          : Value(informacoesAdicionais),
      valorSubtotal: valorSubtotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSubtotal),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
    );
  }

  factory NfeDetalhe.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalhe(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      numeroItem: serializer.fromJson<int?>(json['numeroItem']),
      codigoProduto: serializer.fromJson<String?>(json['codigoProduto']),
      gtin: serializer.fromJson<String?>(json['gtin']),
      nomeProduto: serializer.fromJson<String?>(json['nomeProduto']),
      ncm: serializer.fromJson<String?>(json['ncm']),
      nve: serializer.fromJson<String?>(json['nve']),
      cest: serializer.fromJson<String?>(json['cest']),
      indicadorEscalaRelevante:
          serializer.fromJson<String?>(json['indicadorEscalaRelevante']),
      cnpjFabricante: serializer.fromJson<String?>(json['cnpjFabricante']),
      codigoBeneficioFiscal:
          serializer.fromJson<String?>(json['codigoBeneficioFiscal']),
      exTipi: serializer.fromJson<int?>(json['exTipi']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      unidadeComercial: serializer.fromJson<String?>(json['unidadeComercial']),
      quantidadeComercial:
          serializer.fromJson<double?>(json['quantidadeComercial']),
      numeroPedidoCompra:
          serializer.fromJson<String?>(json['numeroPedidoCompra']),
      itemPedidoCompra: serializer.fromJson<int?>(json['itemPedidoCompra']),
      numeroFci: serializer.fromJson<String?>(json['numeroFci']),
      numeroRecopi: serializer.fromJson<String?>(json['numeroRecopi']),
      valorUnitarioComercial:
          serializer.fromJson<double?>(json['valorUnitarioComercial']),
      valorBrutoProduto:
          serializer.fromJson<double?>(json['valorBrutoProduto']),
      gtinUnidadeTributavel:
          serializer.fromJson<String?>(json['gtinUnidadeTributavel']),
      unidadeTributavel:
          serializer.fromJson<String?>(json['unidadeTributavel']),
      quantidadeTributavel:
          serializer.fromJson<double?>(json['quantidadeTributavel']),
      valorUnitarioTributavel:
          serializer.fromJson<double?>(json['valorUnitarioTributavel']),
      valorFrete: serializer.fromJson<double?>(json['valorFrete']),
      valorSeguro: serializer.fromJson<double?>(json['valorSeguro']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorOutrasDespesas:
          serializer.fromJson<double?>(json['valorOutrasDespesas']),
      entraTotal: serializer.fromJson<String?>(json['entraTotal']),
      valorTotalTributos:
          serializer.fromJson<double?>(json['valorTotalTributos']),
      percentualDevolvido:
          serializer.fromJson<double?>(json['percentualDevolvido']),
      valorIpiDevolvido:
          serializer.fromJson<double?>(json['valorIpiDevolvido']),
      informacoesAdicionais:
          serializer.fromJson<String?>(json['informacoesAdicionais']),
      valorSubtotal: serializer.fromJson<double?>(json['valorSubtotal']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'numeroItem': serializer.toJson<int?>(numeroItem),
      'codigoProduto': serializer.toJson<String?>(codigoProduto),
      'gtin': serializer.toJson<String?>(gtin),
      'nomeProduto': serializer.toJson<String?>(nomeProduto),
      'ncm': serializer.toJson<String?>(ncm),
      'nve': serializer.toJson<String?>(nve),
      'cest': serializer.toJson<String?>(cest),
      'indicadorEscalaRelevante':
          serializer.toJson<String?>(indicadorEscalaRelevante),
      'cnpjFabricante': serializer.toJson<String?>(cnpjFabricante),
      'codigoBeneficioFiscal':
          serializer.toJson<String?>(codigoBeneficioFiscal),
      'exTipi': serializer.toJson<int?>(exTipi),
      'cfop': serializer.toJson<int?>(cfop),
      'unidadeComercial': serializer.toJson<String?>(unidadeComercial),
      'quantidadeComercial': serializer.toJson<double?>(quantidadeComercial),
      'numeroPedidoCompra': serializer.toJson<String?>(numeroPedidoCompra),
      'itemPedidoCompra': serializer.toJson<int?>(itemPedidoCompra),
      'numeroFci': serializer.toJson<String?>(numeroFci),
      'numeroRecopi': serializer.toJson<String?>(numeroRecopi),
      'valorUnitarioComercial':
          serializer.toJson<double?>(valorUnitarioComercial),
      'valorBrutoProduto': serializer.toJson<double?>(valorBrutoProduto),
      'gtinUnidadeTributavel':
          serializer.toJson<String?>(gtinUnidadeTributavel),
      'unidadeTributavel': serializer.toJson<String?>(unidadeTributavel),
      'quantidadeTributavel': serializer.toJson<double?>(quantidadeTributavel),
      'valorUnitarioTributavel':
          serializer.toJson<double?>(valorUnitarioTributavel),
      'valorFrete': serializer.toJson<double?>(valorFrete),
      'valorSeguro': serializer.toJson<double?>(valorSeguro),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorOutrasDespesas': serializer.toJson<double?>(valorOutrasDespesas),
      'entraTotal': serializer.toJson<String?>(entraTotal),
      'valorTotalTributos': serializer.toJson<double?>(valorTotalTributos),
      'percentualDevolvido': serializer.toJson<double?>(percentualDevolvido),
      'valorIpiDevolvido': serializer.toJson<double?>(valorIpiDevolvido),
      'informacoesAdicionais':
          serializer.toJson<String?>(informacoesAdicionais),
      'valorSubtotal': serializer.toJson<double?>(valorSubtotal),
      'valorTotal': serializer.toJson<double?>(valorTotal),
    };
  }

  NfeDetalhe copyWith(
          {int? id,
          int? idNfeCabecalho,
          int? numeroItem,
          String? codigoProduto,
          String? gtin,
          String? nomeProduto,
          String? ncm,
          String? nve,
          String? cest,
          String? indicadorEscalaRelevante,
          String? cnpjFabricante,
          String? codigoBeneficioFiscal,
          int? exTipi,
          int? cfop,
          String? unidadeComercial,
          double? quantidadeComercial,
          String? numeroPedidoCompra,
          int? itemPedidoCompra,
          String? numeroFci,
          String? numeroRecopi,
          double? valorUnitarioComercial,
          double? valorBrutoProduto,
          String? gtinUnidadeTributavel,
          String? unidadeTributavel,
          double? quantidadeTributavel,
          double? valorUnitarioTributavel,
          double? valorFrete,
          double? valorSeguro,
          double? valorDesconto,
          double? valorOutrasDespesas,
          String? entraTotal,
          double? valorTotalTributos,
          double? percentualDevolvido,
          double? valorIpiDevolvido,
          String? informacoesAdicionais,
          double? valorSubtotal,
          double? valorTotal}) =>
      NfeDetalhe(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        numeroItem: numeroItem ?? this.numeroItem,
        codigoProduto: codigoProduto ?? this.codigoProduto,
        gtin: gtin ?? this.gtin,
        nomeProduto: nomeProduto ?? this.nomeProduto,
        ncm: ncm ?? this.ncm,
        nve: nve ?? this.nve,
        cest: cest ?? this.cest,
        indicadorEscalaRelevante:
            indicadorEscalaRelevante ?? this.indicadorEscalaRelevante,
        cnpjFabricante: cnpjFabricante ?? this.cnpjFabricante,
        codigoBeneficioFiscal:
            codigoBeneficioFiscal ?? this.codigoBeneficioFiscal,
        exTipi: exTipi ?? this.exTipi,
        cfop: cfop ?? this.cfop,
        unidadeComercial: unidadeComercial ?? this.unidadeComercial,
        quantidadeComercial: quantidadeComercial ?? this.quantidadeComercial,
        numeroPedidoCompra: numeroPedidoCompra ?? this.numeroPedidoCompra,
        itemPedidoCompra: itemPedidoCompra ?? this.itemPedidoCompra,
        numeroFci: numeroFci ?? this.numeroFci,
        numeroRecopi: numeroRecopi ?? this.numeroRecopi,
        valorUnitarioComercial:
            valorUnitarioComercial ?? this.valorUnitarioComercial,
        valorBrutoProduto: valorBrutoProduto ?? this.valorBrutoProduto,
        gtinUnidadeTributavel:
            gtinUnidadeTributavel ?? this.gtinUnidadeTributavel,
        unidadeTributavel: unidadeTributavel ?? this.unidadeTributavel,
        quantidadeTributavel: quantidadeTributavel ?? this.quantidadeTributavel,
        valorUnitarioTributavel:
            valorUnitarioTributavel ?? this.valorUnitarioTributavel,
        valorFrete: valorFrete ?? this.valorFrete,
        valorSeguro: valorSeguro ?? this.valorSeguro,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorOutrasDespesas: valorOutrasDespesas ?? this.valorOutrasDespesas,
        entraTotal: entraTotal ?? this.entraTotal,
        valorTotalTributos: valorTotalTributos ?? this.valorTotalTributos,
        percentualDevolvido: percentualDevolvido ?? this.percentualDevolvido,
        valorIpiDevolvido: valorIpiDevolvido ?? this.valorIpiDevolvido,
        informacoesAdicionais:
            informacoesAdicionais ?? this.informacoesAdicionais,
        valorSubtotal: valorSubtotal ?? this.valorSubtotal,
        valorTotal: valorTotal ?? this.valorTotal,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalhe(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('numeroItem: $numeroItem, ')
          ..write('codigoProduto: $codigoProduto, ')
          ..write('gtin: $gtin, ')
          ..write('nomeProduto: $nomeProduto, ')
          ..write('ncm: $ncm, ')
          ..write('nve: $nve, ')
          ..write('cest: $cest, ')
          ..write('indicadorEscalaRelevante: $indicadorEscalaRelevante, ')
          ..write('cnpjFabricante: $cnpjFabricante, ')
          ..write('codigoBeneficioFiscal: $codigoBeneficioFiscal, ')
          ..write('exTipi: $exTipi, ')
          ..write('cfop: $cfop, ')
          ..write('unidadeComercial: $unidadeComercial, ')
          ..write('quantidadeComercial: $quantidadeComercial, ')
          ..write('numeroPedidoCompra: $numeroPedidoCompra, ')
          ..write('itemPedidoCompra: $itemPedidoCompra, ')
          ..write('numeroFci: $numeroFci, ')
          ..write('numeroRecopi: $numeroRecopi, ')
          ..write('valorUnitarioComercial: $valorUnitarioComercial, ')
          ..write('valorBrutoProduto: $valorBrutoProduto, ')
          ..write('gtinUnidadeTributavel: $gtinUnidadeTributavel, ')
          ..write('unidadeTributavel: $unidadeTributavel, ')
          ..write('quantidadeTributavel: $quantidadeTributavel, ')
          ..write('valorUnitarioTributavel: $valorUnitarioTributavel, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorOutrasDespesas: $valorOutrasDespesas, ')
          ..write('entraTotal: $entraTotal, ')
          ..write('valorTotalTributos: $valorTotalTributos, ')
          ..write('percentualDevolvido: $percentualDevolvido, ')
          ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
          ..write('informacoesAdicionais: $informacoesAdicionais, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('valorTotal: $valorTotal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idNfeCabecalho,
        numeroItem,
        codigoProduto,
        gtin,
        nomeProduto,
        ncm,
        nve,
        cest,
        indicadorEscalaRelevante,
        cnpjFabricante,
        codigoBeneficioFiscal,
        exTipi,
        cfop,
        unidadeComercial,
        quantidadeComercial,
        numeroPedidoCompra,
        itemPedidoCompra,
        numeroFci,
        numeroRecopi,
        valorUnitarioComercial,
        valorBrutoProduto,
        gtinUnidadeTributavel,
        unidadeTributavel,
        quantidadeTributavel,
        valorUnitarioTributavel,
        valorFrete,
        valorSeguro,
        valorDesconto,
        valorOutrasDespesas,
        entraTotal,
        valorTotalTributos,
        percentualDevolvido,
        valorIpiDevolvido,
        informacoesAdicionais,
        valorSubtotal,
        valorTotal
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalhe &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.numeroItem == this.numeroItem &&
          other.codigoProduto == this.codigoProduto &&
          other.gtin == this.gtin &&
          other.nomeProduto == this.nomeProduto &&
          other.ncm == this.ncm &&
          other.nve == this.nve &&
          other.cest == this.cest &&
          other.indicadorEscalaRelevante == this.indicadorEscalaRelevante &&
          other.cnpjFabricante == this.cnpjFabricante &&
          other.codigoBeneficioFiscal == this.codigoBeneficioFiscal &&
          other.exTipi == this.exTipi &&
          other.cfop == this.cfop &&
          other.unidadeComercial == this.unidadeComercial &&
          other.quantidadeComercial == this.quantidadeComercial &&
          other.numeroPedidoCompra == this.numeroPedidoCompra &&
          other.itemPedidoCompra == this.itemPedidoCompra &&
          other.numeroFci == this.numeroFci &&
          other.numeroRecopi == this.numeroRecopi &&
          other.valorUnitarioComercial == this.valorUnitarioComercial &&
          other.valorBrutoProduto == this.valorBrutoProduto &&
          other.gtinUnidadeTributavel == this.gtinUnidadeTributavel &&
          other.unidadeTributavel == this.unidadeTributavel &&
          other.quantidadeTributavel == this.quantidadeTributavel &&
          other.valorUnitarioTributavel == this.valorUnitarioTributavel &&
          other.valorFrete == this.valorFrete &&
          other.valorSeguro == this.valorSeguro &&
          other.valorDesconto == this.valorDesconto &&
          other.valorOutrasDespesas == this.valorOutrasDespesas &&
          other.entraTotal == this.entraTotal &&
          other.valorTotalTributos == this.valorTotalTributos &&
          other.percentualDevolvido == this.percentualDevolvido &&
          other.valorIpiDevolvido == this.valorIpiDevolvido &&
          other.informacoesAdicionais == this.informacoesAdicionais &&
          other.valorSubtotal == this.valorSubtotal &&
          other.valorTotal == this.valorTotal);
}

class NfeDetalhesCompanion extends UpdateCompanion<NfeDetalhe> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<int?> numeroItem;
  final Value<String?> codigoProduto;
  final Value<String?> gtin;
  final Value<String?> nomeProduto;
  final Value<String?> ncm;
  final Value<String?> nve;
  final Value<String?> cest;
  final Value<String?> indicadorEscalaRelevante;
  final Value<String?> cnpjFabricante;
  final Value<String?> codigoBeneficioFiscal;
  final Value<int?> exTipi;
  final Value<int?> cfop;
  final Value<String?> unidadeComercial;
  final Value<double?> quantidadeComercial;
  final Value<String?> numeroPedidoCompra;
  final Value<int?> itemPedidoCompra;
  final Value<String?> numeroFci;
  final Value<String?> numeroRecopi;
  final Value<double?> valorUnitarioComercial;
  final Value<double?> valorBrutoProduto;
  final Value<String?> gtinUnidadeTributavel;
  final Value<String?> unidadeTributavel;
  final Value<double?> quantidadeTributavel;
  final Value<double?> valorUnitarioTributavel;
  final Value<double?> valorFrete;
  final Value<double?> valorSeguro;
  final Value<double?> valorDesconto;
  final Value<double?> valorOutrasDespesas;
  final Value<String?> entraTotal;
  final Value<double?> valorTotalTributos;
  final Value<double?> percentualDevolvido;
  final Value<double?> valorIpiDevolvido;
  final Value<String?> informacoesAdicionais;
  final Value<double?> valorSubtotal;
  final Value<double?> valorTotal;
  const NfeDetalhesCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.numeroItem = const Value.absent(),
    this.codigoProduto = const Value.absent(),
    this.gtin = const Value.absent(),
    this.nomeProduto = const Value.absent(),
    this.ncm = const Value.absent(),
    this.nve = const Value.absent(),
    this.cest = const Value.absent(),
    this.indicadorEscalaRelevante = const Value.absent(),
    this.cnpjFabricante = const Value.absent(),
    this.codigoBeneficioFiscal = const Value.absent(),
    this.exTipi = const Value.absent(),
    this.cfop = const Value.absent(),
    this.unidadeComercial = const Value.absent(),
    this.quantidadeComercial = const Value.absent(),
    this.numeroPedidoCompra = const Value.absent(),
    this.itemPedidoCompra = const Value.absent(),
    this.numeroFci = const Value.absent(),
    this.numeroRecopi = const Value.absent(),
    this.valorUnitarioComercial = const Value.absent(),
    this.valorBrutoProduto = const Value.absent(),
    this.gtinUnidadeTributavel = const Value.absent(),
    this.unidadeTributavel = const Value.absent(),
    this.quantidadeTributavel = const Value.absent(),
    this.valorUnitarioTributavel = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorOutrasDespesas = const Value.absent(),
    this.entraTotal = const Value.absent(),
    this.valorTotalTributos = const Value.absent(),
    this.percentualDevolvido = const Value.absent(),
    this.valorIpiDevolvido = const Value.absent(),
    this.informacoesAdicionais = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.valorTotal = const Value.absent(),
  });
  NfeDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.numeroItem = const Value.absent(),
    this.codigoProduto = const Value.absent(),
    this.gtin = const Value.absent(),
    this.nomeProduto = const Value.absent(),
    this.ncm = const Value.absent(),
    this.nve = const Value.absent(),
    this.cest = const Value.absent(),
    this.indicadorEscalaRelevante = const Value.absent(),
    this.cnpjFabricante = const Value.absent(),
    this.codigoBeneficioFiscal = const Value.absent(),
    this.exTipi = const Value.absent(),
    this.cfop = const Value.absent(),
    this.unidadeComercial = const Value.absent(),
    this.quantidadeComercial = const Value.absent(),
    this.numeroPedidoCompra = const Value.absent(),
    this.itemPedidoCompra = const Value.absent(),
    this.numeroFci = const Value.absent(),
    this.numeroRecopi = const Value.absent(),
    this.valorUnitarioComercial = const Value.absent(),
    this.valorBrutoProduto = const Value.absent(),
    this.gtinUnidadeTributavel = const Value.absent(),
    this.unidadeTributavel = const Value.absent(),
    this.quantidadeTributavel = const Value.absent(),
    this.valorUnitarioTributavel = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorOutrasDespesas = const Value.absent(),
    this.entraTotal = const Value.absent(),
    this.valorTotalTributos = const Value.absent(),
    this.percentualDevolvido = const Value.absent(),
    this.valorIpiDevolvido = const Value.absent(),
    this.informacoesAdicionais = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.valorTotal = const Value.absent(),
  });
  static Insertable<NfeDetalhe> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<int>? numeroItem,
    Expression<String>? codigoProduto,
    Expression<String>? gtin,
    Expression<String>? nomeProduto,
    Expression<String>? ncm,
    Expression<String>? nve,
    Expression<String>? cest,
    Expression<String>? indicadorEscalaRelevante,
    Expression<String>? cnpjFabricante,
    Expression<String>? codigoBeneficioFiscal,
    Expression<int>? exTipi,
    Expression<int>? cfop,
    Expression<String>? unidadeComercial,
    Expression<double>? quantidadeComercial,
    Expression<String>? numeroPedidoCompra,
    Expression<int>? itemPedidoCompra,
    Expression<String>? numeroFci,
    Expression<String>? numeroRecopi,
    Expression<double>? valorUnitarioComercial,
    Expression<double>? valorBrutoProduto,
    Expression<String>? gtinUnidadeTributavel,
    Expression<String>? unidadeTributavel,
    Expression<double>? quantidadeTributavel,
    Expression<double>? valorUnitarioTributavel,
    Expression<double>? valorFrete,
    Expression<double>? valorSeguro,
    Expression<double>? valorDesconto,
    Expression<double>? valorOutrasDespesas,
    Expression<String>? entraTotal,
    Expression<double>? valorTotalTributos,
    Expression<double>? percentualDevolvido,
    Expression<double>? valorIpiDevolvido,
    Expression<String>? informacoesAdicionais,
    Expression<double>? valorSubtotal,
    Expression<double>? valorTotal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (numeroItem != null) 'NUMERO_ITEM': numeroItem,
      if (codigoProduto != null) 'CODIGO_PRODUTO': codigoProduto,
      if (gtin != null) 'GTIN': gtin,
      if (nomeProduto != null) 'NOME_PRODUTO': nomeProduto,
      if (ncm != null) 'NCM': ncm,
      if (nve != null) 'NVE': nve,
      if (cest != null) 'CEST': cest,
      if (indicadorEscalaRelevante != null)
        'INDICADOR_ESCALA_RELEVANTE': indicadorEscalaRelevante,
      if (cnpjFabricante != null) 'CNPJ_FABRICANTE': cnpjFabricante,
      if (codigoBeneficioFiscal != null)
        'CODIGO_BENEFICIO_FISCAL': codigoBeneficioFiscal,
      if (exTipi != null) 'EX_TIPI': exTipi,
      if (cfop != null) 'CFOP': cfop,
      if (unidadeComercial != null) 'UNIDADE_COMERCIAL': unidadeComercial,
      if (quantidadeComercial != null)
        'QUANTIDADE_COMERCIAL': quantidadeComercial,
      if (numeroPedidoCompra != null)
        'NUMERO_PEDIDO_COMPRA': numeroPedidoCompra,
      if (itemPedidoCompra != null) 'ITEM_PEDIDO_COMPRA': itemPedidoCompra,
      if (numeroFci != null) 'NUMERO_FCI': numeroFci,
      if (numeroRecopi != null) 'NUMERO_RECOPI': numeroRecopi,
      if (valorUnitarioComercial != null)
        'VALOR_UNITARIO_COMERCIAL': valorUnitarioComercial,
      if (valorBrutoProduto != null) 'VALOR_BRUTO_PRODUTO': valorBrutoProduto,
      if (gtinUnidadeTributavel != null)
        'GTIN_UNIDADE_TRIBUTAVEL': gtinUnidadeTributavel,
      if (unidadeTributavel != null) 'UNIDADE_TRIBUTAVEL': unidadeTributavel,
      if (quantidadeTributavel != null)
        'QUANTIDADE_TRIBUTAVEL': quantidadeTributavel,
      if (valorUnitarioTributavel != null)
        'VALOR_UNITARIO_TRIBUTAVEL': valorUnitarioTributavel,
      if (valorFrete != null) 'VALOR_FRETE': valorFrete,
      if (valorSeguro != null) 'VALOR_SEGURO': valorSeguro,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorOutrasDespesas != null)
        'VALOR_OUTRAS_DESPESAS': valorOutrasDespesas,
      if (entraTotal != null) 'ENTRA_TOTAL': entraTotal,
      if (valorTotalTributos != null)
        'VALOR_TOTAL_TRIBUTOS': valorTotalTributos,
      if (percentualDevolvido != null)
        'PERCENTUAL_DEVOLVIDO': percentualDevolvido,
      if (valorIpiDevolvido != null) 'VALOR_IPI_DEVOLVIDO': valorIpiDevolvido,
      if (informacoesAdicionais != null)
        'INFORMACOES_ADICIONAIS': informacoesAdicionais,
      if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
    });
  }

  NfeDetalhesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<int?>? numeroItem,
      Value<String?>? codigoProduto,
      Value<String?>? gtin,
      Value<String?>? nomeProduto,
      Value<String?>? ncm,
      Value<String?>? nve,
      Value<String?>? cest,
      Value<String?>? indicadorEscalaRelevante,
      Value<String?>? cnpjFabricante,
      Value<String?>? codigoBeneficioFiscal,
      Value<int?>? exTipi,
      Value<int?>? cfop,
      Value<String?>? unidadeComercial,
      Value<double?>? quantidadeComercial,
      Value<String?>? numeroPedidoCompra,
      Value<int?>? itemPedidoCompra,
      Value<String?>? numeroFci,
      Value<String?>? numeroRecopi,
      Value<double?>? valorUnitarioComercial,
      Value<double?>? valorBrutoProduto,
      Value<String?>? gtinUnidadeTributavel,
      Value<String?>? unidadeTributavel,
      Value<double?>? quantidadeTributavel,
      Value<double?>? valorUnitarioTributavel,
      Value<double?>? valorFrete,
      Value<double?>? valorSeguro,
      Value<double?>? valorDesconto,
      Value<double?>? valorOutrasDespesas,
      Value<String?>? entraTotal,
      Value<double?>? valorTotalTributos,
      Value<double?>? percentualDevolvido,
      Value<double?>? valorIpiDevolvido,
      Value<String?>? informacoesAdicionais,
      Value<double?>? valorSubtotal,
      Value<double?>? valorTotal}) {
    return NfeDetalhesCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      numeroItem: numeroItem ?? this.numeroItem,
      codigoProduto: codigoProduto ?? this.codigoProduto,
      gtin: gtin ?? this.gtin,
      nomeProduto: nomeProduto ?? this.nomeProduto,
      ncm: ncm ?? this.ncm,
      nve: nve ?? this.nve,
      cest: cest ?? this.cest,
      indicadorEscalaRelevante:
          indicadorEscalaRelevante ?? this.indicadorEscalaRelevante,
      cnpjFabricante: cnpjFabricante ?? this.cnpjFabricante,
      codigoBeneficioFiscal:
          codigoBeneficioFiscal ?? this.codigoBeneficioFiscal,
      exTipi: exTipi ?? this.exTipi,
      cfop: cfop ?? this.cfop,
      unidadeComercial: unidadeComercial ?? this.unidadeComercial,
      quantidadeComercial: quantidadeComercial ?? this.quantidadeComercial,
      numeroPedidoCompra: numeroPedidoCompra ?? this.numeroPedidoCompra,
      itemPedidoCompra: itemPedidoCompra ?? this.itemPedidoCompra,
      numeroFci: numeroFci ?? this.numeroFci,
      numeroRecopi: numeroRecopi ?? this.numeroRecopi,
      valorUnitarioComercial:
          valorUnitarioComercial ?? this.valorUnitarioComercial,
      valorBrutoProduto: valorBrutoProduto ?? this.valorBrutoProduto,
      gtinUnidadeTributavel:
          gtinUnidadeTributavel ?? this.gtinUnidadeTributavel,
      unidadeTributavel: unidadeTributavel ?? this.unidadeTributavel,
      quantidadeTributavel: quantidadeTributavel ?? this.quantidadeTributavel,
      valorUnitarioTributavel:
          valorUnitarioTributavel ?? this.valorUnitarioTributavel,
      valorFrete: valorFrete ?? this.valorFrete,
      valorSeguro: valorSeguro ?? this.valorSeguro,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorOutrasDespesas: valorOutrasDespesas ?? this.valorOutrasDespesas,
      entraTotal: entraTotal ?? this.entraTotal,
      valorTotalTributos: valorTotalTributos ?? this.valorTotalTributos,
      percentualDevolvido: percentualDevolvido ?? this.percentualDevolvido,
      valorIpiDevolvido: valorIpiDevolvido ?? this.valorIpiDevolvido,
      informacoesAdicionais:
          informacoesAdicionais ?? this.informacoesAdicionais,
      valorSubtotal: valorSubtotal ?? this.valorSubtotal,
      valorTotal: valorTotal ?? this.valorTotal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (numeroItem.present) {
      map['NUMERO_ITEM'] = Variable<int>(numeroItem.value);
    }
    if (codigoProduto.present) {
      map['CODIGO_PRODUTO'] = Variable<String>(codigoProduto.value);
    }
    if (gtin.present) {
      map['GTIN'] = Variable<String>(gtin.value);
    }
    if (nomeProduto.present) {
      map['NOME_PRODUTO'] = Variable<String>(nomeProduto.value);
    }
    if (ncm.present) {
      map['NCM'] = Variable<String>(ncm.value);
    }
    if (nve.present) {
      map['NVE'] = Variable<String>(nve.value);
    }
    if (cest.present) {
      map['CEST'] = Variable<String>(cest.value);
    }
    if (indicadorEscalaRelevante.present) {
      map['INDICADOR_ESCALA_RELEVANTE'] =
          Variable<String>(indicadorEscalaRelevante.value);
    }
    if (cnpjFabricante.present) {
      map['CNPJ_FABRICANTE'] = Variable<String>(cnpjFabricante.value);
    }
    if (codigoBeneficioFiscal.present) {
      map['CODIGO_BENEFICIO_FISCAL'] =
          Variable<String>(codigoBeneficioFiscal.value);
    }
    if (exTipi.present) {
      map['EX_TIPI'] = Variable<int>(exTipi.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (unidadeComercial.present) {
      map['UNIDADE_COMERCIAL'] = Variable<String>(unidadeComercial.value);
    }
    if (quantidadeComercial.present) {
      map['QUANTIDADE_COMERCIAL'] =
          Variable<double>(quantidadeComercial.value);
    }
    if (numeroPedidoCompra.present) {
      map['NUMERO_PEDIDO_COMPRA'] = Variable<String>(numeroPedidoCompra.value);
    }
    if (itemPedidoCompra.present) {
      map['ITEM_PEDIDO_COMPRA'] = Variable<int>(itemPedidoCompra.value);
    }
    if (numeroFci.present) {
      map['NUMERO_FCI'] = Variable<String>(numeroFci.value);
    }
    if (numeroRecopi.present) {
      map['NUMERO_RECOPI'] = Variable<String>(numeroRecopi.value);
    }
    if (valorUnitarioComercial.present) {
      map['VALOR_UNITARIO_COMERCIAL'] =
          Variable<double>(valorUnitarioComercial.value);
    }
    if (valorBrutoProduto.present) {
      map['VALOR_BRUTO_PRODUTO'] = Variable<double>(valorBrutoProduto.value);
    }
    if (gtinUnidadeTributavel.present) {
      map['GTIN_UNIDADE_TRIBUTAVEL'] =
          Variable<String>(gtinUnidadeTributavel.value);
    }
    if (unidadeTributavel.present) {
      map['UNIDADE_TRIBUTAVEL'] = Variable<String>(unidadeTributavel.value);
    }
    if (quantidadeTributavel.present) {
      map['QUANTIDADE_TRIBUTAVEL'] =
          Variable<double>(quantidadeTributavel.value);
    }
    if (valorUnitarioTributavel.present) {
      map['VALOR_UNITARIO_TRIBUTAVEL'] =
          Variable<double>(valorUnitarioTributavel.value);
    }
    if (valorFrete.present) {
      map['VALOR_FRETE'] = Variable<double>(valorFrete.value);
    }
    if (valorSeguro.present) {
      map['VALOR_SEGURO'] = Variable<double>(valorSeguro.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorOutrasDespesas.present) {
      map['VALOR_OUTRAS_DESPESAS'] =
          Variable<double>(valorOutrasDespesas.value);
    }
    if (entraTotal.present) {
      map['ENTRA_TOTAL'] = Variable<String>(entraTotal.value);
    }
    if (valorTotalTributos.present) {
      map['VALOR_TOTAL_TRIBUTOS'] = Variable<double>(valorTotalTributos.value);
    }
    if (percentualDevolvido.present) {
      map['PERCENTUAL_DEVOLVIDO'] =
          Variable<double>(percentualDevolvido.value);
    }
    if (valorIpiDevolvido.present) {
      map['VALOR_IPI_DEVOLVIDO'] = Variable<double>(valorIpiDevolvido.value);
    }
    if (informacoesAdicionais.present) {
      map['INFORMACOES_ADICIONAIS'] =
          Variable<String>(informacoesAdicionais.value);
    }
    if (valorSubtotal.present) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('numeroItem: $numeroItem, ')
          ..write('codigoProduto: $codigoProduto, ')
          ..write('gtin: $gtin, ')
          ..write('nomeProduto: $nomeProduto, ')
          ..write('ncm: $ncm, ')
          ..write('nve: $nve, ')
          ..write('cest: $cest, ')
          ..write('indicadorEscalaRelevante: $indicadorEscalaRelevante, ')
          ..write('cnpjFabricante: $cnpjFabricante, ')
          ..write('codigoBeneficioFiscal: $codigoBeneficioFiscal, ')
          ..write('exTipi: $exTipi, ')
          ..write('cfop: $cfop, ')
          ..write('unidadeComercial: $unidadeComercial, ')
          ..write('quantidadeComercial: $quantidadeComercial, ')
          ..write('numeroPedidoCompra: $numeroPedidoCompra, ')
          ..write('itemPedidoCompra: $itemPedidoCompra, ')
          ..write('numeroFci: $numeroFci, ')
          ..write('numeroRecopi: $numeroRecopi, ')
          ..write('valorUnitarioComercial: $valorUnitarioComercial, ')
          ..write('valorBrutoProduto: $valorBrutoProduto, ')
          ..write('gtinUnidadeTributavel: $gtinUnidadeTributavel, ')
          ..write('unidadeTributavel: $unidadeTributavel, ')
          ..write('quantidadeTributavel: $quantidadeTributavel, ')
          ..write('valorUnitarioTributavel: $valorUnitarioTributavel, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorOutrasDespesas: $valorOutrasDespesas, ')
          ..write('entraTotal: $entraTotal, ')
          ..write('valorTotalTributos: $valorTotalTributos, ')
          ..write('percentualDevolvido: $percentualDevolvido, ')
          ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
          ..write('informacoesAdicionais: $informacoesAdicionais, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('valorTotal: $valorTotal')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalhesTable extends NfeDetalhes
    with TableInfo<$NfeDetalhesTable, NfeDetalhe> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalhesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _numeroItemMeta = const VerificationMeta('numeroItem');
  @override
  late final GeneratedColumn<int> numeroItem = GeneratedColumn<int>(
      'NUMERO_ITEM', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoProdutoMeta =
      const VerificationMeta('codigoProduto');
  @override
  late final GeneratedColumn<String> codigoProduto = GeneratedColumn<String>(
      'CODIGO_PRODUTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _gtinMeta = const VerificationMeta('gtin');
  @override
  late final GeneratedColumn<String> gtin = GeneratedColumn<String>(
      'GTIN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeProdutoMeta =
      const VerificationMeta('nomeProduto');
  @override
  late final GeneratedColumn<String> nomeProduto = GeneratedColumn<String>(
      'NOME_PRODUTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 120),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ncmMeta = const VerificationMeta('ncm');
  @override
  late final GeneratedColumn<String> ncm = GeneratedColumn<String>(
      'NCM', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nveMeta = const VerificationMeta('nve');
  @override
  late final GeneratedColumn<String> nve = GeneratedColumn<String>(
      'NVE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cestMeta = const VerificationMeta('cest');
  @override
  late final GeneratedColumn<String> cest = GeneratedColumn<String>(
      'CEST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _indicadorEscalaRelevanteMeta =
      const VerificationMeta('indicadorEscalaRelevante');
  @override
  late final GeneratedColumn<String> indicadorEscalaRelevante =
      GeneratedColumn<String>('INDICADOR_ESCALA_RELEVANTE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _cnpjFabricanteMeta =
      const VerificationMeta('cnpjFabricante');
  @override
  late final GeneratedColumn<String> cnpjFabricante = GeneratedColumn<String>(
      'CNPJ_FABRICANTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoBeneficioFiscalMeta =
      const VerificationMeta('codigoBeneficioFiscal');
  @override
  late final GeneratedColumn<String> codigoBeneficioFiscal =
      GeneratedColumn<String>('CODIGO_BENEFICIO_FISCAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 10),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _exTipiMeta = const VerificationMeta('exTipi');
  @override
  late final GeneratedColumn<int> exTipi = GeneratedColumn<int>(
      'EX_TIPI', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
      'CFOP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _unidadeComercialMeta =
      const VerificationMeta('unidadeComercial');
  @override
  late final GeneratedColumn<String> unidadeComercial =
      GeneratedColumn<String>('UNIDADE_COMERCIAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 6),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _quantidadeComercialMeta =
      const VerificationMeta('quantidadeComercial');
  @override
  late final GeneratedColumn<double> quantidadeComercial =
      GeneratedColumn<double>('QUANTIDADE_COMERCIAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _numeroPedidoCompraMeta =
      const VerificationMeta('numeroPedidoCompra');
  @override
  late final GeneratedColumn<String> numeroPedidoCompra =
      GeneratedColumn<String>(
          'NUMERO_PEDIDO_COMPRA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 15),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _itemPedidoCompraMeta =
      const VerificationMeta('itemPedidoCompra');
  @override
  late final GeneratedColumn<int> itemPedidoCompra = GeneratedColumn<int>(
      'ITEM_PEDIDO_COMPRA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _numeroFciMeta = const VerificationMeta('numeroFci');
  @override
  late final GeneratedColumn<String> numeroFci = GeneratedColumn<String>(
      'NUMERO_FCI', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 36),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroRecopiMeta =
      const VerificationMeta('numeroRecopi');
  @override
  late final GeneratedColumn<String> numeroRecopi = GeneratedColumn<String>(
      'NUMERO_RECOPI', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorUnitarioComercialMeta =
      const VerificationMeta('valorUnitarioComercial');
  @override
  late final GeneratedColumn<double> valorUnitarioComercial =
      GeneratedColumn<double>('VALOR_UNITARIO_COMERCIAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBrutoProdutoMeta =
      const VerificationMeta('valorBrutoProduto');
  @override
  late final GeneratedColumn<double> valorBrutoProduto =
      GeneratedColumn<double>('VALOR_BRUTO_PRODUTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _gtinUnidadeTributavelMeta =
      const VerificationMeta('gtinUnidadeTributavel');
  @override
  late final GeneratedColumn<String> gtinUnidadeTributavel =
      GeneratedColumn<String>('GTIN_UNIDADE_TRIBUTAVEL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _unidadeTributavelMeta =
      const VerificationMeta('unidadeTributavel');
  @override
  late final GeneratedColumn<String> unidadeTributavel =
      GeneratedColumn<String>('UNIDADE_TRIBUTAVEL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 6),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _quantidadeTributavelMeta =
      const VerificationMeta('quantidadeTributavel');
  @override
  late final GeneratedColumn<double> quantidadeTributavel =
      GeneratedColumn<double>('QUANTIDADE_TRIBUTAVEL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorUnitarioTributavelMeta =
      const VerificationMeta('valorUnitarioTributavel');
  @override
  late final GeneratedColumn<double> valorUnitarioTributavel =
      GeneratedColumn<double>('VALOR_UNITARIO_TRIBUTAVEL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorFreteMeta = const VerificationMeta('valorFrete');
  @override
  late final GeneratedColumn<double> valorFrete = GeneratedColumn<double>(
      'VALOR_FRETE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorSeguroMeta =
      const VerificationMeta('valorSeguro');
  @override
  late final GeneratedColumn<double> valorSeguro = GeneratedColumn<double>(
      'VALOR_SEGURO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorOutrasDespesasMeta =
      const VerificationMeta('valorOutrasDespesas');
  @override
  late final GeneratedColumn<double> valorOutrasDespesas =
      GeneratedColumn<double>('VALOR_OUTRAS_DESPESAS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _entraTotalMeta = const VerificationMeta('entraTotal');
  @override
  late final GeneratedColumn<String> entraTotal = GeneratedColumn<String>(
      'ENTRA_TOTAL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorTotalTributosMeta =
      const VerificationMeta('valorTotalTributos');
  @override
  late final GeneratedColumn<double> valorTotalTributos =
      GeneratedColumn<double>('VALOR_TOTAL_TRIBUTOS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualDevolvidoMeta =
      const VerificationMeta('percentualDevolvido');
  @override
  late final GeneratedColumn<double> percentualDevolvido =
      GeneratedColumn<double>('PERCENTUAL_DEVOLVIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIpiDevolvidoMeta =
      const VerificationMeta('valorIpiDevolvido');
  @override
  late final GeneratedColumn<double> valorIpiDevolvido =
      GeneratedColumn<double>('VALOR_IPI_DEVOLVIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _informacoesAdicionaisMeta =
      const VerificationMeta('informacoesAdicionais');
  @override
  late final GeneratedColumn<String> informacoesAdicionais =
      GeneratedColumn<String>('INFORMACOES_ADICIONAIS', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _valorSubtotalMeta =
      const VerificationMeta('valorSubtotal');
  @override
  late final GeneratedColumn<double> valorSubtotal = GeneratedColumn<double>(
      'VALOR_SUBTOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
      'VALOR_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        numeroItem,
        codigoProduto,
        gtin,
        nomeProduto,
        ncm,
        nve,
        cest,
        indicadorEscalaRelevante,
        cnpjFabricante,
        codigoBeneficioFiscal,
        exTipi,
        cfop,
        unidadeComercial,
        quantidadeComercial,
        numeroPedidoCompra,
        itemPedidoCompra,
        numeroFci,
        numeroRecopi,
        valorUnitarioComercial,
        valorBrutoProduto,
        gtinUnidadeTributavel,
        unidadeTributavel,
        quantidadeTributavel,
        valorUnitarioTributavel,
        valorFrete,
        valorSeguro,
        valorDesconto,
        valorOutrasDespesas,
        entraTotal,
        valorTotalTributos,
        percentualDevolvido,
        valorIpiDevolvido,
        informacoesAdicionais,
        valorSubtotal,
        valorTotal
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE';
  @override
  String get actualTableName => 'NFE_DETALHE';
  @override
  VerificationContext validateIntegrity(Insertable<NfeDetalhe> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('NUMERO_ITEM')) {
      context.handle(
          _numeroItemMeta,
          numeroItem.isAcceptableOrUnknown(
              data['NUMERO_ITEM']!, _numeroItemMeta));
    }
    if (data.containsKey('CODIGO_PRODUTO')) {
      context.handle(
          _codigoProdutoMeta,
          codigoProduto.isAcceptableOrUnknown(
              data['CODIGO_PRODUTO']!, _codigoProdutoMeta));
    }
    if (data.containsKey('GTIN')) {
      context.handle(
          _gtinMeta, gtin.isAcceptableOrUnknown(data['GTIN']!, _gtinMeta));
    }
    if (data.containsKey('NOME_PRODUTO')) {
      context.handle(
          _nomeProdutoMeta,
          nomeProduto.isAcceptableOrUnknown(
              data['NOME_PRODUTO']!, _nomeProdutoMeta));
    }
    if (data.containsKey('NCM')) {
      context.handle(
          _ncmMeta, ncm.isAcceptableOrUnknown(data['NCM']!, _ncmMeta));
    }
    if (data.containsKey('NVE')) {
      context.handle(
          _nveMeta, nve.isAcceptableOrUnknown(data['NVE']!, _nveMeta));
    }
    if (data.containsKey('CEST')) {
      context.handle(
          _cestMeta, cest.isAcceptableOrUnknown(data['CEST']!, _cestMeta));
    }
    if (data.containsKey('INDICADOR_ESCALA_RELEVANTE')) {
      context.handle(
          _indicadorEscalaRelevanteMeta,
          indicadorEscalaRelevante.isAcceptableOrUnknown(
              data['INDICADOR_ESCALA_RELEVANTE']!,
              _indicadorEscalaRelevanteMeta));
    }
    if (data.containsKey('CNPJ_FABRICANTE')) {
      context.handle(
          _cnpjFabricanteMeta,
          cnpjFabricante.isAcceptableOrUnknown(
              data['CNPJ_FABRICANTE']!, _cnpjFabricanteMeta));
    }
    if (data.containsKey('CODIGO_BENEFICIO_FISCAL')) {
      context.handle(
          _codigoBeneficioFiscalMeta,
          codigoBeneficioFiscal.isAcceptableOrUnknown(
              data['CODIGO_BENEFICIO_FISCAL']!, _codigoBeneficioFiscalMeta));
    }
    if (data.containsKey('EX_TIPI')) {
      context.handle(_exTipiMeta,
          exTipi.isAcceptableOrUnknown(data['EX_TIPI']!, _exTipiMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
    }
    if (data.containsKey('UNIDADE_COMERCIAL')) {
      context.handle(
          _unidadeComercialMeta,
          unidadeComercial.isAcceptableOrUnknown(
              data['UNIDADE_COMERCIAL']!, _unidadeComercialMeta));
    }
    if (data.containsKey('QUANTIDADE_COMERCIAL')) {
      context.handle(
          _quantidadeComercialMeta,
          quantidadeComercial.isAcceptableOrUnknown(
              data['QUANTIDADE_COMERCIAL']!, _quantidadeComercialMeta));
    }
    if (data.containsKey('NUMERO_PEDIDO_COMPRA')) {
      context.handle(
          _numeroPedidoCompraMeta,
          numeroPedidoCompra.isAcceptableOrUnknown(
              data['NUMERO_PEDIDO_COMPRA']!, _numeroPedidoCompraMeta));
    }
    if (data.containsKey('ITEM_PEDIDO_COMPRA')) {
      context.handle(
          _itemPedidoCompraMeta,
          itemPedidoCompra.isAcceptableOrUnknown(
              data['ITEM_PEDIDO_COMPRA']!, _itemPedidoCompraMeta));
    }
    if (data.containsKey('NUMERO_FCI')) {
      context.handle(_numeroFciMeta,
          numeroFci.isAcceptableOrUnknown(data['NUMERO_FCI']!, _numeroFciMeta));
    }
    if (data.containsKey('NUMERO_RECOPI')) {
      context.handle(
          _numeroRecopiMeta,
          numeroRecopi.isAcceptableOrUnknown(
              data['NUMERO_RECOPI']!, _numeroRecopiMeta));
    }
    if (data.containsKey('VALOR_UNITARIO_COMERCIAL')) {
      context.handle(
          _valorUnitarioComercialMeta,
          valorUnitarioComercial.isAcceptableOrUnknown(
              data['VALOR_UNITARIO_COMERCIAL']!, _valorUnitarioComercialMeta));
    }
    if (data.containsKey('VALOR_BRUTO_PRODUTO')) {
      context.handle(
          _valorBrutoProdutoMeta,
          valorBrutoProduto.isAcceptableOrUnknown(
              data['VALOR_BRUTO_PRODUTO']!, _valorBrutoProdutoMeta));
    }
    if (data.containsKey('GTIN_UNIDADE_TRIBUTAVEL')) {
      context.handle(
          _gtinUnidadeTributavelMeta,
          gtinUnidadeTributavel.isAcceptableOrUnknown(
              data['GTIN_UNIDADE_TRIBUTAVEL']!, _gtinUnidadeTributavelMeta));
    }
    if (data.containsKey('UNIDADE_TRIBUTAVEL')) {
      context.handle(
          _unidadeTributavelMeta,
          unidadeTributavel.isAcceptableOrUnknown(
              data['UNIDADE_TRIBUTAVEL']!, _unidadeTributavelMeta));
    }
    if (data.containsKey('QUANTIDADE_TRIBUTAVEL')) {
      context.handle(
          _quantidadeTributavelMeta,
          quantidadeTributavel.isAcceptableOrUnknown(
              data['QUANTIDADE_TRIBUTAVEL']!, _quantidadeTributavelMeta));
    }
    if (data.containsKey('VALOR_UNITARIO_TRIBUTAVEL')) {
      context.handle(
          _valorUnitarioTributavelMeta,
          valorUnitarioTributavel.isAcceptableOrUnknown(
              data['VALOR_UNITARIO_TRIBUTAVEL']!,
              _valorUnitarioTributavelMeta));
    }
    if (data.containsKey('VALOR_FRETE')) {
      context.handle(
          _valorFreteMeta,
          valorFrete.isAcceptableOrUnknown(
              data['VALOR_FRETE']!, _valorFreteMeta));
    }
    if (data.containsKey('VALOR_SEGURO')) {
      context.handle(
          _valorSeguroMeta,
          valorSeguro.isAcceptableOrUnknown(
              data['VALOR_SEGURO']!, _valorSeguroMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_OUTRAS_DESPESAS')) {
      context.handle(
          _valorOutrasDespesasMeta,
          valorOutrasDespesas.isAcceptableOrUnknown(
              data['VALOR_OUTRAS_DESPESAS']!, _valorOutrasDespesasMeta));
    }
    if (data.containsKey('ENTRA_TOTAL')) {
      context.handle(
          _entraTotalMeta,
          entraTotal.isAcceptableOrUnknown(
              data['ENTRA_TOTAL']!, _entraTotalMeta));
    }
    if (data.containsKey('VALOR_TOTAL_TRIBUTOS')) {
      context.handle(
          _valorTotalTributosMeta,
          valorTotalTributos.isAcceptableOrUnknown(
              data['VALOR_TOTAL_TRIBUTOS']!, _valorTotalTributosMeta));
    }
    if (data.containsKey('PERCENTUAL_DEVOLVIDO')) {
      context.handle(
          _percentualDevolvidoMeta,
          percentualDevolvido.isAcceptableOrUnknown(
              data['PERCENTUAL_DEVOLVIDO']!, _percentualDevolvidoMeta));
    }
    if (data.containsKey('VALOR_IPI_DEVOLVIDO')) {
      context.handle(
          _valorIpiDevolvidoMeta,
          valorIpiDevolvido.isAcceptableOrUnknown(
              data['VALOR_IPI_DEVOLVIDO']!, _valorIpiDevolvidoMeta));
    }
    if (data.containsKey('INFORMACOES_ADICIONAIS')) {
      context.handle(
          _informacoesAdicionaisMeta,
          informacoesAdicionais.isAcceptableOrUnknown(
              data['INFORMACOES_ADICIONAIS']!, _informacoesAdicionaisMeta));
    }
    if (data.containsKey('VALOR_SUBTOTAL')) {
      context.handle(
          _valorSubtotalMeta,
          valorSubtotal.isAcceptableOrUnknown(
              data['VALOR_SUBTOTAL']!, _valorSubtotalMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL']!, _valorTotalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDetalhe.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalhesTable createAlias(String alias) {
    return $NfeDetalhesTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoCofins extends DataClass
    implements Insertable<NfeDetalheImpostoCofins> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cstCofins;
  final double? baseCalculoCofins;
  final double? aliquotaCofinsPercentual;
  final double? quantidadeVendida;
  final double? aliquotaCofinsReais;
  final double? valorCofins;
  NfeDetalheImpostoCofins(
      {this.id,
      this.idNfeDetalhe,
      this.cstCofins,
      this.baseCalculoCofins,
      this.aliquotaCofinsPercentual,
      this.quantidadeVendida,
      this.aliquotaCofinsReais,
      this.valorCofins});
  factory NfeDetalheImpostoCofins.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoCofins(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      cstCofins: ValueSqlType.stringType(data['${effectivePrefix}CST_COFINS']),
      baseCalculoCofins: ValueSqlType.doubleType(
          data['${effectivePrefix}BASE_CALCULO_COFINS']),
      aliquotaCofinsPercentual: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_COFINS_PERCENTUAL']),
      quantidadeVendida: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_VENDIDA']),
      aliquotaCofinsReais: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_COFINS_REAIS']),
      valorCofins: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_COFINS']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cstCofins != null) {
      map['CST_COFINS'] = Variable<String>(cstCofins);
    }
    if (!nullToAbsent || baseCalculoCofins != null) {
      map['BASE_CALCULO_COFINS'] = Variable<double>(baseCalculoCofins);
    }
    if (!nullToAbsent || aliquotaCofinsPercentual != null) {
      map['ALIQUOTA_COFINS_PERCENTUAL'] =
          Variable<double>(aliquotaCofinsPercentual);
    }
    if (!nullToAbsent || quantidadeVendida != null) {
      map['QUANTIDADE_VENDIDA'] = Variable<double>(quantidadeVendida);
    }
    if (!nullToAbsent || aliquotaCofinsReais != null) {
      map['ALIQUOTA_COFINS_REAIS'] = Variable<double>(aliquotaCofinsReais);
    }
    if (!nullToAbsent || valorCofins != null) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins);
    }
    return map;
  }

  NfeDetalheImpostoCofinssCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoCofinssCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      cstCofins: cstCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(cstCofins),
      baseCalculoCofins: baseCalculoCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoCofins),
      aliquotaCofinsPercentual: aliquotaCofinsPercentual == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaCofinsPercentual),
      quantidadeVendida: quantidadeVendida == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeVendida),
      aliquotaCofinsReais: aliquotaCofinsReais == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaCofinsReais),
      valorCofins: valorCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCofins),
    );
  }

  factory NfeDetalheImpostoCofins.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoCofins(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cstCofins: serializer.fromJson<String?>(json['cstCofins']),
      baseCalculoCofins:
          serializer.fromJson<double?>(json['baseCalculoCofins']),
      aliquotaCofinsPercentual:
          serializer.fromJson<double?>(json['aliquotaCofinsPercentual']),
      quantidadeVendida:
          serializer.fromJson<double?>(json['quantidadeVendida']),
      aliquotaCofinsReais:
          serializer.fromJson<double?>(json['aliquotaCofinsReais']),
      valorCofins: serializer.fromJson<double?>(json['valorCofins']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cstCofins': serializer.toJson<String?>(cstCofins),
      'baseCalculoCofins': serializer.toJson<double?>(baseCalculoCofins),
      'aliquotaCofinsPercentual':
          serializer.toJson<double?>(aliquotaCofinsPercentual),
      'quantidadeVendida': serializer.toJson<double?>(quantidadeVendida),
      'aliquotaCofinsReais': serializer.toJson<double?>(aliquotaCofinsReais),
      'valorCofins': serializer.toJson<double?>(valorCofins),
    };
  }

  NfeDetalheImpostoCofins copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? cstCofins,
          double? baseCalculoCofins,
          double? aliquotaCofinsPercentual,
          double? quantidadeVendida,
          double? aliquotaCofinsReais,
          double? valorCofins}) =>
      NfeDetalheImpostoCofins(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        cstCofins: cstCofins ?? this.cstCofins,
        baseCalculoCofins: baseCalculoCofins ?? this.baseCalculoCofins,
        aliquotaCofinsPercentual:
            aliquotaCofinsPercentual ?? this.aliquotaCofinsPercentual,
        quantidadeVendida: quantidadeVendida ?? this.quantidadeVendida,
        aliquotaCofinsReais: aliquotaCofinsReais ?? this.aliquotaCofinsReais,
        valorCofins: valorCofins ?? this.valorCofins,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCofins(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cstCofins: $cstCofins, ')
          ..write('baseCalculoCofins: $baseCalculoCofins, ')
          ..write('aliquotaCofinsPercentual: $aliquotaCofinsPercentual, ')
          ..write('quantidadeVendida: $quantidadeVendida, ')
          ..write('aliquotaCofinsReais: $aliquotaCofinsReais, ')
          ..write('valorCofins: $valorCofins')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeDetalhe,
      cstCofins,
      baseCalculoCofins,
      aliquotaCofinsPercentual,
      quantidadeVendida,
      aliquotaCofinsReais,
      valorCofins);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoCofins &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cstCofins == this.cstCofins &&
          other.baseCalculoCofins == this.baseCalculoCofins &&
          other.aliquotaCofinsPercentual == this.aliquotaCofinsPercentual &&
          other.quantidadeVendida == this.quantidadeVendida &&
          other.aliquotaCofinsReais == this.aliquotaCofinsReais &&
          other.valorCofins == this.valorCofins);
}

class NfeDetalheImpostoCofinssCompanion
    extends UpdateCompanion<NfeDetalheImpostoCofins> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cstCofins;
  final Value<double?> baseCalculoCofins;
  final Value<double?> aliquotaCofinsPercentual;
  final Value<double?> quantidadeVendida;
  final Value<double?> aliquotaCofinsReais;
  final Value<double?> valorCofins;
  const NfeDetalheImpostoCofinssCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cstCofins = const Value.absent(),
    this.baseCalculoCofins = const Value.absent(),
    this.aliquotaCofinsPercentual = const Value.absent(),
    this.quantidadeVendida = const Value.absent(),
    this.aliquotaCofinsReais = const Value.absent(),
    this.valorCofins = const Value.absent(),
  });
  NfeDetalheImpostoCofinssCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cstCofins = const Value.absent(),
    this.baseCalculoCofins = const Value.absent(),
    this.aliquotaCofinsPercentual = const Value.absent(),
    this.quantidadeVendida = const Value.absent(),
    this.aliquotaCofinsReais = const Value.absent(),
    this.valorCofins = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoCofins> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cstCofins,
    Expression<double>? baseCalculoCofins,
    Expression<double>? aliquotaCofinsPercentual,
    Expression<double>? quantidadeVendida,
    Expression<double>? aliquotaCofinsReais,
    Expression<double>? valorCofins,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (cstCofins != null) 'CST_COFINS': cstCofins,
      if (baseCalculoCofins != null) 'BASE_CALCULO_COFINS': baseCalculoCofins,
      if (aliquotaCofinsPercentual != null)
        'ALIQUOTA_COFINS_PERCENTUAL': aliquotaCofinsPercentual,
      if (quantidadeVendida != null) 'QUANTIDADE_VENDIDA': quantidadeVendida,
      if (aliquotaCofinsReais != null)
        'ALIQUOTA_COFINS_REAIS': aliquotaCofinsReais,
      if (valorCofins != null) 'VALOR_COFINS': valorCofins,
    });
  }

  NfeDetalheImpostoCofinssCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? cstCofins,
      Value<double?>? baseCalculoCofins,
      Value<double?>? aliquotaCofinsPercentual,
      Value<double?>? quantidadeVendida,
      Value<double?>? aliquotaCofinsReais,
      Value<double?>? valorCofins}) {
    return NfeDetalheImpostoCofinssCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cstCofins: cstCofins ?? this.cstCofins,
      baseCalculoCofins: baseCalculoCofins ?? this.baseCalculoCofins,
      aliquotaCofinsPercentual:
          aliquotaCofinsPercentual ?? this.aliquotaCofinsPercentual,
      quantidadeVendida: quantidadeVendida ?? this.quantidadeVendida,
      aliquotaCofinsReais: aliquotaCofinsReais ?? this.aliquotaCofinsReais,
      valorCofins: valorCofins ?? this.valorCofins,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cstCofins.present) {
      map['CST_COFINS'] = Variable<String>(cstCofins.value);
    }
    if (baseCalculoCofins.present) {
      map['BASE_CALCULO_COFINS'] = Variable<double>(baseCalculoCofins.value);
    }
    if (aliquotaCofinsPercentual.present) {
      map['ALIQUOTA_COFINS_PERCENTUAL'] =
          Variable<double>(aliquotaCofinsPercentual.value);
    }
    if (quantidadeVendida.present) {
      map['QUANTIDADE_VENDIDA'] = Variable<double>(quantidadeVendida.value);
    }
    if (aliquotaCofinsReais.present) {
      map['ALIQUOTA_COFINS_REAIS'] =
          Variable<double>(aliquotaCofinsReais.value);
    }
    if (valorCofins.present) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCofinssCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cstCofins: $cstCofins, ')
          ..write('baseCalculoCofins: $baseCalculoCofins, ')
          ..write('aliquotaCofinsPercentual: $aliquotaCofinsPercentual, ')
          ..write('quantidadeVendida: $quantidadeVendida, ')
          ..write('aliquotaCofinsReais: $aliquotaCofinsReais, ')
          ..write('valorCofins: $valorCofins')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoCofinssTable extends NfeDetalheImpostoCofinss
    with TableInfo<$NfeDetalheImpostoCofinssTable, NfeDetalheImpostoCofins> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoCofinssTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _cstCofinsMeta = const VerificationMeta('cstCofins');
  @override
  late final GeneratedColumn<String> cstCofins = GeneratedColumn<String>(
      'CST_COFINS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _baseCalculoCofinsMeta =
      const VerificationMeta('baseCalculoCofins');
  @override
  late final GeneratedColumn<double> baseCalculoCofins =
      GeneratedColumn<double>('BASE_CALCULO_COFINS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaCofinsPercentualMeta =
      const VerificationMeta('aliquotaCofinsPercentual');
  @override
  late final GeneratedColumn<double> aliquotaCofinsPercentual =
      GeneratedColumn<double>('ALIQUOTA_COFINS_PERCENTUAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeVendidaMeta =
      const VerificationMeta('quantidadeVendida');
  @override
  late final GeneratedColumn<double> quantidadeVendida =
      GeneratedColumn<double>('QUANTIDADE_VENDIDA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaCofinsReaisMeta =
      const VerificationMeta('aliquotaCofinsReais');
  @override
  late final GeneratedColumn<double> aliquotaCofinsReais =
      GeneratedColumn<double>('ALIQUOTA_COFINS_REAIS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCofinsMeta =
      const VerificationMeta('valorCofins');
  @override
  late final GeneratedColumn<double> valorCofins = GeneratedColumn<double>(
      'VALOR_COFINS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        cstCofins,
        baseCalculoCofins,
        aliquotaCofinsPercentual,
        quantidadeVendida,
        aliquotaCofinsReais,
        valorCofins
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_COFINS';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_COFINS';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoCofins> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('CST_COFINS')) {
      context.handle(_cstCofinsMeta,
          cstCofins.isAcceptableOrUnknown(data['CST_COFINS']!, _cstCofinsMeta));
    }
    if (data.containsKey('BASE_CALCULO_COFINS')) {
      context.handle(
          _baseCalculoCofinsMeta,
          baseCalculoCofins.isAcceptableOrUnknown(
              data['BASE_CALCULO_COFINS']!, _baseCalculoCofinsMeta));
    }
    if (data.containsKey('ALIQUOTA_COFINS_PERCENTUAL')) {
      context.handle(
          _aliquotaCofinsPercentualMeta,
          aliquotaCofinsPercentual.isAcceptableOrUnknown(
              data['ALIQUOTA_COFINS_PERCENTUAL']!,
              _aliquotaCofinsPercentualMeta));
    }
    if (data.containsKey('QUANTIDADE_VENDIDA')) {
      context.handle(
          _quantidadeVendidaMeta,
          quantidadeVendida.isAcceptableOrUnknown(
              data['QUANTIDADE_VENDIDA']!, _quantidadeVendidaMeta));
    }
    if (data.containsKey('ALIQUOTA_COFINS_REAIS')) {
      context.handle(
          _aliquotaCofinsReaisMeta,
          aliquotaCofinsReais.isAcceptableOrUnknown(
              data['ALIQUOTA_COFINS_REAIS']!, _aliquotaCofinsReaisMeta));
    }
    if (data.containsKey('VALOR_COFINS')) {
      context.handle(
          _valorCofinsMeta,
          valorCofins.isAcceptableOrUnknown(
              data['VALOR_COFINS']!, _valorCofinsMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoCofins map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeDetalheImpostoCofins.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoCofinssTable createAlias(String alias) {
    return $NfeDetalheImpostoCofinssTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoCofinsSt extends DataClass
    implements Insertable<NfeDetalheImpostoCofinsSt> {
  final int? id;
  final int? idNfeDetalhe;
  final double? baseCalculoCofinsSt;
  final double? aliquotaCofinsStPercentual;
  final double? quantidadeVendidaCofinsSt;
  final double? aliquotaCofinsStReais;
  final double? valorCofinsSt;
  NfeDetalheImpostoCofinsSt(
      {this.id,
      this.idNfeDetalhe,
      this.baseCalculoCofinsSt,
      this.aliquotaCofinsStPercentual,
      this.quantidadeVendidaCofinsSt,
      this.aliquotaCofinsStReais,
      this.valorCofinsSt});
  factory NfeDetalheImpostoCofinsSt.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoCofinsSt(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      baseCalculoCofinsSt: ValueSqlType.doubleType(
          data['${effectivePrefix}BASE_CALCULO_COFINS_ST']),
      aliquotaCofinsStPercentual: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_COFINS_ST_PERCENTUAL']),
      quantidadeVendidaCofinsSt: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_VENDIDA_COFINS_ST']),
      aliquotaCofinsStReais: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_COFINS_ST_REAIS']),
      valorCofinsSt: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_COFINS_ST']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || baseCalculoCofinsSt != null) {
      map['BASE_CALCULO_COFINS_ST'] = Variable<double>(baseCalculoCofinsSt);
    }
    if (!nullToAbsent || aliquotaCofinsStPercentual != null) {
      map['ALIQUOTA_COFINS_ST_PERCENTUAL'] =
          Variable<double>(aliquotaCofinsStPercentual);
    }
    if (!nullToAbsent || quantidadeVendidaCofinsSt != null) {
      map['QUANTIDADE_VENDIDA_COFINS_ST'] =
          Variable<double>(quantidadeVendidaCofinsSt);
    }
    if (!nullToAbsent || aliquotaCofinsStReais != null) {
      map['ALIQUOTA_COFINS_ST_REAIS'] =
          Variable<double>(aliquotaCofinsStReais);
    }
    if (!nullToAbsent || valorCofinsSt != null) {
      map['VALOR_COFINS_ST'] = Variable<double>(valorCofinsSt);
    }
    return map;
  }

  NfeDetalheImpostoCofinsStsCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoCofinsStsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      baseCalculoCofinsSt: baseCalculoCofinsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoCofinsSt),
      aliquotaCofinsStPercentual:
          aliquotaCofinsStPercentual == null && nullToAbsent
              ? const Value.absent()
              : Value(aliquotaCofinsStPercentual),
      quantidadeVendidaCofinsSt:
          quantidadeVendidaCofinsSt == null && nullToAbsent
              ? const Value.absent()
              : Value(quantidadeVendidaCofinsSt),
      aliquotaCofinsStReais: aliquotaCofinsStReais == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaCofinsStReais),
      valorCofinsSt: valorCofinsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCofinsSt),
    );
  }

  factory NfeDetalheImpostoCofinsSt.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoCofinsSt(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      baseCalculoCofinsSt:
          serializer.fromJson<double?>(json['baseCalculoCofinsSt']),
      aliquotaCofinsStPercentual:
          serializer.fromJson<double?>(json['aliquotaCofinsStPercentual']),
      quantidadeVendidaCofinsSt:
          serializer.fromJson<double?>(json['quantidadeVendidaCofinsSt']),
      aliquotaCofinsStReais:
          serializer.fromJson<double?>(json['aliquotaCofinsStReais']),
      valorCofinsSt: serializer.fromJson<double?>(json['valorCofinsSt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'baseCalculoCofinsSt': serializer.toJson<double?>(baseCalculoCofinsSt),
      'aliquotaCofinsStPercentual':
          serializer.toJson<double?>(aliquotaCofinsStPercentual),
      'quantidadeVendidaCofinsSt':
          serializer.toJson<double?>(quantidadeVendidaCofinsSt),
      'aliquotaCofinsStReais':
          serializer.toJson<double?>(aliquotaCofinsStReais),
      'valorCofinsSt': serializer.toJson<double?>(valorCofinsSt),
    };
  }

  NfeDetalheImpostoCofinsSt copyWith(
          {int? id,
          int? idNfeDetalhe,
          double? baseCalculoCofinsSt,
          double? aliquotaCofinsStPercentual,
          double? quantidadeVendidaCofinsSt,
          double? aliquotaCofinsStReais,
          double? valorCofinsSt}) =>
      NfeDetalheImpostoCofinsSt(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        baseCalculoCofinsSt: baseCalculoCofinsSt ?? this.baseCalculoCofinsSt,
        aliquotaCofinsStPercentual:
            aliquotaCofinsStPercentual ?? this.aliquotaCofinsStPercentual,
        quantidadeVendidaCofinsSt:
            quantidadeVendidaCofinsSt ?? this.quantidadeVendidaCofinsSt,
        aliquotaCofinsStReais:
            aliquotaCofinsStReais ?? this.aliquotaCofinsStReais,
        valorCofinsSt: valorCofinsSt ?? this.valorCofinsSt,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCofinsSt(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('baseCalculoCofinsSt: $baseCalculoCofinsSt, ')
          ..write('aliquotaCofinsStPercentual: $aliquotaCofinsStPercentual, ')
          ..write('quantidadeVendidaCofinsSt: $quantidadeVendidaCofinsSt, ')
          ..write('aliquotaCofinsStReais: $aliquotaCofinsStReais, ')
          ..write('valorCofinsSt: $valorCofinsSt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeDetalhe,
      baseCalculoCofinsSt,
      aliquotaCofinsStPercentual,
      quantidadeVendidaCofinsSt,
      aliquotaCofinsStReais,
      valorCofinsSt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoCofinsSt &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.baseCalculoCofinsSt == this.baseCalculoCofinsSt &&
          other.aliquotaCofinsStPercentual == this.aliquotaCofinsStPercentual &&
          other.quantidadeVendidaCofinsSt == this.quantidadeVendidaCofinsSt &&
          other.aliquotaCofinsStReais == this.aliquotaCofinsStReais &&
          other.valorCofinsSt == this.valorCofinsSt);
}

class NfeDetalheImpostoCofinsStsCompanion
    extends UpdateCompanion<NfeDetalheImpostoCofinsSt> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> baseCalculoCofinsSt;
  final Value<double?> aliquotaCofinsStPercentual;
  final Value<double?> quantidadeVendidaCofinsSt;
  final Value<double?> aliquotaCofinsStReais;
  final Value<double?> valorCofinsSt;
  const NfeDetalheImpostoCofinsStsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.baseCalculoCofinsSt = const Value.absent(),
    this.aliquotaCofinsStPercentual = const Value.absent(),
    this.quantidadeVendidaCofinsSt = const Value.absent(),
    this.aliquotaCofinsStReais = const Value.absent(),
    this.valorCofinsSt = const Value.absent(),
  });
  NfeDetalheImpostoCofinsStsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.baseCalculoCofinsSt = const Value.absent(),
    this.aliquotaCofinsStPercentual = const Value.absent(),
    this.quantidadeVendidaCofinsSt = const Value.absent(),
    this.aliquotaCofinsStReais = const Value.absent(),
    this.valorCofinsSt = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoCofinsSt> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? baseCalculoCofinsSt,
    Expression<double>? aliquotaCofinsStPercentual,
    Expression<double>? quantidadeVendidaCofinsSt,
    Expression<double>? aliquotaCofinsStReais,
    Expression<double>? valorCofinsSt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (baseCalculoCofinsSt != null)
        'BASE_CALCULO_COFINS_ST': baseCalculoCofinsSt,
      if (aliquotaCofinsStPercentual != null)
        'ALIQUOTA_COFINS_ST_PERCENTUAL': aliquotaCofinsStPercentual,
      if (quantidadeVendidaCofinsSt != null)
        'QUANTIDADE_VENDIDA_COFINS_ST': quantidadeVendidaCofinsSt,
      if (aliquotaCofinsStReais != null)
        'ALIQUOTA_COFINS_ST_REAIS': aliquotaCofinsStReais,
      if (valorCofinsSt != null) 'VALOR_COFINS_ST': valorCofinsSt,
    });
  }

  NfeDetalheImpostoCofinsStsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<double?>? baseCalculoCofinsSt,
      Value<double?>? aliquotaCofinsStPercentual,
      Value<double?>? quantidadeVendidaCofinsSt,
      Value<double?>? aliquotaCofinsStReais,
      Value<double?>? valorCofinsSt}) {
    return NfeDetalheImpostoCofinsStsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      baseCalculoCofinsSt: baseCalculoCofinsSt ?? this.baseCalculoCofinsSt,
      aliquotaCofinsStPercentual:
          aliquotaCofinsStPercentual ?? this.aliquotaCofinsStPercentual,
      quantidadeVendidaCofinsSt:
          quantidadeVendidaCofinsSt ?? this.quantidadeVendidaCofinsSt,
      aliquotaCofinsStReais:
          aliquotaCofinsStReais ?? this.aliquotaCofinsStReais,
      valorCofinsSt: valorCofinsSt ?? this.valorCofinsSt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (baseCalculoCofinsSt.present) {
      map['BASE_CALCULO_COFINS_ST'] =
          Variable<double>(baseCalculoCofinsSt.value);
    }
    if (aliquotaCofinsStPercentual.present) {
      map['ALIQUOTA_COFINS_ST_PERCENTUAL'] =
          Variable<double>(aliquotaCofinsStPercentual.value);
    }
    if (quantidadeVendidaCofinsSt.present) {
      map['QUANTIDADE_VENDIDA_COFINS_ST'] =
          Variable<double>(quantidadeVendidaCofinsSt.value);
    }
    if (aliquotaCofinsStReais.present) {
      map['ALIQUOTA_COFINS_ST_REAIS'] =
          Variable<double>(aliquotaCofinsStReais.value);
    }
    if (valorCofinsSt.present) {
      map['VALOR_COFINS_ST'] = Variable<double>(valorCofinsSt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoCofinsStsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('baseCalculoCofinsSt: $baseCalculoCofinsSt, ')
          ..write('aliquotaCofinsStPercentual: $aliquotaCofinsStPercentual, ')
          ..write('quantidadeVendidaCofinsSt: $quantidadeVendidaCofinsSt, ')
          ..write('aliquotaCofinsStReais: $aliquotaCofinsStReais, ')
          ..write('valorCofinsSt: $valorCofinsSt')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoCofinsStsTable extends NfeDetalheImpostoCofinsSts
    with
        TableInfo<$NfeDetalheImpostoCofinsStsTable, NfeDetalheImpostoCofinsSt> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoCofinsStsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _baseCalculoCofinsStMeta =
      const VerificationMeta('baseCalculoCofinsSt');
  @override
  late final GeneratedColumn<double> baseCalculoCofinsSt =
      GeneratedColumn<double>('BASE_CALCULO_COFINS_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaCofinsStPercentualMeta =
      const VerificationMeta('aliquotaCofinsStPercentual');
  @override
  late final GeneratedColumn<double> aliquotaCofinsStPercentual =
      GeneratedColumn<double>(
          'ALIQUOTA_COFINS_ST_PERCENTUAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeVendidaCofinsStMeta =
      const VerificationMeta('quantidadeVendidaCofinsSt');
  @override
  late final GeneratedColumn<double> quantidadeVendidaCofinsSt =
      GeneratedColumn<double>(
          'QUANTIDADE_VENDIDA_COFINS_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaCofinsStReaisMeta =
      const VerificationMeta('aliquotaCofinsStReais');
  @override
  late final GeneratedColumn<double> aliquotaCofinsStReais =
      GeneratedColumn<double>('ALIQUOTA_COFINS_ST_REAIS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCofinsStMeta =
      const VerificationMeta('valorCofinsSt');
  @override
  late final GeneratedColumn<double> valorCofinsSt = GeneratedColumn<double>(
      'VALOR_COFINS_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        baseCalculoCofinsSt,
        aliquotaCofinsStPercentual,
        quantidadeVendidaCofinsSt,
        aliquotaCofinsStReais,
        valorCofinsSt
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_COFINS_ST';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_COFINS_ST';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoCofinsSt> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('BASE_CALCULO_COFINS_ST')) {
      context.handle(
          _baseCalculoCofinsStMeta,
          baseCalculoCofinsSt.isAcceptableOrUnknown(
              data['BASE_CALCULO_COFINS_ST']!, _baseCalculoCofinsStMeta));
    }
    if (data.containsKey('ALIQUOTA_COFINS_ST_PERCENTUAL')) {
      context.handle(
          _aliquotaCofinsStPercentualMeta,
          aliquotaCofinsStPercentual.isAcceptableOrUnknown(
              data['ALIQUOTA_COFINS_ST_PERCENTUAL']!,
              _aliquotaCofinsStPercentualMeta));
    }
    if (data.containsKey('QUANTIDADE_VENDIDA_COFINS_ST')) {
      context.handle(
          _quantidadeVendidaCofinsStMeta,
          quantidadeVendidaCofinsSt.isAcceptableOrUnknown(
              data['QUANTIDADE_VENDIDA_COFINS_ST']!,
              _quantidadeVendidaCofinsStMeta));
    }
    if (data.containsKey('ALIQUOTA_COFINS_ST_REAIS')) {
      context.handle(
          _aliquotaCofinsStReaisMeta,
          aliquotaCofinsStReais.isAcceptableOrUnknown(
              data['ALIQUOTA_COFINS_ST_REAIS']!, _aliquotaCofinsStReaisMeta));
    }
    if (data.containsKey('VALOR_COFINS_ST')) {
      context.handle(
          _valorCofinsStMeta,
          valorCofinsSt.isAcceptableOrUnknown(
              data['VALOR_COFINS_ST']!, _valorCofinsStMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoCofinsSt map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeDetalheImpostoCofinsSt.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoCofinsStsTable createAlias(String alias) {
    return $NfeDetalheImpostoCofinsStsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIcms extends DataClass
    implements Insertable<NfeDetalheImpostoIcms> {
  final int? id;
  final int? idNfeDetalhe;
  final String? origemMercadoria;
  final String? cstIcms;
  final String? csosn;
  final String? modalidadeBcIcms;
  final double? percentualReducaoBcIcms;
  final double? valorBcIcms;
  final double? aliquotaIcms;
  final double? valorIcmsOperacao;
  final double? percentualDiferimento;
  final double? valorIcmsDiferido;
  final double? valorIcms;
  final double? baseCalculoFcp;
  final double? percentualFcp;
  final double? valorFcp;
  final String? modalidadeBcIcmsSt;
  final double? percentualMvaIcmsSt;
  final double? percentualReducaoBcIcmsSt;
  final double? valorBaseCalculoIcmsSt;
  final double? aliquotaIcmsSt;
  final double? valorIcmsSt;
  final double? baseCalculoFcpSt;
  final double? percentualFcpSt;
  final double? valorFcpSt;
  final String? ufSt;
  final double? percentualBcOperacaoPropria;
  final double? valorBcIcmsStRetido;
  final double? aliquotaSuportadaConsumidor;
  final double? valorIcmsSubstituto;
  final double? valorIcmsStRetido;
  final double? baseCalculoFcpStRetido;
  final double? percentualFcpStRetido;
  final double? valorFcpStRetido;
  final String? motivoDesoneracaoIcms;
  final double? valorIcmsDesonerado;
  final double? aliquotaCreditoIcmsSn;
  final double? valorCreditoIcmsSn;
  final double? valorBcIcmsStDestino;
  final double? valorIcmsStDestino;
  final double? percentualReducaoBcEfetivo;
  final double? valorBcEfetivo;
  final double? aliquotaIcmsEfetivo;
  final double? valorIcmsEfetivo;
  NfeDetalheImpostoIcms(
      {this.id,
      this.idNfeDetalhe,
      this.origemMercadoria,
      this.cstIcms,
      this.csosn,
      this.modalidadeBcIcms,
      this.percentualReducaoBcIcms,
      this.valorBcIcms,
      this.aliquotaIcms,
      this.valorIcmsOperacao,
      this.percentualDiferimento,
      this.valorIcmsDiferido,
      this.valorIcms,
      this.baseCalculoFcp,
      this.percentualFcp,
      this.valorFcp,
      this.modalidadeBcIcmsSt,
      this.percentualMvaIcmsSt,
      this.percentualReducaoBcIcmsSt,
      this.valorBaseCalculoIcmsSt,
      this.aliquotaIcmsSt,
      this.valorIcmsSt,
      this.baseCalculoFcpSt,
      this.percentualFcpSt,
      this.valorFcpSt,
      this.ufSt,
      this.percentualBcOperacaoPropria,
      this.valorBcIcmsStRetido,
      this.aliquotaSuportadaConsumidor,
      this.valorIcmsSubstituto,
      this.valorIcmsStRetido,
      this.baseCalculoFcpStRetido,
      this.percentualFcpStRetido,
      this.valorFcpStRetido,
      this.motivoDesoneracaoIcms,
      this.valorIcmsDesonerado,
      this.aliquotaCreditoIcmsSn,
      this.valorCreditoIcmsSn,
      this.valorBcIcmsStDestino,
      this.valorIcmsStDestino,
      this.percentualReducaoBcEfetivo,
      this.valorBcEfetivo,
      this.aliquotaIcmsEfetivo,
      this.valorIcmsEfetivo});
  factory NfeDetalheImpostoIcms.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoIcms(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      origemMercadoria: ValueSqlType.stringType(data['${effectivePrefix}ORIGEM_MERCADORIA']),
      cstIcms: ValueSqlType.stringType(data['${effectivePrefix}CST_ICMS']),
      csosn: ValueSqlType.stringType(data['${effectivePrefix}CSOSN']),
      modalidadeBcIcms: ValueSqlType.stringType(
          data['${effectivePrefix}MODALIDADE_BC_ICMS']),
      percentualReducaoBcIcms: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_REDUCAO_BC_ICMS']),
      valorBcIcms: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_BC_ICMS']),
      aliquotaIcms: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_ICMS']),
      valorIcmsOperacao: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_OPERACAO']),
      percentualDiferimento: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_DIFERIMENTO']),
      valorIcmsDiferido: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_DIFERIDO']),
      valorIcms: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ICMS']),
      baseCalculoFcp: ValueSqlType.doubleType(data['${effectivePrefix}BASE_CALCULO_FCP']),
      percentualFcp: ValueSqlType.doubleType(data['${effectivePrefix}PERCENTUAL_FCP']),
      valorFcp: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_FCP']),
      modalidadeBcIcmsSt: ValueSqlType.stringType(
          data['${effectivePrefix}MODALIDADE_BC_ICMS_ST']),
      percentualMvaIcmsSt: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_MVA_ICMS_ST']),
      percentualReducaoBcIcmsSt: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_REDUCAO_BC_ICMS_ST']),
      valorBaseCalculoIcmsSt: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BASE_CALCULO_ICMS_ST']),
      aliquotaIcmsSt: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_ICMS_ST']),
      valorIcmsSt: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ICMS_ST']),
      baseCalculoFcpSt: ValueSqlType.doubleType(
          data['${effectivePrefix}BASE_CALCULO_FCP_ST']),
      percentualFcpSt: ValueSqlType.doubleType(data['${effectivePrefix}PERCENTUAL_FCP_ST']),
      valorFcpSt: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_FCP_ST']),
      ufSt: ValueSqlType.stringType(data['${effectivePrefix}UF_ST']),
      percentualBcOperacaoPropria: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_BC_OPERACAO_PROPRIA']),
      valorBcIcmsStRetido: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BC_ICMS_ST_RETIDO']),
      aliquotaSuportadaConsumidor: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_SUPORTADA_CONSUMIDOR']),
      valorIcmsSubstituto: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_SUBSTITUTO']),
      valorIcmsStRetido: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_ST_RETIDO']),
      baseCalculoFcpStRetido: ValueSqlType.doubleType(
          data['${effectivePrefix}BASE_CALCULO_FCP_ST_RETIDO']),
      percentualFcpStRetido: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_FCP_ST_RETIDO']),
      valorFcpStRetido: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_FCP_ST_RETIDO']),
      motivoDesoneracaoIcms: ValueSqlType.stringType(
          data['${effectivePrefix}MOTIVO_DESONERACAO_ICMS']),
      valorIcmsDesonerado: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_DESONERADO']),
      aliquotaCreditoIcmsSn: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_CREDITO_ICMS_SN']),
      valorCreditoIcmsSn: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_CREDITO_ICMS_SN']),
      valorBcIcmsStDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BC_ICMS_ST_DESTINO']),
      valorIcmsStDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_ST_DESTINO']),
      percentualReducaoBcEfetivo: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_REDUCAO_BC_EFETIVO']),
      valorBcEfetivo: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_BC_EFETIVO']),
      aliquotaIcmsEfetivo: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_ICMS_EFETIVO']),
      valorIcmsEfetivo: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_EFETIVO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || origemMercadoria != null) {
      map['ORIGEM_MERCADORIA'] = Variable<String>(origemMercadoria);
    }
    if (!nullToAbsent || cstIcms != null) {
      map['CST_ICMS'] = Variable<String>(cstIcms);
    }
    if (!nullToAbsent || csosn != null) {
      map['CSOSN'] = Variable<String>(csosn);
    }
    if (!nullToAbsent || modalidadeBcIcms != null) {
      map['MODALIDADE_BC_ICMS'] = Variable<String>(modalidadeBcIcms);
    }
    if (!nullToAbsent || percentualReducaoBcIcms != null) {
      map['PERCENTUAL_REDUCAO_BC_ICMS'] =
          Variable<double>(percentualReducaoBcIcms);
    }
    if (!nullToAbsent || valorBcIcms != null) {
      map['VALOR_BC_ICMS'] = Variable<double>(valorBcIcms);
    }
    if (!nullToAbsent || aliquotaIcms != null) {
      map['ALIQUOTA_ICMS'] = Variable<double>(aliquotaIcms);
    }
    if (!nullToAbsent || valorIcmsOperacao != null) {
      map['VALOR_ICMS_OPERACAO'] = Variable<double>(valorIcmsOperacao);
    }
    if (!nullToAbsent || percentualDiferimento != null) {
      map['PERCENTUAL_DIFERIMENTO'] = Variable<double>(percentualDiferimento);
    }
    if (!nullToAbsent || valorIcmsDiferido != null) {
      map['VALOR_ICMS_DIFERIDO'] = Variable<double>(valorIcmsDiferido);
    }
    if (!nullToAbsent || valorIcms != null) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms);
    }
    if (!nullToAbsent || baseCalculoFcp != null) {
      map['BASE_CALCULO_FCP'] = Variable<double>(baseCalculoFcp);
    }
    if (!nullToAbsent || percentualFcp != null) {
      map['PERCENTUAL_FCP'] = Variable<double>(percentualFcp);
    }
    if (!nullToAbsent || valorFcp != null) {
      map['VALOR_FCP'] = Variable<double>(valorFcp);
    }
    if (!nullToAbsent || modalidadeBcIcmsSt != null) {
      map['MODALIDADE_BC_ICMS_ST'] = Variable<String>(modalidadeBcIcmsSt);
    }
    if (!nullToAbsent || percentualMvaIcmsSt != null) {
      map['PERCENTUAL_MVA_ICMS_ST'] = Variable<double>(percentualMvaIcmsSt);
    }
    if (!nullToAbsent || percentualReducaoBcIcmsSt != null) {
      map['PERCENTUAL_REDUCAO_BC_ICMS_ST'] =
          Variable<double>(percentualReducaoBcIcmsSt);
    }
    if (!nullToAbsent || valorBaseCalculoIcmsSt != null) {
      map['VALOR_BASE_CALCULO_ICMS_ST'] =
          Variable<double>(valorBaseCalculoIcmsSt);
    }
    if (!nullToAbsent || aliquotaIcmsSt != null) {
      map['ALIQUOTA_ICMS_ST'] = Variable<double>(aliquotaIcmsSt);
    }
    if (!nullToAbsent || valorIcmsSt != null) {
      map['VALOR_ICMS_ST'] = Variable<double>(valorIcmsSt);
    }
    if (!nullToAbsent || baseCalculoFcpSt != null) {
      map['BASE_CALCULO_FCP_ST'] = Variable<double>(baseCalculoFcpSt);
    }
    if (!nullToAbsent || percentualFcpSt != null) {
      map['PERCENTUAL_FCP_ST'] = Variable<double>(percentualFcpSt);
    }
    if (!nullToAbsent || valorFcpSt != null) {
      map['VALOR_FCP_ST'] = Variable<double>(valorFcpSt);
    }
    if (!nullToAbsent || ufSt != null) {
      map['UF_ST'] = Variable<String>(ufSt);
    }
    if (!nullToAbsent || percentualBcOperacaoPropria != null) {
      map['PERCENTUAL_BC_OPERACAO_PROPRIA'] =
          Variable<double>(percentualBcOperacaoPropria);
    }
    if (!nullToAbsent || valorBcIcmsStRetido != null) {
      map['VALOR_BC_ICMS_ST_RETIDO'] = Variable<double>(valorBcIcmsStRetido);
    }
    if (!nullToAbsent || aliquotaSuportadaConsumidor != null) {
      map['ALIQUOTA_SUPORTADA_CONSUMIDOR'] =
          Variable<double>(aliquotaSuportadaConsumidor);
    }
    if (!nullToAbsent || valorIcmsSubstituto != null) {
      map['VALOR_ICMS_SUBSTITUTO'] = Variable<double>(valorIcmsSubstituto);
    }
    if (!nullToAbsent || valorIcmsStRetido != null) {
      map['VALOR_ICMS_ST_RETIDO'] = Variable<double>(valorIcmsStRetido);
    }
    if (!nullToAbsent || baseCalculoFcpStRetido != null) {
      map['BASE_CALCULO_FCP_ST_RETIDO'] =
          Variable<double>(baseCalculoFcpStRetido);
    }
    if (!nullToAbsent || percentualFcpStRetido != null) {
      map['PERCENTUAL_FCP_ST_RETIDO'] =
          Variable<double>(percentualFcpStRetido);
    }
    if (!nullToAbsent || valorFcpStRetido != null) {
      map['VALOR_FCP_ST_RETIDO'] = Variable<double>(valorFcpStRetido);
    }
    if (!nullToAbsent || motivoDesoneracaoIcms != null) {
      map['MOTIVO_DESONERACAO_ICMS'] = Variable<String>(motivoDesoneracaoIcms);
    }
    if (!nullToAbsent || valorIcmsDesonerado != null) {
      map['VALOR_ICMS_DESONERADO'] = Variable<double>(valorIcmsDesonerado);
    }
    if (!nullToAbsent || aliquotaCreditoIcmsSn != null) {
      map['ALIQUOTA_CREDITO_ICMS_SN'] =
          Variable<double>(aliquotaCreditoIcmsSn);
    }
    if (!nullToAbsent || valorCreditoIcmsSn != null) {
      map['VALOR_CREDITO_ICMS_SN'] = Variable<double>(valorCreditoIcmsSn);
    }
    if (!nullToAbsent || valorBcIcmsStDestino != null) {
      map['VALOR_BC_ICMS_ST_DESTINO'] = Variable<double>(valorBcIcmsStDestino);
    }
    if (!nullToAbsent || valorIcmsStDestino != null) {
      map['VALOR_ICMS_ST_DESTINO'] = Variable<double>(valorIcmsStDestino);
    }
    if (!nullToAbsent || percentualReducaoBcEfetivo != null) {
      map['PERCENTUAL_REDUCAO_BC_EFETIVO'] =
          Variable<double>(percentualReducaoBcEfetivo);
    }
    if (!nullToAbsent || valorBcEfetivo != null) {
      map['VALOR_BC_EFETIVO'] = Variable<double>(valorBcEfetivo);
    }
    if (!nullToAbsent || aliquotaIcmsEfetivo != null) {
      map['ALIQUOTA_ICMS_EFETIVO'] = Variable<double>(aliquotaIcmsEfetivo);
    }
    if (!nullToAbsent || valorIcmsEfetivo != null) {
      map['VALOR_ICMS_EFETIVO'] = Variable<double>(valorIcmsEfetivo);
    }
    return map;
  }

  NfeDetalheImpostoIcmssCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoIcmssCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      origemMercadoria: origemMercadoria == null && nullToAbsent
          ? const Value.absent()
          : Value(origemMercadoria),
      cstIcms: cstIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(cstIcms),
      csosn:
          csosn == null && nullToAbsent ? const Value.absent() : Value(csosn),
      modalidadeBcIcms: modalidadeBcIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBcIcms),
      percentualReducaoBcIcms: percentualReducaoBcIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualReducaoBcIcms),
      valorBcIcms: valorBcIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBcIcms),
      aliquotaIcms: aliquotaIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaIcms),
      valorIcmsOperacao: valorIcmsOperacao == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsOperacao),
      percentualDiferimento: percentualDiferimento == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualDiferimento),
      valorIcmsDiferido: valorIcmsDiferido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsDiferido),
      valorIcms: valorIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcms),
      baseCalculoFcp: baseCalculoFcp == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoFcp),
      percentualFcp: percentualFcp == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualFcp),
      valorFcp: valorFcp == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFcp),
      modalidadeBcIcmsSt: modalidadeBcIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBcIcmsSt),
      percentualMvaIcmsSt: percentualMvaIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualMvaIcmsSt),
      percentualReducaoBcIcmsSt:
          percentualReducaoBcIcmsSt == null && nullToAbsent
              ? const Value.absent()
              : Value(percentualReducaoBcIcmsSt),
      valorBaseCalculoIcmsSt: valorBaseCalculoIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBaseCalculoIcmsSt),
      aliquotaIcmsSt: aliquotaIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaIcmsSt),
      valorIcmsSt: valorIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsSt),
      baseCalculoFcpSt: baseCalculoFcpSt == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoFcpSt),
      percentualFcpSt: percentualFcpSt == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualFcpSt),
      valorFcpSt: valorFcpSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFcpSt),
      ufSt: ufSt == null && nullToAbsent ? const Value.absent() : Value(ufSt),
      percentualBcOperacaoPropria:
          percentualBcOperacaoPropria == null && nullToAbsent
              ? const Value.absent()
              : Value(percentualBcOperacaoPropria),
      valorBcIcmsStRetido: valorBcIcmsStRetido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBcIcmsStRetido),
      aliquotaSuportadaConsumidor:
          aliquotaSuportadaConsumidor == null && nullToAbsent
              ? const Value.absent()
              : Value(aliquotaSuportadaConsumidor),
      valorIcmsSubstituto: valorIcmsSubstituto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsSubstituto),
      valorIcmsStRetido: valorIcmsStRetido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsStRetido),
      baseCalculoFcpStRetido: baseCalculoFcpStRetido == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoFcpStRetido),
      percentualFcpStRetido: percentualFcpStRetido == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualFcpStRetido),
      valorFcpStRetido: valorFcpStRetido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFcpStRetido),
      motivoDesoneracaoIcms: motivoDesoneracaoIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(motivoDesoneracaoIcms),
      valorIcmsDesonerado: valorIcmsDesonerado == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsDesonerado),
      aliquotaCreditoIcmsSn: aliquotaCreditoIcmsSn == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaCreditoIcmsSn),
      valorCreditoIcmsSn: valorCreditoIcmsSn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCreditoIcmsSn),
      valorBcIcmsStDestino: valorBcIcmsStDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBcIcmsStDestino),
      valorIcmsStDestino: valorIcmsStDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsStDestino),
      percentualReducaoBcEfetivo:
          percentualReducaoBcEfetivo == null && nullToAbsent
              ? const Value.absent()
              : Value(percentualReducaoBcEfetivo),
      valorBcEfetivo: valorBcEfetivo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBcEfetivo),
      aliquotaIcmsEfetivo: aliquotaIcmsEfetivo == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaIcmsEfetivo),
      valorIcmsEfetivo: valorIcmsEfetivo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsEfetivo),
    );
  }

  factory NfeDetalheImpostoIcms.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIcms(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      origemMercadoria: serializer.fromJson<String?>(json['origemMercadoria']),
      cstIcms: serializer.fromJson<String?>(json['cstIcms']),
      csosn: serializer.fromJson<String?>(json['csosn']),
      modalidadeBcIcms: serializer.fromJson<String?>(json['modalidadeBcIcms']),
      percentualReducaoBcIcms:
          serializer.fromJson<double?>(json['percentualReducaoBcIcms']),
      valorBcIcms: serializer.fromJson<double?>(json['valorBcIcms']),
      aliquotaIcms: serializer.fromJson<double?>(json['aliquotaIcms']),
      valorIcmsOperacao:
          serializer.fromJson<double?>(json['valorIcmsOperacao']),
      percentualDiferimento:
          serializer.fromJson<double?>(json['percentualDiferimento']),
      valorIcmsDiferido:
          serializer.fromJson<double?>(json['valorIcmsDiferido']),
      valorIcms: serializer.fromJson<double?>(json['valorIcms']),
      baseCalculoFcp: serializer.fromJson<double?>(json['baseCalculoFcp']),
      percentualFcp: serializer.fromJson<double?>(json['percentualFcp']),
      valorFcp: serializer.fromJson<double?>(json['valorFcp']),
      modalidadeBcIcmsSt:
          serializer.fromJson<String?>(json['modalidadeBcIcmsSt']),
      percentualMvaIcmsSt:
          serializer.fromJson<double?>(json['percentualMvaIcmsSt']),
      percentualReducaoBcIcmsSt:
          serializer.fromJson<double?>(json['percentualReducaoBcIcmsSt']),
      valorBaseCalculoIcmsSt:
          serializer.fromJson<double?>(json['valorBaseCalculoIcmsSt']),
      aliquotaIcmsSt: serializer.fromJson<double?>(json['aliquotaIcmsSt']),
      valorIcmsSt: serializer.fromJson<double?>(json['valorIcmsSt']),
      baseCalculoFcpSt: serializer.fromJson<double?>(json['baseCalculoFcpSt']),
      percentualFcpSt: serializer.fromJson<double?>(json['percentualFcpSt']),
      valorFcpSt: serializer.fromJson<double?>(json['valorFcpSt']),
      ufSt: serializer.fromJson<String?>(json['ufSt']),
      percentualBcOperacaoPropria:
          serializer.fromJson<double?>(json['percentualBcOperacaoPropria']),
      valorBcIcmsStRetido:
          serializer.fromJson<double?>(json['valorBcIcmsStRetido']),
      aliquotaSuportadaConsumidor:
          serializer.fromJson<double?>(json['aliquotaSuportadaConsumidor']),
      valorIcmsSubstituto:
          serializer.fromJson<double?>(json['valorIcmsSubstituto']),
      valorIcmsStRetido:
          serializer.fromJson<double?>(json['valorIcmsStRetido']),
      baseCalculoFcpStRetido:
          serializer.fromJson<double?>(json['baseCalculoFcpStRetido']),
      percentualFcpStRetido:
          serializer.fromJson<double?>(json['percentualFcpStRetido']),
      valorFcpStRetido: serializer.fromJson<double?>(json['valorFcpStRetido']),
      motivoDesoneracaoIcms:
          serializer.fromJson<String?>(json['motivoDesoneracaoIcms']),
      valorIcmsDesonerado:
          serializer.fromJson<double?>(json['valorIcmsDesonerado']),
      aliquotaCreditoIcmsSn:
          serializer.fromJson<double?>(json['aliquotaCreditoIcmsSn']),
      valorCreditoIcmsSn:
          serializer.fromJson<double?>(json['valorCreditoIcmsSn']),
      valorBcIcmsStDestino:
          serializer.fromJson<double?>(json['valorBcIcmsStDestino']),
      valorIcmsStDestino:
          serializer.fromJson<double?>(json['valorIcmsStDestino']),
      percentualReducaoBcEfetivo:
          serializer.fromJson<double?>(json['percentualReducaoBcEfetivo']),
      valorBcEfetivo: serializer.fromJson<double?>(json['valorBcEfetivo']),
      aliquotaIcmsEfetivo:
          serializer.fromJson<double?>(json['aliquotaIcmsEfetivo']),
      valorIcmsEfetivo: serializer.fromJson<double?>(json['valorIcmsEfetivo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'origemMercadoria': serializer.toJson<String?>(origemMercadoria),
      'cstIcms': serializer.toJson<String?>(cstIcms),
      'csosn': serializer.toJson<String?>(csosn),
      'modalidadeBcIcms': serializer.toJson<String?>(modalidadeBcIcms),
      'percentualReducaoBcIcms':
          serializer.toJson<double?>(percentualReducaoBcIcms),
      'valorBcIcms': serializer.toJson<double?>(valorBcIcms),
      'aliquotaIcms': serializer.toJson<double?>(aliquotaIcms),
      'valorIcmsOperacao': serializer.toJson<double?>(valorIcmsOperacao),
      'percentualDiferimento':
          serializer.toJson<double?>(percentualDiferimento),
      'valorIcmsDiferido': serializer.toJson<double?>(valorIcmsDiferido),
      'valorIcms': serializer.toJson<double?>(valorIcms),
      'baseCalculoFcp': serializer.toJson<double?>(baseCalculoFcp),
      'percentualFcp': serializer.toJson<double?>(percentualFcp),
      'valorFcp': serializer.toJson<double?>(valorFcp),
      'modalidadeBcIcmsSt': serializer.toJson<String?>(modalidadeBcIcmsSt),
      'percentualMvaIcmsSt': serializer.toJson<double?>(percentualMvaIcmsSt),
      'percentualReducaoBcIcmsSt':
          serializer.toJson<double?>(percentualReducaoBcIcmsSt),
      'valorBaseCalculoIcmsSt':
          serializer.toJson<double?>(valorBaseCalculoIcmsSt),
      'aliquotaIcmsSt': serializer.toJson<double?>(aliquotaIcmsSt),
      'valorIcmsSt': serializer.toJson<double?>(valorIcmsSt),
      'baseCalculoFcpSt': serializer.toJson<double?>(baseCalculoFcpSt),
      'percentualFcpSt': serializer.toJson<double?>(percentualFcpSt),
      'valorFcpSt': serializer.toJson<double?>(valorFcpSt),
      'ufSt': serializer.toJson<String?>(ufSt),
      'percentualBcOperacaoPropria':
          serializer.toJson<double?>(percentualBcOperacaoPropria),
      'valorBcIcmsStRetido': serializer.toJson<double?>(valorBcIcmsStRetido),
      'aliquotaSuportadaConsumidor':
          serializer.toJson<double?>(aliquotaSuportadaConsumidor),
      'valorIcmsSubstituto': serializer.toJson<double?>(valorIcmsSubstituto),
      'valorIcmsStRetido': serializer.toJson<double?>(valorIcmsStRetido),
      'baseCalculoFcpStRetido':
          serializer.toJson<double?>(baseCalculoFcpStRetido),
      'percentualFcpStRetido':
          serializer.toJson<double?>(percentualFcpStRetido),
      'valorFcpStRetido': serializer.toJson<double?>(valorFcpStRetido),
      'motivoDesoneracaoIcms':
          serializer.toJson<String?>(motivoDesoneracaoIcms),
      'valorIcmsDesonerado': serializer.toJson<double?>(valorIcmsDesonerado),
      'aliquotaCreditoIcmsSn':
          serializer.toJson<double?>(aliquotaCreditoIcmsSn),
      'valorCreditoIcmsSn': serializer.toJson<double?>(valorCreditoIcmsSn),
      'valorBcIcmsStDestino': serializer.toJson<double?>(valorBcIcmsStDestino),
      'valorIcmsStDestino': serializer.toJson<double?>(valorIcmsStDestino),
      'percentualReducaoBcEfetivo':
          serializer.toJson<double?>(percentualReducaoBcEfetivo),
      'valorBcEfetivo': serializer.toJson<double?>(valorBcEfetivo),
      'aliquotaIcmsEfetivo': serializer.toJson<double?>(aliquotaIcmsEfetivo),
      'valorIcmsEfetivo': serializer.toJson<double?>(valorIcmsEfetivo),
    };
  }

  NfeDetalheImpostoIcms copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? origemMercadoria,
          String? cstIcms,
          String? csosn,
          String? modalidadeBcIcms,
          double? percentualReducaoBcIcms,
          double? valorBcIcms,
          double? aliquotaIcms,
          double? valorIcmsOperacao,
          double? percentualDiferimento,
          double? valorIcmsDiferido,
          double? valorIcms,
          double? baseCalculoFcp,
          double? percentualFcp,
          double? valorFcp,
          String? modalidadeBcIcmsSt,
          double? percentualMvaIcmsSt,
          double? percentualReducaoBcIcmsSt,
          double? valorBaseCalculoIcmsSt,
          double? aliquotaIcmsSt,
          double? valorIcmsSt,
          double? baseCalculoFcpSt,
          double? percentualFcpSt,
          double? valorFcpSt,
          String? ufSt,
          double? percentualBcOperacaoPropria,
          double? valorBcIcmsStRetido,
          double? aliquotaSuportadaConsumidor,
          double? valorIcmsSubstituto,
          double? valorIcmsStRetido,
          double? baseCalculoFcpStRetido,
          double? percentualFcpStRetido,
          double? valorFcpStRetido,
          String? motivoDesoneracaoIcms,
          double? valorIcmsDesonerado,
          double? aliquotaCreditoIcmsSn,
          double? valorCreditoIcmsSn,
          double? valorBcIcmsStDestino,
          double? valorIcmsStDestino,
          double? percentualReducaoBcEfetivo,
          double? valorBcEfetivo,
          double? aliquotaIcmsEfetivo,
          double? valorIcmsEfetivo}) =>
      NfeDetalheImpostoIcms(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        origemMercadoria: origemMercadoria ?? this.origemMercadoria,
        cstIcms: cstIcms ?? this.cstIcms,
        csosn: csosn ?? this.csosn,
        modalidadeBcIcms: modalidadeBcIcms ?? this.modalidadeBcIcms,
        percentualReducaoBcIcms:
            percentualReducaoBcIcms ?? this.percentualReducaoBcIcms,
        valorBcIcms: valorBcIcms ?? this.valorBcIcms,
        aliquotaIcms: aliquotaIcms ?? this.aliquotaIcms,
        valorIcmsOperacao: valorIcmsOperacao ?? this.valorIcmsOperacao,
        percentualDiferimento:
            percentualDiferimento ?? this.percentualDiferimento,
        valorIcmsDiferido: valorIcmsDiferido ?? this.valorIcmsDiferido,
        valorIcms: valorIcms ?? this.valorIcms,
        baseCalculoFcp: baseCalculoFcp ?? this.baseCalculoFcp,
        percentualFcp: percentualFcp ?? this.percentualFcp,
        valorFcp: valorFcp ?? this.valorFcp,
        modalidadeBcIcmsSt: modalidadeBcIcmsSt ?? this.modalidadeBcIcmsSt,
        percentualMvaIcmsSt: percentualMvaIcmsSt ?? this.percentualMvaIcmsSt,
        percentualReducaoBcIcmsSt:
            percentualReducaoBcIcmsSt ?? this.percentualReducaoBcIcmsSt,
        valorBaseCalculoIcmsSt:
            valorBaseCalculoIcmsSt ?? this.valorBaseCalculoIcmsSt,
        aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
        valorIcmsSt: valorIcmsSt ?? this.valorIcmsSt,
        baseCalculoFcpSt: baseCalculoFcpSt ?? this.baseCalculoFcpSt,
        percentualFcpSt: percentualFcpSt ?? this.percentualFcpSt,
        valorFcpSt: valorFcpSt ?? this.valorFcpSt,
        ufSt: ufSt ?? this.ufSt,
        percentualBcOperacaoPropria:
            percentualBcOperacaoPropria ?? this.percentualBcOperacaoPropria,
        valorBcIcmsStRetido: valorBcIcmsStRetido ?? this.valorBcIcmsStRetido,
        aliquotaSuportadaConsumidor:
            aliquotaSuportadaConsumidor ?? this.aliquotaSuportadaConsumidor,
        valorIcmsSubstituto: valorIcmsSubstituto ?? this.valorIcmsSubstituto,
        valorIcmsStRetido: valorIcmsStRetido ?? this.valorIcmsStRetido,
        baseCalculoFcpStRetido:
            baseCalculoFcpStRetido ?? this.baseCalculoFcpStRetido,
        percentualFcpStRetido:
            percentualFcpStRetido ?? this.percentualFcpStRetido,
        valorFcpStRetido: valorFcpStRetido ?? this.valorFcpStRetido,
        motivoDesoneracaoIcms:
            motivoDesoneracaoIcms ?? this.motivoDesoneracaoIcms,
        valorIcmsDesonerado: valorIcmsDesonerado ?? this.valorIcmsDesonerado,
        aliquotaCreditoIcmsSn:
            aliquotaCreditoIcmsSn ?? this.aliquotaCreditoIcmsSn,
        valorCreditoIcmsSn: valorCreditoIcmsSn ?? this.valorCreditoIcmsSn,
        valorBcIcmsStDestino: valorBcIcmsStDestino ?? this.valorBcIcmsStDestino,
        valorIcmsStDestino: valorIcmsStDestino ?? this.valorIcmsStDestino,
        percentualReducaoBcEfetivo:
            percentualReducaoBcEfetivo ?? this.percentualReducaoBcEfetivo,
        valorBcEfetivo: valorBcEfetivo ?? this.valorBcEfetivo,
        aliquotaIcmsEfetivo: aliquotaIcmsEfetivo ?? this.aliquotaIcmsEfetivo,
        valorIcmsEfetivo: valorIcmsEfetivo ?? this.valorIcmsEfetivo,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIcms(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('origemMercadoria: $origemMercadoria, ')
          ..write('cstIcms: $cstIcms, ')
          ..write('csosn: $csosn, ')
          ..write('modalidadeBcIcms: $modalidadeBcIcms, ')
          ..write('percentualReducaoBcIcms: $percentualReducaoBcIcms, ')
          ..write('valorBcIcms: $valorBcIcms, ')
          ..write('aliquotaIcms: $aliquotaIcms, ')
          ..write('valorIcmsOperacao: $valorIcmsOperacao, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorIcmsDiferido: $valorIcmsDiferido, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('baseCalculoFcp: $baseCalculoFcp, ')
          ..write('percentualFcp: $percentualFcp, ')
          ..write('valorFcp: $valorFcp, ')
          ..write('modalidadeBcIcmsSt: $modalidadeBcIcmsSt, ')
          ..write('percentualMvaIcmsSt: $percentualMvaIcmsSt, ')
          ..write('percentualReducaoBcIcmsSt: $percentualReducaoBcIcmsSt, ')
          ..write('valorBaseCalculoIcmsSt: $valorBaseCalculoIcmsSt, ')
          ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
          ..write('valorIcmsSt: $valorIcmsSt, ')
          ..write('baseCalculoFcpSt: $baseCalculoFcpSt, ')
          ..write('percentualFcpSt: $percentualFcpSt, ')
          ..write('valorFcpSt: $valorFcpSt, ')
          ..write('ufSt: $ufSt, ')
          ..write('percentualBcOperacaoPropria: $percentualBcOperacaoPropria, ')
          ..write('valorBcIcmsStRetido: $valorBcIcmsStRetido, ')
          ..write('aliquotaSuportadaConsumidor: $aliquotaSuportadaConsumidor, ')
          ..write('valorIcmsSubstituto: $valorIcmsSubstituto, ')
          ..write('valorIcmsStRetido: $valorIcmsStRetido, ')
          ..write('baseCalculoFcpStRetido: $baseCalculoFcpStRetido, ')
          ..write('percentualFcpStRetido: $percentualFcpStRetido, ')
          ..write('valorFcpStRetido: $valorFcpStRetido, ')
          ..write('motivoDesoneracaoIcms: $motivoDesoneracaoIcms, ')
          ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
          ..write('aliquotaCreditoIcmsSn: $aliquotaCreditoIcmsSn, ')
          ..write('valorCreditoIcmsSn: $valorCreditoIcmsSn, ')
          ..write('valorBcIcmsStDestino: $valorBcIcmsStDestino, ')
          ..write('valorIcmsStDestino: $valorIcmsStDestino, ')
          ..write('percentualReducaoBcEfetivo: $percentualReducaoBcEfetivo, ')
          ..write('valorBcEfetivo: $valorBcEfetivo, ')
          ..write('aliquotaIcmsEfetivo: $aliquotaIcmsEfetivo, ')
          ..write('valorIcmsEfetivo: $valorIcmsEfetivo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idNfeDetalhe,
        origemMercadoria,
        cstIcms,
        csosn,
        modalidadeBcIcms,
        percentualReducaoBcIcms,
        valorBcIcms,
        aliquotaIcms,
        valorIcmsOperacao,
        percentualDiferimento,
        valorIcmsDiferido,
        valorIcms,
        baseCalculoFcp,
        percentualFcp,
        valorFcp,
        modalidadeBcIcmsSt,
        percentualMvaIcmsSt,
        percentualReducaoBcIcmsSt,
        valorBaseCalculoIcmsSt,
        aliquotaIcmsSt,
        valorIcmsSt,
        baseCalculoFcpSt,
        percentualFcpSt,
        valorFcpSt,
        ufSt,
        percentualBcOperacaoPropria,
        valorBcIcmsStRetido,
        aliquotaSuportadaConsumidor,
        valorIcmsSubstituto,
        valorIcmsStRetido,
        baseCalculoFcpStRetido,
        percentualFcpStRetido,
        valorFcpStRetido,
        motivoDesoneracaoIcms,
        valorIcmsDesonerado,
        aliquotaCreditoIcmsSn,
        valorCreditoIcmsSn,
        valorBcIcmsStDestino,
        valorIcmsStDestino,
        percentualReducaoBcEfetivo,
        valorBcEfetivo,
        aliquotaIcmsEfetivo,
        valorIcmsEfetivo
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIcms &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.origemMercadoria == this.origemMercadoria &&
          other.cstIcms == this.cstIcms &&
          other.csosn == this.csosn &&
          other.modalidadeBcIcms == this.modalidadeBcIcms &&
          other.percentualReducaoBcIcms == this.percentualReducaoBcIcms &&
          other.valorBcIcms == this.valorBcIcms &&
          other.aliquotaIcms == this.aliquotaIcms &&
          other.valorIcmsOperacao == this.valorIcmsOperacao &&
          other.percentualDiferimento == this.percentualDiferimento &&
          other.valorIcmsDiferido == this.valorIcmsDiferido &&
          other.valorIcms == this.valorIcms &&
          other.baseCalculoFcp == this.baseCalculoFcp &&
          other.percentualFcp == this.percentualFcp &&
          other.valorFcp == this.valorFcp &&
          other.modalidadeBcIcmsSt == this.modalidadeBcIcmsSt &&
          other.percentualMvaIcmsSt == this.percentualMvaIcmsSt &&
          other.percentualReducaoBcIcmsSt == this.percentualReducaoBcIcmsSt &&
          other.valorBaseCalculoIcmsSt == this.valorBaseCalculoIcmsSt &&
          other.aliquotaIcmsSt == this.aliquotaIcmsSt &&
          other.valorIcmsSt == this.valorIcmsSt &&
          other.baseCalculoFcpSt == this.baseCalculoFcpSt &&
          other.percentualFcpSt == this.percentualFcpSt &&
          other.valorFcpSt == this.valorFcpSt &&
          other.ufSt == this.ufSt &&
          other.percentualBcOperacaoPropria ==
              this.percentualBcOperacaoPropria &&
          other.valorBcIcmsStRetido == this.valorBcIcmsStRetido &&
          other.aliquotaSuportadaConsumidor ==
              this.aliquotaSuportadaConsumidor &&
          other.valorIcmsSubstituto == this.valorIcmsSubstituto &&
          other.valorIcmsStRetido == this.valorIcmsStRetido &&
          other.baseCalculoFcpStRetido == this.baseCalculoFcpStRetido &&
          other.percentualFcpStRetido == this.percentualFcpStRetido &&
          other.valorFcpStRetido == this.valorFcpStRetido &&
          other.motivoDesoneracaoIcms == this.motivoDesoneracaoIcms &&
          other.valorIcmsDesonerado == this.valorIcmsDesonerado &&
          other.aliquotaCreditoIcmsSn == this.aliquotaCreditoIcmsSn &&
          other.valorCreditoIcmsSn == this.valorCreditoIcmsSn &&
          other.valorBcIcmsStDestino == this.valorBcIcmsStDestino &&
          other.valorIcmsStDestino == this.valorIcmsStDestino &&
          other.percentualReducaoBcEfetivo == this.percentualReducaoBcEfetivo &&
          other.valorBcEfetivo == this.valorBcEfetivo &&
          other.aliquotaIcmsEfetivo == this.aliquotaIcmsEfetivo &&
          other.valorIcmsEfetivo == this.valorIcmsEfetivo);
}

class NfeDetalheImpostoIcmssCompanion
    extends UpdateCompanion<NfeDetalheImpostoIcms> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> origemMercadoria;
  final Value<String?> cstIcms;
  final Value<String?> csosn;
  final Value<String?> modalidadeBcIcms;
  final Value<double?> percentualReducaoBcIcms;
  final Value<double?> valorBcIcms;
  final Value<double?> aliquotaIcms;
  final Value<double?> valorIcmsOperacao;
  final Value<double?> percentualDiferimento;
  final Value<double?> valorIcmsDiferido;
  final Value<double?> valorIcms;
  final Value<double?> baseCalculoFcp;
  final Value<double?> percentualFcp;
  final Value<double?> valorFcp;
  final Value<String?> modalidadeBcIcmsSt;
  final Value<double?> percentualMvaIcmsSt;
  final Value<double?> percentualReducaoBcIcmsSt;
  final Value<double?> valorBaseCalculoIcmsSt;
  final Value<double?> aliquotaIcmsSt;
  final Value<double?> valorIcmsSt;
  final Value<double?> baseCalculoFcpSt;
  final Value<double?> percentualFcpSt;
  final Value<double?> valorFcpSt;
  final Value<String?> ufSt;
  final Value<double?> percentualBcOperacaoPropria;
  final Value<double?> valorBcIcmsStRetido;
  final Value<double?> aliquotaSuportadaConsumidor;
  final Value<double?> valorIcmsSubstituto;
  final Value<double?> valorIcmsStRetido;
  final Value<double?> baseCalculoFcpStRetido;
  final Value<double?> percentualFcpStRetido;
  final Value<double?> valorFcpStRetido;
  final Value<String?> motivoDesoneracaoIcms;
  final Value<double?> valorIcmsDesonerado;
  final Value<double?> aliquotaCreditoIcmsSn;
  final Value<double?> valorCreditoIcmsSn;
  final Value<double?> valorBcIcmsStDestino;
  final Value<double?> valorIcmsStDestino;
  final Value<double?> percentualReducaoBcEfetivo;
  final Value<double?> valorBcEfetivo;
  final Value<double?> aliquotaIcmsEfetivo;
  final Value<double?> valorIcmsEfetivo;
  const NfeDetalheImpostoIcmssCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.origemMercadoria = const Value.absent(),
    this.cstIcms = const Value.absent(),
    this.csosn = const Value.absent(),
    this.modalidadeBcIcms = const Value.absent(),
    this.percentualReducaoBcIcms = const Value.absent(),
    this.valorBcIcms = const Value.absent(),
    this.aliquotaIcms = const Value.absent(),
    this.valorIcmsOperacao = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorIcmsDiferido = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.baseCalculoFcp = const Value.absent(),
    this.percentualFcp = const Value.absent(),
    this.valorFcp = const Value.absent(),
    this.modalidadeBcIcmsSt = const Value.absent(),
    this.percentualMvaIcmsSt = const Value.absent(),
    this.percentualReducaoBcIcmsSt = const Value.absent(),
    this.valorBaseCalculoIcmsSt = const Value.absent(),
    this.aliquotaIcmsSt = const Value.absent(),
    this.valorIcmsSt = const Value.absent(),
    this.baseCalculoFcpSt = const Value.absent(),
    this.percentualFcpSt = const Value.absent(),
    this.valorFcpSt = const Value.absent(),
    this.ufSt = const Value.absent(),
    this.percentualBcOperacaoPropria = const Value.absent(),
    this.valorBcIcmsStRetido = const Value.absent(),
    this.aliquotaSuportadaConsumidor = const Value.absent(),
    this.valorIcmsSubstituto = const Value.absent(),
    this.valorIcmsStRetido = const Value.absent(),
    this.baseCalculoFcpStRetido = const Value.absent(),
    this.percentualFcpStRetido = const Value.absent(),
    this.valorFcpStRetido = const Value.absent(),
    this.motivoDesoneracaoIcms = const Value.absent(),
    this.valorIcmsDesonerado = const Value.absent(),
    this.aliquotaCreditoIcmsSn = const Value.absent(),
    this.valorCreditoIcmsSn = const Value.absent(),
    this.valorBcIcmsStDestino = const Value.absent(),
    this.valorIcmsStDestino = const Value.absent(),
    this.percentualReducaoBcEfetivo = const Value.absent(),
    this.valorBcEfetivo = const Value.absent(),
    this.aliquotaIcmsEfetivo = const Value.absent(),
    this.valorIcmsEfetivo = const Value.absent(),
  });
  NfeDetalheImpostoIcmssCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.origemMercadoria = const Value.absent(),
    this.cstIcms = const Value.absent(),
    this.csosn = const Value.absent(),
    this.modalidadeBcIcms = const Value.absent(),
    this.percentualReducaoBcIcms = const Value.absent(),
    this.valorBcIcms = const Value.absent(),
    this.aliquotaIcms = const Value.absent(),
    this.valorIcmsOperacao = const Value.absent(),
    this.percentualDiferimento = const Value.absent(),
    this.valorIcmsDiferido = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.baseCalculoFcp = const Value.absent(),
    this.percentualFcp = const Value.absent(),
    this.valorFcp = const Value.absent(),
    this.modalidadeBcIcmsSt = const Value.absent(),
    this.percentualMvaIcmsSt = const Value.absent(),
    this.percentualReducaoBcIcmsSt = const Value.absent(),
    this.valorBaseCalculoIcmsSt = const Value.absent(),
    this.aliquotaIcmsSt = const Value.absent(),
    this.valorIcmsSt = const Value.absent(),
    this.baseCalculoFcpSt = const Value.absent(),
    this.percentualFcpSt = const Value.absent(),
    this.valorFcpSt = const Value.absent(),
    this.ufSt = const Value.absent(),
    this.percentualBcOperacaoPropria = const Value.absent(),
    this.valorBcIcmsStRetido = const Value.absent(),
    this.aliquotaSuportadaConsumidor = const Value.absent(),
    this.valorIcmsSubstituto = const Value.absent(),
    this.valorIcmsStRetido = const Value.absent(),
    this.baseCalculoFcpStRetido = const Value.absent(),
    this.percentualFcpStRetido = const Value.absent(),
    this.valorFcpStRetido = const Value.absent(),
    this.motivoDesoneracaoIcms = const Value.absent(),
    this.valorIcmsDesonerado = const Value.absent(),
    this.aliquotaCreditoIcmsSn = const Value.absent(),
    this.valorCreditoIcmsSn = const Value.absent(),
    this.valorBcIcmsStDestino = const Value.absent(),
    this.valorIcmsStDestino = const Value.absent(),
    this.percentualReducaoBcEfetivo = const Value.absent(),
    this.valorBcEfetivo = const Value.absent(),
    this.aliquotaIcmsEfetivo = const Value.absent(),
    this.valorIcmsEfetivo = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIcms> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? origemMercadoria,
    Expression<String>? cstIcms,
    Expression<String>? csosn,
    Expression<String>? modalidadeBcIcms,
    Expression<double>? percentualReducaoBcIcms,
    Expression<double>? valorBcIcms,
    Expression<double>? aliquotaIcms,
    Expression<double>? valorIcmsOperacao,
    Expression<double>? percentualDiferimento,
    Expression<double>? valorIcmsDiferido,
    Expression<double>? valorIcms,
    Expression<double>? baseCalculoFcp,
    Expression<double>? percentualFcp,
    Expression<double>? valorFcp,
    Expression<String>? modalidadeBcIcmsSt,
    Expression<double>? percentualMvaIcmsSt,
    Expression<double>? percentualReducaoBcIcmsSt,
    Expression<double>? valorBaseCalculoIcmsSt,
    Expression<double>? aliquotaIcmsSt,
    Expression<double>? valorIcmsSt,
    Expression<double>? baseCalculoFcpSt,
    Expression<double>? percentualFcpSt,
    Expression<double>? valorFcpSt,
    Expression<String>? ufSt,
    Expression<double>? percentualBcOperacaoPropria,
    Expression<double>? valorBcIcmsStRetido,
    Expression<double>? aliquotaSuportadaConsumidor,
    Expression<double>? valorIcmsSubstituto,
    Expression<double>? valorIcmsStRetido,
    Expression<double>? baseCalculoFcpStRetido,
    Expression<double>? percentualFcpStRetido,
    Expression<double>? valorFcpStRetido,
    Expression<String>? motivoDesoneracaoIcms,
    Expression<double>? valorIcmsDesonerado,
    Expression<double>? aliquotaCreditoIcmsSn,
    Expression<double>? valorCreditoIcmsSn,
    Expression<double>? valorBcIcmsStDestino,
    Expression<double>? valorIcmsStDestino,
    Expression<double>? percentualReducaoBcEfetivo,
    Expression<double>? valorBcEfetivo,
    Expression<double>? aliquotaIcmsEfetivo,
    Expression<double>? valorIcmsEfetivo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (origemMercadoria != null) 'ORIGEM_MERCADORIA': origemMercadoria,
      if (cstIcms != null) 'CST_ICMS': cstIcms,
      if (csosn != null) 'CSOSN': csosn,
      if (modalidadeBcIcms != null) 'MODALIDADE_BC_ICMS': modalidadeBcIcms,
      if (percentualReducaoBcIcms != null)
        'PERCENTUAL_REDUCAO_BC_ICMS': percentualReducaoBcIcms,
      if (valorBcIcms != null) 'VALOR_BC_ICMS': valorBcIcms,
      if (aliquotaIcms != null) 'ALIQUOTA_ICMS': aliquotaIcms,
      if (valorIcmsOperacao != null) 'VALOR_ICMS_OPERACAO': valorIcmsOperacao,
      if (percentualDiferimento != null)
        'PERCENTUAL_DIFERIMENTO': percentualDiferimento,
      if (valorIcmsDiferido != null) 'VALOR_ICMS_DIFERIDO': valorIcmsDiferido,
      if (valorIcms != null) 'VALOR_ICMS': valorIcms,
      if (baseCalculoFcp != null) 'BASE_CALCULO_FCP': baseCalculoFcp,
      if (percentualFcp != null) 'PERCENTUAL_FCP': percentualFcp,
      if (valorFcp != null) 'VALOR_FCP': valorFcp,
      if (modalidadeBcIcmsSt != null)
        'MODALIDADE_BC_ICMS_ST': modalidadeBcIcmsSt,
      if (percentualMvaIcmsSt != null)
        'PERCENTUAL_MVA_ICMS_ST': percentualMvaIcmsSt,
      if (percentualReducaoBcIcmsSt != null)
        'PERCENTUAL_REDUCAO_BC_ICMS_ST': percentualReducaoBcIcmsSt,
      if (valorBaseCalculoIcmsSt != null)
        'VALOR_BASE_CALCULO_ICMS_ST': valorBaseCalculoIcmsSt,
      if (aliquotaIcmsSt != null) 'ALIQUOTA_ICMS_ST': aliquotaIcmsSt,
      if (valorIcmsSt != null) 'VALOR_ICMS_ST': valorIcmsSt,
      if (baseCalculoFcpSt != null) 'BASE_CALCULO_FCP_ST': baseCalculoFcpSt,
      if (percentualFcpSt != null) 'PERCENTUAL_FCP_ST': percentualFcpSt,
      if (valorFcpSt != null) 'VALOR_FCP_ST': valorFcpSt,
      if (ufSt != null) 'UF_ST': ufSt,
      if (percentualBcOperacaoPropria != null)
        'PERCENTUAL_BC_OPERACAO_PROPRIA': percentualBcOperacaoPropria,
      if (valorBcIcmsStRetido != null)
        'VALOR_BC_ICMS_ST_RETIDO': valorBcIcmsStRetido,
      if (aliquotaSuportadaConsumidor != null)
        'ALIQUOTA_SUPORTADA_CONSUMIDOR': aliquotaSuportadaConsumidor,
      if (valorIcmsSubstituto != null)
        'VALOR_ICMS_SUBSTITUTO': valorIcmsSubstituto,
      if (valorIcmsStRetido != null) 'VALOR_ICMS_ST_RETIDO': valorIcmsStRetido,
      if (baseCalculoFcpStRetido != null)
        'BASE_CALCULO_FCP_ST_RETIDO': baseCalculoFcpStRetido,
      if (percentualFcpStRetido != null)
        'PERCENTUAL_FCP_ST_RETIDO': percentualFcpStRetido,
      if (valorFcpStRetido != null) 'VALOR_FCP_ST_RETIDO': valorFcpStRetido,
      if (motivoDesoneracaoIcms != null)
        'MOTIVO_DESONERACAO_ICMS': motivoDesoneracaoIcms,
      if (valorIcmsDesonerado != null)
        'VALOR_ICMS_DESONERADO': valorIcmsDesonerado,
      if (aliquotaCreditoIcmsSn != null)
        'ALIQUOTA_CREDITO_ICMS_SN': aliquotaCreditoIcmsSn,
      if (valorCreditoIcmsSn != null)
        'VALOR_CREDITO_ICMS_SN': valorCreditoIcmsSn,
      if (valorBcIcmsStDestino != null)
        'VALOR_BC_ICMS_ST_DESTINO': valorBcIcmsStDestino,
      if (valorIcmsStDestino != null)
        'VALOR_ICMS_ST_DESTINO': valorIcmsStDestino,
      if (percentualReducaoBcEfetivo != null)
        'PERCENTUAL_REDUCAO_BC_EFETIVO': percentualReducaoBcEfetivo,
      if (valorBcEfetivo != null) 'VALOR_BC_EFETIVO': valorBcEfetivo,
      if (aliquotaIcmsEfetivo != null)
        'ALIQUOTA_ICMS_EFETIVO': aliquotaIcmsEfetivo,
      if (valorIcmsEfetivo != null) 'VALOR_ICMS_EFETIVO': valorIcmsEfetivo,
    });
  }

  NfeDetalheImpostoIcmssCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? origemMercadoria,
      Value<String?>? cstIcms,
      Value<String?>? csosn,
      Value<String?>? modalidadeBcIcms,
      Value<double?>? percentualReducaoBcIcms,
      Value<double?>? valorBcIcms,
      Value<double?>? aliquotaIcms,
      Value<double?>? valorIcmsOperacao,
      Value<double?>? percentualDiferimento,
      Value<double?>? valorIcmsDiferido,
      Value<double?>? valorIcms,
      Value<double?>? baseCalculoFcp,
      Value<double?>? percentualFcp,
      Value<double?>? valorFcp,
      Value<String?>? modalidadeBcIcmsSt,
      Value<double?>? percentualMvaIcmsSt,
      Value<double?>? percentualReducaoBcIcmsSt,
      Value<double?>? valorBaseCalculoIcmsSt,
      Value<double?>? aliquotaIcmsSt,
      Value<double?>? valorIcmsSt,
      Value<double?>? baseCalculoFcpSt,
      Value<double?>? percentualFcpSt,
      Value<double?>? valorFcpSt,
      Value<String?>? ufSt,
      Value<double?>? percentualBcOperacaoPropria,
      Value<double?>? valorBcIcmsStRetido,
      Value<double?>? aliquotaSuportadaConsumidor,
      Value<double?>? valorIcmsSubstituto,
      Value<double?>? valorIcmsStRetido,
      Value<double?>? baseCalculoFcpStRetido,
      Value<double?>? percentualFcpStRetido,
      Value<double?>? valorFcpStRetido,
      Value<String?>? motivoDesoneracaoIcms,
      Value<double?>? valorIcmsDesonerado,
      Value<double?>? aliquotaCreditoIcmsSn,
      Value<double?>? valorCreditoIcmsSn,
      Value<double?>? valorBcIcmsStDestino,
      Value<double?>? valorIcmsStDestino,
      Value<double?>? percentualReducaoBcEfetivo,
      Value<double?>? valorBcEfetivo,
      Value<double?>? aliquotaIcmsEfetivo,
      Value<double?>? valorIcmsEfetivo}) {
    return NfeDetalheImpostoIcmssCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      origemMercadoria: origemMercadoria ?? this.origemMercadoria,
      cstIcms: cstIcms ?? this.cstIcms,
      csosn: csosn ?? this.csosn,
      modalidadeBcIcms: modalidadeBcIcms ?? this.modalidadeBcIcms,
      percentualReducaoBcIcms:
          percentualReducaoBcIcms ?? this.percentualReducaoBcIcms,
      valorBcIcms: valorBcIcms ?? this.valorBcIcms,
      aliquotaIcms: aliquotaIcms ?? this.aliquotaIcms,
      valorIcmsOperacao: valorIcmsOperacao ?? this.valorIcmsOperacao,
      percentualDiferimento:
          percentualDiferimento ?? this.percentualDiferimento,
      valorIcmsDiferido: valorIcmsDiferido ?? this.valorIcmsDiferido,
      valorIcms: valorIcms ?? this.valorIcms,
      baseCalculoFcp: baseCalculoFcp ?? this.baseCalculoFcp,
      percentualFcp: percentualFcp ?? this.percentualFcp,
      valorFcp: valorFcp ?? this.valorFcp,
      modalidadeBcIcmsSt: modalidadeBcIcmsSt ?? this.modalidadeBcIcmsSt,
      percentualMvaIcmsSt: percentualMvaIcmsSt ?? this.percentualMvaIcmsSt,
      percentualReducaoBcIcmsSt:
          percentualReducaoBcIcmsSt ?? this.percentualReducaoBcIcmsSt,
      valorBaseCalculoIcmsSt:
          valorBaseCalculoIcmsSt ?? this.valorBaseCalculoIcmsSt,
      aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
      valorIcmsSt: valorIcmsSt ?? this.valorIcmsSt,
      baseCalculoFcpSt: baseCalculoFcpSt ?? this.baseCalculoFcpSt,
      percentualFcpSt: percentualFcpSt ?? this.percentualFcpSt,
      valorFcpSt: valorFcpSt ?? this.valorFcpSt,
      ufSt: ufSt ?? this.ufSt,
      percentualBcOperacaoPropria:
          percentualBcOperacaoPropria ?? this.percentualBcOperacaoPropria,
      valorBcIcmsStRetido: valorBcIcmsStRetido ?? this.valorBcIcmsStRetido,
      aliquotaSuportadaConsumidor:
          aliquotaSuportadaConsumidor ?? this.aliquotaSuportadaConsumidor,
      valorIcmsSubstituto: valorIcmsSubstituto ?? this.valorIcmsSubstituto,
      valorIcmsStRetido: valorIcmsStRetido ?? this.valorIcmsStRetido,
      baseCalculoFcpStRetido:
          baseCalculoFcpStRetido ?? this.baseCalculoFcpStRetido,
      percentualFcpStRetido:
          percentualFcpStRetido ?? this.percentualFcpStRetido,
      valorFcpStRetido: valorFcpStRetido ?? this.valorFcpStRetido,
      motivoDesoneracaoIcms:
          motivoDesoneracaoIcms ?? this.motivoDesoneracaoIcms,
      valorIcmsDesonerado: valorIcmsDesonerado ?? this.valorIcmsDesonerado,
      aliquotaCreditoIcmsSn:
          aliquotaCreditoIcmsSn ?? this.aliquotaCreditoIcmsSn,
      valorCreditoIcmsSn: valorCreditoIcmsSn ?? this.valorCreditoIcmsSn,
      valorBcIcmsStDestino: valorBcIcmsStDestino ?? this.valorBcIcmsStDestino,
      valorIcmsStDestino: valorIcmsStDestino ?? this.valorIcmsStDestino,
      percentualReducaoBcEfetivo:
          percentualReducaoBcEfetivo ?? this.percentualReducaoBcEfetivo,
      valorBcEfetivo: valorBcEfetivo ?? this.valorBcEfetivo,
      aliquotaIcmsEfetivo: aliquotaIcmsEfetivo ?? this.aliquotaIcmsEfetivo,
      valorIcmsEfetivo: valorIcmsEfetivo ?? this.valorIcmsEfetivo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (origemMercadoria.present) {
      map['ORIGEM_MERCADORIA'] = Variable<String>(origemMercadoria.value);
    }
    if (cstIcms.present) {
      map['CST_ICMS'] = Variable<String>(cstIcms.value);
    }
    if (csosn.present) {
      map['CSOSN'] = Variable<String>(csosn.value);
    }
    if (modalidadeBcIcms.present) {
      map['MODALIDADE_BC_ICMS'] = Variable<String>(modalidadeBcIcms.value);
    }
    if (percentualReducaoBcIcms.present) {
      map['PERCENTUAL_REDUCAO_BC_ICMS'] =
          Variable<double>(percentualReducaoBcIcms.value);
    }
    if (valorBcIcms.present) {
      map['VALOR_BC_ICMS'] = Variable<double>(valorBcIcms.value);
    }
    if (aliquotaIcms.present) {
      map['ALIQUOTA_ICMS'] = Variable<double>(aliquotaIcms.value);
    }
    if (valorIcmsOperacao.present) {
      map['VALOR_ICMS_OPERACAO'] = Variable<double>(valorIcmsOperacao.value);
    }
    if (percentualDiferimento.present) {
      map['PERCENTUAL_DIFERIMENTO'] =
          Variable<double>(percentualDiferimento.value);
    }
    if (valorIcmsDiferido.present) {
      map['VALOR_ICMS_DIFERIDO'] = Variable<double>(valorIcmsDiferido.value);
    }
    if (valorIcms.present) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms.value);
    }
    if (baseCalculoFcp.present) {
      map['BASE_CALCULO_FCP'] = Variable<double>(baseCalculoFcp.value);
    }
    if (percentualFcp.present) {
      map['PERCENTUAL_FCP'] = Variable<double>(percentualFcp.value);
    }
    if (valorFcp.present) {
      map['VALOR_FCP'] = Variable<double>(valorFcp.value);
    }
    if (modalidadeBcIcmsSt.present) {
      map['MODALIDADE_BC_ICMS_ST'] =
          Variable<String>(modalidadeBcIcmsSt.value);
    }
    if (percentualMvaIcmsSt.present) {
      map['PERCENTUAL_MVA_ICMS_ST'] =
          Variable<double>(percentualMvaIcmsSt.value);
    }
    if (percentualReducaoBcIcmsSt.present) {
      map['PERCENTUAL_REDUCAO_BC_ICMS_ST'] =
          Variable<double>(percentualReducaoBcIcmsSt.value);
    }
    if (valorBaseCalculoIcmsSt.present) {
      map['VALOR_BASE_CALCULO_ICMS_ST'] =
          Variable<double>(valorBaseCalculoIcmsSt.value);
    }
    if (aliquotaIcmsSt.present) {
      map['ALIQUOTA_ICMS_ST'] = Variable<double>(aliquotaIcmsSt.value);
    }
    if (valorIcmsSt.present) {
      map['VALOR_ICMS_ST'] = Variable<double>(valorIcmsSt.value);
    }
    if (baseCalculoFcpSt.present) {
      map['BASE_CALCULO_FCP_ST'] = Variable<double>(baseCalculoFcpSt.value);
    }
    if (percentualFcpSt.present) {
      map['PERCENTUAL_FCP_ST'] = Variable<double>(percentualFcpSt.value);
    }
    if (valorFcpSt.present) {
      map['VALOR_FCP_ST'] = Variable<double>(valorFcpSt.value);
    }
    if (ufSt.present) {
      map['UF_ST'] = Variable<String>(ufSt.value);
    }
    if (percentualBcOperacaoPropria.present) {
      map['PERCENTUAL_BC_OPERACAO_PROPRIA'] =
          Variable<double>(percentualBcOperacaoPropria.value);
    }
    if (valorBcIcmsStRetido.present) {
      map['VALOR_BC_ICMS_ST_RETIDO'] =
          Variable<double>(valorBcIcmsStRetido.value);
    }
    if (aliquotaSuportadaConsumidor.present) {
      map['ALIQUOTA_SUPORTADA_CONSUMIDOR'] =
          Variable<double>(aliquotaSuportadaConsumidor.value);
    }
    if (valorIcmsSubstituto.present) {
      map['VALOR_ICMS_SUBSTITUTO'] =
          Variable<double>(valorIcmsSubstituto.value);
    }
    if (valorIcmsStRetido.present) {
      map['VALOR_ICMS_ST_RETIDO'] = Variable<double>(valorIcmsStRetido.value);
    }
    if (baseCalculoFcpStRetido.present) {
      map['BASE_CALCULO_FCP_ST_RETIDO'] =
          Variable<double>(baseCalculoFcpStRetido.value);
    }
    if (percentualFcpStRetido.present) {
      map['PERCENTUAL_FCP_ST_RETIDO'] =
          Variable<double>(percentualFcpStRetido.value);
    }
    if (valorFcpStRetido.present) {
      map['VALOR_FCP_ST_RETIDO'] = Variable<double>(valorFcpStRetido.value);
    }
    if (motivoDesoneracaoIcms.present) {
      map['MOTIVO_DESONERACAO_ICMS'] =
          Variable<String>(motivoDesoneracaoIcms.value);
    }
    if (valorIcmsDesonerado.present) {
      map['VALOR_ICMS_DESONERADO'] =
          Variable<double>(valorIcmsDesonerado.value);
    }
    if (aliquotaCreditoIcmsSn.present) {
      map['ALIQUOTA_CREDITO_ICMS_SN'] =
          Variable<double>(aliquotaCreditoIcmsSn.value);
    }
    if (valorCreditoIcmsSn.present) {
      map['VALOR_CREDITO_ICMS_SN'] =
          Variable<double>(valorCreditoIcmsSn.value);
    }
    if (valorBcIcmsStDestino.present) {
      map['VALOR_BC_ICMS_ST_DESTINO'] =
          Variable<double>(valorBcIcmsStDestino.value);
    }
    if (valorIcmsStDestino.present) {
      map['VALOR_ICMS_ST_DESTINO'] =
          Variable<double>(valorIcmsStDestino.value);
    }
    if (percentualReducaoBcEfetivo.present) {
      map['PERCENTUAL_REDUCAO_BC_EFETIVO'] =
          Variable<double>(percentualReducaoBcEfetivo.value);
    }
    if (valorBcEfetivo.present) {
      map['VALOR_BC_EFETIVO'] = Variable<double>(valorBcEfetivo.value);
    }
    if (aliquotaIcmsEfetivo.present) {
      map['ALIQUOTA_ICMS_EFETIVO'] =
          Variable<double>(aliquotaIcmsEfetivo.value);
    }
    if (valorIcmsEfetivo.present) {
      map['VALOR_ICMS_EFETIVO'] = Variable<double>(valorIcmsEfetivo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIcmssCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('origemMercadoria: $origemMercadoria, ')
          ..write('cstIcms: $cstIcms, ')
          ..write('csosn: $csosn, ')
          ..write('modalidadeBcIcms: $modalidadeBcIcms, ')
          ..write('percentualReducaoBcIcms: $percentualReducaoBcIcms, ')
          ..write('valorBcIcms: $valorBcIcms, ')
          ..write('aliquotaIcms: $aliquotaIcms, ')
          ..write('valorIcmsOperacao: $valorIcmsOperacao, ')
          ..write('percentualDiferimento: $percentualDiferimento, ')
          ..write('valorIcmsDiferido: $valorIcmsDiferido, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('baseCalculoFcp: $baseCalculoFcp, ')
          ..write('percentualFcp: $percentualFcp, ')
          ..write('valorFcp: $valorFcp, ')
          ..write('modalidadeBcIcmsSt: $modalidadeBcIcmsSt, ')
          ..write('percentualMvaIcmsSt: $percentualMvaIcmsSt, ')
          ..write('percentualReducaoBcIcmsSt: $percentualReducaoBcIcmsSt, ')
          ..write('valorBaseCalculoIcmsSt: $valorBaseCalculoIcmsSt, ')
          ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
          ..write('valorIcmsSt: $valorIcmsSt, ')
          ..write('baseCalculoFcpSt: $baseCalculoFcpSt, ')
          ..write('percentualFcpSt: $percentualFcpSt, ')
          ..write('valorFcpSt: $valorFcpSt, ')
          ..write('ufSt: $ufSt, ')
          ..write('percentualBcOperacaoPropria: $percentualBcOperacaoPropria, ')
          ..write('valorBcIcmsStRetido: $valorBcIcmsStRetido, ')
          ..write('aliquotaSuportadaConsumidor: $aliquotaSuportadaConsumidor, ')
          ..write('valorIcmsSubstituto: $valorIcmsSubstituto, ')
          ..write('valorIcmsStRetido: $valorIcmsStRetido, ')
          ..write('baseCalculoFcpStRetido: $baseCalculoFcpStRetido, ')
          ..write('percentualFcpStRetido: $percentualFcpStRetido, ')
          ..write('valorFcpStRetido: $valorFcpStRetido, ')
          ..write('motivoDesoneracaoIcms: $motivoDesoneracaoIcms, ')
          ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
          ..write('aliquotaCreditoIcmsSn: $aliquotaCreditoIcmsSn, ')
          ..write('valorCreditoIcmsSn: $valorCreditoIcmsSn, ')
          ..write('valorBcIcmsStDestino: $valorBcIcmsStDestino, ')
          ..write('valorIcmsStDestino: $valorIcmsStDestino, ')
          ..write('percentualReducaoBcEfetivo: $percentualReducaoBcEfetivo, ')
          ..write('valorBcEfetivo: $valorBcEfetivo, ')
          ..write('aliquotaIcmsEfetivo: $aliquotaIcmsEfetivo, ')
          ..write('valorIcmsEfetivo: $valorIcmsEfetivo')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIcmssTable extends NfeDetalheImpostoIcmss
    with TableInfo<$NfeDetalheImpostoIcmssTable, NfeDetalheImpostoIcms> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIcmssTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _origemMercadoriaMeta =
      const VerificationMeta('origemMercadoria');
  @override
  late final GeneratedColumn<String> origemMercadoria =
      GeneratedColumn<String>('ORIGEM_MERCADORIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _cstIcmsMeta = const VerificationMeta('cstIcms');
  @override
  late final GeneratedColumn<String> cstIcms = GeneratedColumn<String>(
      'CST_ICMS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
  @override
  late final GeneratedColumn<String> csosn = GeneratedColumn<String>(
      'CSOSN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modalidadeBcIcmsMeta =
      const VerificationMeta('modalidadeBcIcms');
  @override
  late final GeneratedColumn<String> modalidadeBcIcms =
      GeneratedColumn<String>('MODALIDADE_BC_ICMS', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _percentualReducaoBcIcmsMeta =
      const VerificationMeta('percentualReducaoBcIcms');
  @override
  late final GeneratedColumn<double> percentualReducaoBcIcms =
      GeneratedColumn<double>('PERCENTUAL_REDUCAO_BC_ICMS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBcIcmsMeta =
      const VerificationMeta('valorBcIcms');
  @override
  late final GeneratedColumn<double> valorBcIcms = GeneratedColumn<double>(
      'VALOR_BC_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaIcmsMeta =
      const VerificationMeta('aliquotaIcms');
  @override
  late final GeneratedColumn<double> aliquotaIcms = GeneratedColumn<double>(
      'ALIQUOTA_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsOperacaoMeta =
      const VerificationMeta('valorIcmsOperacao');
  @override
  late final GeneratedColumn<double> valorIcmsOperacao =
      GeneratedColumn<double>('VALOR_ICMS_OPERACAO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualDiferimentoMeta =
      const VerificationMeta('percentualDiferimento');
  @override
  late final GeneratedColumn<double> percentualDiferimento =
      GeneratedColumn<double>('PERCENTUAL_DIFERIMENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsDiferidoMeta =
      const VerificationMeta('valorIcmsDiferido');
  @override
  late final GeneratedColumn<double> valorIcmsDiferido =
      GeneratedColumn<double>('VALOR_ICMS_DIFERIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
  @override
  late final GeneratedColumn<double> valorIcms = GeneratedColumn<double>(
      'VALOR_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _baseCalculoFcpMeta =
      const VerificationMeta('baseCalculoFcp');
  @override
  late final GeneratedColumn<double> baseCalculoFcp = GeneratedColumn<double>(
      'BASE_CALCULO_FCP', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualFcpMeta =
      const VerificationMeta('percentualFcp');
  @override
  late final GeneratedColumn<double> percentualFcp = GeneratedColumn<double>(
      'PERCENTUAL_FCP', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorFcpMeta = const VerificationMeta('valorFcp');
  @override
  late final GeneratedColumn<double> valorFcp = GeneratedColumn<double>(
      'VALOR_FCP', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _modalidadeBcIcmsStMeta =
      const VerificationMeta('modalidadeBcIcmsSt');
  @override
  late final GeneratedColumn<String> modalidadeBcIcmsSt =
      GeneratedColumn<String>(
          'MODALIDADE_BC_ICMS_ST', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _percentualMvaIcmsStMeta =
      const VerificationMeta('percentualMvaIcmsSt');
  @override
  late final GeneratedColumn<double> percentualMvaIcmsSt =
      GeneratedColumn<double>('PERCENTUAL_MVA_ICMS_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualReducaoBcIcmsStMeta =
      const VerificationMeta('percentualReducaoBcIcmsSt');
  @override
  late final GeneratedColumn<double> percentualReducaoBcIcmsSt =
      GeneratedColumn<double>(
          'PERCENTUAL_REDUCAO_BC_ICMS_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBaseCalculoIcmsStMeta =
      const VerificationMeta('valorBaseCalculoIcmsSt');
  @override
  late final GeneratedColumn<double> valorBaseCalculoIcmsSt =
      GeneratedColumn<double>('VALOR_BASE_CALCULO_ICMS_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaIcmsStMeta =
      const VerificationMeta('aliquotaIcmsSt');
  @override
  late final GeneratedColumn<double> aliquotaIcmsSt = GeneratedColumn<double>(
      'ALIQUOTA_ICMS_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsStMeta =
      const VerificationMeta('valorIcmsSt');
  @override
  late final GeneratedColumn<double> valorIcmsSt = GeneratedColumn<double>(
      'VALOR_ICMS_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _baseCalculoFcpStMeta =
      const VerificationMeta('baseCalculoFcpSt');
  @override
  late final GeneratedColumn<double> baseCalculoFcpSt =
      GeneratedColumn<double>('BASE_CALCULO_FCP_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualFcpStMeta =
      const VerificationMeta('percentualFcpSt');
  @override
  late final GeneratedColumn<double> percentualFcpSt =
      GeneratedColumn<double>('PERCENTUAL_FCP_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorFcpStMeta = const VerificationMeta('valorFcpSt');
  @override
  late final GeneratedColumn<double> valorFcpSt = GeneratedColumn<double>(
      'VALOR_FCP_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _ufStMeta = const VerificationMeta('ufSt');
  @override
  late final GeneratedColumn<String> ufSt = GeneratedColumn<String>(
      'UF_ST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _percentualBcOperacaoPropriaMeta =
      const VerificationMeta('percentualBcOperacaoPropria');
  @override
  late final GeneratedColumn<double> percentualBcOperacaoPropria =
      GeneratedColumn<double>(
          'PERCENTUAL_BC_OPERACAO_PROPRIA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBcIcmsStRetidoMeta =
      const VerificationMeta('valorBcIcmsStRetido');
  @override
  late final GeneratedColumn<double> valorBcIcmsStRetido =
      GeneratedColumn<double>('VALOR_BC_ICMS_ST_RETIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaSuportadaConsumidorMeta =
      const VerificationMeta('aliquotaSuportadaConsumidor');
  @override
  late final GeneratedColumn<double> aliquotaSuportadaConsumidor =
      GeneratedColumn<double>(
          'ALIQUOTA_SUPORTADA_CONSUMIDOR', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsSubstitutoMeta =
      const VerificationMeta('valorIcmsSubstituto');
  @override
  late final GeneratedColumn<double> valorIcmsSubstituto =
      GeneratedColumn<double>('VALOR_ICMS_SUBSTITUTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsStRetidoMeta =
      const VerificationMeta('valorIcmsStRetido');
  @override
  late final GeneratedColumn<double> valorIcmsStRetido =
      GeneratedColumn<double>('VALOR_ICMS_ST_RETIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _baseCalculoFcpStRetidoMeta =
      const VerificationMeta('baseCalculoFcpStRetido');
  @override
  late final GeneratedColumn<double> baseCalculoFcpStRetido =
      GeneratedColumn<double>('BASE_CALCULO_FCP_ST_RETIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualFcpStRetidoMeta =
      const VerificationMeta('percentualFcpStRetido');
  @override
  late final GeneratedColumn<double> percentualFcpStRetido =
      GeneratedColumn<double>('PERCENTUAL_FCP_ST_RETIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorFcpStRetidoMeta =
      const VerificationMeta('valorFcpStRetido');
  @override
  late final GeneratedColumn<double> valorFcpStRetido =
      GeneratedColumn<double>('VALOR_FCP_ST_RETIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _motivoDesoneracaoIcmsMeta =
      const VerificationMeta('motivoDesoneracaoIcms');
  @override
  late final GeneratedColumn<String> motivoDesoneracaoIcms =
      GeneratedColumn<String>('MOTIVO_DESONERACAO_ICMS', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _valorIcmsDesoneradoMeta =
      const VerificationMeta('valorIcmsDesonerado');
  @override
  late final GeneratedColumn<double> valorIcmsDesonerado =
      GeneratedColumn<double>('VALOR_ICMS_DESONERADO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaCreditoIcmsSnMeta =
      const VerificationMeta('aliquotaCreditoIcmsSn');
  @override
  late final GeneratedColumn<double> aliquotaCreditoIcmsSn =
      GeneratedColumn<double>('ALIQUOTA_CREDITO_ICMS_SN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCreditoIcmsSnMeta =
      const VerificationMeta('valorCreditoIcmsSn');
  @override
  late final GeneratedColumn<double> valorCreditoIcmsSn =
      GeneratedColumn<double>('VALOR_CREDITO_ICMS_SN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBcIcmsStDestinoMeta =
      const VerificationMeta('valorBcIcmsStDestino');
  @override
  late final GeneratedColumn<double> valorBcIcmsStDestino =
      GeneratedColumn<double>('VALOR_BC_ICMS_ST_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsStDestinoMeta =
      const VerificationMeta('valorIcmsStDestino');
  @override
  late final GeneratedColumn<double> valorIcmsStDestino =
      GeneratedColumn<double>('VALOR_ICMS_ST_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualReducaoBcEfetivoMeta =
      const VerificationMeta('percentualReducaoBcEfetivo');
  @override
  late final GeneratedColumn<double> percentualReducaoBcEfetivo =
      GeneratedColumn<double>(
          'PERCENTUAL_REDUCAO_BC_EFETIVO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBcEfetivoMeta =
      const VerificationMeta('valorBcEfetivo');
  @override
  late final GeneratedColumn<double> valorBcEfetivo = GeneratedColumn<double>(
      'VALOR_BC_EFETIVO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaIcmsEfetivoMeta =
      const VerificationMeta('aliquotaIcmsEfetivo');
  @override
  late final GeneratedColumn<double> aliquotaIcmsEfetivo =
      GeneratedColumn<double>('ALIQUOTA_ICMS_EFETIVO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsEfetivoMeta =
      const VerificationMeta('valorIcmsEfetivo');
  @override
  late final GeneratedColumn<double> valorIcmsEfetivo =
      GeneratedColumn<double>('VALOR_ICMS_EFETIVO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        origemMercadoria,
        cstIcms,
        csosn,
        modalidadeBcIcms,
        percentualReducaoBcIcms,
        valorBcIcms,
        aliquotaIcms,
        valorIcmsOperacao,
        percentualDiferimento,
        valorIcmsDiferido,
        valorIcms,
        baseCalculoFcp,
        percentualFcp,
        valorFcp,
        modalidadeBcIcmsSt,
        percentualMvaIcmsSt,
        percentualReducaoBcIcmsSt,
        valorBaseCalculoIcmsSt,
        aliquotaIcmsSt,
        valorIcmsSt,
        baseCalculoFcpSt,
        percentualFcpSt,
        valorFcpSt,
        ufSt,
        percentualBcOperacaoPropria,
        valorBcIcmsStRetido,
        aliquotaSuportadaConsumidor,
        valorIcmsSubstituto,
        valorIcmsStRetido,
        baseCalculoFcpStRetido,
        percentualFcpStRetido,
        valorFcpStRetido,
        motivoDesoneracaoIcms,
        valorIcmsDesonerado,
        aliquotaCreditoIcmsSn,
        valorCreditoIcmsSn,
        valorBcIcmsStDestino,
        valorIcmsStDestino,
        percentualReducaoBcEfetivo,
        valorBcEfetivo,
        aliquotaIcmsEfetivo,
        valorIcmsEfetivo
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_ICMS';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_ICMS';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoIcms> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('ORIGEM_MERCADORIA')) {
      context.handle(
          _origemMercadoriaMeta,
          origemMercadoria.isAcceptableOrUnknown(
              data['ORIGEM_MERCADORIA']!, _origemMercadoriaMeta));
    }
    if (data.containsKey('CST_ICMS')) {
      context.handle(_cstIcmsMeta,
          cstIcms.isAcceptableOrUnknown(data['CST_ICMS']!, _cstIcmsMeta));
    }
    if (data.containsKey('CSOSN')) {
      context.handle(
          _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
    }
    if (data.containsKey('MODALIDADE_BC_ICMS')) {
      context.handle(
          _modalidadeBcIcmsMeta,
          modalidadeBcIcms.isAcceptableOrUnknown(
              data['MODALIDADE_BC_ICMS']!, _modalidadeBcIcmsMeta));
    }
    if (data.containsKey('PERCENTUAL_REDUCAO_BC_ICMS')) {
      context.handle(
          _percentualReducaoBcIcmsMeta,
          percentualReducaoBcIcms.isAcceptableOrUnknown(
              data['PERCENTUAL_REDUCAO_BC_ICMS']!,
              _percentualReducaoBcIcmsMeta));
    }
    if (data.containsKey('VALOR_BC_ICMS')) {
      context.handle(
          _valorBcIcmsMeta,
          valorBcIcms.isAcceptableOrUnknown(
              data['VALOR_BC_ICMS']!, _valorBcIcmsMeta));
    }
    if (data.containsKey('ALIQUOTA_ICMS')) {
      context.handle(
          _aliquotaIcmsMeta,
          aliquotaIcms.isAcceptableOrUnknown(
              data['ALIQUOTA_ICMS']!, _aliquotaIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS_OPERACAO')) {
      context.handle(
          _valorIcmsOperacaoMeta,
          valorIcmsOperacao.isAcceptableOrUnknown(
              data['VALOR_ICMS_OPERACAO']!, _valorIcmsOperacaoMeta));
    }
    if (data.containsKey('PERCENTUAL_DIFERIMENTO')) {
      context.handle(
          _percentualDiferimentoMeta,
          percentualDiferimento.isAcceptableOrUnknown(
              data['PERCENTUAL_DIFERIMENTO']!, _percentualDiferimentoMeta));
    }
    if (data.containsKey('VALOR_ICMS_DIFERIDO')) {
      context.handle(
          _valorIcmsDiferidoMeta,
          valorIcmsDiferido.isAcceptableOrUnknown(
              data['VALOR_ICMS_DIFERIDO']!, _valorIcmsDiferidoMeta));
    }
    if (data.containsKey('VALOR_ICMS')) {
      context.handle(_valorIcmsMeta,
          valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS']!, _valorIcmsMeta));
    }
    if (data.containsKey('BASE_CALCULO_FCP')) {
      context.handle(
          _baseCalculoFcpMeta,
          baseCalculoFcp.isAcceptableOrUnknown(
              data['BASE_CALCULO_FCP']!, _baseCalculoFcpMeta));
    }
    if (data.containsKey('PERCENTUAL_FCP')) {
      context.handle(
          _percentualFcpMeta,
          percentualFcp.isAcceptableOrUnknown(
              data['PERCENTUAL_FCP']!, _percentualFcpMeta));
    }
    if (data.containsKey('VALOR_FCP')) {
      context.handle(_valorFcpMeta,
          valorFcp.isAcceptableOrUnknown(data['VALOR_FCP']!, _valorFcpMeta));
    }
    if (data.containsKey('MODALIDADE_BC_ICMS_ST')) {
      context.handle(
          _modalidadeBcIcmsStMeta,
          modalidadeBcIcmsSt.isAcceptableOrUnknown(
              data['MODALIDADE_BC_ICMS_ST']!, _modalidadeBcIcmsStMeta));
    }
    if (data.containsKey('PERCENTUAL_MVA_ICMS_ST')) {
      context.handle(
          _percentualMvaIcmsStMeta,
          percentualMvaIcmsSt.isAcceptableOrUnknown(
              data['PERCENTUAL_MVA_ICMS_ST']!, _percentualMvaIcmsStMeta));
    }
    if (data.containsKey('PERCENTUAL_REDUCAO_BC_ICMS_ST')) {
      context.handle(
          _percentualReducaoBcIcmsStMeta,
          percentualReducaoBcIcmsSt.isAcceptableOrUnknown(
              data['PERCENTUAL_REDUCAO_BC_ICMS_ST']!,
              _percentualReducaoBcIcmsStMeta));
    }
    if (data.containsKey('VALOR_BASE_CALCULO_ICMS_ST')) {
      context.handle(
          _valorBaseCalculoIcmsStMeta,
          valorBaseCalculoIcmsSt.isAcceptableOrUnknown(
              data['VALOR_BASE_CALCULO_ICMS_ST']!,
              _valorBaseCalculoIcmsStMeta));
    }
    if (data.containsKey('ALIQUOTA_ICMS_ST')) {
      context.handle(
          _aliquotaIcmsStMeta,
          aliquotaIcmsSt.isAcceptableOrUnknown(
              data['ALIQUOTA_ICMS_ST']!, _aliquotaIcmsStMeta));
    }
    if (data.containsKey('VALOR_ICMS_ST')) {
      context.handle(
          _valorIcmsStMeta,
          valorIcmsSt.isAcceptableOrUnknown(
              data['VALOR_ICMS_ST']!, _valorIcmsStMeta));
    }
    if (data.containsKey('BASE_CALCULO_FCP_ST')) {
      context.handle(
          _baseCalculoFcpStMeta,
          baseCalculoFcpSt.isAcceptableOrUnknown(
              data['BASE_CALCULO_FCP_ST']!, _baseCalculoFcpStMeta));
    }
    if (data.containsKey('PERCENTUAL_FCP_ST')) {
      context.handle(
          _percentualFcpStMeta,
          percentualFcpSt.isAcceptableOrUnknown(
              data['PERCENTUAL_FCP_ST']!, _percentualFcpStMeta));
    }
    if (data.containsKey('VALOR_FCP_ST')) {
      context.handle(
          _valorFcpStMeta,
          valorFcpSt.isAcceptableOrUnknown(
              data['VALOR_FCP_ST']!, _valorFcpStMeta));
    }
    if (data.containsKey('UF_ST')) {
      context.handle(
          _ufStMeta, ufSt.isAcceptableOrUnknown(data['UF_ST']!, _ufStMeta));
    }
    if (data.containsKey('PERCENTUAL_BC_OPERACAO_PROPRIA')) {
      context.handle(
          _percentualBcOperacaoPropriaMeta,
          percentualBcOperacaoPropria.isAcceptableOrUnknown(
              data['PERCENTUAL_BC_OPERACAO_PROPRIA']!,
              _percentualBcOperacaoPropriaMeta));
    }
    if (data.containsKey('VALOR_BC_ICMS_ST_RETIDO')) {
      context.handle(
          _valorBcIcmsStRetidoMeta,
          valorBcIcmsStRetido.isAcceptableOrUnknown(
              data['VALOR_BC_ICMS_ST_RETIDO']!, _valorBcIcmsStRetidoMeta));
    }
    if (data.containsKey('ALIQUOTA_SUPORTADA_CONSUMIDOR')) {
      context.handle(
          _aliquotaSuportadaConsumidorMeta,
          aliquotaSuportadaConsumidor.isAcceptableOrUnknown(
              data['ALIQUOTA_SUPORTADA_CONSUMIDOR']!,
              _aliquotaSuportadaConsumidorMeta));
    }
    if (data.containsKey('VALOR_ICMS_SUBSTITUTO')) {
      context.handle(
          _valorIcmsSubstitutoMeta,
          valorIcmsSubstituto.isAcceptableOrUnknown(
              data['VALOR_ICMS_SUBSTITUTO']!, _valorIcmsSubstitutoMeta));
    }
    if (data.containsKey('VALOR_ICMS_ST_RETIDO')) {
      context.handle(
          _valorIcmsStRetidoMeta,
          valorIcmsStRetido.isAcceptableOrUnknown(
              data['VALOR_ICMS_ST_RETIDO']!, _valorIcmsStRetidoMeta));
    }
    if (data.containsKey('BASE_CALCULO_FCP_ST_RETIDO')) {
      context.handle(
          _baseCalculoFcpStRetidoMeta,
          baseCalculoFcpStRetido.isAcceptableOrUnknown(
              data['BASE_CALCULO_FCP_ST_RETIDO']!,
              _baseCalculoFcpStRetidoMeta));
    }
    if (data.containsKey('PERCENTUAL_FCP_ST_RETIDO')) {
      context.handle(
          _percentualFcpStRetidoMeta,
          percentualFcpStRetido.isAcceptableOrUnknown(
              data['PERCENTUAL_FCP_ST_RETIDO']!, _percentualFcpStRetidoMeta));
    }
    if (data.containsKey('VALOR_FCP_ST_RETIDO')) {
      context.handle(
          _valorFcpStRetidoMeta,
          valorFcpStRetido.isAcceptableOrUnknown(
              data['VALOR_FCP_ST_RETIDO']!, _valorFcpStRetidoMeta));
    }
    if (data.containsKey('MOTIVO_DESONERACAO_ICMS')) {
      context.handle(
          _motivoDesoneracaoIcmsMeta,
          motivoDesoneracaoIcms.isAcceptableOrUnknown(
              data['MOTIVO_DESONERACAO_ICMS']!, _motivoDesoneracaoIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS_DESONERADO')) {
      context.handle(
          _valorIcmsDesoneradoMeta,
          valorIcmsDesonerado.isAcceptableOrUnknown(
              data['VALOR_ICMS_DESONERADO']!, _valorIcmsDesoneradoMeta));
    }
    if (data.containsKey('ALIQUOTA_CREDITO_ICMS_SN')) {
      context.handle(
          _aliquotaCreditoIcmsSnMeta,
          aliquotaCreditoIcmsSn.isAcceptableOrUnknown(
              data['ALIQUOTA_CREDITO_ICMS_SN']!, _aliquotaCreditoIcmsSnMeta));
    }
    if (data.containsKey('VALOR_CREDITO_ICMS_SN')) {
      context.handle(
          _valorCreditoIcmsSnMeta,
          valorCreditoIcmsSn.isAcceptableOrUnknown(
              data['VALOR_CREDITO_ICMS_SN']!, _valorCreditoIcmsSnMeta));
    }
    if (data.containsKey('VALOR_BC_ICMS_ST_DESTINO')) {
      context.handle(
          _valorBcIcmsStDestinoMeta,
          valorBcIcmsStDestino.isAcceptableOrUnknown(
              data['VALOR_BC_ICMS_ST_DESTINO']!, _valorBcIcmsStDestinoMeta));
    }
    if (data.containsKey('VALOR_ICMS_ST_DESTINO')) {
      context.handle(
          _valorIcmsStDestinoMeta,
          valorIcmsStDestino.isAcceptableOrUnknown(
              data['VALOR_ICMS_ST_DESTINO']!, _valorIcmsStDestinoMeta));
    }
    if (data.containsKey('PERCENTUAL_REDUCAO_BC_EFETIVO')) {
      context.handle(
          _percentualReducaoBcEfetivoMeta,
          percentualReducaoBcEfetivo.isAcceptableOrUnknown(
              data['PERCENTUAL_REDUCAO_BC_EFETIVO']!,
              _percentualReducaoBcEfetivoMeta));
    }
    if (data.containsKey('VALOR_BC_EFETIVO')) {
      context.handle(
          _valorBcEfetivoMeta,
          valorBcEfetivo.isAcceptableOrUnknown(
              data['VALOR_BC_EFETIVO']!, _valorBcEfetivoMeta));
    }
    if (data.containsKey('ALIQUOTA_ICMS_EFETIVO')) {
      context.handle(
          _aliquotaIcmsEfetivoMeta,
          aliquotaIcmsEfetivo.isAcceptableOrUnknown(
              data['ALIQUOTA_ICMS_EFETIVO']!, _aliquotaIcmsEfetivoMeta));
    }
    if (data.containsKey('VALOR_ICMS_EFETIVO')) {
      context.handle(
          _valorIcmsEfetivoMeta,
          valorIcmsEfetivo.isAcceptableOrUnknown(
              data['VALOR_ICMS_EFETIVO']!, _valorIcmsEfetivoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIcms map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDetalheImpostoIcms.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoIcmssTable createAlias(String alias) {
    return $NfeDetalheImpostoIcmssTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIcmsUfdest extends DataClass
    implements Insertable<NfeDetalheImpostoIcmsUfdest> {
  final int? id;
  final int? idNfeDetalhe;
  final double? valorBcIcmsUfDestino;
  final double? valorBcFcpUfDestino;
  final double? percentualFcpUfDestino;
  final double? aliquotaInternaUfDestino;
  final double? aliquotaInteresdatualUfEnvolvidas;
  final double? percentualProvisorioPartilhaIcms;
  final double? valorIcmsFcpUfDestino;
  final double? valorInterestadualUfDestino;
  final double? valorInterestadualUfRemetente;
  NfeDetalheImpostoIcmsUfdest(
      {this.id,
      this.idNfeDetalhe,
      this.valorBcIcmsUfDestino,
      this.valorBcFcpUfDestino,
      this.percentualFcpUfDestino,
      this.aliquotaInternaUfDestino,
      this.aliquotaInteresdatualUfEnvolvidas,
      this.percentualProvisorioPartilhaIcms,
      this.valorIcmsFcpUfDestino,
      this.valorInterestadualUfDestino,
      this.valorInterestadualUfRemetente});
  factory NfeDetalheImpostoIcmsUfdest.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoIcmsUfdest(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      valorBcIcmsUfDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BC_ICMS_UF_DESTINO']),
      valorBcFcpUfDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BC_FCP_UF_DESTINO']),
      percentualFcpUfDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_FCP_UF_DESTINO']),
      aliquotaInternaUfDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_INTERNA_UF_DESTINO']),
      aliquotaInteresdatualUfEnvolvidas: ValueSqlType.doubleType(
              data['${effectivePrefix}ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS']),
      percentualProvisorioPartilhaIcms: ValueSqlType.doubleType(
              data['${effectivePrefix}PERCENTUAL_PROVISORIO_PARTILHA_ICMS']),
      valorIcmsFcpUfDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_FCP_UF_DESTINO']),
      valorInterestadualUfDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_INTERESTADUAL_UF_DESTINO']),
      valorInterestadualUfRemetente: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_INTERESTADUAL_UF_REMETENTE']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || valorBcIcmsUfDestino != null) {
      map['VALOR_BC_ICMS_UF_DESTINO'] = Variable<double>(valorBcIcmsUfDestino);
    }
    if (!nullToAbsent || valorBcFcpUfDestino != null) {
      map['VALOR_BC_FCP_UF_DESTINO'] = Variable<double>(valorBcFcpUfDestino);
    }
    if (!nullToAbsent || percentualFcpUfDestino != null) {
      map['PERCENTUAL_FCP_UF_DESTINO'] =
          Variable<double>(percentualFcpUfDestino);
    }
    if (!nullToAbsent || aliquotaInternaUfDestino != null) {
      map['ALIQUOTA_INTERNA_UF_DESTINO'] =
          Variable<double>(aliquotaInternaUfDestino);
    }
    if (!nullToAbsent || aliquotaInteresdatualUfEnvolvidas != null) {
      map['ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS'] =
          Variable<double>(aliquotaInteresdatualUfEnvolvidas);
    }
    if (!nullToAbsent || percentualProvisorioPartilhaIcms != null) {
      map['PERCENTUAL_PROVISORIO_PARTILHA_ICMS'] =
          Variable<double>(percentualProvisorioPartilhaIcms);
    }
    if (!nullToAbsent || valorIcmsFcpUfDestino != null) {
      map['VALOR_ICMS_FCP_UF_DESTINO'] =
          Variable<double>(valorIcmsFcpUfDestino);
    }
    if (!nullToAbsent || valorInterestadualUfDestino != null) {
      map['VALOR_INTERESTADUAL_UF_DESTINO'] =
          Variable<double>(valorInterestadualUfDestino);
    }
    if (!nullToAbsent || valorInterestadualUfRemetente != null) {
      map['VALOR_INTERESTADUAL_UF_REMETENTE'] =
          Variable<double>(valorInterestadualUfRemetente);
    }
    return map;
  }

  NfeDetalheImpostoIcmsUfdestsCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoIcmsUfdestsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      valorBcIcmsUfDestino: valorBcIcmsUfDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBcIcmsUfDestino),
      valorBcFcpUfDestino: valorBcFcpUfDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBcFcpUfDestino),
      percentualFcpUfDestino: percentualFcpUfDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualFcpUfDestino),
      aliquotaInternaUfDestino: aliquotaInternaUfDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaInternaUfDestino),
      aliquotaInteresdatualUfEnvolvidas:
          aliquotaInteresdatualUfEnvolvidas == null && nullToAbsent
              ? const Value.absent()
              : Value(aliquotaInteresdatualUfEnvolvidas),
      percentualProvisorioPartilhaIcms:
          percentualProvisorioPartilhaIcms == null && nullToAbsent
              ? const Value.absent()
              : Value(percentualProvisorioPartilhaIcms),
      valorIcmsFcpUfDestino: valorIcmsFcpUfDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsFcpUfDestino),
      valorInterestadualUfDestino:
          valorInterestadualUfDestino == null && nullToAbsent
              ? const Value.absent()
              : Value(valorInterestadualUfDestino),
      valorInterestadualUfRemetente:
          valorInterestadualUfRemetente == null && nullToAbsent
              ? const Value.absent()
              : Value(valorInterestadualUfRemetente),
    );
  }

  factory NfeDetalheImpostoIcmsUfdest.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIcmsUfdest(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      valorBcIcmsUfDestino:
          serializer.fromJson<double?>(json['valorBcIcmsUfDestino']),
      valorBcFcpUfDestino:
          serializer.fromJson<double?>(json['valorBcFcpUfDestino']),
      percentualFcpUfDestino:
          serializer.fromJson<double?>(json['percentualFcpUfDestino']),
      aliquotaInternaUfDestino:
          serializer.fromJson<double?>(json['aliquotaInternaUfDestino']),
      aliquotaInteresdatualUfEnvolvidas: serializer
          .fromJson<double?>(json['aliquotaInteresdatualUfEnvolvidas']),
      percentualProvisorioPartilhaIcms: serializer
          .fromJson<double?>(json['percentualProvisorioPartilhaIcms']),
      valorIcmsFcpUfDestino:
          serializer.fromJson<double?>(json['valorIcmsFcpUfDestino']),
      valorInterestadualUfDestino:
          serializer.fromJson<double?>(json['valorInterestadualUfDestino']),
      valorInterestadualUfRemetente:
          serializer.fromJson<double?>(json['valorInterestadualUfRemetente']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'valorBcIcmsUfDestino': serializer.toJson<double?>(valorBcIcmsUfDestino),
      'valorBcFcpUfDestino': serializer.toJson<double?>(valorBcFcpUfDestino),
      'percentualFcpUfDestino':
          serializer.toJson<double?>(percentualFcpUfDestino),
      'aliquotaInternaUfDestino':
          serializer.toJson<double?>(aliquotaInternaUfDestino),
      'aliquotaInteresdatualUfEnvolvidas':
          serializer.toJson<double?>(aliquotaInteresdatualUfEnvolvidas),
      'percentualProvisorioPartilhaIcms':
          serializer.toJson<double?>(percentualProvisorioPartilhaIcms),
      'valorIcmsFcpUfDestino':
          serializer.toJson<double?>(valorIcmsFcpUfDestino),
      'valorInterestadualUfDestino':
          serializer.toJson<double?>(valorInterestadualUfDestino),
      'valorInterestadualUfRemetente':
          serializer.toJson<double?>(valorInterestadualUfRemetente),
    };
  }

  NfeDetalheImpostoIcmsUfdest copyWith(
          {int? id,
          int? idNfeDetalhe,
          double? valorBcIcmsUfDestino,
          double? valorBcFcpUfDestino,
          double? percentualFcpUfDestino,
          double? aliquotaInternaUfDestino,
          double? aliquotaInteresdatualUfEnvolvidas,
          double? percentualProvisorioPartilhaIcms,
          double? valorIcmsFcpUfDestino,
          double? valorInterestadualUfDestino,
          double? valorInterestadualUfRemetente}) =>
      NfeDetalheImpostoIcmsUfdest(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        valorBcIcmsUfDestino: valorBcIcmsUfDestino ?? this.valorBcIcmsUfDestino,
        valorBcFcpUfDestino: valorBcFcpUfDestino ?? this.valorBcFcpUfDestino,
        percentualFcpUfDestino:
            percentualFcpUfDestino ?? this.percentualFcpUfDestino,
        aliquotaInternaUfDestino:
            aliquotaInternaUfDestino ?? this.aliquotaInternaUfDestino,
        aliquotaInteresdatualUfEnvolvidas: aliquotaInteresdatualUfEnvolvidas ??
            this.aliquotaInteresdatualUfEnvolvidas,
        percentualProvisorioPartilhaIcms: percentualProvisorioPartilhaIcms ??
            this.percentualProvisorioPartilhaIcms,
        valorIcmsFcpUfDestino:
            valorIcmsFcpUfDestino ?? this.valorIcmsFcpUfDestino,
        valorInterestadualUfDestino:
            valorInterestadualUfDestino ?? this.valorInterestadualUfDestino,
        valorInterestadualUfRemetente:
            valorInterestadualUfRemetente ?? this.valorInterestadualUfRemetente,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIcmsUfdest(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBcIcmsUfDestino: $valorBcIcmsUfDestino, ')
          ..write('valorBcFcpUfDestino: $valorBcFcpUfDestino, ')
          ..write('percentualFcpUfDestino: $percentualFcpUfDestino, ')
          ..write('aliquotaInternaUfDestino: $aliquotaInternaUfDestino, ')
          ..write(
              'aliquotaInteresdatualUfEnvolvidas: $aliquotaInteresdatualUfEnvolvidas, ')
          ..write(
              'percentualProvisorioPartilhaIcms: $percentualProvisorioPartilhaIcms, ')
          ..write('valorIcmsFcpUfDestino: $valorIcmsFcpUfDestino, ')
          ..write('valorInterestadualUfDestino: $valorInterestadualUfDestino, ')
          ..write(
              'valorInterestadualUfRemetente: $valorInterestadualUfRemetente')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeDetalhe,
      valorBcIcmsUfDestino,
      valorBcFcpUfDestino,
      percentualFcpUfDestino,
      aliquotaInternaUfDestino,
      aliquotaInteresdatualUfEnvolvidas,
      percentualProvisorioPartilhaIcms,
      valorIcmsFcpUfDestino,
      valorInterestadualUfDestino,
      valorInterestadualUfRemetente);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIcmsUfdest &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.valorBcIcmsUfDestino == this.valorBcIcmsUfDestino &&
          other.valorBcFcpUfDestino == this.valorBcFcpUfDestino &&
          other.percentualFcpUfDestino == this.percentualFcpUfDestino &&
          other.aliquotaInternaUfDestino == this.aliquotaInternaUfDestino &&
          other.aliquotaInteresdatualUfEnvolvidas ==
              this.aliquotaInteresdatualUfEnvolvidas &&
          other.percentualProvisorioPartilhaIcms ==
              this.percentualProvisorioPartilhaIcms &&
          other.valorIcmsFcpUfDestino == this.valorIcmsFcpUfDestino &&
          other.valorInterestadualUfDestino ==
              this.valorInterestadualUfDestino &&
          other.valorInterestadualUfRemetente ==
              this.valorInterestadualUfRemetente);
}

class NfeDetalheImpostoIcmsUfdestsCompanion
    extends UpdateCompanion<NfeDetalheImpostoIcmsUfdest> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> valorBcIcmsUfDestino;
  final Value<double?> valorBcFcpUfDestino;
  final Value<double?> percentualFcpUfDestino;
  final Value<double?> aliquotaInternaUfDestino;
  final Value<double?> aliquotaInteresdatualUfEnvolvidas;
  final Value<double?> percentualProvisorioPartilhaIcms;
  final Value<double?> valorIcmsFcpUfDestino;
  final Value<double?> valorInterestadualUfDestino;
  final Value<double?> valorInterestadualUfRemetente;
  const NfeDetalheImpostoIcmsUfdestsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBcIcmsUfDestino = const Value.absent(),
    this.valorBcFcpUfDestino = const Value.absent(),
    this.percentualFcpUfDestino = const Value.absent(),
    this.aliquotaInternaUfDestino = const Value.absent(),
    this.aliquotaInteresdatualUfEnvolvidas = const Value.absent(),
    this.percentualProvisorioPartilhaIcms = const Value.absent(),
    this.valorIcmsFcpUfDestino = const Value.absent(),
    this.valorInterestadualUfDestino = const Value.absent(),
    this.valorInterestadualUfRemetente = const Value.absent(),
  });
  NfeDetalheImpostoIcmsUfdestsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBcIcmsUfDestino = const Value.absent(),
    this.valorBcFcpUfDestino = const Value.absent(),
    this.percentualFcpUfDestino = const Value.absent(),
    this.aliquotaInternaUfDestino = const Value.absent(),
    this.aliquotaInteresdatualUfEnvolvidas = const Value.absent(),
    this.percentualProvisorioPartilhaIcms = const Value.absent(),
    this.valorIcmsFcpUfDestino = const Value.absent(),
    this.valorInterestadualUfDestino = const Value.absent(),
    this.valorInterestadualUfRemetente = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIcmsUfdest> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? valorBcIcmsUfDestino,
    Expression<double>? valorBcFcpUfDestino,
    Expression<double>? percentualFcpUfDestino,
    Expression<double>? aliquotaInternaUfDestino,
    Expression<double>? aliquotaInteresdatualUfEnvolvidas,
    Expression<double>? percentualProvisorioPartilhaIcms,
    Expression<double>? valorIcmsFcpUfDestino,
    Expression<double>? valorInterestadualUfDestino,
    Expression<double>? valorInterestadualUfRemetente,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (valorBcIcmsUfDestino != null)
        'VALOR_BC_ICMS_UF_DESTINO': valorBcIcmsUfDestino,
      if (valorBcFcpUfDestino != null)
        'VALOR_BC_FCP_UF_DESTINO': valorBcFcpUfDestino,
      if (percentualFcpUfDestino != null)
        'PERCENTUAL_FCP_UF_DESTINO': percentualFcpUfDestino,
      if (aliquotaInternaUfDestino != null)
        'ALIQUOTA_INTERNA_UF_DESTINO': aliquotaInternaUfDestino,
      if (aliquotaInteresdatualUfEnvolvidas != null)
        'ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS':
            aliquotaInteresdatualUfEnvolvidas,
      if (percentualProvisorioPartilhaIcms != null)
        'PERCENTUAL_PROVISORIO_PARTILHA_ICMS': percentualProvisorioPartilhaIcms,
      if (valorIcmsFcpUfDestino != null)
        'VALOR_ICMS_FCP_UF_DESTINO': valorIcmsFcpUfDestino,
      if (valorInterestadualUfDestino != null)
        'VALOR_INTERESTADUAL_UF_DESTINO': valorInterestadualUfDestino,
      if (valorInterestadualUfRemetente != null)
        'VALOR_INTERESTADUAL_UF_REMETENTE': valorInterestadualUfRemetente,
    });
  }

  NfeDetalheImpostoIcmsUfdestsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<double?>? valorBcIcmsUfDestino,
      Value<double?>? valorBcFcpUfDestino,
      Value<double?>? percentualFcpUfDestino,
      Value<double?>? aliquotaInternaUfDestino,
      Value<double?>? aliquotaInteresdatualUfEnvolvidas,
      Value<double?>? percentualProvisorioPartilhaIcms,
      Value<double?>? valorIcmsFcpUfDestino,
      Value<double?>? valorInterestadualUfDestino,
      Value<double?>? valorInterestadualUfRemetente}) {
    return NfeDetalheImpostoIcmsUfdestsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      valorBcIcmsUfDestino: valorBcIcmsUfDestino ?? this.valorBcIcmsUfDestino,
      valorBcFcpUfDestino: valorBcFcpUfDestino ?? this.valorBcFcpUfDestino,
      percentualFcpUfDestino:
          percentualFcpUfDestino ?? this.percentualFcpUfDestino,
      aliquotaInternaUfDestino:
          aliquotaInternaUfDestino ?? this.aliquotaInternaUfDestino,
      aliquotaInteresdatualUfEnvolvidas: aliquotaInteresdatualUfEnvolvidas ??
          this.aliquotaInteresdatualUfEnvolvidas,
      percentualProvisorioPartilhaIcms: percentualProvisorioPartilhaIcms ??
          this.percentualProvisorioPartilhaIcms,
      valorIcmsFcpUfDestino:
          valorIcmsFcpUfDestino ?? this.valorIcmsFcpUfDestino,
      valorInterestadualUfDestino:
          valorInterestadualUfDestino ?? this.valorInterestadualUfDestino,
      valorInterestadualUfRemetente:
          valorInterestadualUfRemetente ?? this.valorInterestadualUfRemetente,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (valorBcIcmsUfDestino.present) {
      map['VALOR_BC_ICMS_UF_DESTINO'] =
          Variable<double>(valorBcIcmsUfDestino.value);
    }
    if (valorBcFcpUfDestino.present) {
      map['VALOR_BC_FCP_UF_DESTINO'] =
          Variable<double>(valorBcFcpUfDestino.value);
    }
    if (percentualFcpUfDestino.present) {
      map['PERCENTUAL_FCP_UF_DESTINO'] =
          Variable<double>(percentualFcpUfDestino.value);
    }
    if (aliquotaInternaUfDestino.present) {
      map['ALIQUOTA_INTERNA_UF_DESTINO'] =
          Variable<double>(aliquotaInternaUfDestino.value);
    }
    if (aliquotaInteresdatualUfEnvolvidas.present) {
      map['ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS'] =
          Variable<double>(aliquotaInteresdatualUfEnvolvidas.value);
    }
    if (percentualProvisorioPartilhaIcms.present) {
      map['PERCENTUAL_PROVISORIO_PARTILHA_ICMS'] =
          Variable<double>(percentualProvisorioPartilhaIcms.value);
    }
    if (valorIcmsFcpUfDestino.present) {
      map['VALOR_ICMS_FCP_UF_DESTINO'] =
          Variable<double>(valorIcmsFcpUfDestino.value);
    }
    if (valorInterestadualUfDestino.present) {
      map['VALOR_INTERESTADUAL_UF_DESTINO'] =
          Variable<double>(valorInterestadualUfDestino.value);
    }
    if (valorInterestadualUfRemetente.present) {
      map['VALOR_INTERESTADUAL_UF_REMETENTE'] =
          Variable<double>(valorInterestadualUfRemetente.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIcmsUfdestsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBcIcmsUfDestino: $valorBcIcmsUfDestino, ')
          ..write('valorBcFcpUfDestino: $valorBcFcpUfDestino, ')
          ..write('percentualFcpUfDestino: $percentualFcpUfDestino, ')
          ..write('aliquotaInternaUfDestino: $aliquotaInternaUfDestino, ')
          ..write(
              'aliquotaInteresdatualUfEnvolvidas: $aliquotaInteresdatualUfEnvolvidas, ')
          ..write(
              'percentualProvisorioPartilhaIcms: $percentualProvisorioPartilhaIcms, ')
          ..write('valorIcmsFcpUfDestino: $valorIcmsFcpUfDestino, ')
          ..write('valorInterestadualUfDestino: $valorInterestadualUfDestino, ')
          ..write(
              'valorInterestadualUfRemetente: $valorInterestadualUfRemetente')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIcmsUfdestsTable extends NfeDetalheImpostoIcmsUfdests
    with
        TableInfo<$NfeDetalheImpostoIcmsUfdestsTable,
            NfeDetalheImpostoIcmsUfdest> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIcmsUfdestsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _valorBcIcmsUfDestinoMeta =
      const VerificationMeta('valorBcIcmsUfDestino');
  @override
  late final GeneratedColumn<double> valorBcIcmsUfDestino =
      GeneratedColumn<double>('VALOR_BC_ICMS_UF_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBcFcpUfDestinoMeta =
      const VerificationMeta('valorBcFcpUfDestino');
  @override
  late final GeneratedColumn<double> valorBcFcpUfDestino =
      GeneratedColumn<double>('VALOR_BC_FCP_UF_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualFcpUfDestinoMeta =
      const VerificationMeta('percentualFcpUfDestino');
  @override
  late final GeneratedColumn<double> percentualFcpUfDestino =
      GeneratedColumn<double>('PERCENTUAL_FCP_UF_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaInternaUfDestinoMeta =
      const VerificationMeta('aliquotaInternaUfDestino');
  @override
  late final GeneratedColumn<double> aliquotaInternaUfDestino =
      GeneratedColumn<double>('ALIQUOTA_INTERNA_UF_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaInteresdatualUfEnvolvidasMeta =
      const VerificationMeta('aliquotaInteresdatualUfEnvolvidas');
  @override
  late final GeneratedColumn<double> aliquotaInteresdatualUfEnvolvidas =
      GeneratedColumn<double>(
          'ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualProvisorioPartilhaIcmsMeta =
      const VerificationMeta('percentualProvisorioPartilhaIcms');
  @override
  late final GeneratedColumn<double> percentualProvisorioPartilhaIcms =
      GeneratedColumn<double>(
          'PERCENTUAL_PROVISORIO_PARTILHA_ICMS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsFcpUfDestinoMeta =
      const VerificationMeta('valorIcmsFcpUfDestino');
  @override
  late final GeneratedColumn<double> valorIcmsFcpUfDestino =
      GeneratedColumn<double>('VALOR_ICMS_FCP_UF_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorInterestadualUfDestinoMeta =
      const VerificationMeta('valorInterestadualUfDestino');
  @override
  late final GeneratedColumn<double> valorInterestadualUfDestino =
      GeneratedColumn<double>(
          'VALOR_INTERESTADUAL_UF_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorInterestadualUfRemetenteMeta =
      const VerificationMeta('valorInterestadualUfRemetente');
  @override
  late final GeneratedColumn<double> valorInterestadualUfRemetente =
      GeneratedColumn<double>(
          'VALOR_INTERESTADUAL_UF_REMETENTE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        valorBcIcmsUfDestino,
        valorBcFcpUfDestino,
        percentualFcpUfDestino,
        aliquotaInternaUfDestino,
        aliquotaInteresdatualUfEnvolvidas,
        percentualProvisorioPartilhaIcms,
        valorIcmsFcpUfDestino,
        valorInterestadualUfDestino,
        valorInterestadualUfRemetente
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_ICMS_UFDEST';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_ICMS_UFDEST';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoIcmsUfdest> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('VALOR_BC_ICMS_UF_DESTINO')) {
      context.handle(
          _valorBcIcmsUfDestinoMeta,
          valorBcIcmsUfDestino.isAcceptableOrUnknown(
              data['VALOR_BC_ICMS_UF_DESTINO']!, _valorBcIcmsUfDestinoMeta));
    }
    if (data.containsKey('VALOR_BC_FCP_UF_DESTINO')) {
      context.handle(
          _valorBcFcpUfDestinoMeta,
          valorBcFcpUfDestino.isAcceptableOrUnknown(
              data['VALOR_BC_FCP_UF_DESTINO']!, _valorBcFcpUfDestinoMeta));
    }
    if (data.containsKey('PERCENTUAL_FCP_UF_DESTINO')) {
      context.handle(
          _percentualFcpUfDestinoMeta,
          percentualFcpUfDestino.isAcceptableOrUnknown(
              data['PERCENTUAL_FCP_UF_DESTINO']!, _percentualFcpUfDestinoMeta));
    }
    if (data.containsKey('ALIQUOTA_INTERNA_UF_DESTINO')) {
      context.handle(
          _aliquotaInternaUfDestinoMeta,
          aliquotaInternaUfDestino.isAcceptableOrUnknown(
              data['ALIQUOTA_INTERNA_UF_DESTINO']!,
              _aliquotaInternaUfDestinoMeta));
    }
    if (data.containsKey('ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS')) {
      context.handle(
          _aliquotaInteresdatualUfEnvolvidasMeta,
          aliquotaInteresdatualUfEnvolvidas.isAcceptableOrUnknown(
              data['ALIQUOTA_INTERESDATUAL_UF_ENVOLVIDAS']!,
              _aliquotaInteresdatualUfEnvolvidasMeta));
    }
    if (data.containsKey('PERCENTUAL_PROVISORIO_PARTILHA_ICMS')) {
      context.handle(
          _percentualProvisorioPartilhaIcmsMeta,
          percentualProvisorioPartilhaIcms.isAcceptableOrUnknown(
              data['PERCENTUAL_PROVISORIO_PARTILHA_ICMS']!,
              _percentualProvisorioPartilhaIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS_FCP_UF_DESTINO')) {
      context.handle(
          _valorIcmsFcpUfDestinoMeta,
          valorIcmsFcpUfDestino.isAcceptableOrUnknown(
              data['VALOR_ICMS_FCP_UF_DESTINO']!, _valorIcmsFcpUfDestinoMeta));
    }
    if (data.containsKey('VALOR_INTERESTADUAL_UF_DESTINO')) {
      context.handle(
          _valorInterestadualUfDestinoMeta,
          valorInterestadualUfDestino.isAcceptableOrUnknown(
              data['VALOR_INTERESTADUAL_UF_DESTINO']!,
              _valorInterestadualUfDestinoMeta));
    }
    if (data.containsKey('VALOR_INTERESTADUAL_UF_REMETENTE')) {
      context.handle(
          _valorInterestadualUfRemetenteMeta,
          valorInterestadualUfRemetente.isAcceptableOrUnknown(
              data['VALOR_INTERESTADUAL_UF_REMETENTE']!,
              _valorInterestadualUfRemetenteMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIcmsUfdest map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeDetalheImpostoIcmsUfdest.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoIcmsUfdestsTable createAlias(String alias) {
    return $NfeDetalheImpostoIcmsUfdestsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIi extends DataClass
    implements Insertable<NfeDetalheImpostoIi> {
  final int? id;
  final int? idNfeDetalhe;
  final double? valorBcIi;
  final double? valorDespesasAduaneiras;
  final double? valorImpostoImportacao;
  final double? valorIof;
  NfeDetalheImpostoIi(
      {this.id,
      this.idNfeDetalhe,
      this.valorBcIi,
      this.valorDespesasAduaneiras,
      this.valorImpostoImportacao,
      this.valorIof});
  factory NfeDetalheImpostoIi.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoIi(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      valorBcIi: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_BC_II']),
      valorDespesasAduaneiras: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_DESPESAS_ADUANEIRAS']),
      valorImpostoImportacao: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_IMPOSTO_IMPORTACAO']),
      valorIof: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_IOF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || valorBcIi != null) {
      map['VALOR_BC_II'] = Variable<double>(valorBcIi);
    }
    if (!nullToAbsent || valorDespesasAduaneiras != null) {
      map['VALOR_DESPESAS_ADUANEIRAS'] =
          Variable<double>(valorDespesasAduaneiras);
    }
    if (!nullToAbsent || valorImpostoImportacao != null) {
      map['VALOR_IMPOSTO_IMPORTACAO'] =
          Variable<double>(valorImpostoImportacao);
    }
    if (!nullToAbsent || valorIof != null) {
      map['VALOR_IOF'] = Variable<double>(valorIof);
    }
    return map;
  }

  NfeDetalheImpostoIisCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoIisCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      valorBcIi: valorBcIi == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBcIi),
      valorDespesasAduaneiras: valorDespesasAduaneiras == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDespesasAduaneiras),
      valorImpostoImportacao: valorImpostoImportacao == null && nullToAbsent
          ? const Value.absent()
          : Value(valorImpostoImportacao),
      valorIof: valorIof == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIof),
    );
  }

  factory NfeDetalheImpostoIi.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIi(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      valorBcIi: serializer.fromJson<double?>(json['valorBcIi']),
      valorDespesasAduaneiras:
          serializer.fromJson<double?>(json['valorDespesasAduaneiras']),
      valorImpostoImportacao:
          serializer.fromJson<double?>(json['valorImpostoImportacao']),
      valorIof: serializer.fromJson<double?>(json['valorIof']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'valorBcIi': serializer.toJson<double?>(valorBcIi),
      'valorDespesasAduaneiras':
          serializer.toJson<double?>(valorDespesasAduaneiras),
      'valorImpostoImportacao':
          serializer.toJson<double?>(valorImpostoImportacao),
      'valorIof': serializer.toJson<double?>(valorIof),
    };
  }

  NfeDetalheImpostoIi copyWith(
          {int? id,
          int? idNfeDetalhe,
          double? valorBcIi,
          double? valorDespesasAduaneiras,
          double? valorImpostoImportacao,
          double? valorIof}) =>
      NfeDetalheImpostoIi(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        valorBcIi: valorBcIi ?? this.valorBcIi,
        valorDespesasAduaneiras:
            valorDespesasAduaneiras ?? this.valorDespesasAduaneiras,
        valorImpostoImportacao:
            valorImpostoImportacao ?? this.valorImpostoImportacao,
        valorIof: valorIof ?? this.valorIof,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIi(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBcIi: $valorBcIi, ')
          ..write('valorDespesasAduaneiras: $valorDespesasAduaneiras, ')
          ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
          ..write('valorIof: $valorIof')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeDetalhe, valorBcIi,
      valorDespesasAduaneiras, valorImpostoImportacao, valorIof);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIi &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.valorBcIi == this.valorBcIi &&
          other.valorDespesasAduaneiras == this.valorDespesasAduaneiras &&
          other.valorImpostoImportacao == this.valorImpostoImportacao &&
          other.valorIof == this.valorIof);
}

class NfeDetalheImpostoIisCompanion
    extends UpdateCompanion<NfeDetalheImpostoIi> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> valorBcIi;
  final Value<double?> valorDespesasAduaneiras;
  final Value<double?> valorImpostoImportacao;
  final Value<double?> valorIof;
  const NfeDetalheImpostoIisCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBcIi = const Value.absent(),
    this.valorDespesasAduaneiras = const Value.absent(),
    this.valorImpostoImportacao = const Value.absent(),
    this.valorIof = const Value.absent(),
  });
  NfeDetalheImpostoIisCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBcIi = const Value.absent(),
    this.valorDespesasAduaneiras = const Value.absent(),
    this.valorImpostoImportacao = const Value.absent(),
    this.valorIof = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIi> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? valorBcIi,
    Expression<double>? valorDespesasAduaneiras,
    Expression<double>? valorImpostoImportacao,
    Expression<double>? valorIof,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (valorBcIi != null) 'VALOR_BC_II': valorBcIi,
      if (valorDespesasAduaneiras != null)
        'VALOR_DESPESAS_ADUANEIRAS': valorDespesasAduaneiras,
      if (valorImpostoImportacao != null)
        'VALOR_IMPOSTO_IMPORTACAO': valorImpostoImportacao,
      if (valorIof != null) 'VALOR_IOF': valorIof,
    });
  }

  NfeDetalheImpostoIisCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<double?>? valorBcIi,
      Value<double?>? valorDespesasAduaneiras,
      Value<double?>? valorImpostoImportacao,
      Value<double?>? valorIof}) {
    return NfeDetalheImpostoIisCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      valorBcIi: valorBcIi ?? this.valorBcIi,
      valorDespesasAduaneiras:
          valorDespesasAduaneiras ?? this.valorDespesasAduaneiras,
      valorImpostoImportacao:
          valorImpostoImportacao ?? this.valorImpostoImportacao,
      valorIof: valorIof ?? this.valorIof,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (valorBcIi.present) {
      map['VALOR_BC_II'] = Variable<double>(valorBcIi.value);
    }
    if (valorDespesasAduaneiras.present) {
      map['VALOR_DESPESAS_ADUANEIRAS'] =
          Variable<double>(valorDespesasAduaneiras.value);
    }
    if (valorImpostoImportacao.present) {
      map['VALOR_IMPOSTO_IMPORTACAO'] =
          Variable<double>(valorImpostoImportacao.value);
    }
    if (valorIof.present) {
      map['VALOR_IOF'] = Variable<double>(valorIof.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIisCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBcIi: $valorBcIi, ')
          ..write('valorDespesasAduaneiras: $valorDespesasAduaneiras, ')
          ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
          ..write('valorIof: $valorIof')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIisTable extends NfeDetalheImpostoIis
    with TableInfo<$NfeDetalheImpostoIisTable, NfeDetalheImpostoIi> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIisTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _valorBcIiMeta = const VerificationMeta('valorBcIi');
  @override
  late final GeneratedColumn<double> valorBcIi = GeneratedColumn<double>(
      'VALOR_BC_II', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDespesasAduaneirasMeta =
      const VerificationMeta('valorDespesasAduaneiras');
  @override
  late final GeneratedColumn<double> valorDespesasAduaneiras =
      GeneratedColumn<double>('VALOR_DESPESAS_ADUANEIRAS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorImpostoImportacaoMeta =
      const VerificationMeta('valorImpostoImportacao');
  @override
  late final GeneratedColumn<double> valorImpostoImportacao =
      GeneratedColumn<double>('VALOR_IMPOSTO_IMPORTACAO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIofMeta = const VerificationMeta('valorIof');
  @override
  late final GeneratedColumn<double> valorIof = GeneratedColumn<double>(
      'VALOR_IOF', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        valorBcIi,
        valorDespesasAduaneiras,
        valorImpostoImportacao,
        valorIof
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_II';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_II';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoIi> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('VALOR_BC_II')) {
      context.handle(
          _valorBcIiMeta,
          valorBcIi.isAcceptableOrUnknown(
              data['VALOR_BC_II']!, _valorBcIiMeta));
    }
    if (data.containsKey('VALOR_DESPESAS_ADUANEIRAS')) {
      context.handle(
          _valorDespesasAduaneirasMeta,
          valorDespesasAduaneiras.isAcceptableOrUnknown(
              data['VALOR_DESPESAS_ADUANEIRAS']!,
              _valorDespesasAduaneirasMeta));
    }
    if (data.containsKey('VALOR_IMPOSTO_IMPORTACAO')) {
      context.handle(
          _valorImpostoImportacaoMeta,
          valorImpostoImportacao.isAcceptableOrUnknown(
              data['VALOR_IMPOSTO_IMPORTACAO']!, _valorImpostoImportacaoMeta));
    }
    if (data.containsKey('VALOR_IOF')) {
      context.handle(_valorIofMeta,
          valorIof.isAcceptableOrUnknown(data['VALOR_IOF']!, _valorIofMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIi map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDetalheImpostoIi.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoIisTable createAlias(String alias) {
    return $NfeDetalheImpostoIisTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIpi extends DataClass
    implements Insertable<NfeDetalheImpostoIpi> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cnpjProdutor;
  final String? codigoSeloIpi;
  final int? quantidadeSeloIpi;
  final String? enquadramentoLegalIpi;
  final String? cstIpi;
  final double? valorBaseCalculoIpi;
  final double? quantidadeUnidadeTributavel;
  final double? valorUnidadeTributavel;
  final double? aliquotaIpi;
  final double? valorIpi;
  NfeDetalheImpostoIpi(
      {this.id,
      this.idNfeDetalhe,
      this.cnpjProdutor,
      this.codigoSeloIpi,
      this.quantidadeSeloIpi,
      this.enquadramentoLegalIpi,
      this.cstIpi,
      this.valorBaseCalculoIpi,
      this.quantidadeUnidadeTributavel,
      this.valorUnidadeTributavel,
      this.aliquotaIpi,
      this.valorIpi});
  factory NfeDetalheImpostoIpi.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoIpi(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      cnpjProdutor: ValueSqlType.stringType(data['${effectivePrefix}CNPJ_PRODUTOR']),
      codigoSeloIpi: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_SELO_IPI']),
      quantidadeSeloIpi: ValueSqlType.intType(
          data['${effectivePrefix}QUANTIDADE_SELO_IPI']),
      enquadramentoLegalIpi: ValueSqlType.stringType(
          data['${effectivePrefix}ENQUADRAMENTO_LEGAL_IPI']),
      cstIpi: ValueSqlType.stringType(data['${effectivePrefix}CST_IPI']),
      valorBaseCalculoIpi: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BASE_CALCULO_IPI']),
      quantidadeUnidadeTributavel: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_UNIDADE_TRIBUTAVEL']),
      valorUnidadeTributavel: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_UNIDADE_TRIBUTAVEL']),
      aliquotaIpi: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_IPI']),
      valorIpi: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_IPI']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cnpjProdutor != null) {
      map['CNPJ_PRODUTOR'] = Variable<String>(cnpjProdutor);
    }
    if (!nullToAbsent || codigoSeloIpi != null) {
      map['CODIGO_SELO_IPI'] = Variable<String>(codigoSeloIpi);
    }
    if (!nullToAbsent || quantidadeSeloIpi != null) {
      map['QUANTIDADE_SELO_IPI'] = Variable<int>(quantidadeSeloIpi);
    }
    if (!nullToAbsent || enquadramentoLegalIpi != null) {
      map['ENQUADRAMENTO_LEGAL_IPI'] = Variable<String>(enquadramentoLegalIpi);
    }
    if (!nullToAbsent || cstIpi != null) {
      map['CST_IPI'] = Variable<String>(cstIpi);
    }
    if (!nullToAbsent || valorBaseCalculoIpi != null) {
      map['VALOR_BASE_CALCULO_IPI'] = Variable<double>(valorBaseCalculoIpi);
    }
    if (!nullToAbsent || quantidadeUnidadeTributavel != null) {
      map['QUANTIDADE_UNIDADE_TRIBUTAVEL'] =
          Variable<double>(quantidadeUnidadeTributavel);
    }
    if (!nullToAbsent || valorUnidadeTributavel != null) {
      map['VALOR_UNIDADE_TRIBUTAVEL'] =
          Variable<double>(valorUnidadeTributavel);
    }
    if (!nullToAbsent || aliquotaIpi != null) {
      map['ALIQUOTA_IPI'] = Variable<double>(aliquotaIpi);
    }
    if (!nullToAbsent || valorIpi != null) {
      map['VALOR_IPI'] = Variable<double>(valorIpi);
    }
    return map;
  }

  NfeDetalheImpostoIpisCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoIpisCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      cnpjProdutor: cnpjProdutor == null && nullToAbsent
          ? const Value.absent()
          : Value(cnpjProdutor),
      codigoSeloIpi: codigoSeloIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoSeloIpi),
      quantidadeSeloIpi: quantidadeSeloIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeSeloIpi),
      enquadramentoLegalIpi: enquadramentoLegalIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(enquadramentoLegalIpi),
      cstIpi:
          cstIpi == null && nullToAbsent ? const Value.absent() : Value(cstIpi),
      valorBaseCalculoIpi: valorBaseCalculoIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBaseCalculoIpi),
      quantidadeUnidadeTributavel:
          quantidadeUnidadeTributavel == null && nullToAbsent
              ? const Value.absent()
              : Value(quantidadeUnidadeTributavel),
      valorUnidadeTributavel: valorUnidadeTributavel == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnidadeTributavel),
      aliquotaIpi: aliquotaIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaIpi),
      valorIpi: valorIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIpi),
    );
  }

  factory NfeDetalheImpostoIpi.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIpi(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cnpjProdutor: serializer.fromJson<String?>(json['cnpjProdutor']),
      codigoSeloIpi: serializer.fromJson<String?>(json['codigoSeloIpi']),
      quantidadeSeloIpi: serializer.fromJson<int?>(json['quantidadeSeloIpi']),
      enquadramentoLegalIpi:
          serializer.fromJson<String?>(json['enquadramentoLegalIpi']),
      cstIpi: serializer.fromJson<String?>(json['cstIpi']),
      valorBaseCalculoIpi:
          serializer.fromJson<double?>(json['valorBaseCalculoIpi']),
      quantidadeUnidadeTributavel:
          serializer.fromJson<double?>(json['quantidadeUnidadeTributavel']),
      valorUnidadeTributavel:
          serializer.fromJson<double?>(json['valorUnidadeTributavel']),
      aliquotaIpi: serializer.fromJson<double?>(json['aliquotaIpi']),
      valorIpi: serializer.fromJson<double?>(json['valorIpi']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cnpjProdutor': serializer.toJson<String?>(cnpjProdutor),
      'codigoSeloIpi': serializer.toJson<String?>(codigoSeloIpi),
      'quantidadeSeloIpi': serializer.toJson<int?>(quantidadeSeloIpi),
      'enquadramentoLegalIpi':
          serializer.toJson<String?>(enquadramentoLegalIpi),
      'cstIpi': serializer.toJson<String?>(cstIpi),
      'valorBaseCalculoIpi': serializer.toJson<double?>(valorBaseCalculoIpi),
      'quantidadeUnidadeTributavel':
          serializer.toJson<double?>(quantidadeUnidadeTributavel),
      'valorUnidadeTributavel':
          serializer.toJson<double?>(valorUnidadeTributavel),
      'aliquotaIpi': serializer.toJson<double?>(aliquotaIpi),
      'valorIpi': serializer.toJson<double?>(valorIpi),
    };
  }

  NfeDetalheImpostoIpi copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? cnpjProdutor,
          String? codigoSeloIpi,
          int? quantidadeSeloIpi,
          String? enquadramentoLegalIpi,
          String? cstIpi,
          double? valorBaseCalculoIpi,
          double? quantidadeUnidadeTributavel,
          double? valorUnidadeTributavel,
          double? aliquotaIpi,
          double? valorIpi}) =>
      NfeDetalheImpostoIpi(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        cnpjProdutor: cnpjProdutor ?? this.cnpjProdutor,
        codigoSeloIpi: codigoSeloIpi ?? this.codigoSeloIpi,
        quantidadeSeloIpi: quantidadeSeloIpi ?? this.quantidadeSeloIpi,
        enquadramentoLegalIpi:
            enquadramentoLegalIpi ?? this.enquadramentoLegalIpi,
        cstIpi: cstIpi ?? this.cstIpi,
        valorBaseCalculoIpi: valorBaseCalculoIpi ?? this.valorBaseCalculoIpi,
        quantidadeUnidadeTributavel:
            quantidadeUnidadeTributavel ?? this.quantidadeUnidadeTributavel,
        valorUnidadeTributavel:
            valorUnidadeTributavel ?? this.valorUnidadeTributavel,
        aliquotaIpi: aliquotaIpi ?? this.aliquotaIpi,
        valorIpi: valorIpi ?? this.valorIpi,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIpi(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cnpjProdutor: $cnpjProdutor, ')
          ..write('codigoSeloIpi: $codigoSeloIpi, ')
          ..write('quantidadeSeloIpi: $quantidadeSeloIpi, ')
          ..write('enquadramentoLegalIpi: $enquadramentoLegalIpi, ')
          ..write('cstIpi: $cstIpi, ')
          ..write('valorBaseCalculoIpi: $valorBaseCalculoIpi, ')
          ..write('quantidadeUnidadeTributavel: $quantidadeUnidadeTributavel, ')
          ..write('valorUnidadeTributavel: $valorUnidadeTributavel, ')
          ..write('aliquotaIpi: $aliquotaIpi, ')
          ..write('valorIpi: $valorIpi')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeDetalhe,
      cnpjProdutor,
      codigoSeloIpi,
      quantidadeSeloIpi,
      enquadramentoLegalIpi,
      cstIpi,
      valorBaseCalculoIpi,
      quantidadeUnidadeTributavel,
      valorUnidadeTributavel,
      aliquotaIpi,
      valorIpi);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIpi &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cnpjProdutor == this.cnpjProdutor &&
          other.codigoSeloIpi == this.codigoSeloIpi &&
          other.quantidadeSeloIpi == this.quantidadeSeloIpi &&
          other.enquadramentoLegalIpi == this.enquadramentoLegalIpi &&
          other.cstIpi == this.cstIpi &&
          other.valorBaseCalculoIpi == this.valorBaseCalculoIpi &&
          other.quantidadeUnidadeTributavel ==
              this.quantidadeUnidadeTributavel &&
          other.valorUnidadeTributavel == this.valorUnidadeTributavel &&
          other.aliquotaIpi == this.aliquotaIpi &&
          other.valorIpi == this.valorIpi);
}

class NfeDetalheImpostoIpisCompanion
    extends UpdateCompanion<NfeDetalheImpostoIpi> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cnpjProdutor;
  final Value<String?> codigoSeloIpi;
  final Value<int?> quantidadeSeloIpi;
  final Value<String?> enquadramentoLegalIpi;
  final Value<String?> cstIpi;
  final Value<double?> valorBaseCalculoIpi;
  final Value<double?> quantidadeUnidadeTributavel;
  final Value<double?> valorUnidadeTributavel;
  final Value<double?> aliquotaIpi;
  final Value<double?> valorIpi;
  const NfeDetalheImpostoIpisCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cnpjProdutor = const Value.absent(),
    this.codigoSeloIpi = const Value.absent(),
    this.quantidadeSeloIpi = const Value.absent(),
    this.enquadramentoLegalIpi = const Value.absent(),
    this.cstIpi = const Value.absent(),
    this.valorBaseCalculoIpi = const Value.absent(),
    this.quantidadeUnidadeTributavel = const Value.absent(),
    this.valorUnidadeTributavel = const Value.absent(),
    this.aliquotaIpi = const Value.absent(),
    this.valorIpi = const Value.absent(),
  });
  NfeDetalheImpostoIpisCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cnpjProdutor = const Value.absent(),
    this.codigoSeloIpi = const Value.absent(),
    this.quantidadeSeloIpi = const Value.absent(),
    this.enquadramentoLegalIpi = const Value.absent(),
    this.cstIpi = const Value.absent(),
    this.valorBaseCalculoIpi = const Value.absent(),
    this.quantidadeUnidadeTributavel = const Value.absent(),
    this.valorUnidadeTributavel = const Value.absent(),
    this.aliquotaIpi = const Value.absent(),
    this.valorIpi = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIpi> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cnpjProdutor,
    Expression<String>? codigoSeloIpi,
    Expression<int>? quantidadeSeloIpi,
    Expression<String>? enquadramentoLegalIpi,
    Expression<String>? cstIpi,
    Expression<double>? valorBaseCalculoIpi,
    Expression<double>? quantidadeUnidadeTributavel,
    Expression<double>? valorUnidadeTributavel,
    Expression<double>? aliquotaIpi,
    Expression<double>? valorIpi,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (cnpjProdutor != null) 'CNPJ_PRODUTOR': cnpjProdutor,
      if (codigoSeloIpi != null) 'CODIGO_SELO_IPI': codigoSeloIpi,
      if (quantidadeSeloIpi != null) 'QUANTIDADE_SELO_IPI': quantidadeSeloIpi,
      if (enquadramentoLegalIpi != null)
        'ENQUADRAMENTO_LEGAL_IPI': enquadramentoLegalIpi,
      if (cstIpi != null) 'CST_IPI': cstIpi,
      if (valorBaseCalculoIpi != null)
        'VALOR_BASE_CALCULO_IPI': valorBaseCalculoIpi,
      if (quantidadeUnidadeTributavel != null)
        'QUANTIDADE_UNIDADE_TRIBUTAVEL': quantidadeUnidadeTributavel,
      if (valorUnidadeTributavel != null)
        'VALOR_UNIDADE_TRIBUTAVEL': valorUnidadeTributavel,
      if (aliquotaIpi != null) 'ALIQUOTA_IPI': aliquotaIpi,
      if (valorIpi != null) 'VALOR_IPI': valorIpi,
    });
  }

  NfeDetalheImpostoIpisCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? cnpjProdutor,
      Value<String?>? codigoSeloIpi,
      Value<int?>? quantidadeSeloIpi,
      Value<String?>? enquadramentoLegalIpi,
      Value<String?>? cstIpi,
      Value<double?>? valorBaseCalculoIpi,
      Value<double?>? quantidadeUnidadeTributavel,
      Value<double?>? valorUnidadeTributavel,
      Value<double?>? aliquotaIpi,
      Value<double?>? valorIpi}) {
    return NfeDetalheImpostoIpisCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cnpjProdutor: cnpjProdutor ?? this.cnpjProdutor,
      codigoSeloIpi: codigoSeloIpi ?? this.codigoSeloIpi,
      quantidadeSeloIpi: quantidadeSeloIpi ?? this.quantidadeSeloIpi,
      enquadramentoLegalIpi:
          enquadramentoLegalIpi ?? this.enquadramentoLegalIpi,
      cstIpi: cstIpi ?? this.cstIpi,
      valorBaseCalculoIpi: valorBaseCalculoIpi ?? this.valorBaseCalculoIpi,
      quantidadeUnidadeTributavel:
          quantidadeUnidadeTributavel ?? this.quantidadeUnidadeTributavel,
      valorUnidadeTributavel:
          valorUnidadeTributavel ?? this.valorUnidadeTributavel,
      aliquotaIpi: aliquotaIpi ?? this.aliquotaIpi,
      valorIpi: valorIpi ?? this.valorIpi,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cnpjProdutor.present) {
      map['CNPJ_PRODUTOR'] = Variable<String>(cnpjProdutor.value);
    }
    if (codigoSeloIpi.present) {
      map['CODIGO_SELO_IPI'] = Variable<String>(codigoSeloIpi.value);
    }
    if (quantidadeSeloIpi.present) {
      map['QUANTIDADE_SELO_IPI'] = Variable<int>(quantidadeSeloIpi.value);
    }
    if (enquadramentoLegalIpi.present) {
      map['ENQUADRAMENTO_LEGAL_IPI'] =
          Variable<String>(enquadramentoLegalIpi.value);
    }
    if (cstIpi.present) {
      map['CST_IPI'] = Variable<String>(cstIpi.value);
    }
    if (valorBaseCalculoIpi.present) {
      map['VALOR_BASE_CALCULO_IPI'] =
          Variable<double>(valorBaseCalculoIpi.value);
    }
    if (quantidadeUnidadeTributavel.present) {
      map['QUANTIDADE_UNIDADE_TRIBUTAVEL'] =
          Variable<double>(quantidadeUnidadeTributavel.value);
    }
    if (valorUnidadeTributavel.present) {
      map['VALOR_UNIDADE_TRIBUTAVEL'] =
          Variable<double>(valorUnidadeTributavel.value);
    }
    if (aliquotaIpi.present) {
      map['ALIQUOTA_IPI'] = Variable<double>(aliquotaIpi.value);
    }
    if (valorIpi.present) {
      map['VALOR_IPI'] = Variable<double>(valorIpi.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIpisCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cnpjProdutor: $cnpjProdutor, ')
          ..write('codigoSeloIpi: $codigoSeloIpi, ')
          ..write('quantidadeSeloIpi: $quantidadeSeloIpi, ')
          ..write('enquadramentoLegalIpi: $enquadramentoLegalIpi, ')
          ..write('cstIpi: $cstIpi, ')
          ..write('valorBaseCalculoIpi: $valorBaseCalculoIpi, ')
          ..write('quantidadeUnidadeTributavel: $quantidadeUnidadeTributavel, ')
          ..write('valorUnidadeTributavel: $valorUnidadeTributavel, ')
          ..write('aliquotaIpi: $aliquotaIpi, ')
          ..write('valorIpi: $valorIpi')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIpisTable extends NfeDetalheImpostoIpis
    with TableInfo<$NfeDetalheImpostoIpisTable, NfeDetalheImpostoIpi> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIpisTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _cnpjProdutorMeta =
      const VerificationMeta('cnpjProdutor');
  @override
  late final GeneratedColumn<String> cnpjProdutor = GeneratedColumn<String>(
      'CNPJ_PRODUTOR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoSeloIpiMeta =
      const VerificationMeta('codigoSeloIpi');
  @override
  late final GeneratedColumn<String> codigoSeloIpi = GeneratedColumn<String>(
      'CODIGO_SELO_IPI', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadeSeloIpiMeta =
      const VerificationMeta('quantidadeSeloIpi');
  @override
  late final GeneratedColumn<int> quantidadeSeloIpi = GeneratedColumn<int>(
      'QUANTIDADE_SELO_IPI', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _enquadramentoLegalIpiMeta =
      const VerificationMeta('enquadramentoLegalIpi');
  @override
  late final GeneratedColumn<String> enquadramentoLegalIpi =
      GeneratedColumn<String>('ENQUADRAMENTO_LEGAL_IPI', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 3),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _cstIpiMeta = const VerificationMeta('cstIpi');
  @override
  late final GeneratedColumn<String> cstIpi = GeneratedColumn<String>(
      'CST_IPI', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorBaseCalculoIpiMeta =
      const VerificationMeta('valorBaseCalculoIpi');
  @override
  late final GeneratedColumn<double> valorBaseCalculoIpi =
      GeneratedColumn<double>('VALOR_BASE_CALCULO_IPI', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeUnidadeTributavelMeta =
      const VerificationMeta('quantidadeUnidadeTributavel');
  @override
  late final GeneratedColumn<double> quantidadeUnidadeTributavel =
      GeneratedColumn<double>(
          'QUANTIDADE_UNIDADE_TRIBUTAVEL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorUnidadeTributavelMeta =
      const VerificationMeta('valorUnidadeTributavel');
  @override
  late final GeneratedColumn<double> valorUnidadeTributavel =
      GeneratedColumn<double>('VALOR_UNIDADE_TRIBUTAVEL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaIpiMeta =
      const VerificationMeta('aliquotaIpi');
  @override
  late final GeneratedColumn<double> aliquotaIpi = GeneratedColumn<double>(
      'ALIQUOTA_IPI', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIpiMeta = const VerificationMeta('valorIpi');
  @override
  late final GeneratedColumn<double> valorIpi = GeneratedColumn<double>(
      'VALOR_IPI', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        cnpjProdutor,
        codigoSeloIpi,
        quantidadeSeloIpi,
        enquadramentoLegalIpi,
        cstIpi,
        valorBaseCalculoIpi,
        quantidadeUnidadeTributavel,
        valorUnidadeTributavel,
        aliquotaIpi,
        valorIpi
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_IPI';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_IPI';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoIpi> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('CNPJ_PRODUTOR')) {
      context.handle(
          _cnpjProdutorMeta,
          cnpjProdutor.isAcceptableOrUnknown(
              data['CNPJ_PRODUTOR']!, _cnpjProdutorMeta));
    }
    if (data.containsKey('CODIGO_SELO_IPI')) {
      context.handle(
          _codigoSeloIpiMeta,
          codigoSeloIpi.isAcceptableOrUnknown(
              data['CODIGO_SELO_IPI']!, _codigoSeloIpiMeta));
    }
    if (data.containsKey('QUANTIDADE_SELO_IPI')) {
      context.handle(
          _quantidadeSeloIpiMeta,
          quantidadeSeloIpi.isAcceptableOrUnknown(
              data['QUANTIDADE_SELO_IPI']!, _quantidadeSeloIpiMeta));
    }
    if (data.containsKey('ENQUADRAMENTO_LEGAL_IPI')) {
      context.handle(
          _enquadramentoLegalIpiMeta,
          enquadramentoLegalIpi.isAcceptableOrUnknown(
              data['ENQUADRAMENTO_LEGAL_IPI']!, _enquadramentoLegalIpiMeta));
    }
    if (data.containsKey('CST_IPI')) {
      context.handle(_cstIpiMeta,
          cstIpi.isAcceptableOrUnknown(data['CST_IPI']!, _cstIpiMeta));
    }
    if (data.containsKey('VALOR_BASE_CALCULO_IPI')) {
      context.handle(
          _valorBaseCalculoIpiMeta,
          valorBaseCalculoIpi.isAcceptableOrUnknown(
              data['VALOR_BASE_CALCULO_IPI']!, _valorBaseCalculoIpiMeta));
    }
    if (data.containsKey('QUANTIDADE_UNIDADE_TRIBUTAVEL')) {
      context.handle(
          _quantidadeUnidadeTributavelMeta,
          quantidadeUnidadeTributavel.isAcceptableOrUnknown(
              data['QUANTIDADE_UNIDADE_TRIBUTAVEL']!,
              _quantidadeUnidadeTributavelMeta));
    }
    if (data.containsKey('VALOR_UNIDADE_TRIBUTAVEL')) {
      context.handle(
          _valorUnidadeTributavelMeta,
          valorUnidadeTributavel.isAcceptableOrUnknown(
              data['VALOR_UNIDADE_TRIBUTAVEL']!, _valorUnidadeTributavelMeta));
    }
    if (data.containsKey('ALIQUOTA_IPI')) {
      context.handle(
          _aliquotaIpiMeta,
          aliquotaIpi.isAcceptableOrUnknown(
              data['ALIQUOTA_IPI']!, _aliquotaIpiMeta));
    }
    if (data.containsKey('VALOR_IPI')) {
      context.handle(_valorIpiMeta,
          valorIpi.isAcceptableOrUnknown(data['VALOR_IPI']!, _valorIpiMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIpi map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDetalheImpostoIpi.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoIpisTable createAlias(String alias) {
    return $NfeDetalheImpostoIpisTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoIssqn extends DataClass
    implements Insertable<NfeDetalheImpostoIssqn> {
  final int? id;
  final int? idNfeDetalhe;
  final double? baseCalculoIssqn;
  final double? aliquotaIssqn;
  final double? valorIssqn;
  final int? municipioIssqn;
  final int? itemListaServicos;
  final double? valorDeducao;
  final double? valorOutrasRetencoes;
  final double? valorDescontoIncondicionado;
  final double? valorDescontoCondicionado;
  final double? valorRetencaoIss;
  final String? indicadorExigibilidadeIss;
  final String? codigoServico;
  final int? municipioIncidencia;
  final int? paisSevicoPrestado;
  final String? numeroProcesso;
  final String? indicadorIncentivoFiscal;
  NfeDetalheImpostoIssqn(
      {this.id,
      this.idNfeDetalhe,
      this.baseCalculoIssqn,
      this.aliquotaIssqn,
      this.valorIssqn,
      this.municipioIssqn,
      this.itemListaServicos,
      this.valorDeducao,
      this.valorOutrasRetencoes,
      this.valorDescontoIncondicionado,
      this.valorDescontoCondicionado,
      this.valorRetencaoIss,
      this.indicadorExigibilidadeIss,
      this.codigoServico,
      this.municipioIncidencia,
      this.paisSevicoPrestado,
      this.numeroProcesso,
      this.indicadorIncentivoFiscal});
  factory NfeDetalheImpostoIssqn.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoIssqn(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      baseCalculoIssqn: ValueSqlType.doubleType(
          data['${effectivePrefix}BASE_CALCULO_ISSQN']),
      aliquotaIssqn: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_ISSQN']),
      valorIssqn: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ISSQN']),
      municipioIssqn: ValueSqlType.intType(data['${effectivePrefix}MUNICIPIO_ISSQN']),
      itemListaServicos: ValueSqlType.intType(
          data['${effectivePrefix}ITEM_LISTA_SERVICOS']),
      valorDeducao: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DEDUCAO']),
      valorOutrasRetencoes: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_OUTRAS_RETENCOES']),
      valorDescontoIncondicionado: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_DESCONTO_INCONDICIONADO']),
      valorDescontoCondicionado: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_DESCONTO_CONDICIONADO']),
      valorRetencaoIss: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_RETENCAO_ISS']),
      indicadorExigibilidadeIss: ValueSqlType.stringType(
          data['${effectivePrefix}INDICADOR_EXIGIBILIDADE_ISS']),
      codigoServico: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_SERVICO']),
      municipioIncidencia: ValueSqlType.intType(
          data['${effectivePrefix}MUNICIPIO_INCIDENCIA']),
      paisSevicoPrestado: ValueSqlType.intType(
          data['${effectivePrefix}PAIS_SEVICO_PRESTADO']),
      numeroProcesso: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_PROCESSO']),
      indicadorIncentivoFiscal: ValueSqlType.stringType(
          data['${effectivePrefix}INDICADOR_INCENTIVO_FISCAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || baseCalculoIssqn != null) {
      map['BASE_CALCULO_ISSQN'] = Variable<double>(baseCalculoIssqn);
    }
    if (!nullToAbsent || aliquotaIssqn != null) {
      map['ALIQUOTA_ISSQN'] = Variable<double>(aliquotaIssqn);
    }
    if (!nullToAbsent || valorIssqn != null) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn);
    }
    if (!nullToAbsent || municipioIssqn != null) {
      map['MUNICIPIO_ISSQN'] = Variable<int>(municipioIssqn);
    }
    if (!nullToAbsent || itemListaServicos != null) {
      map['ITEM_LISTA_SERVICOS'] = Variable<int>(itemListaServicos);
    }
    if (!nullToAbsent || valorDeducao != null) {
      map['VALOR_DEDUCAO'] = Variable<double>(valorDeducao);
    }
    if (!nullToAbsent || valorOutrasRetencoes != null) {
      map['VALOR_OUTRAS_RETENCOES'] = Variable<double>(valorOutrasRetencoes);
    }
    if (!nullToAbsent || valorDescontoIncondicionado != null) {
      map['VALOR_DESCONTO_INCONDICIONADO'] =
          Variable<double>(valorDescontoIncondicionado);
    }
    if (!nullToAbsent || valorDescontoCondicionado != null) {
      map['VALOR_DESCONTO_CONDICIONADO'] =
          Variable<double>(valorDescontoCondicionado);
    }
    if (!nullToAbsent || valorRetencaoIss != null) {
      map['VALOR_RETENCAO_ISS'] = Variable<double>(valorRetencaoIss);
    }
    if (!nullToAbsent || indicadorExigibilidadeIss != null) {
      map['INDICADOR_EXIGIBILIDADE_ISS'] =
          Variable<String>(indicadorExigibilidadeIss);
    }
    if (!nullToAbsent || codigoServico != null) {
      map['CODIGO_SERVICO'] = Variable<String>(codigoServico);
    }
    if (!nullToAbsent || municipioIncidencia != null) {
      map['MUNICIPIO_INCIDENCIA'] = Variable<int>(municipioIncidencia);
    }
    if (!nullToAbsent || paisSevicoPrestado != null) {
      map['PAIS_SEVICO_PRESTADO'] = Variable<int>(paisSevicoPrestado);
    }
    if (!nullToAbsent || numeroProcesso != null) {
      map['NUMERO_PROCESSO'] = Variable<String>(numeroProcesso);
    }
    if (!nullToAbsent || indicadorIncentivoFiscal != null) {
      map['INDICADOR_INCENTIVO_FISCAL'] =
          Variable<String>(indicadorIncentivoFiscal);
    }
    return map;
  }

  NfeDetalheImpostoIssqnsCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoIssqnsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      baseCalculoIssqn: baseCalculoIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoIssqn),
      aliquotaIssqn: aliquotaIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaIssqn),
      valorIssqn: valorIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIssqn),
      municipioIssqn: municipioIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(municipioIssqn),
      itemListaServicos: itemListaServicos == null && nullToAbsent
          ? const Value.absent()
          : Value(itemListaServicos),
      valorDeducao: valorDeducao == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDeducao),
      valorOutrasRetencoes: valorOutrasRetencoes == null && nullToAbsent
          ? const Value.absent()
          : Value(valorOutrasRetencoes),
      valorDescontoIncondicionado:
          valorDescontoIncondicionado == null && nullToAbsent
              ? const Value.absent()
              : Value(valorDescontoIncondicionado),
      valorDescontoCondicionado:
          valorDescontoCondicionado == null && nullToAbsent
              ? const Value.absent()
              : Value(valorDescontoCondicionado),
      valorRetencaoIss: valorRetencaoIss == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRetencaoIss),
      indicadorExigibilidadeIss:
          indicadorExigibilidadeIss == null && nullToAbsent
              ? const Value.absent()
              : Value(indicadorExigibilidadeIss),
      codigoServico: codigoServico == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoServico),
      municipioIncidencia: municipioIncidencia == null && nullToAbsent
          ? const Value.absent()
          : Value(municipioIncidencia),
      paisSevicoPrestado: paisSevicoPrestado == null && nullToAbsent
          ? const Value.absent()
          : Value(paisSevicoPrestado),
      numeroProcesso: numeroProcesso == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroProcesso),
      indicadorIncentivoFiscal: indicadorIncentivoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(indicadorIncentivoFiscal),
    );
  }

  factory NfeDetalheImpostoIssqn.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoIssqn(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      baseCalculoIssqn: serializer.fromJson<double?>(json['baseCalculoIssqn']),
      aliquotaIssqn: serializer.fromJson<double?>(json['aliquotaIssqn']),
      valorIssqn: serializer.fromJson<double?>(json['valorIssqn']),
      municipioIssqn: serializer.fromJson<int?>(json['municipioIssqn']),
      itemListaServicos: serializer.fromJson<int?>(json['itemListaServicos']),
      valorDeducao: serializer.fromJson<double?>(json['valorDeducao']),
      valorOutrasRetencoes:
          serializer.fromJson<double?>(json['valorOutrasRetencoes']),
      valorDescontoIncondicionado:
          serializer.fromJson<double?>(json['valorDescontoIncondicionado']),
      valorDescontoCondicionado:
          serializer.fromJson<double?>(json['valorDescontoCondicionado']),
      valorRetencaoIss: serializer.fromJson<double?>(json['valorRetencaoIss']),
      indicadorExigibilidadeIss:
          serializer.fromJson<String?>(json['indicadorExigibilidadeIss']),
      codigoServico: serializer.fromJson<String?>(json['codigoServico']),
      municipioIncidencia:
          serializer.fromJson<int?>(json['municipioIncidencia']),
      paisSevicoPrestado: serializer.fromJson<int?>(json['paisSevicoPrestado']),
      numeroProcesso: serializer.fromJson<String?>(json['numeroProcesso']),
      indicadorIncentivoFiscal:
          serializer.fromJson<String?>(json['indicadorIncentivoFiscal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'baseCalculoIssqn': serializer.toJson<double?>(baseCalculoIssqn),
      'aliquotaIssqn': serializer.toJson<double?>(aliquotaIssqn),
      'valorIssqn': serializer.toJson<double?>(valorIssqn),
      'municipioIssqn': serializer.toJson<int?>(municipioIssqn),
      'itemListaServicos': serializer.toJson<int?>(itemListaServicos),
      'valorDeducao': serializer.toJson<double?>(valorDeducao),
      'valorOutrasRetencoes': serializer.toJson<double?>(valorOutrasRetencoes),
      'valorDescontoIncondicionado':
          serializer.toJson<double?>(valorDescontoIncondicionado),
      'valorDescontoCondicionado':
          serializer.toJson<double?>(valorDescontoCondicionado),
      'valorRetencaoIss': serializer.toJson<double?>(valorRetencaoIss),
      'indicadorExigibilidadeIss':
          serializer.toJson<String?>(indicadorExigibilidadeIss),
      'codigoServico': serializer.toJson<String?>(codigoServico),
      'municipioIncidencia': serializer.toJson<int?>(municipioIncidencia),
      'paisSevicoPrestado': serializer.toJson<int?>(paisSevicoPrestado),
      'numeroProcesso': serializer.toJson<String?>(numeroProcesso),
      'indicadorIncentivoFiscal':
          serializer.toJson<String?>(indicadorIncentivoFiscal),
    };
  }

  NfeDetalheImpostoIssqn copyWith(
          {int? id,
          int? idNfeDetalhe,
          double? baseCalculoIssqn,
          double? aliquotaIssqn,
          double? valorIssqn,
          int? municipioIssqn,
          int? itemListaServicos,
          double? valorDeducao,
          double? valorOutrasRetencoes,
          double? valorDescontoIncondicionado,
          double? valorDescontoCondicionado,
          double? valorRetencaoIss,
          String? indicadorExigibilidadeIss,
          String? codigoServico,
          int? municipioIncidencia,
          int? paisSevicoPrestado,
          String? numeroProcesso,
          String? indicadorIncentivoFiscal}) =>
      NfeDetalheImpostoIssqn(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        baseCalculoIssqn: baseCalculoIssqn ?? this.baseCalculoIssqn,
        aliquotaIssqn: aliquotaIssqn ?? this.aliquotaIssqn,
        valorIssqn: valorIssqn ?? this.valorIssqn,
        municipioIssqn: municipioIssqn ?? this.municipioIssqn,
        itemListaServicos: itemListaServicos ?? this.itemListaServicos,
        valorDeducao: valorDeducao ?? this.valorDeducao,
        valorOutrasRetencoes: valorOutrasRetencoes ?? this.valorOutrasRetencoes,
        valorDescontoIncondicionado:
            valorDescontoIncondicionado ?? this.valorDescontoIncondicionado,
        valorDescontoCondicionado:
            valorDescontoCondicionado ?? this.valorDescontoCondicionado,
        valorRetencaoIss: valorRetencaoIss ?? this.valorRetencaoIss,
        indicadorExigibilidadeIss:
            indicadorExigibilidadeIss ?? this.indicadorExigibilidadeIss,
        codigoServico: codigoServico ?? this.codigoServico,
        municipioIncidencia: municipioIncidencia ?? this.municipioIncidencia,
        paisSevicoPrestado: paisSevicoPrestado ?? this.paisSevicoPrestado,
        numeroProcesso: numeroProcesso ?? this.numeroProcesso,
        indicadorIncentivoFiscal:
            indicadorIncentivoFiscal ?? this.indicadorIncentivoFiscal,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIssqn(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
          ..write('aliquotaIssqn: $aliquotaIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('municipioIssqn: $municipioIssqn, ')
          ..write('itemListaServicos: $itemListaServicos, ')
          ..write('valorDeducao: $valorDeducao, ')
          ..write('valorOutrasRetencoes: $valorOutrasRetencoes, ')
          ..write('valorDescontoIncondicionado: $valorDescontoIncondicionado, ')
          ..write('valorDescontoCondicionado: $valorDescontoCondicionado, ')
          ..write('valorRetencaoIss: $valorRetencaoIss, ')
          ..write('indicadorExigibilidadeIss: $indicadorExigibilidadeIss, ')
          ..write('codigoServico: $codigoServico, ')
          ..write('municipioIncidencia: $municipioIncidencia, ')
          ..write('paisSevicoPrestado: $paisSevicoPrestado, ')
          ..write('numeroProcesso: $numeroProcesso, ')
          ..write('indicadorIncentivoFiscal: $indicadorIncentivoFiscal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeDetalhe,
      baseCalculoIssqn,
      aliquotaIssqn,
      valorIssqn,
      municipioIssqn,
      itemListaServicos,
      valorDeducao,
      valorOutrasRetencoes,
      valorDescontoIncondicionado,
      valorDescontoCondicionado,
      valorRetencaoIss,
      indicadorExigibilidadeIss,
      codigoServico,
      municipioIncidencia,
      paisSevicoPrestado,
      numeroProcesso,
      indicadorIncentivoFiscal);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoIssqn &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.baseCalculoIssqn == this.baseCalculoIssqn &&
          other.aliquotaIssqn == this.aliquotaIssqn &&
          other.valorIssqn == this.valorIssqn &&
          other.municipioIssqn == this.municipioIssqn &&
          other.itemListaServicos == this.itemListaServicos &&
          other.valorDeducao == this.valorDeducao &&
          other.valorOutrasRetencoes == this.valorOutrasRetencoes &&
          other.valorDescontoIncondicionado ==
              this.valorDescontoIncondicionado &&
          other.valorDescontoCondicionado == this.valorDescontoCondicionado &&
          other.valorRetencaoIss == this.valorRetencaoIss &&
          other.indicadorExigibilidadeIss == this.indicadorExigibilidadeIss &&
          other.codigoServico == this.codigoServico &&
          other.municipioIncidencia == this.municipioIncidencia &&
          other.paisSevicoPrestado == this.paisSevicoPrestado &&
          other.numeroProcesso == this.numeroProcesso &&
          other.indicadorIncentivoFiscal == this.indicadorIncentivoFiscal);
}

class NfeDetalheImpostoIssqnsCompanion
    extends UpdateCompanion<NfeDetalheImpostoIssqn> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> baseCalculoIssqn;
  final Value<double?> aliquotaIssqn;
  final Value<double?> valorIssqn;
  final Value<int?> municipioIssqn;
  final Value<int?> itemListaServicos;
  final Value<double?> valorDeducao;
  final Value<double?> valorOutrasRetencoes;
  final Value<double?> valorDescontoIncondicionado;
  final Value<double?> valorDescontoCondicionado;
  final Value<double?> valorRetencaoIss;
  final Value<String?> indicadorExigibilidadeIss;
  final Value<String?> codigoServico;
  final Value<int?> municipioIncidencia;
  final Value<int?> paisSevicoPrestado;
  final Value<String?> numeroProcesso;
  final Value<String?> indicadorIncentivoFiscal;
  const NfeDetalheImpostoIssqnsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.baseCalculoIssqn = const Value.absent(),
    this.aliquotaIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.municipioIssqn = const Value.absent(),
    this.itemListaServicos = const Value.absent(),
    this.valorDeducao = const Value.absent(),
    this.valorOutrasRetencoes = const Value.absent(),
    this.valorDescontoIncondicionado = const Value.absent(),
    this.valorDescontoCondicionado = const Value.absent(),
    this.valorRetencaoIss = const Value.absent(),
    this.indicadorExigibilidadeIss = const Value.absent(),
    this.codigoServico = const Value.absent(),
    this.municipioIncidencia = const Value.absent(),
    this.paisSevicoPrestado = const Value.absent(),
    this.numeroProcesso = const Value.absent(),
    this.indicadorIncentivoFiscal = const Value.absent(),
  });
  NfeDetalheImpostoIssqnsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.baseCalculoIssqn = const Value.absent(),
    this.aliquotaIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.municipioIssqn = const Value.absent(),
    this.itemListaServicos = const Value.absent(),
    this.valorDeducao = const Value.absent(),
    this.valorOutrasRetencoes = const Value.absent(),
    this.valorDescontoIncondicionado = const Value.absent(),
    this.valorDescontoCondicionado = const Value.absent(),
    this.valorRetencaoIss = const Value.absent(),
    this.indicadorExigibilidadeIss = const Value.absent(),
    this.codigoServico = const Value.absent(),
    this.municipioIncidencia = const Value.absent(),
    this.paisSevicoPrestado = const Value.absent(),
    this.numeroProcesso = const Value.absent(),
    this.indicadorIncentivoFiscal = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoIssqn> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? baseCalculoIssqn,
    Expression<double>? aliquotaIssqn,
    Expression<double>? valorIssqn,
    Expression<int>? municipioIssqn,
    Expression<int>? itemListaServicos,
    Expression<double>? valorDeducao,
    Expression<double>? valorOutrasRetencoes,
    Expression<double>? valorDescontoIncondicionado,
    Expression<double>? valorDescontoCondicionado,
    Expression<double>? valorRetencaoIss,
    Expression<String>? indicadorExigibilidadeIss,
    Expression<String>? codigoServico,
    Expression<int>? municipioIncidencia,
    Expression<int>? paisSevicoPrestado,
    Expression<String>? numeroProcesso,
    Expression<String>? indicadorIncentivoFiscal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (baseCalculoIssqn != null) 'BASE_CALCULO_ISSQN': baseCalculoIssqn,
      if (aliquotaIssqn != null) 'ALIQUOTA_ISSQN': aliquotaIssqn,
      if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
      if (municipioIssqn != null) 'MUNICIPIO_ISSQN': municipioIssqn,
      if (itemListaServicos != null) 'ITEM_LISTA_SERVICOS': itemListaServicos,
      if (valorDeducao != null) 'VALOR_DEDUCAO': valorDeducao,
      if (valorOutrasRetencoes != null)
        'VALOR_OUTRAS_RETENCOES': valorOutrasRetencoes,
      if (valorDescontoIncondicionado != null)
        'VALOR_DESCONTO_INCONDICIONADO': valorDescontoIncondicionado,
      if (valorDescontoCondicionado != null)
        'VALOR_DESCONTO_CONDICIONADO': valorDescontoCondicionado,
      if (valorRetencaoIss != null) 'VALOR_RETENCAO_ISS': valorRetencaoIss,
      if (indicadorExigibilidadeIss != null)
        'INDICADOR_EXIGIBILIDADE_ISS': indicadorExigibilidadeIss,
      if (codigoServico != null) 'CODIGO_SERVICO': codigoServico,
      if (municipioIncidencia != null)
        'MUNICIPIO_INCIDENCIA': municipioIncidencia,
      if (paisSevicoPrestado != null)
        'PAIS_SEVICO_PRESTADO': paisSevicoPrestado,
      if (numeroProcesso != null) 'NUMERO_PROCESSO': numeroProcesso,
      if (indicadorIncentivoFiscal != null)
        'INDICADOR_INCENTIVO_FISCAL': indicadorIncentivoFiscal,
    });
  }

  NfeDetalheImpostoIssqnsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<double?>? baseCalculoIssqn,
      Value<double?>? aliquotaIssqn,
      Value<double?>? valorIssqn,
      Value<int?>? municipioIssqn,
      Value<int?>? itemListaServicos,
      Value<double?>? valorDeducao,
      Value<double?>? valorOutrasRetencoes,
      Value<double?>? valorDescontoIncondicionado,
      Value<double?>? valorDescontoCondicionado,
      Value<double?>? valorRetencaoIss,
      Value<String?>? indicadorExigibilidadeIss,
      Value<String?>? codigoServico,
      Value<int?>? municipioIncidencia,
      Value<int?>? paisSevicoPrestado,
      Value<String?>? numeroProcesso,
      Value<String?>? indicadorIncentivoFiscal}) {
    return NfeDetalheImpostoIssqnsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      baseCalculoIssqn: baseCalculoIssqn ?? this.baseCalculoIssqn,
      aliquotaIssqn: aliquotaIssqn ?? this.aliquotaIssqn,
      valorIssqn: valorIssqn ?? this.valorIssqn,
      municipioIssqn: municipioIssqn ?? this.municipioIssqn,
      itemListaServicos: itemListaServicos ?? this.itemListaServicos,
      valorDeducao: valorDeducao ?? this.valorDeducao,
      valorOutrasRetencoes: valorOutrasRetencoes ?? this.valorOutrasRetencoes,
      valorDescontoIncondicionado:
          valorDescontoIncondicionado ?? this.valorDescontoIncondicionado,
      valorDescontoCondicionado:
          valorDescontoCondicionado ?? this.valorDescontoCondicionado,
      valorRetencaoIss: valorRetencaoIss ?? this.valorRetencaoIss,
      indicadorExigibilidadeIss:
          indicadorExigibilidadeIss ?? this.indicadorExigibilidadeIss,
      codigoServico: codigoServico ?? this.codigoServico,
      municipioIncidencia: municipioIncidencia ?? this.municipioIncidencia,
      paisSevicoPrestado: paisSevicoPrestado ?? this.paisSevicoPrestado,
      numeroProcesso: numeroProcesso ?? this.numeroProcesso,
      indicadorIncentivoFiscal:
          indicadorIncentivoFiscal ?? this.indicadorIncentivoFiscal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (baseCalculoIssqn.present) {
      map['BASE_CALCULO_ISSQN'] = Variable<double>(baseCalculoIssqn.value);
    }
    if (aliquotaIssqn.present) {
      map['ALIQUOTA_ISSQN'] = Variable<double>(aliquotaIssqn.value);
    }
    if (valorIssqn.present) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn.value);
    }
    if (municipioIssqn.present) {
      map['MUNICIPIO_ISSQN'] = Variable<int>(municipioIssqn.value);
    }
    if (itemListaServicos.present) {
      map['ITEM_LISTA_SERVICOS'] = Variable<int>(itemListaServicos.value);
    }
    if (valorDeducao.present) {
      map['VALOR_DEDUCAO'] = Variable<double>(valorDeducao.value);
    }
    if (valorOutrasRetencoes.present) {
      map['VALOR_OUTRAS_RETENCOES'] =
          Variable<double>(valorOutrasRetencoes.value);
    }
    if (valorDescontoIncondicionado.present) {
      map['VALOR_DESCONTO_INCONDICIONADO'] =
          Variable<double>(valorDescontoIncondicionado.value);
    }
    if (valorDescontoCondicionado.present) {
      map['VALOR_DESCONTO_CONDICIONADO'] =
          Variable<double>(valorDescontoCondicionado.value);
    }
    if (valorRetencaoIss.present) {
      map['VALOR_RETENCAO_ISS'] = Variable<double>(valorRetencaoIss.value);
    }
    if (indicadorExigibilidadeIss.present) {
      map['INDICADOR_EXIGIBILIDADE_ISS'] =
          Variable<String>(indicadorExigibilidadeIss.value);
    }
    if (codigoServico.present) {
      map['CODIGO_SERVICO'] = Variable<String>(codigoServico.value);
    }
    if (municipioIncidencia.present) {
      map['MUNICIPIO_INCIDENCIA'] = Variable<int>(municipioIncidencia.value);
    }
    if (paisSevicoPrestado.present) {
      map['PAIS_SEVICO_PRESTADO'] = Variable<int>(paisSevicoPrestado.value);
    }
    if (numeroProcesso.present) {
      map['NUMERO_PROCESSO'] = Variable<String>(numeroProcesso.value);
    }
    if (indicadorIncentivoFiscal.present) {
      map['INDICADOR_INCENTIVO_FISCAL'] =
          Variable<String>(indicadorIncentivoFiscal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoIssqnsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
          ..write('aliquotaIssqn: $aliquotaIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('municipioIssqn: $municipioIssqn, ')
          ..write('itemListaServicos: $itemListaServicos, ')
          ..write('valorDeducao: $valorDeducao, ')
          ..write('valorOutrasRetencoes: $valorOutrasRetencoes, ')
          ..write('valorDescontoIncondicionado: $valorDescontoIncondicionado, ')
          ..write('valorDescontoCondicionado: $valorDescontoCondicionado, ')
          ..write('valorRetencaoIss: $valorRetencaoIss, ')
          ..write('indicadorExigibilidadeIss: $indicadorExigibilidadeIss, ')
          ..write('codigoServico: $codigoServico, ')
          ..write('municipioIncidencia: $municipioIncidencia, ')
          ..write('paisSevicoPrestado: $paisSevicoPrestado, ')
          ..write('numeroProcesso: $numeroProcesso, ')
          ..write('indicadorIncentivoFiscal: $indicadorIncentivoFiscal')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoIssqnsTable extends NfeDetalheImpostoIssqns
    with TableInfo<$NfeDetalheImpostoIssqnsTable, NfeDetalheImpostoIssqn> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoIssqnsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _baseCalculoIssqnMeta =
      const VerificationMeta('baseCalculoIssqn');
  @override
  late final GeneratedColumn<double> baseCalculoIssqn =
      GeneratedColumn<double>('BASE_CALCULO_ISSQN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaIssqnMeta =
      const VerificationMeta('aliquotaIssqn');
  @override
  late final GeneratedColumn<double> aliquotaIssqn = GeneratedColumn<double>(
      'ALIQUOTA_ISSQN', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
  @override
  late final GeneratedColumn<double> valorIssqn = GeneratedColumn<double>(
      'VALOR_ISSQN', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _municipioIssqnMeta =
      const VerificationMeta('municipioIssqn');
  @override
  late final GeneratedColumn<int> municipioIssqn = GeneratedColumn<int>(
      'MUNICIPIO_ISSQN', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _itemListaServicosMeta =
      const VerificationMeta('itemListaServicos');
  @override
  late final GeneratedColumn<int> itemListaServicos = GeneratedColumn<int>(
      'ITEM_LISTA_SERVICOS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _valorDeducaoMeta =
      const VerificationMeta('valorDeducao');
  @override
  late final GeneratedColumn<double> valorDeducao = GeneratedColumn<double>(
      'VALOR_DEDUCAO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorOutrasRetencoesMeta =
      const VerificationMeta('valorOutrasRetencoes');
  @override
  late final GeneratedColumn<double> valorOutrasRetencoes =
      GeneratedColumn<double>('VALOR_OUTRAS_RETENCOES', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoIncondicionadoMeta =
      const VerificationMeta('valorDescontoIncondicionado');
  @override
  late final GeneratedColumn<double> valorDescontoIncondicionado =
      GeneratedColumn<double>(
          'VALOR_DESCONTO_INCONDICIONADO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoCondicionadoMeta =
      const VerificationMeta('valorDescontoCondicionado');
  @override
  late final GeneratedColumn<double> valorDescontoCondicionado =
      GeneratedColumn<double>('VALOR_DESCONTO_CONDICIONADO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorRetencaoIssMeta =
      const VerificationMeta('valorRetencaoIss');
  @override
  late final GeneratedColumn<double> valorRetencaoIss =
      GeneratedColumn<double>('VALOR_RETENCAO_ISS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _indicadorExigibilidadeIssMeta =
      const VerificationMeta('indicadorExigibilidadeIss');
  @override
  late final GeneratedColumn<String> indicadorExigibilidadeIss =
      GeneratedColumn<String>('INDICADOR_EXIGIBILIDADE_ISS', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _codigoServicoMeta =
      const VerificationMeta('codigoServico');
  @override
  late final GeneratedColumn<String> codigoServico = GeneratedColumn<String>(
      'CODIGO_SERVICO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _municipioIncidenciaMeta =
      const VerificationMeta('municipioIncidencia');
  @override
  late final GeneratedColumn<int> municipioIncidencia = GeneratedColumn<int>(
      'MUNICIPIO_INCIDENCIA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _paisSevicoPrestadoMeta =
      const VerificationMeta('paisSevicoPrestado');
  @override
  late final GeneratedColumn<int> paisSevicoPrestado = GeneratedColumn<int>(
      'PAIS_SEVICO_PRESTADO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _numeroProcessoMeta =
      const VerificationMeta('numeroProcesso');
  @override
  late final GeneratedColumn<String> numeroProcesso = GeneratedColumn<String>(
      'NUMERO_PROCESSO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _indicadorIncentivoFiscalMeta =
      const VerificationMeta('indicadorIncentivoFiscal');
  @override
  late final GeneratedColumn<String> indicadorIncentivoFiscal =
      GeneratedColumn<String>('INDICADOR_INCENTIVO_FISCAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        baseCalculoIssqn,
        aliquotaIssqn,
        valorIssqn,
        municipioIssqn,
        itemListaServicos,
        valorDeducao,
        valorOutrasRetencoes,
        valorDescontoIncondicionado,
        valorDescontoCondicionado,
        valorRetencaoIss,
        indicadorExigibilidadeIss,
        codigoServico,
        municipioIncidencia,
        paisSevicoPrestado,
        numeroProcesso,
        indicadorIncentivoFiscal
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_ISSQN';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_ISSQN';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoIssqn> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('BASE_CALCULO_ISSQN')) {
      context.handle(
          _baseCalculoIssqnMeta,
          baseCalculoIssqn.isAcceptableOrUnknown(
              data['BASE_CALCULO_ISSQN']!, _baseCalculoIssqnMeta));
    }
    if (data.containsKey('ALIQUOTA_ISSQN')) {
      context.handle(
          _aliquotaIssqnMeta,
          aliquotaIssqn.isAcceptableOrUnknown(
              data['ALIQUOTA_ISSQN']!, _aliquotaIssqnMeta));
    }
    if (data.containsKey('VALOR_ISSQN')) {
      context.handle(
          _valorIssqnMeta,
          valorIssqn.isAcceptableOrUnknown(
              data['VALOR_ISSQN']!, _valorIssqnMeta));
    }
    if (data.containsKey('MUNICIPIO_ISSQN')) {
      context.handle(
          _municipioIssqnMeta,
          municipioIssqn.isAcceptableOrUnknown(
              data['MUNICIPIO_ISSQN']!, _municipioIssqnMeta));
    }
    if (data.containsKey('ITEM_LISTA_SERVICOS')) {
      context.handle(
          _itemListaServicosMeta,
          itemListaServicos.isAcceptableOrUnknown(
              data['ITEM_LISTA_SERVICOS']!, _itemListaServicosMeta));
    }
    if (data.containsKey('VALOR_DEDUCAO')) {
      context.handle(
          _valorDeducaoMeta,
          valorDeducao.isAcceptableOrUnknown(
              data['VALOR_DEDUCAO']!, _valorDeducaoMeta));
    }
    if (data.containsKey('VALOR_OUTRAS_RETENCOES')) {
      context.handle(
          _valorOutrasRetencoesMeta,
          valorOutrasRetencoes.isAcceptableOrUnknown(
              data['VALOR_OUTRAS_RETENCOES']!, _valorOutrasRetencoesMeta));
    }
    if (data.containsKey('VALOR_DESCONTO_INCONDICIONADO')) {
      context.handle(
          _valorDescontoIncondicionadoMeta,
          valorDescontoIncondicionado.isAcceptableOrUnknown(
              data['VALOR_DESCONTO_INCONDICIONADO']!,
              _valorDescontoIncondicionadoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO_CONDICIONADO')) {
      context.handle(
          _valorDescontoCondicionadoMeta,
          valorDescontoCondicionado.isAcceptableOrUnknown(
              data['VALOR_DESCONTO_CONDICIONADO']!,
              _valorDescontoCondicionadoMeta));
    }
    if (data.containsKey('VALOR_RETENCAO_ISS')) {
      context.handle(
          _valorRetencaoIssMeta,
          valorRetencaoIss.isAcceptableOrUnknown(
              data['VALOR_RETENCAO_ISS']!, _valorRetencaoIssMeta));
    }
    if (data.containsKey('INDICADOR_EXIGIBILIDADE_ISS')) {
      context.handle(
          _indicadorExigibilidadeIssMeta,
          indicadorExigibilidadeIss.isAcceptableOrUnknown(
              data['INDICADOR_EXIGIBILIDADE_ISS']!,
              _indicadorExigibilidadeIssMeta));
    }
    if (data.containsKey('CODIGO_SERVICO')) {
      context.handle(
          _codigoServicoMeta,
          codigoServico.isAcceptableOrUnknown(
              data['CODIGO_SERVICO']!, _codigoServicoMeta));
    }
    if (data.containsKey('MUNICIPIO_INCIDENCIA')) {
      context.handle(
          _municipioIncidenciaMeta,
          municipioIncidencia.isAcceptableOrUnknown(
              data['MUNICIPIO_INCIDENCIA']!, _municipioIncidenciaMeta));
    }
    if (data.containsKey('PAIS_SEVICO_PRESTADO')) {
      context.handle(
          _paisSevicoPrestadoMeta,
          paisSevicoPrestado.isAcceptableOrUnknown(
              data['PAIS_SEVICO_PRESTADO']!, _paisSevicoPrestadoMeta));
    }
    if (data.containsKey('NUMERO_PROCESSO')) {
      context.handle(
          _numeroProcessoMeta,
          numeroProcesso.isAcceptableOrUnknown(
              data['NUMERO_PROCESSO']!, _numeroProcessoMeta));
    }
    if (data.containsKey('INDICADOR_INCENTIVO_FISCAL')) {
      context.handle(
          _indicadorIncentivoFiscalMeta,
          indicadorIncentivoFiscal.isAcceptableOrUnknown(
              data['INDICADOR_INCENTIVO_FISCAL']!,
              _indicadorIncentivoFiscalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoIssqn map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDetalheImpostoIssqn.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoIssqnsTable createAlias(String alias) {
    return $NfeDetalheImpostoIssqnsTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoPis extends DataClass
    implements Insertable<NfeDetalheImpostoPis> {
  final int? id;
  final int? idNfeDetalhe;
  final String? cstPis;
  final double? valorBaseCalculoPis;
  final double? aliquotaPisPercentual;
  final double? valorPis;
  final double? quantidadeVendida;
  final double? aliquotaPisReais;
  NfeDetalheImpostoPis(
      {this.id,
      this.idNfeDetalhe,
      this.cstPis,
      this.valorBaseCalculoPis,
      this.aliquotaPisPercentual,
      this.valorPis,
      this.quantidadeVendida,
      this.aliquotaPisReais});
  factory NfeDetalheImpostoPis.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoPis(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      cstPis: ValueSqlType.stringType(data['${effectivePrefix}CST_PIS']),
      valorBaseCalculoPis: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BASE_CALCULO_PIS']),
      aliquotaPisPercentual: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_PIS_PERCENTUAL']),
      valorPis: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PIS']),
      quantidadeVendida: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_VENDIDA']),
      aliquotaPisReais: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_PIS_REAIS']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || cstPis != null) {
      map['CST_PIS'] = Variable<String>(cstPis);
    }
    if (!nullToAbsent || valorBaseCalculoPis != null) {
      map['VALOR_BASE_CALCULO_PIS'] = Variable<double>(valorBaseCalculoPis);
    }
    if (!nullToAbsent || aliquotaPisPercentual != null) {
      map['ALIQUOTA_PIS_PERCENTUAL'] = Variable<double>(aliquotaPisPercentual);
    }
    if (!nullToAbsent || valorPis != null) {
      map['VALOR_PIS'] = Variable<double>(valorPis);
    }
    if (!nullToAbsent || quantidadeVendida != null) {
      map['QUANTIDADE_VENDIDA'] = Variable<double>(quantidadeVendida);
    }
    if (!nullToAbsent || aliquotaPisReais != null) {
      map['ALIQUOTA_PIS_REAIS'] = Variable<double>(aliquotaPisReais);
    }
    return map;
  }

  NfeDetalheImpostoPissCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoPissCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      cstPis:
          cstPis == null && nullToAbsent ? const Value.absent() : Value(cstPis),
      valorBaseCalculoPis: valorBaseCalculoPis == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBaseCalculoPis),
      aliquotaPisPercentual: aliquotaPisPercentual == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPisPercentual),
      valorPis: valorPis == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPis),
      quantidadeVendida: quantidadeVendida == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeVendida),
      aliquotaPisReais: aliquotaPisReais == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPisReais),
    );
  }

  factory NfeDetalheImpostoPis.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoPis(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      cstPis: serializer.fromJson<String?>(json['cstPis']),
      valorBaseCalculoPis:
          serializer.fromJson<double?>(json['valorBaseCalculoPis']),
      aliquotaPisPercentual:
          serializer.fromJson<double?>(json['aliquotaPisPercentual']),
      valorPis: serializer.fromJson<double?>(json['valorPis']),
      quantidadeVendida:
          serializer.fromJson<double?>(json['quantidadeVendida']),
      aliquotaPisReais: serializer.fromJson<double?>(json['aliquotaPisReais']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'cstPis': serializer.toJson<String?>(cstPis),
      'valorBaseCalculoPis': serializer.toJson<double?>(valorBaseCalculoPis),
      'aliquotaPisPercentual':
          serializer.toJson<double?>(aliquotaPisPercentual),
      'valorPis': serializer.toJson<double?>(valorPis),
      'quantidadeVendida': serializer.toJson<double?>(quantidadeVendida),
      'aliquotaPisReais': serializer.toJson<double?>(aliquotaPisReais),
    };
  }

  NfeDetalheImpostoPis copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? cstPis,
          double? valorBaseCalculoPis,
          double? aliquotaPisPercentual,
          double? valorPis,
          double? quantidadeVendida,
          double? aliquotaPisReais}) =>
      NfeDetalheImpostoPis(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        cstPis: cstPis ?? this.cstPis,
        valorBaseCalculoPis: valorBaseCalculoPis ?? this.valorBaseCalculoPis,
        aliquotaPisPercentual:
            aliquotaPisPercentual ?? this.aliquotaPisPercentual,
        valorPis: valorPis ?? this.valorPis,
        quantidadeVendida: quantidadeVendida ?? this.quantidadeVendida,
        aliquotaPisReais: aliquotaPisReais ?? this.aliquotaPisReais,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoPis(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cstPis: $cstPis, ')
          ..write('valorBaseCalculoPis: $valorBaseCalculoPis, ')
          ..write('aliquotaPisPercentual: $aliquotaPisPercentual, ')
          ..write('valorPis: $valorPis, ')
          ..write('quantidadeVendida: $quantidadeVendida, ')
          ..write('aliquotaPisReais: $aliquotaPisReais')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeDetalhe, cstPis, valorBaseCalculoPis,
      aliquotaPisPercentual, valorPis, quantidadeVendida, aliquotaPisReais);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoPis &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.cstPis == this.cstPis &&
          other.valorBaseCalculoPis == this.valorBaseCalculoPis &&
          other.aliquotaPisPercentual == this.aliquotaPisPercentual &&
          other.valorPis == this.valorPis &&
          other.quantidadeVendida == this.quantidadeVendida &&
          other.aliquotaPisReais == this.aliquotaPisReais);
}

class NfeDetalheImpostoPissCompanion
    extends UpdateCompanion<NfeDetalheImpostoPis> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> cstPis;
  final Value<double?> valorBaseCalculoPis;
  final Value<double?> aliquotaPisPercentual;
  final Value<double?> valorPis;
  final Value<double?> quantidadeVendida;
  final Value<double?> aliquotaPisReais;
  const NfeDetalheImpostoPissCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cstPis = const Value.absent(),
    this.valorBaseCalculoPis = const Value.absent(),
    this.aliquotaPisPercentual = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.quantidadeVendida = const Value.absent(),
    this.aliquotaPisReais = const Value.absent(),
  });
  NfeDetalheImpostoPissCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.cstPis = const Value.absent(),
    this.valorBaseCalculoPis = const Value.absent(),
    this.aliquotaPisPercentual = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.quantidadeVendida = const Value.absent(),
    this.aliquotaPisReais = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoPis> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? cstPis,
    Expression<double>? valorBaseCalculoPis,
    Expression<double>? aliquotaPisPercentual,
    Expression<double>? valorPis,
    Expression<double>? quantidadeVendida,
    Expression<double>? aliquotaPisReais,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (cstPis != null) 'CST_PIS': cstPis,
      if (valorBaseCalculoPis != null)
        'VALOR_BASE_CALCULO_PIS': valorBaseCalculoPis,
      if (aliquotaPisPercentual != null)
        'ALIQUOTA_PIS_PERCENTUAL': aliquotaPisPercentual,
      if (valorPis != null) 'VALOR_PIS': valorPis,
      if (quantidadeVendida != null) 'QUANTIDADE_VENDIDA': quantidadeVendida,
      if (aliquotaPisReais != null) 'ALIQUOTA_PIS_REAIS': aliquotaPisReais,
    });
  }

  NfeDetalheImpostoPissCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? cstPis,
      Value<double?>? valorBaseCalculoPis,
      Value<double?>? aliquotaPisPercentual,
      Value<double?>? valorPis,
      Value<double?>? quantidadeVendida,
      Value<double?>? aliquotaPisReais}) {
    return NfeDetalheImpostoPissCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      cstPis: cstPis ?? this.cstPis,
      valorBaseCalculoPis: valorBaseCalculoPis ?? this.valorBaseCalculoPis,
      aliquotaPisPercentual:
          aliquotaPisPercentual ?? this.aliquotaPisPercentual,
      valorPis: valorPis ?? this.valorPis,
      quantidadeVendida: quantidadeVendida ?? this.quantidadeVendida,
      aliquotaPisReais: aliquotaPisReais ?? this.aliquotaPisReais,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (cstPis.present) {
      map['CST_PIS'] = Variable<String>(cstPis.value);
    }
    if (valorBaseCalculoPis.present) {
      map['VALOR_BASE_CALCULO_PIS'] =
          Variable<double>(valorBaseCalculoPis.value);
    }
    if (aliquotaPisPercentual.present) {
      map['ALIQUOTA_PIS_PERCENTUAL'] =
          Variable<double>(aliquotaPisPercentual.value);
    }
    if (valorPis.present) {
      map['VALOR_PIS'] = Variable<double>(valorPis.value);
    }
    if (quantidadeVendida.present) {
      map['QUANTIDADE_VENDIDA'] = Variable<double>(quantidadeVendida.value);
    }
    if (aliquotaPisReais.present) {
      map['ALIQUOTA_PIS_REAIS'] = Variable<double>(aliquotaPisReais.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoPissCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('cstPis: $cstPis, ')
          ..write('valorBaseCalculoPis: $valorBaseCalculoPis, ')
          ..write('aliquotaPisPercentual: $aliquotaPisPercentual, ')
          ..write('valorPis: $valorPis, ')
          ..write('quantidadeVendida: $quantidadeVendida, ')
          ..write('aliquotaPisReais: $aliquotaPisReais')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoPissTable extends NfeDetalheImpostoPiss
    with TableInfo<$NfeDetalheImpostoPissTable, NfeDetalheImpostoPis> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoPissTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _cstPisMeta = const VerificationMeta('cstPis');
  @override
  late final GeneratedColumn<String> cstPis = GeneratedColumn<String>(
      'CST_PIS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorBaseCalculoPisMeta =
      const VerificationMeta('valorBaseCalculoPis');
  @override
  late final GeneratedColumn<double> valorBaseCalculoPis =
      GeneratedColumn<double>('VALOR_BASE_CALCULO_PIS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaPisPercentualMeta =
      const VerificationMeta('aliquotaPisPercentual');
  @override
  late final GeneratedColumn<double> aliquotaPisPercentual =
      GeneratedColumn<double>('ALIQUOTA_PIS_PERCENTUAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
  @override
  late final GeneratedColumn<double> valorPis = GeneratedColumn<double>(
      'VALOR_PIS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeVendidaMeta =
      const VerificationMeta('quantidadeVendida');
  @override
  late final GeneratedColumn<double> quantidadeVendida =
      GeneratedColumn<double>('QUANTIDADE_VENDIDA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaPisReaisMeta =
      const VerificationMeta('aliquotaPisReais');
  @override
  late final GeneratedColumn<double> aliquotaPisReais =
      GeneratedColumn<double>('ALIQUOTA_PIS_REAIS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        cstPis,
        valorBaseCalculoPis,
        aliquotaPisPercentual,
        valorPis,
        quantidadeVendida,
        aliquotaPisReais
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_PIS';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_PIS';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoPis> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('CST_PIS')) {
      context.handle(_cstPisMeta,
          cstPis.isAcceptableOrUnknown(data['CST_PIS']!, _cstPisMeta));
    }
    if (data.containsKey('VALOR_BASE_CALCULO_PIS')) {
      context.handle(
          _valorBaseCalculoPisMeta,
          valorBaseCalculoPis.isAcceptableOrUnknown(
              data['VALOR_BASE_CALCULO_PIS']!, _valorBaseCalculoPisMeta));
    }
    if (data.containsKey('ALIQUOTA_PIS_PERCENTUAL')) {
      context.handle(
          _aliquotaPisPercentualMeta,
          aliquotaPisPercentual.isAcceptableOrUnknown(
              data['ALIQUOTA_PIS_PERCENTUAL']!, _aliquotaPisPercentualMeta));
    }
    if (data.containsKey('VALOR_PIS')) {
      context.handle(_valorPisMeta,
          valorPis.isAcceptableOrUnknown(data['VALOR_PIS']!, _valorPisMeta));
    }
    if (data.containsKey('QUANTIDADE_VENDIDA')) {
      context.handle(
          _quantidadeVendidaMeta,
          quantidadeVendida.isAcceptableOrUnknown(
              data['QUANTIDADE_VENDIDA']!, _quantidadeVendidaMeta));
    }
    if (data.containsKey('ALIQUOTA_PIS_REAIS')) {
      context.handle(
          _aliquotaPisReaisMeta,
          aliquotaPisReais.isAcceptableOrUnknown(
              data['ALIQUOTA_PIS_REAIS']!, _aliquotaPisReaisMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoPis map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDetalheImpostoPis.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoPissTable createAlias(String alias) {
    return $NfeDetalheImpostoPissTable(attachedDatabase, alias);
  }
}

class NfeDetalheImpostoPisSt extends DataClass
    implements Insertable<NfeDetalheImpostoPisSt> {
  final int? id;
  final int? idNfeDetalhe;
  final double? valorBaseCalculoPisSt;
  final double? aliquotaPisStPercentual;
  final double? quantidadeVendidaPisSt;
  final double? aliquotaPisStReais;
  final double? valorPisSt;
  NfeDetalheImpostoPisSt(
      {this.id,
      this.idNfeDetalhe,
      this.valorBaseCalculoPisSt,
      this.aliquotaPisStPercentual,
      this.quantidadeVendidaPisSt,
      this.aliquotaPisStReais,
      this.valorPisSt});
  factory NfeDetalheImpostoPisSt.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetalheImpostoPisSt(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      valorBaseCalculoPisSt: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BASE_CALCULO_PIS_ST']),
      aliquotaPisStPercentual: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_PIS_ST_PERCENTUAL']),
      quantidadeVendidaPisSt: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_VENDIDA_PIS_ST']),
      aliquotaPisStReais: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_PIS_ST_REAIS']),
      valorPisSt: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PIS_ST']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || valorBaseCalculoPisSt != null) {
      map['VALOR_BASE_CALCULO_PIS_ST'] =
          Variable<double>(valorBaseCalculoPisSt);
    }
    if (!nullToAbsent || aliquotaPisStPercentual != null) {
      map['ALIQUOTA_PIS_ST_PERCENTUAL'] =
          Variable<double>(aliquotaPisStPercentual);
    }
    if (!nullToAbsent || quantidadeVendidaPisSt != null) {
      map['QUANTIDADE_VENDIDA_PIS_ST'] =
          Variable<double>(quantidadeVendidaPisSt);
    }
    if (!nullToAbsent || aliquotaPisStReais != null) {
      map['ALIQUOTA_PIS_ST_REAIS'] = Variable<double>(aliquotaPisStReais);
    }
    if (!nullToAbsent || valorPisSt != null) {
      map['VALOR_PIS_ST'] = Variable<double>(valorPisSt);
    }
    return map;
  }

  NfeDetalheImpostoPisStsCompanion toCompanion(bool nullToAbsent) {
    return NfeDetalheImpostoPisStsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      valorBaseCalculoPisSt: valorBaseCalculoPisSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBaseCalculoPisSt),
      aliquotaPisStPercentual: aliquotaPisStPercentual == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPisStPercentual),
      quantidadeVendidaPisSt: quantidadeVendidaPisSt == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeVendidaPisSt),
      aliquotaPisStReais: aliquotaPisStReais == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPisStReais),
      valorPisSt: valorPisSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPisSt),
    );
  }

  factory NfeDetalheImpostoPisSt.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetalheImpostoPisSt(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      valorBaseCalculoPisSt:
          serializer.fromJson<double?>(json['valorBaseCalculoPisSt']),
      aliquotaPisStPercentual:
          serializer.fromJson<double?>(json['aliquotaPisStPercentual']),
      quantidadeVendidaPisSt:
          serializer.fromJson<double?>(json['quantidadeVendidaPisSt']),
      aliquotaPisStReais:
          serializer.fromJson<double?>(json['aliquotaPisStReais']),
      valorPisSt: serializer.fromJson<double?>(json['valorPisSt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'valorBaseCalculoPisSt':
          serializer.toJson<double?>(valorBaseCalculoPisSt),
      'aliquotaPisStPercentual':
          serializer.toJson<double?>(aliquotaPisStPercentual),
      'quantidadeVendidaPisSt':
          serializer.toJson<double?>(quantidadeVendidaPisSt),
      'aliquotaPisStReais': serializer.toJson<double?>(aliquotaPisStReais),
      'valorPisSt': serializer.toJson<double?>(valorPisSt),
    };
  }

  NfeDetalheImpostoPisSt copyWith(
          {int? id,
          int? idNfeDetalhe,
          double? valorBaseCalculoPisSt,
          double? aliquotaPisStPercentual,
          double? quantidadeVendidaPisSt,
          double? aliquotaPisStReais,
          double? valorPisSt}) =>
      NfeDetalheImpostoPisSt(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        valorBaseCalculoPisSt:
            valorBaseCalculoPisSt ?? this.valorBaseCalculoPisSt,
        aliquotaPisStPercentual:
            aliquotaPisStPercentual ?? this.aliquotaPisStPercentual,
        quantidadeVendidaPisSt:
            quantidadeVendidaPisSt ?? this.quantidadeVendidaPisSt,
        aliquotaPisStReais: aliquotaPisStReais ?? this.aliquotaPisStReais,
        valorPisSt: valorPisSt ?? this.valorPisSt,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoPisSt(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBaseCalculoPisSt: $valorBaseCalculoPisSt, ')
          ..write('aliquotaPisStPercentual: $aliquotaPisStPercentual, ')
          ..write('quantidadeVendidaPisSt: $quantidadeVendidaPisSt, ')
          ..write('aliquotaPisStReais: $aliquotaPisStReais, ')
          ..write('valorPisSt: $valorPisSt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeDetalhe,
      valorBaseCalculoPisSt,
      aliquotaPisStPercentual,
      quantidadeVendidaPisSt,
      aliquotaPisStReais,
      valorPisSt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetalheImpostoPisSt &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.valorBaseCalculoPisSt == this.valorBaseCalculoPisSt &&
          other.aliquotaPisStPercentual == this.aliquotaPisStPercentual &&
          other.quantidadeVendidaPisSt == this.quantidadeVendidaPisSt &&
          other.aliquotaPisStReais == this.aliquotaPisStReais &&
          other.valorPisSt == this.valorPisSt);
}

class NfeDetalheImpostoPisStsCompanion
    extends UpdateCompanion<NfeDetalheImpostoPisSt> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<double?> valorBaseCalculoPisSt;
  final Value<double?> aliquotaPisStPercentual;
  final Value<double?> quantidadeVendidaPisSt;
  final Value<double?> aliquotaPisStReais;
  final Value<double?> valorPisSt;
  const NfeDetalheImpostoPisStsCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBaseCalculoPisSt = const Value.absent(),
    this.aliquotaPisStPercentual = const Value.absent(),
    this.quantidadeVendidaPisSt = const Value.absent(),
    this.aliquotaPisStReais = const Value.absent(),
    this.valorPisSt = const Value.absent(),
  });
  NfeDetalheImpostoPisStsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.valorBaseCalculoPisSt = const Value.absent(),
    this.aliquotaPisStPercentual = const Value.absent(),
    this.quantidadeVendidaPisSt = const Value.absent(),
    this.aliquotaPisStReais = const Value.absent(),
    this.valorPisSt = const Value.absent(),
  });
  static Insertable<NfeDetalheImpostoPisSt> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<double>? valorBaseCalculoPisSt,
    Expression<double>? aliquotaPisStPercentual,
    Expression<double>? quantidadeVendidaPisSt,
    Expression<double>? aliquotaPisStReais,
    Expression<double>? valorPisSt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (valorBaseCalculoPisSt != null)
        'VALOR_BASE_CALCULO_PIS_ST': valorBaseCalculoPisSt,
      if (aliquotaPisStPercentual != null)
        'ALIQUOTA_PIS_ST_PERCENTUAL': aliquotaPisStPercentual,
      if (quantidadeVendidaPisSt != null)
        'QUANTIDADE_VENDIDA_PIS_ST': quantidadeVendidaPisSt,
      if (aliquotaPisStReais != null)
        'ALIQUOTA_PIS_ST_REAIS': aliquotaPisStReais,
      if (valorPisSt != null) 'VALOR_PIS_ST': valorPisSt,
    });
  }

  NfeDetalheImpostoPisStsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<double?>? valorBaseCalculoPisSt,
      Value<double?>? aliquotaPisStPercentual,
      Value<double?>? quantidadeVendidaPisSt,
      Value<double?>? aliquotaPisStReais,
      Value<double?>? valorPisSt}) {
    return NfeDetalheImpostoPisStsCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      valorBaseCalculoPisSt:
          valorBaseCalculoPisSt ?? this.valorBaseCalculoPisSt,
      aliquotaPisStPercentual:
          aliquotaPisStPercentual ?? this.aliquotaPisStPercentual,
      quantidadeVendidaPisSt:
          quantidadeVendidaPisSt ?? this.quantidadeVendidaPisSt,
      aliquotaPisStReais: aliquotaPisStReais ?? this.aliquotaPisStReais,
      valorPisSt: valorPisSt ?? this.valorPisSt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (valorBaseCalculoPisSt.present) {
      map['VALOR_BASE_CALCULO_PIS_ST'] =
          Variable<double>(valorBaseCalculoPisSt.value);
    }
    if (aliquotaPisStPercentual.present) {
      map['ALIQUOTA_PIS_ST_PERCENTUAL'] =
          Variable<double>(aliquotaPisStPercentual.value);
    }
    if (quantidadeVendidaPisSt.present) {
      map['QUANTIDADE_VENDIDA_PIS_ST'] =
          Variable<double>(quantidadeVendidaPisSt.value);
    }
    if (aliquotaPisStReais.present) {
      map['ALIQUOTA_PIS_ST_REAIS'] =
          Variable<double>(aliquotaPisStReais.value);
    }
    if (valorPisSt.present) {
      map['VALOR_PIS_ST'] = Variable<double>(valorPisSt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetalheImpostoPisStsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('valorBaseCalculoPisSt: $valorBaseCalculoPisSt, ')
          ..write('aliquotaPisStPercentual: $aliquotaPisStPercentual, ')
          ..write('quantidadeVendidaPisSt: $quantidadeVendidaPisSt, ')
          ..write('aliquotaPisStReais: $aliquotaPisStReais, ')
          ..write('valorPisSt: $valorPisSt')
          ..write(')'))
        .toString();
  }
}

class $NfeDetalheImpostoPisStsTable extends NfeDetalheImpostoPisSts
    with TableInfo<$NfeDetalheImpostoPisStsTable, NfeDetalheImpostoPisSt> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetalheImpostoPisStsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _valorBaseCalculoPisStMeta =
      const VerificationMeta('valorBaseCalculoPisSt');
  @override
  late final GeneratedColumn<double> valorBaseCalculoPisSt =
      GeneratedColumn<double>('VALOR_BASE_CALCULO_PIS_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaPisStPercentualMeta =
      const VerificationMeta('aliquotaPisStPercentual');
  @override
  late final GeneratedColumn<double> aliquotaPisStPercentual =
      GeneratedColumn<double>('ALIQUOTA_PIS_ST_PERCENTUAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeVendidaPisStMeta =
      const VerificationMeta('quantidadeVendidaPisSt');
  @override
  late final GeneratedColumn<double> quantidadeVendidaPisSt =
      GeneratedColumn<double>('QUANTIDADE_VENDIDA_PIS_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaPisStReaisMeta =
      const VerificationMeta('aliquotaPisStReais');
  @override
  late final GeneratedColumn<double> aliquotaPisStReais =
      GeneratedColumn<double>('ALIQUOTA_PIS_ST_REAIS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPisStMeta = const VerificationMeta('valorPisSt');
  @override
  late final GeneratedColumn<double> valorPisSt = GeneratedColumn<double>(
      'VALOR_PIS_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        valorBaseCalculoPisSt,
        aliquotaPisStPercentual,
        quantidadeVendidaPisSt,
        aliquotaPisStReais,
        valorPisSt
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DETALHE_IMPOSTO_PIS_ST';
  @override
  String get actualTableName => 'NFE_DETALHE_IMPOSTO_PIS_ST';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetalheImpostoPisSt> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('VALOR_BASE_CALCULO_PIS_ST')) {
      context.handle(
          _valorBaseCalculoPisStMeta,
          valorBaseCalculoPisSt.isAcceptableOrUnknown(
              data['VALOR_BASE_CALCULO_PIS_ST']!, _valorBaseCalculoPisStMeta));
    }
    if (data.containsKey('ALIQUOTA_PIS_ST_PERCENTUAL')) {
      context.handle(
          _aliquotaPisStPercentualMeta,
          aliquotaPisStPercentual.isAcceptableOrUnknown(
              data['ALIQUOTA_PIS_ST_PERCENTUAL']!,
              _aliquotaPisStPercentualMeta));
    }
    if (data.containsKey('QUANTIDADE_VENDIDA_PIS_ST')) {
      context.handle(
          _quantidadeVendidaPisStMeta,
          quantidadeVendidaPisSt.isAcceptableOrUnknown(
              data['QUANTIDADE_VENDIDA_PIS_ST']!, _quantidadeVendidaPisStMeta));
    }
    if (data.containsKey('ALIQUOTA_PIS_ST_REAIS')) {
      context.handle(
          _aliquotaPisStReaisMeta,
          aliquotaPisStReais.isAcceptableOrUnknown(
              data['ALIQUOTA_PIS_ST_REAIS']!, _aliquotaPisStReaisMeta));
    }
    if (data.containsKey('VALOR_PIS_ST')) {
      context.handle(
          _valorPisStMeta,
          valorPisSt.isAcceptableOrUnknown(
              data['VALOR_PIS_ST']!, _valorPisStMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetalheImpostoPisSt map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDetalheImpostoPisSt.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetalheImpostoPisStsTable createAlias(String alias) {
    return $NfeDetalheImpostoPisStsTable(attachedDatabase, alias);
  }
}

class NfeDuplicata extends DataClass implements Insertable<NfeDuplicata> {
  final int? id;
  final int? idNfeFatura;
  final String? numero;
  final DateTime? dataVencimento;
  final double? valor;
  NfeDuplicata(
      {this.id,
      this.idNfeFatura,
      this.numero,
      this.dataVencimento,
      this.valor});
  factory NfeDuplicata.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDuplicata(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeFatura: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_FATURA']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      dataVencimento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_VENCIMENTO']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeFatura != null) {
      map['ID_NFE_FATURA'] = Variable<int>(idNfeFatura);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || dataVencimento != null) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  NfeDuplicatasCompanion toCompanion(bool nullToAbsent) {
    return NfeDuplicatasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeFatura: idNfeFatura == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeFatura),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      dataVencimento: dataVencimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVencimento),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory NfeDuplicata.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDuplicata(
      id: serializer.fromJson<int?>(json['id']),
      idNfeFatura: serializer.fromJson<int?>(json['idNfeFatura']),
      numero: serializer.fromJson<String?>(json['numero']),
      dataVencimento: serializer.fromJson<DateTime?>(json['dataVencimento']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeFatura': serializer.toJson<int?>(idNfeFatura),
      'numero': serializer.toJson<String?>(numero),
      'dataVencimento': serializer.toJson<DateTime?>(dataVencimento),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  NfeDuplicata copyWith(
          {int? id,
          int? idNfeFatura,
          String? numero,
          DateTime? dataVencimento,
          double? valor}) =>
      NfeDuplicata(
        id: id ?? this.id,
        idNfeFatura: idNfeFatura ?? this.idNfeFatura,
        numero: numero ?? this.numero,
        dataVencimento: dataVencimento ?? this.dataVencimento,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDuplicata(')
          ..write('id: $id, ')
          ..write('idNfeFatura: $idNfeFatura, ')
          ..write('numero: $numero, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idNfeFatura, numero, dataVencimento, valor);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDuplicata &&
          other.id == this.id &&
          other.idNfeFatura == this.idNfeFatura &&
          other.numero == this.numero &&
          other.dataVencimento == this.dataVencimento &&
          other.valor == this.valor);
}

class NfeDuplicatasCompanion extends UpdateCompanion<NfeDuplicata> {
  final Value<int?> id;
  final Value<int?> idNfeFatura;
  final Value<String?> numero;
  final Value<DateTime?> dataVencimento;
  final Value<double?> valor;
  const NfeDuplicatasCompanion({
    this.id = const Value.absent(),
    this.idNfeFatura = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.valor = const Value.absent(),
  });
  NfeDuplicatasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeFatura = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<NfeDuplicata> custom({
    Expression<int>? id,
    Expression<int>? idNfeFatura,
    Expression<String>? numero,
    Expression<DateTime>? dataVencimento,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeFatura != null) 'ID_NFE_FATURA': idNfeFatura,
      if (numero != null) 'NUMERO': numero,
      if (dataVencimento != null) 'DATA_VENCIMENTO': dataVencimento,
      if (valor != null) 'VALOR': valor,
    });
  }

  NfeDuplicatasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeFatura,
      Value<String?>? numero,
      Value<DateTime?>? dataVencimento,
      Value<double?>? valor}) {
    return NfeDuplicatasCompanion(
      id: id ?? this.id,
      idNfeFatura: idNfeFatura ?? this.idNfeFatura,
      numero: numero ?? this.numero,
      dataVencimento: dataVencimento ?? this.dataVencimento,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeFatura.present) {
      map['ID_NFE_FATURA'] = Variable<int>(idNfeFatura.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (dataVencimento.present) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDuplicatasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeFatura: $idNfeFatura, ')
          ..write('numero: $numero, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $NfeDuplicatasTable extends NfeDuplicatas
    with TableInfo<$NfeDuplicatasTable, NfeDuplicata> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDuplicatasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeFaturaMeta =
      const VerificationMeta('idNfeFatura');
  @override
  late final GeneratedColumn<int> idNfeFatura = GeneratedColumn<int>(
      'ID_NFE_FATURA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_FATURA(ID)');
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataVencimentoMeta =
      const VerificationMeta('dataVencimento');
  @override
  late final GeneratedColumn<DateTime> dataVencimento =
      GeneratedColumn<DateTime>('DATA_VENCIMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeFatura, numero, dataVencimento, valor];
  @override
  String get aliasedName => _alias ?? 'NFE_DUPLICATA';
  @override
  String get actualTableName => 'NFE_DUPLICATA';
  @override
  VerificationContext validateIntegrity(Insertable<NfeDuplicata> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_FATURA')) {
      context.handle(
          _idNfeFaturaMeta,
          idNfeFatura.isAcceptableOrUnknown(
              data['ID_NFE_FATURA']!, _idNfeFaturaMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('DATA_VENCIMENTO')) {
      context.handle(
          _dataVencimentoMeta,
          dataVencimento.isAcceptableOrUnknown(
              data['DATA_VENCIMENTO']!, _dataVencimentoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDuplicata map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDuplicata.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDuplicatasTable createAlias(String alias) {
    return $NfeDuplicatasTable(attachedDatabase, alias);
  }
}

class NfeEmitente extends DataClass implements Insertable<NfeEmitente> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  final String? nome;
  final String? fantasia;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final int? codigoMunicipio;
  final String? nomeMunicipio;
  final String? uf;
  final String? cep;
  final int? codigoPais;
  final String? nomePais;
  final String? telefone;
  final String? inscricaoEstadual;
  final String? inscricaoEstadualSt;
  final String? inscricaoMunicipal;
  final String? cnae;
  final String? crt;
  NfeEmitente(
      {this.id,
      this.idNfeCabecalho,
      this.cnpj,
      this.cpf,
      this.nome,
      this.fantasia,
      this.logradouro,
      this.numero,
      this.complemento,
      this.bairro,
      this.codigoMunicipio,
      this.nomeMunicipio,
      this.uf,
      this.cep,
      this.codigoPais,
      this.nomePais,
      this.telefone,
      this.inscricaoEstadual,
      this.inscricaoEstadualSt,
      this.inscricaoMunicipal,
      this.cnae,
      this.crt});
  factory NfeEmitente.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeEmitente(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      fantasia: ValueSqlType.stringType(data['${effectivePrefix}FANTASIA']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      codigoMunicipio: ValueSqlType.intType(data['${effectivePrefix}CODIGO_MUNICIPIO']),
      nomeMunicipio: ValueSqlType.stringType(data['${effectivePrefix}NOME_MUNICIPIO']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      codigoPais: ValueSqlType.intType(data['${effectivePrefix}CODIGO_PAIS']),
      nomePais: ValueSqlType.stringType(data['${effectivePrefix}NOME_PAIS']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      inscricaoEstadualSt: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL_ST']),
      inscricaoMunicipal: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
      cnae: ValueSqlType.stringType(data['${effectivePrefix}CNAE']),
      crt: ValueSqlType.stringType(data['${effectivePrefix}CRT']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || fantasia != null) {
      map['FANTASIA'] = Variable<String>(fantasia);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoPais != null) {
      map['CODIGO_PAIS'] = Variable<int>(codigoPais);
    }
    if (!nullToAbsent || nomePais != null) {
      map['NOME_PAIS'] = Variable<String>(nomePais);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || inscricaoEstadualSt != null) {
      map['INSCRICAO_ESTADUAL_ST'] = Variable<String>(inscricaoEstadualSt);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || cnae != null) {
      map['CNAE'] = Variable<String>(cnae);
    }
    if (!nullToAbsent || crt != null) {
      map['CRT'] = Variable<String>(crt);
    }
    return map;
  }

  NfeEmitentesCompanion toCompanion(bool nullToAbsent) {
    return NfeEmitentesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      fantasia: fantasia == null && nullToAbsent
          ? const Value.absent()
          : Value(fantasia),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      codigoMunicipio: codigoMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoMunicipio),
      nomeMunicipio: nomeMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeMunicipio),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      codigoPais: codigoPais == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoPais),
      nomePais: nomePais == null && nullToAbsent
          ? const Value.absent()
          : Value(nomePais),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      inscricaoEstadualSt: inscricaoEstadualSt == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadualSt),
      inscricaoMunicipal: inscricaoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipal),
      cnae: cnae == null && nullToAbsent ? const Value.absent() : Value(cnae),
      crt: crt == null && nullToAbsent ? const Value.absent() : Value(crt),
    );
  }

  factory NfeEmitente.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeEmitente(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      nome: serializer.fromJson<String?>(json['nome']),
      fantasia: serializer.fromJson<String?>(json['fantasia']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoPais: serializer.fromJson<int?>(json['codigoPais']),
      nomePais: serializer.fromJson<String?>(json['nomePais']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
      inscricaoEstadualSt:
          serializer.fromJson<String?>(json['inscricaoEstadualSt']),
      inscricaoMunicipal:
          serializer.fromJson<String?>(json['inscricaoMunicipal']),
      cnae: serializer.fromJson<String?>(json['cnae']),
      crt: serializer.fromJson<String?>(json['crt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'nome': serializer.toJson<String?>(nome),
      'fantasia': serializer.toJson<String?>(fantasia),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoPais': serializer.toJson<int?>(codigoPais),
      'nomePais': serializer.toJson<String?>(nomePais),
      'telefone': serializer.toJson<String?>(telefone),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'inscricaoEstadualSt': serializer.toJson<String?>(inscricaoEstadualSt),
      'inscricaoMunicipal': serializer.toJson<String?>(inscricaoMunicipal),
      'cnae': serializer.toJson<String?>(cnae),
      'crt': serializer.toJson<String?>(crt),
    };
  }

  NfeEmitente copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? cnpj,
          String? cpf,
          String? nome,
          String? fantasia,
          String? logradouro,
          String? numero,
          String? complemento,
          String? bairro,
          int? codigoMunicipio,
          String? nomeMunicipio,
          String? uf,
          String? cep,
          int? codigoPais,
          String? nomePais,
          String? telefone,
          String? inscricaoEstadual,
          String? inscricaoEstadualSt,
          String? inscricaoMunicipal,
          String? cnae,
          String? crt}) =>
      NfeEmitente(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        cnpj: cnpj ?? this.cnpj,
        cpf: cpf ?? this.cpf,
        nome: nome ?? this.nome,
        fantasia: fantasia ?? this.fantasia,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        bairro: bairro ?? this.bairro,
        codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
        nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
        uf: uf ?? this.uf,
        cep: cep ?? this.cep,
        codigoPais: codigoPais ?? this.codigoPais,
        nomePais: nomePais ?? this.nomePais,
        telefone: telefone ?? this.telefone,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        inscricaoEstadualSt: inscricaoEstadualSt ?? this.inscricaoEstadualSt,
        inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
        cnae: cnae ?? this.cnae,
        crt: crt ?? this.crt,
      );
  @override
  String toString() {
    return (StringBuffer('NfeEmitente(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoEstadualSt: $inscricaoEstadualSt, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('cnae: $cnae, ')
          ..write('crt: $crt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idNfeCabecalho,
        cnpj,
        cpf,
        nome,
        fantasia,
        logradouro,
        numero,
        complemento,
        bairro,
        codigoMunicipio,
        nomeMunicipio,
        uf,
        cep,
        codigoPais,
        nomePais,
        telefone,
        inscricaoEstadual,
        inscricaoEstadualSt,
        inscricaoMunicipal,
        cnae,
        crt
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeEmitente &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.nome == this.nome &&
          other.fantasia == this.fantasia &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoPais == this.codigoPais &&
          other.nomePais == this.nomePais &&
          other.telefone == this.telefone &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.inscricaoEstadualSt == this.inscricaoEstadualSt &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.cnae == this.cnae &&
          other.crt == this.crt);
}

class NfeEmitentesCompanion extends UpdateCompanion<NfeEmitente> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> nome;
  final Value<String?> fantasia;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<int?> codigoMunicipio;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoPais;
  final Value<String?> nomePais;
  final Value<String?> telefone;
  final Value<String?> inscricaoEstadual;
  final Value<String?> inscricaoEstadualSt;
  final Value<String?> inscricaoMunicipal;
  final Value<String?> cnae;
  final Value<String?> crt;
  const NfeEmitentesCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoEstadualSt = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.cnae = const Value.absent(),
    this.crt = const Value.absent(),
  });
  NfeEmitentesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoEstadualSt = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.cnae = const Value.absent(),
    this.crt = const Value.absent(),
  });
  static Insertable<NfeEmitente> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? nome,
    Expression<String>? fantasia,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<int>? codigoMunicipio,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoPais,
    Expression<String>? nomePais,
    Expression<String>? telefone,
    Expression<String>? inscricaoEstadual,
    Expression<String>? inscricaoEstadualSt,
    Expression<String>? inscricaoMunicipal,
    Expression<String>? cnae,
    Expression<String>? crt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (cnpj != null) 'CNPJ': cnpj,
      if (cpf != null) 'CPF': cpf,
      if (nome != null) 'NOME': nome,
      if (fantasia != null) 'FANTASIA': fantasia,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (bairro != null) 'BAIRRO': bairro,
      if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
      if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
      if (uf != null) 'UF': uf,
      if (cep != null) 'CEP': cep,
      if (codigoPais != null) 'CODIGO_PAIS': codigoPais,
      if (nomePais != null) 'NOME_PAIS': nomePais,
      if (telefone != null) 'TELEFONE': telefone,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (inscricaoEstadualSt != null)
        'INSCRICAO_ESTADUAL_ST': inscricaoEstadualSt,
      if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
      if (cnae != null) 'CNAE': cnae,
      if (crt != null) 'CRT': crt,
    });
  }

  NfeEmitentesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? cnpj,
      Value<String?>? cpf,
      Value<String?>? nome,
      Value<String?>? fantasia,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? bairro,
      Value<int?>? codigoMunicipio,
      Value<String?>? nomeMunicipio,
      Value<String?>? uf,
      Value<String?>? cep,
      Value<int?>? codigoPais,
      Value<String?>? nomePais,
      Value<String?>? telefone,
      Value<String?>? inscricaoEstadual,
      Value<String?>? inscricaoEstadualSt,
      Value<String?>? inscricaoMunicipal,
      Value<String?>? cnae,
      Value<String?>? crt}) {
    return NfeEmitentesCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      nome: nome ?? this.nome,
      fantasia: fantasia ?? this.fantasia,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoPais: codigoPais ?? this.codigoPais,
      nomePais: nomePais ?? this.nomePais,
      telefone: telefone ?? this.telefone,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      inscricaoEstadualSt: inscricaoEstadualSt ?? this.inscricaoEstadualSt,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      cnae: cnae ?? this.cnae,
      crt: crt ?? this.crt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (fantasia.present) {
      map['FANTASIA'] = Variable<String>(fantasia.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (codigoMunicipio.present) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio.value);
    }
    if (nomeMunicipio.present) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (codigoPais.present) {
      map['CODIGO_PAIS'] = Variable<int>(codigoPais.value);
    }
    if (nomePais.present) {
      map['NOME_PAIS'] = Variable<String>(nomePais.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (inscricaoEstadualSt.present) {
      map['INSCRICAO_ESTADUAL_ST'] =
          Variable<String>(inscricaoEstadualSt.value);
    }
    if (inscricaoMunicipal.present) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (cnae.present) {
      map['CNAE'] = Variable<String>(cnae.value);
    }
    if (crt.present) {
      map['CRT'] = Variable<String>(crt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeEmitentesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoEstadualSt: $inscricaoEstadualSt, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('cnae: $cnae, ')
          ..write('crt: $crt')
          ..write(')'))
        .toString();
  }
}

class $NfeEmitentesTable extends NfeEmitentes
    with TableInfo<$NfeEmitentesTable, NfeEmitente> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeEmitentesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _fantasiaMeta = const VerificationMeta('fantasia');
  @override
  late final GeneratedColumn<String> fantasia = GeneratedColumn<String>(
      'FANTASIA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoMunicipioMeta =
      const VerificationMeta('codigoMunicipio');
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
      'CODIGO_MUNICIPIO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMunicipioMeta =
      const VerificationMeta('nomeMunicipio');
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
      'NOME_MUNICIPIO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoPaisMeta = const VerificationMeta('codigoPais');
  @override
  late final GeneratedColumn<int> codigoPais = GeneratedColumn<int>(
      'CODIGO_PAIS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomePaisMeta = const VerificationMeta('nomePais');
  @override
  late final GeneratedColumn<String> nomePais = GeneratedColumn<String>(
      'NOME_PAIS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualStMeta =
      const VerificationMeta('inscricaoEstadualSt');
  @override
  late final GeneratedColumn<String> inscricaoEstadualSt =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL_ST', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  @override
  late final GeneratedColumn<String> inscricaoMunicipal =
      GeneratedColumn<String>(
          'INSCRICAO_MUNICIPAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 15),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _cnaeMeta = const VerificationMeta('cnae');
  @override
  late final GeneratedColumn<String> cnae = GeneratedColumn<String>(
      'CNAE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _crtMeta = const VerificationMeta('crt');
  @override
  late final GeneratedColumn<String> crt = GeneratedColumn<String>(
      'CRT', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        cnpj,
        cpf,
        nome,
        fantasia,
        logradouro,
        numero,
        complemento,
        bairro,
        codigoMunicipio,
        nomeMunicipio,
        uf,
        cep,
        codigoPais,
        nomePais,
        telefone,
        inscricaoEstadual,
        inscricaoEstadualSt,
        inscricaoMunicipal,
        cnae,
        crt
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_EMITENTE';
  @override
  String get actualTableName => 'NFE_EMITENTE';
  @override
  VerificationContext validateIntegrity(Insertable<NfeEmitente> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('FANTASIA')) {
      context.handle(_fantasiaMeta,
          fantasia.isAcceptableOrUnknown(data['FANTASIA']!, _fantasiaMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CODIGO_MUNICIPIO')) {
      context.handle(
          _codigoMunicipioMeta,
          codigoMunicipio.isAcceptableOrUnknown(
              data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
    }
    if (data.containsKey('NOME_MUNICIPIO')) {
      context.handle(
          _nomeMunicipioMeta,
          nomeMunicipio.isAcceptableOrUnknown(
              data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('CODIGO_PAIS')) {
      context.handle(
          _codigoPaisMeta,
          codigoPais.isAcceptableOrUnknown(
              data['CODIGO_PAIS']!, _codigoPaisMeta));
    }
    if (data.containsKey('NOME_PAIS')) {
      context.handle(_nomePaisMeta,
          nomePais.isAcceptableOrUnknown(data['NOME_PAIS']!, _nomePaisMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL_ST')) {
      context.handle(
          _inscricaoEstadualStMeta,
          inscricaoEstadualSt.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL_ST']!, _inscricaoEstadualStMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL')) {
      context.handle(
          _inscricaoMunicipalMeta,
          inscricaoMunicipal.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
    }
    if (data.containsKey('CNAE')) {
      context.handle(
          _cnaeMeta, cnae.isAcceptableOrUnknown(data['CNAE']!, _cnaeMeta));
    }
    if (data.containsKey('CRT')) {
      context.handle(
          _crtMeta, crt.isAcceptableOrUnknown(data['CRT']!, _crtMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeEmitente map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeEmitente.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeEmitentesTable createAlias(String alias) {
    return $NfeEmitentesTable(attachedDatabase, alias);
  }
}

class NfeExportacao extends DataClass implements Insertable<NfeExportacao> {
  final int? id;
  final int? idNfeDetalhe;
  final int? drawback;
  final int? numeroRegistro;
  final String? chaveAcesso;
  final double? quantidade;
  NfeExportacao(
      {this.id,
      this.idNfeDetalhe,
      this.drawback,
      this.numeroRegistro,
      this.chaveAcesso,
      this.quantidade});
  factory NfeExportacao.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeExportacao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      drawback: ValueSqlType.intType(data['${effectivePrefix}DRAWBACK']),
      numeroRegistro: ValueSqlType.intType(data['${effectivePrefix}NUMERO_REGISTRO']),
      chaveAcesso: ValueSqlType.stringType(data['${effectivePrefix}CHAVE_ACESSO']),
      quantidade: ValueSqlType.doubleType(data['${effectivePrefix}QUANTIDADE']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || drawback != null) {
      map['DRAWBACK'] = Variable<int>(drawback);
    }
    if (!nullToAbsent || numeroRegistro != null) {
      map['NUMERO_REGISTRO'] = Variable<int>(numeroRegistro);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['CHAVE_ACESSO'] = Variable<String>(chaveAcesso);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    return map;
  }

  NfeExportacaosCompanion toCompanion(bool nullToAbsent) {
    return NfeExportacaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      drawback: drawback == null && nullToAbsent
          ? const Value.absent()
          : Value(drawback),
      numeroRegistro: numeroRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroRegistro),
      chaveAcesso: chaveAcesso == null && nullToAbsent
          ? const Value.absent()
          : Value(chaveAcesso),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
    );
  }

  factory NfeExportacao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeExportacao(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      drawback: serializer.fromJson<int?>(json['drawback']),
      numeroRegistro: serializer.fromJson<int?>(json['numeroRegistro']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'drawback': serializer.toJson<int?>(drawback),
      'numeroRegistro': serializer.toJson<int?>(numeroRegistro),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
      'quantidade': serializer.toJson<double?>(quantidade),
    };
  }

  NfeExportacao copyWith(
          {int? id,
          int? idNfeDetalhe,
          int? drawback,
          int? numeroRegistro,
          String? chaveAcesso,
          double? quantidade}) =>
      NfeExportacao(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        drawback: drawback ?? this.drawback,
        numeroRegistro: numeroRegistro ?? this.numeroRegistro,
        chaveAcesso: chaveAcesso ?? this.chaveAcesso,
        quantidade: quantidade ?? this.quantidade,
      );
  @override
  String toString() {
    return (StringBuffer('NfeExportacao(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('drawback: $drawback, ')
          ..write('numeroRegistro: $numeroRegistro, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('quantidade: $quantidade')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, idNfeDetalhe, drawback, numeroRegistro, chaveAcesso, quantidade);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeExportacao &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.drawback == this.drawback &&
          other.numeroRegistro == this.numeroRegistro &&
          other.chaveAcesso == this.chaveAcesso &&
          other.quantidade == this.quantidade);
}

class NfeExportacaosCompanion extends UpdateCompanion<NfeExportacao> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<int?> drawback;
  final Value<int?> numeroRegistro;
  final Value<String?> chaveAcesso;
  final Value<double?> quantidade;
  const NfeExportacaosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.drawback = const Value.absent(),
    this.numeroRegistro = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.quantidade = const Value.absent(),
  });
  NfeExportacaosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.drawback = const Value.absent(),
    this.numeroRegistro = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.quantidade = const Value.absent(),
  });
  static Insertable<NfeExportacao> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<int>? drawback,
    Expression<int>? numeroRegistro,
    Expression<String>? chaveAcesso,
    Expression<double>? quantidade,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (drawback != null) 'DRAWBACK': drawback,
      if (numeroRegistro != null) 'NUMERO_REGISTRO': numeroRegistro,
      if (chaveAcesso != null) 'CHAVE_ACESSO': chaveAcesso,
      if (quantidade != null) 'QUANTIDADE': quantidade,
    });
  }

  NfeExportacaosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<int?>? drawback,
      Value<int?>? numeroRegistro,
      Value<String?>? chaveAcesso,
      Value<double?>? quantidade}) {
    return NfeExportacaosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      drawback: drawback ?? this.drawback,
      numeroRegistro: numeroRegistro ?? this.numeroRegistro,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
      quantidade: quantidade ?? this.quantidade,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (drawback.present) {
      map['DRAWBACK'] = Variable<int>(drawback.value);
    }
    if (numeroRegistro.present) {
      map['NUMERO_REGISTRO'] = Variable<int>(numeroRegistro.value);
    }
    if (chaveAcesso.present) {
      map['CHAVE_ACESSO'] = Variable<String>(chaveAcesso.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeExportacaosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('drawback: $drawback, ')
          ..write('numeroRegistro: $numeroRegistro, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('quantidade: $quantidade')
          ..write(')'))
        .toString();
  }
}

class $NfeExportacaosTable extends NfeExportacaos
    with TableInfo<$NfeExportacaosTable, NfeExportacao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeExportacaosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _drawbackMeta = const VerificationMeta('drawback');
  @override
  late final GeneratedColumn<int> drawback = GeneratedColumn<int>(
      'DRAWBACK', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _numeroRegistroMeta =
      const VerificationMeta('numeroRegistro');
  @override
  late final GeneratedColumn<int> numeroRegistro = GeneratedColumn<int>(
      'NUMERO_REGISTRO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _chaveAcessoMeta =
      const VerificationMeta('chaveAcesso');
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
      'CHAVE_ACESSO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 44),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
      'QUANTIDADE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeDetalhe, drawback, numeroRegistro, chaveAcesso, quantidade];
  @override
  String get aliasedName => _alias ?? 'NFE_EXPORTACAO';
  @override
  String get actualTableName => 'NFE_EXPORTACAO';
  @override
  VerificationContext validateIntegrity(Insertable<NfeExportacao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('DRAWBACK')) {
      context.handle(_drawbackMeta,
          drawback.isAcceptableOrUnknown(data['DRAWBACK']!, _drawbackMeta));
    }
    if (data.containsKey('NUMERO_REGISTRO')) {
      context.handle(
          _numeroRegistroMeta,
          numeroRegistro.isAcceptableOrUnknown(
              data['NUMERO_REGISTRO']!, _numeroRegistroMeta));
    }
    if (data.containsKey('CHAVE_ACESSO')) {
      context.handle(
          _chaveAcessoMeta,
          chaveAcesso.isAcceptableOrUnknown(
              data['CHAVE_ACESSO']!, _chaveAcessoMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE']!, _quantidadeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeExportacao map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeExportacao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeExportacaosTable createAlias(String alias) {
    return $NfeExportacaosTable(attachedDatabase, alias);
  }
}

class NfeFatura extends DataClass implements Insertable<NfeFatura> {
  final int? id;
  final int? idNfeCabecalho;
  final String? numero;
  final double? valorOriginal;
  final double? valorDesconto;
  final double? valorLiquido;
  NfeFatura(
      {this.id,
      this.idNfeCabecalho,
      this.numero,
      this.valorOriginal,
      this.valorDesconto,
      this.valorLiquido});
  factory NfeFatura.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeFatura(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      valorOriginal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ORIGINAL']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      valorLiquido: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_LIQUIDO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || valorOriginal != null) {
      map['VALOR_ORIGINAL'] = Variable<double>(valorOriginal);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorLiquido != null) {
      map['VALOR_LIQUIDO'] = Variable<double>(valorLiquido);
    }
    return map;
  }

  NfeFaturasCompanion toCompanion(bool nullToAbsent) {
    return NfeFaturasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      valorOriginal: valorOriginal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorOriginal),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorLiquido: valorLiquido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorLiquido),
    );
  }

  factory NfeFatura.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeFatura(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      numero: serializer.fromJson<String?>(json['numero']),
      valorOriginal: serializer.fromJson<double?>(json['valorOriginal']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorLiquido: serializer.fromJson<double?>(json['valorLiquido']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'numero': serializer.toJson<String?>(numero),
      'valorOriginal': serializer.toJson<double?>(valorOriginal),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorLiquido': serializer.toJson<double?>(valorLiquido),
    };
  }

  NfeFatura copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? numero,
          double? valorOriginal,
          double? valorDesconto,
          double? valorLiquido}) =>
      NfeFatura(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        numero: numero ?? this.numero,
        valorOriginal: valorOriginal ?? this.valorOriginal,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorLiquido: valorLiquido ?? this.valorLiquido,
      );
  @override
  String toString() {
    return (StringBuffer('NfeFatura(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('numero: $numero, ')
          ..write('valorOriginal: $valorOriginal, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorLiquido: $valorLiquido')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, idNfeCabecalho, numero, valorOriginal, valorDesconto, valorLiquido);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeFatura &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.numero == this.numero &&
          other.valorOriginal == this.valorOriginal &&
          other.valorDesconto == this.valorDesconto &&
          other.valorLiquido == this.valorLiquido);
}

class NfeFaturasCompanion extends UpdateCompanion<NfeFatura> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> numero;
  final Value<double?> valorOriginal;
  final Value<double?> valorDesconto;
  final Value<double?> valorLiquido;
  const NfeFaturasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.numero = const Value.absent(),
    this.valorOriginal = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorLiquido = const Value.absent(),
  });
  NfeFaturasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.numero = const Value.absent(),
    this.valorOriginal = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorLiquido = const Value.absent(),
  });
  static Insertable<NfeFatura> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? numero,
    Expression<double>? valorOriginal,
    Expression<double>? valorDesconto,
    Expression<double>? valorLiquido,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (numero != null) 'NUMERO': numero,
      if (valorOriginal != null) 'VALOR_ORIGINAL': valorOriginal,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorLiquido != null) 'VALOR_LIQUIDO': valorLiquido,
    });
  }

  NfeFaturasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? numero,
      Value<double?>? valorOriginal,
      Value<double?>? valorDesconto,
      Value<double?>? valorLiquido}) {
    return NfeFaturasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      numero: numero ?? this.numero,
      valorOriginal: valorOriginal ?? this.valorOriginal,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorLiquido: valorLiquido ?? this.valorLiquido,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (valorOriginal.present) {
      map['VALOR_ORIGINAL'] = Variable<double>(valorOriginal.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorLiquido.present) {
      map['VALOR_LIQUIDO'] = Variable<double>(valorLiquido.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeFaturasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('numero: $numero, ')
          ..write('valorOriginal: $valorOriginal, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorLiquido: $valorLiquido')
          ..write(')'))
        .toString();
  }
}

class $NfeFaturasTable extends NfeFaturas
    with TableInfo<$NfeFaturasTable, NfeFatura> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeFaturasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorOriginalMeta =
      const VerificationMeta('valorOriginal');
  @override
  late final GeneratedColumn<double> valorOriginal = GeneratedColumn<double>(
      'VALOR_ORIGINAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorLiquidoMeta =
      const VerificationMeta('valorLiquido');
  @override
  late final GeneratedColumn<double> valorLiquido = GeneratedColumn<double>(
      'VALOR_LIQUIDO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeCabecalho, numero, valorOriginal, valorDesconto, valorLiquido];
  @override
  String get aliasedName => _alias ?? 'NFE_FATURA';
  @override
  String get actualTableName => 'NFE_FATURA';
  @override
  VerificationContext validateIntegrity(Insertable<NfeFatura> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('VALOR_ORIGINAL')) {
      context.handle(
          _valorOriginalMeta,
          valorOriginal.isAcceptableOrUnknown(
              data['VALOR_ORIGINAL']!, _valorOriginalMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_LIQUIDO')) {
      context.handle(
          _valorLiquidoMeta,
          valorLiquido.isAcceptableOrUnknown(
              data['VALOR_LIQUIDO']!, _valorLiquidoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeFatura map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeFatura.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeFaturasTable createAlias(String alias) {
    return $NfeFaturasTable(attachedDatabase, alias);
  }
}

class NfeImportacaoDetalhe extends DataClass
    implements Insertable<NfeImportacaoDetalhe> {
  final int? id;
  final int? idNfeDeclaracaoImportacao;
  final int? numeroAdicao;
  final int? numeroSequencial;
  final String? codigoFabricanteEstrangeiro;
  final double? valorDesconto;
  final int? drawback;
  NfeImportacaoDetalhe(
      {this.id,
      this.idNfeDeclaracaoImportacao,
      this.numeroAdicao,
      this.numeroSequencial,
      this.codigoFabricanteEstrangeiro,
      this.valorDesconto,
      this.drawback});
  factory NfeImportacaoDetalhe.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeImportacaoDetalhe(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDeclaracaoImportacao: ValueSqlType.intType(
          data['${effectivePrefix}ID_NFE_DECLARACAO_IMPORTACAO']),
      numeroAdicao: ValueSqlType.intType(data['${effectivePrefix}NUMERO_ADICAO']),
      numeroSequencial: ValueSqlType.intType(data['${effectivePrefix}NUMERO_SEQUENCIAL']),
      codigoFabricanteEstrangeiro: ValueSqlType.stringType(
          data['${effectivePrefix}CODIGO_FABRICANTE_ESTRANGEIRO']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      drawback: ValueSqlType.intType(data['${effectivePrefix}DRAWBACK']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDeclaracaoImportacao != null) {
      map['ID_NFE_DECLARACAO_IMPORTACAO'] =
          Variable<int>(idNfeDeclaracaoImportacao);
    }
    if (!nullToAbsent || numeroAdicao != null) {
      map['NUMERO_ADICAO'] = Variable<int>(numeroAdicao);
    }
    if (!nullToAbsent || numeroSequencial != null) {
      map['NUMERO_SEQUENCIAL'] = Variable<int>(numeroSequencial);
    }
    if (!nullToAbsent || codigoFabricanteEstrangeiro != null) {
      map['CODIGO_FABRICANTE_ESTRANGEIRO'] =
          Variable<String>(codigoFabricanteEstrangeiro);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || drawback != null) {
      map['DRAWBACK'] = Variable<int>(drawback);
    }
    return map;
  }

  NfeImportacaoDetalhesCompanion toCompanion(bool nullToAbsent) {
    return NfeImportacaoDetalhesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDeclaracaoImportacao:
          idNfeDeclaracaoImportacao == null && nullToAbsent
              ? const Value.absent()
              : Value(idNfeDeclaracaoImportacao),
      numeroAdicao: numeroAdicao == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroAdicao),
      numeroSequencial: numeroSequencial == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSequencial),
      codigoFabricanteEstrangeiro:
          codigoFabricanteEstrangeiro == null && nullToAbsent
              ? const Value.absent()
              : Value(codigoFabricanteEstrangeiro),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      drawback: drawback == null && nullToAbsent
          ? const Value.absent()
          : Value(drawback),
    );
  }

  factory NfeImportacaoDetalhe.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeImportacaoDetalhe(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDeclaracaoImportacao:
          serializer.fromJson<int?>(json['idNfeDeclaracaoImportacao']),
      numeroAdicao: serializer.fromJson<int?>(json['numeroAdicao']),
      numeroSequencial: serializer.fromJson<int?>(json['numeroSequencial']),
      codigoFabricanteEstrangeiro:
          serializer.fromJson<String?>(json['codigoFabricanteEstrangeiro']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      drawback: serializer.fromJson<int?>(json['drawback']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDeclaracaoImportacao':
          serializer.toJson<int?>(idNfeDeclaracaoImportacao),
      'numeroAdicao': serializer.toJson<int?>(numeroAdicao),
      'numeroSequencial': serializer.toJson<int?>(numeroSequencial),
      'codigoFabricanteEstrangeiro':
          serializer.toJson<String?>(codigoFabricanteEstrangeiro),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'drawback': serializer.toJson<int?>(drawback),
    };
  }

  NfeImportacaoDetalhe copyWith(
          {int? id,
          int? idNfeDeclaracaoImportacao,
          int? numeroAdicao,
          int? numeroSequencial,
          String? codigoFabricanteEstrangeiro,
          double? valorDesconto,
          int? drawback}) =>
      NfeImportacaoDetalhe(
        id: id ?? this.id,
        idNfeDeclaracaoImportacao:
            idNfeDeclaracaoImportacao ?? this.idNfeDeclaracaoImportacao,
        numeroAdicao: numeroAdicao ?? this.numeroAdicao,
        numeroSequencial: numeroSequencial ?? this.numeroSequencial,
        codigoFabricanteEstrangeiro:
            codigoFabricanteEstrangeiro ?? this.codigoFabricanteEstrangeiro,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        drawback: drawback ?? this.drawback,
      );
  @override
  String toString() {
    return (StringBuffer('NfeImportacaoDetalhe(')
          ..write('id: $id, ')
          ..write('idNfeDeclaracaoImportacao: $idNfeDeclaracaoImportacao, ')
          ..write('numeroAdicao: $numeroAdicao, ')
          ..write('numeroSequencial: $numeroSequencial, ')
          ..write('codigoFabricanteEstrangeiro: $codigoFabricanteEstrangeiro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('drawback: $drawback')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeDeclaracaoImportacao, numeroAdicao,
      numeroSequencial, codigoFabricanteEstrangeiro, valorDesconto, drawback);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeImportacaoDetalhe &&
          other.id == this.id &&
          other.idNfeDeclaracaoImportacao == this.idNfeDeclaracaoImportacao &&
          other.numeroAdicao == this.numeroAdicao &&
          other.numeroSequencial == this.numeroSequencial &&
          other.codigoFabricanteEstrangeiro ==
              this.codigoFabricanteEstrangeiro &&
          other.valorDesconto == this.valorDesconto &&
          other.drawback == this.drawback);
}

class NfeImportacaoDetalhesCompanion
    extends UpdateCompanion<NfeImportacaoDetalhe> {
  final Value<int?> id;
  final Value<int?> idNfeDeclaracaoImportacao;
  final Value<int?> numeroAdicao;
  final Value<int?> numeroSequencial;
  final Value<String?> codigoFabricanteEstrangeiro;
  final Value<double?> valorDesconto;
  final Value<int?> drawback;
  const NfeImportacaoDetalhesCompanion({
    this.id = const Value.absent(),
    this.idNfeDeclaracaoImportacao = const Value.absent(),
    this.numeroAdicao = const Value.absent(),
    this.numeroSequencial = const Value.absent(),
    this.codigoFabricanteEstrangeiro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.drawback = const Value.absent(),
  });
  NfeImportacaoDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDeclaracaoImportacao = const Value.absent(),
    this.numeroAdicao = const Value.absent(),
    this.numeroSequencial = const Value.absent(),
    this.codigoFabricanteEstrangeiro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.drawback = const Value.absent(),
  });
  static Insertable<NfeImportacaoDetalhe> custom({
    Expression<int>? id,
    Expression<int>? idNfeDeclaracaoImportacao,
    Expression<int>? numeroAdicao,
    Expression<int>? numeroSequencial,
    Expression<String>? codigoFabricanteEstrangeiro,
    Expression<double>? valorDesconto,
    Expression<int>? drawback,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDeclaracaoImportacao != null)
        'ID_NFE_DECLARACAO_IMPORTACAO': idNfeDeclaracaoImportacao,
      if (numeroAdicao != null) 'NUMERO_ADICAO': numeroAdicao,
      if (numeroSequencial != null) 'NUMERO_SEQUENCIAL': numeroSequencial,
      if (codigoFabricanteEstrangeiro != null)
        'CODIGO_FABRICANTE_ESTRANGEIRO': codigoFabricanteEstrangeiro,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (drawback != null) 'DRAWBACK': drawback,
    });
  }

  NfeImportacaoDetalhesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDeclaracaoImportacao,
      Value<int?>? numeroAdicao,
      Value<int?>? numeroSequencial,
      Value<String?>? codigoFabricanteEstrangeiro,
      Value<double?>? valorDesconto,
      Value<int?>? drawback}) {
    return NfeImportacaoDetalhesCompanion(
      id: id ?? this.id,
      idNfeDeclaracaoImportacao:
          idNfeDeclaracaoImportacao ?? this.idNfeDeclaracaoImportacao,
      numeroAdicao: numeroAdicao ?? this.numeroAdicao,
      numeroSequencial: numeroSequencial ?? this.numeroSequencial,
      codigoFabricanteEstrangeiro:
          codigoFabricanteEstrangeiro ?? this.codigoFabricanteEstrangeiro,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      drawback: drawback ?? this.drawback,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDeclaracaoImportacao.present) {
      map['ID_NFE_DECLARACAO_IMPORTACAO'] =
          Variable<int>(idNfeDeclaracaoImportacao.value);
    }
    if (numeroAdicao.present) {
      map['NUMERO_ADICAO'] = Variable<int>(numeroAdicao.value);
    }
    if (numeroSequencial.present) {
      map['NUMERO_SEQUENCIAL'] = Variable<int>(numeroSequencial.value);
    }
    if (codigoFabricanteEstrangeiro.present) {
      map['CODIGO_FABRICANTE_ESTRANGEIRO'] =
          Variable<String>(codigoFabricanteEstrangeiro.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (drawback.present) {
      map['DRAWBACK'] = Variable<int>(drawback.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeImportacaoDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDeclaracaoImportacao: $idNfeDeclaracaoImportacao, ')
          ..write('numeroAdicao: $numeroAdicao, ')
          ..write('numeroSequencial: $numeroSequencial, ')
          ..write('codigoFabricanteEstrangeiro: $codigoFabricanteEstrangeiro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('drawback: $drawback')
          ..write(')'))
        .toString();
  }
}

class $NfeImportacaoDetalhesTable extends NfeImportacaoDetalhes
    with TableInfo<$NfeImportacaoDetalhesTable, NfeImportacaoDetalhe> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeImportacaoDetalhesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDeclaracaoImportacaoMeta =
      const VerificationMeta('idNfeDeclaracaoImportacao');
  @override
  late final GeneratedColumn<int> idNfeDeclaracaoImportacao =
      GeneratedColumn<int>('ID_NFE_DECLARACAO_IMPORTACAO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES NFE_DECLARACAO_IMPORTACAO(ID)');
  final VerificationMeta _numeroAdicaoMeta =
      const VerificationMeta('numeroAdicao');
  @override
  late final GeneratedColumn<int> numeroAdicao = GeneratedColumn<int>(
      'NUMERO_ADICAO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _numeroSequencialMeta =
      const VerificationMeta('numeroSequencial');
  @override
  late final GeneratedColumn<int> numeroSequencial = GeneratedColumn<int>(
      'NUMERO_SEQUENCIAL', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoFabricanteEstrangeiroMeta =
      const VerificationMeta('codigoFabricanteEstrangeiro');
  @override
  late final GeneratedColumn<String> codigoFabricanteEstrangeiro =
      GeneratedColumn<String>(
          'CODIGO_FABRICANTE_ESTRANGEIRO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 60),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _drawbackMeta = const VerificationMeta('drawback');
  @override
  late final GeneratedColumn<int> drawback = GeneratedColumn<int>(
      'DRAWBACK', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDeclaracaoImportacao,
        numeroAdicao,
        numeroSequencial,
        codigoFabricanteEstrangeiro,
        valorDesconto,
        drawback
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_IMPORTACAO_DETALHE';
  @override
  String get actualTableName => 'NFE_IMPORTACAO_DETALHE';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeImportacaoDetalhe> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DECLARACAO_IMPORTACAO')) {
      context.handle(
          _idNfeDeclaracaoImportacaoMeta,
          idNfeDeclaracaoImportacao.isAcceptableOrUnknown(
              data['ID_NFE_DECLARACAO_IMPORTACAO']!,
              _idNfeDeclaracaoImportacaoMeta));
    }
    if (data.containsKey('NUMERO_ADICAO')) {
      context.handle(
          _numeroAdicaoMeta,
          numeroAdicao.isAcceptableOrUnknown(
              data['NUMERO_ADICAO']!, _numeroAdicaoMeta));
    }
    if (data.containsKey('NUMERO_SEQUENCIAL')) {
      context.handle(
          _numeroSequencialMeta,
          numeroSequencial.isAcceptableOrUnknown(
              data['NUMERO_SEQUENCIAL']!, _numeroSequencialMeta));
    }
    if (data.containsKey('CODIGO_FABRICANTE_ESTRANGEIRO')) {
      context.handle(
          _codigoFabricanteEstrangeiroMeta,
          codigoFabricanteEstrangeiro.isAcceptableOrUnknown(
              data['CODIGO_FABRICANTE_ESTRANGEIRO']!,
              _codigoFabricanteEstrangeiroMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('DRAWBACK')) {
      context.handle(_drawbackMeta,
          drawback.isAcceptableOrUnknown(data['DRAWBACK']!, _drawbackMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeImportacaoDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeImportacaoDetalhe.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeImportacaoDetalhesTable createAlias(String alias) {
    return $NfeImportacaoDetalhesTable(attachedDatabase, alias);
  }
}

class NfeInformacaoPagamento extends DataClass
    implements Insertable<NfeInformacaoPagamento> {
  final int? id;
  final int? idNfeCabecalho;
  final String? indicadorPagamento;
  final String? meioPagamento;
  final double? valor;
  final String? tipoIntegracao;
  final String? cnpjOperadoraCartao;
  final String? bandeira;
  final String? numeroAutorizacao;
  final double? troco;
  NfeInformacaoPagamento(
      {this.id,
      this.idNfeCabecalho,
      this.indicadorPagamento,
      this.meioPagamento,
      this.valor,
      this.tipoIntegracao,
      this.cnpjOperadoraCartao,
      this.bandeira,
      this.numeroAutorizacao,
      this.troco});
  factory NfeInformacaoPagamento.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeInformacaoPagamento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      indicadorPagamento: ValueSqlType.stringType(
          data['${effectivePrefix}INDICADOR_PAGAMENTO']),
      meioPagamento: ValueSqlType.stringType(data['${effectivePrefix}MEIO_PAGAMENTO']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
      tipoIntegracao: ValueSqlType.stringType(data['${effectivePrefix}TIPO_INTEGRACAO']),
      cnpjOperadoraCartao: ValueSqlType.stringType(
          data['${effectivePrefix}CNPJ_OPERADORA_CARTAO']),
      bandeira: ValueSqlType.stringType(data['${effectivePrefix}BANDEIRA']),
      numeroAutorizacao: ValueSqlType.stringType(
          data['${effectivePrefix}NUMERO_AUTORIZACAO']),
      troco: ValueSqlType.doubleType(data['${effectivePrefix}TROCO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || indicadorPagamento != null) {
      map['INDICADOR_PAGAMENTO'] = Variable<String>(indicadorPagamento);
    }
    if (!nullToAbsent || meioPagamento != null) {
      map['MEIO_PAGAMENTO'] = Variable<String>(meioPagamento);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || tipoIntegracao != null) {
      map['TIPO_INTEGRACAO'] = Variable<String>(tipoIntegracao);
    }
    if (!nullToAbsent || cnpjOperadoraCartao != null) {
      map['CNPJ_OPERADORA_CARTAO'] = Variable<String>(cnpjOperadoraCartao);
    }
    if (!nullToAbsent || bandeira != null) {
      map['BANDEIRA'] = Variable<String>(bandeira);
    }
    if (!nullToAbsent || numeroAutorizacao != null) {
      map['NUMERO_AUTORIZACAO'] = Variable<String>(numeroAutorizacao);
    }
    if (!nullToAbsent || troco != null) {
      map['TROCO'] = Variable<double>(troco);
    }
    return map;
  }

  NfeInformacaoPagamentosCompanion toCompanion(bool nullToAbsent) {
    return NfeInformacaoPagamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      indicadorPagamento: indicadorPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(indicadorPagamento),
      meioPagamento: meioPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(meioPagamento),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      tipoIntegracao: tipoIntegracao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoIntegracao),
      cnpjOperadoraCartao: cnpjOperadoraCartao == null && nullToAbsent
          ? const Value.absent()
          : Value(cnpjOperadoraCartao),
      bandeira: bandeira == null && nullToAbsent
          ? const Value.absent()
          : Value(bandeira),
      numeroAutorizacao: numeroAutorizacao == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroAutorizacao),
      troco:
          troco == null && nullToAbsent ? const Value.absent() : Value(troco),
    );
  }

  factory NfeInformacaoPagamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeInformacaoPagamento(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      indicadorPagamento:
          serializer.fromJson<String?>(json['indicadorPagamento']),
      meioPagamento: serializer.fromJson<String?>(json['meioPagamento']),
      valor: serializer.fromJson<double?>(json['valor']),
      tipoIntegracao: serializer.fromJson<String?>(json['tipoIntegracao']),
      cnpjOperadoraCartao:
          serializer.fromJson<String?>(json['cnpjOperadoraCartao']),
      bandeira: serializer.fromJson<String?>(json['bandeira']),
      numeroAutorizacao:
          serializer.fromJson<String?>(json['numeroAutorizacao']),
      troco: serializer.fromJson<double?>(json['troco']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'indicadorPagamento': serializer.toJson<String?>(indicadorPagamento),
      'meioPagamento': serializer.toJson<String?>(meioPagamento),
      'valor': serializer.toJson<double?>(valor),
      'tipoIntegracao': serializer.toJson<String?>(tipoIntegracao),
      'cnpjOperadoraCartao': serializer.toJson<String?>(cnpjOperadoraCartao),
      'bandeira': serializer.toJson<String?>(bandeira),
      'numeroAutorizacao': serializer.toJson<String?>(numeroAutorizacao),
      'troco': serializer.toJson<double?>(troco),
    };
  }

  NfeInformacaoPagamento copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? indicadorPagamento,
          String? meioPagamento,
          double? valor,
          String? tipoIntegracao,
          String? cnpjOperadoraCartao,
          String? bandeira,
          String? numeroAutorizacao,
          double? troco}) =>
      NfeInformacaoPagamento(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        indicadorPagamento: indicadorPagamento ?? this.indicadorPagamento,
        meioPagamento: meioPagamento ?? this.meioPagamento,
        valor: valor ?? this.valor,
        tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
        cnpjOperadoraCartao: cnpjOperadoraCartao ?? this.cnpjOperadoraCartao,
        bandeira: bandeira ?? this.bandeira,
        numeroAutorizacao: numeroAutorizacao ?? this.numeroAutorizacao,
        troco: troco ?? this.troco,
      );
  @override
  String toString() {
    return (StringBuffer('NfeInformacaoPagamento(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('indicadorPagamento: $indicadorPagamento, ')
          ..write('meioPagamento: $meioPagamento, ')
          ..write('valor: $valor, ')
          ..write('tipoIntegracao: $tipoIntegracao, ')
          ..write('cnpjOperadoraCartao: $cnpjOperadoraCartao, ')
          ..write('bandeira: $bandeira, ')
          ..write('numeroAutorizacao: $numeroAutorizacao, ')
          ..write('troco: $troco')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeCabecalho,
      indicadorPagamento,
      meioPagamento,
      valor,
      tipoIntegracao,
      cnpjOperadoraCartao,
      bandeira,
      numeroAutorizacao,
      troco);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeInformacaoPagamento &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.indicadorPagamento == this.indicadorPagamento &&
          other.meioPagamento == this.meioPagamento &&
          other.valor == this.valor &&
          other.tipoIntegracao == this.tipoIntegracao &&
          other.cnpjOperadoraCartao == this.cnpjOperadoraCartao &&
          other.bandeira == this.bandeira &&
          other.numeroAutorizacao == this.numeroAutorizacao &&
          other.troco == this.troco);
}

class NfeInformacaoPagamentosCompanion
    extends UpdateCompanion<NfeInformacaoPagamento> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> indicadorPagamento;
  final Value<String?> meioPagamento;
  final Value<double?> valor;
  final Value<String?> tipoIntegracao;
  final Value<String?> cnpjOperadoraCartao;
  final Value<String?> bandeira;
  final Value<String?> numeroAutorizacao;
  final Value<double?> troco;
  const NfeInformacaoPagamentosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.indicadorPagamento = const Value.absent(),
    this.meioPagamento = const Value.absent(),
    this.valor = const Value.absent(),
    this.tipoIntegracao = const Value.absent(),
    this.cnpjOperadoraCartao = const Value.absent(),
    this.bandeira = const Value.absent(),
    this.numeroAutorizacao = const Value.absent(),
    this.troco = const Value.absent(),
  });
  NfeInformacaoPagamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.indicadorPagamento = const Value.absent(),
    this.meioPagamento = const Value.absent(),
    this.valor = const Value.absent(),
    this.tipoIntegracao = const Value.absent(),
    this.cnpjOperadoraCartao = const Value.absent(),
    this.bandeira = const Value.absent(),
    this.numeroAutorizacao = const Value.absent(),
    this.troco = const Value.absent(),
  });
  static Insertable<NfeInformacaoPagamento> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? indicadorPagamento,
    Expression<String>? meioPagamento,
    Expression<double>? valor,
    Expression<String>? tipoIntegracao,
    Expression<String>? cnpjOperadoraCartao,
    Expression<String>? bandeira,
    Expression<String>? numeroAutorizacao,
    Expression<double>? troco,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (indicadorPagamento != null) 'INDICADOR_PAGAMENTO': indicadorPagamento,
      if (meioPagamento != null) 'MEIO_PAGAMENTO': meioPagamento,
      if (valor != null) 'VALOR': valor,
      if (tipoIntegracao != null) 'TIPO_INTEGRACAO': tipoIntegracao,
      if (cnpjOperadoraCartao != null)
        'CNPJ_OPERADORA_CARTAO': cnpjOperadoraCartao,
      if (bandeira != null) 'BANDEIRA': bandeira,
      if (numeroAutorizacao != null) 'NUMERO_AUTORIZACAO': numeroAutorizacao,
      if (troco != null) 'TROCO': troco,
    });
  }

  NfeInformacaoPagamentosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? indicadorPagamento,
      Value<String?>? meioPagamento,
      Value<double?>? valor,
      Value<String?>? tipoIntegracao,
      Value<String?>? cnpjOperadoraCartao,
      Value<String?>? bandeira,
      Value<String?>? numeroAutorizacao,
      Value<double?>? troco}) {
    return NfeInformacaoPagamentosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      indicadorPagamento: indicadorPagamento ?? this.indicadorPagamento,
      meioPagamento: meioPagamento ?? this.meioPagamento,
      valor: valor ?? this.valor,
      tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
      cnpjOperadoraCartao: cnpjOperadoraCartao ?? this.cnpjOperadoraCartao,
      bandeira: bandeira ?? this.bandeira,
      numeroAutorizacao: numeroAutorizacao ?? this.numeroAutorizacao,
      troco: troco ?? this.troco,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (indicadorPagamento.present) {
      map['INDICADOR_PAGAMENTO'] = Variable<String>(indicadorPagamento.value);
    }
    if (meioPagamento.present) {
      map['MEIO_PAGAMENTO'] = Variable<String>(meioPagamento.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (tipoIntegracao.present) {
      map['TIPO_INTEGRACAO'] = Variable<String>(tipoIntegracao.value);
    }
    if (cnpjOperadoraCartao.present) {
      map['CNPJ_OPERADORA_CARTAO'] =
          Variable<String>(cnpjOperadoraCartao.value);
    }
    if (bandeira.present) {
      map['BANDEIRA'] = Variable<String>(bandeira.value);
    }
    if (numeroAutorizacao.present) {
      map['NUMERO_AUTORIZACAO'] = Variable<String>(numeroAutorizacao.value);
    }
    if (troco.present) {
      map['TROCO'] = Variable<double>(troco.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeInformacaoPagamentosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('indicadorPagamento: $indicadorPagamento, ')
          ..write('meioPagamento: $meioPagamento, ')
          ..write('valor: $valor, ')
          ..write('tipoIntegracao: $tipoIntegracao, ')
          ..write('cnpjOperadoraCartao: $cnpjOperadoraCartao, ')
          ..write('bandeira: $bandeira, ')
          ..write('numeroAutorizacao: $numeroAutorizacao, ')
          ..write('troco: $troco')
          ..write(')'))
        .toString();
  }
}

class $NfeInformacaoPagamentosTable extends NfeInformacaoPagamentos
    with TableInfo<$NfeInformacaoPagamentosTable, NfeInformacaoPagamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeInformacaoPagamentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _indicadorPagamentoMeta =
      const VerificationMeta('indicadorPagamento');
  @override
  late final GeneratedColumn<String> indicadorPagamento =
      GeneratedColumn<String>(
          'INDICADOR_PAGAMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _meioPagamentoMeta =
      const VerificationMeta('meioPagamento');
  @override
  late final GeneratedColumn<String> meioPagamento = GeneratedColumn<String>(
      'MEIO_PAGAMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _tipoIntegracaoMeta =
      const VerificationMeta('tipoIntegracao');
  @override
  late final GeneratedColumn<String> tipoIntegracao = GeneratedColumn<String>(
      'TIPO_INTEGRACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cnpjOperadoraCartaoMeta =
      const VerificationMeta('cnpjOperadoraCartao');
  @override
  late final GeneratedColumn<String> cnpjOperadoraCartao =
      GeneratedColumn<String>('CNPJ_OPERADORA_CARTAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _bandeiraMeta = const VerificationMeta('bandeira');
  @override
  late final GeneratedColumn<String> bandeira = GeneratedColumn<String>(
      'BANDEIRA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroAutorizacaoMeta =
      const VerificationMeta('numeroAutorizacao');
  @override
  late final GeneratedColumn<String> numeroAutorizacao =
      GeneratedColumn<String>('NUMERO_AUTORIZACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _trocoMeta = const VerificationMeta('troco');
  @override
  late final GeneratedColumn<double> troco = GeneratedColumn<double>(
      'TROCO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        indicadorPagamento,
        meioPagamento,
        valor,
        tipoIntegracao,
        cnpjOperadoraCartao,
        bandeira,
        numeroAutorizacao,
        troco
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_INFORMACAO_PAGAMENTO';
  @override
  String get actualTableName => 'NFE_INFORMACAO_PAGAMENTO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeInformacaoPagamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('INDICADOR_PAGAMENTO')) {
      context.handle(
          _indicadorPagamentoMeta,
          indicadorPagamento.isAcceptableOrUnknown(
              data['INDICADOR_PAGAMENTO']!, _indicadorPagamentoMeta));
    }
    if (data.containsKey('MEIO_PAGAMENTO')) {
      context.handle(
          _meioPagamentoMeta,
          meioPagamento.isAcceptableOrUnknown(
              data['MEIO_PAGAMENTO']!, _meioPagamentoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    if (data.containsKey('TIPO_INTEGRACAO')) {
      context.handle(
          _tipoIntegracaoMeta,
          tipoIntegracao.isAcceptableOrUnknown(
              data['TIPO_INTEGRACAO']!, _tipoIntegracaoMeta));
    }
    if (data.containsKey('CNPJ_OPERADORA_CARTAO')) {
      context.handle(
          _cnpjOperadoraCartaoMeta,
          cnpjOperadoraCartao.isAcceptableOrUnknown(
              data['CNPJ_OPERADORA_CARTAO']!, _cnpjOperadoraCartaoMeta));
    }
    if (data.containsKey('BANDEIRA')) {
      context.handle(_bandeiraMeta,
          bandeira.isAcceptableOrUnknown(data['BANDEIRA']!, _bandeiraMeta));
    }
    if (data.containsKey('NUMERO_AUTORIZACAO')) {
      context.handle(
          _numeroAutorizacaoMeta,
          numeroAutorizacao.isAcceptableOrUnknown(
              data['NUMERO_AUTORIZACAO']!, _numeroAutorizacaoMeta));
    }
    if (data.containsKey('TROCO')) {
      context.handle(
          _trocoMeta, troco.isAcceptableOrUnknown(data['TROCO']!, _trocoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeInformacaoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeInformacaoPagamento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeInformacaoPagamentosTable createAlias(String alias) {
    return $NfeInformacaoPagamentosTable(attachedDatabase, alias);
  }
}

class NfeItemRastreado extends DataClass
    implements Insertable<NfeItemRastreado> {
  final int? id;
  final int? idNfeDetalhe;
  final String? numeroLote;
  final double? quantidadeItens;
  final DateTime? dataFabricacao;
  final DateTime? dataValidade;
  final String? codigoAgregacao;
  NfeItemRastreado(
      {this.id,
      this.idNfeDetalhe,
      this.numeroLote,
      this.quantidadeItens,
      this.dataFabricacao,
      this.dataValidade,
      this.codigoAgregacao});
  factory NfeItemRastreado.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeItemRastreado(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      numeroLote: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_LOTE']),
      quantidadeItens: ValueSqlType.doubleType(data['${effectivePrefix}QUANTIDADE_ITENS']),
      dataFabricacao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_FABRICACAO']),
      dataValidade: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_VALIDADE']),
      codigoAgregacao: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_AGREGACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || numeroLote != null) {
      map['NUMERO_LOTE'] = Variable<String>(numeroLote);
    }
    if (!nullToAbsent || quantidadeItens != null) {
      map['QUANTIDADE_ITENS'] = Variable<double>(quantidadeItens);
    }
    if (!nullToAbsent || dataFabricacao != null) {
      map['DATA_FABRICACAO'] = Variable<DateTime>(dataFabricacao);
    }
    if (!nullToAbsent || dataValidade != null) {
      map['DATA_VALIDADE'] = Variable<DateTime>(dataValidade);
    }
    if (!nullToAbsent || codigoAgregacao != null) {
      map['CODIGO_AGREGACAO'] = Variable<String>(codigoAgregacao);
    }
    return map;
  }

  NfeItemRastreadosCompanion toCompanion(bool nullToAbsent) {
    return NfeItemRastreadosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      numeroLote: numeroLote == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroLote),
      quantidadeItens: quantidadeItens == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeItens),
      dataFabricacao: dataFabricacao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataFabricacao),
      dataValidade: dataValidade == null && nullToAbsent
          ? const Value.absent()
          : Value(dataValidade),
      codigoAgregacao: codigoAgregacao == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoAgregacao),
    );
  }

  factory NfeItemRastreado.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeItemRastreado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      numeroLote: serializer.fromJson<String?>(json['numeroLote']),
      quantidadeItens: serializer.fromJson<double?>(json['quantidadeItens']),
      dataFabricacao: serializer.fromJson<DateTime?>(json['dataFabricacao']),
      dataValidade: serializer.fromJson<DateTime?>(json['dataValidade']),
      codigoAgregacao: serializer.fromJson<String?>(json['codigoAgregacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'numeroLote': serializer.toJson<String?>(numeroLote),
      'quantidadeItens': serializer.toJson<double?>(quantidadeItens),
      'dataFabricacao': serializer.toJson<DateTime?>(dataFabricacao),
      'dataValidade': serializer.toJson<DateTime?>(dataValidade),
      'codigoAgregacao': serializer.toJson<String?>(codigoAgregacao),
    };
  }

  NfeItemRastreado copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? numeroLote,
          double? quantidadeItens,
          DateTime? dataFabricacao,
          DateTime? dataValidade,
          String? codigoAgregacao}) =>
      NfeItemRastreado(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        numeroLote: numeroLote ?? this.numeroLote,
        quantidadeItens: quantidadeItens ?? this.quantidadeItens,
        dataFabricacao: dataFabricacao ?? this.dataFabricacao,
        dataValidade: dataValidade ?? this.dataValidade,
        codigoAgregacao: codigoAgregacao ?? this.codigoAgregacao,
      );
  @override
  String toString() {
    return (StringBuffer('NfeItemRastreado(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('numeroLote: $numeroLote, ')
          ..write('quantidadeItens: $quantidadeItens, ')
          ..write('dataFabricacao: $dataFabricacao, ')
          ..write('dataValidade: $dataValidade, ')
          ..write('codigoAgregacao: $codigoAgregacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeDetalhe, numeroLote, quantidadeItens,
      dataFabricacao, dataValidade, codigoAgregacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeItemRastreado &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.numeroLote == this.numeroLote &&
          other.quantidadeItens == this.quantidadeItens &&
          other.dataFabricacao == this.dataFabricacao &&
          other.dataValidade == this.dataValidade &&
          other.codigoAgregacao == this.codigoAgregacao);
}

class NfeItemRastreadosCompanion extends UpdateCompanion<NfeItemRastreado> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> numeroLote;
  final Value<double?> quantidadeItens;
  final Value<DateTime?> dataFabricacao;
  final Value<DateTime?> dataValidade;
  final Value<String?> codigoAgregacao;
  const NfeItemRastreadosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.numeroLote = const Value.absent(),
    this.quantidadeItens = const Value.absent(),
    this.dataFabricacao = const Value.absent(),
    this.dataValidade = const Value.absent(),
    this.codigoAgregacao = const Value.absent(),
  });
  NfeItemRastreadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.numeroLote = const Value.absent(),
    this.quantidadeItens = const Value.absent(),
    this.dataFabricacao = const Value.absent(),
    this.dataValidade = const Value.absent(),
    this.codigoAgregacao = const Value.absent(),
  });
  static Insertable<NfeItemRastreado> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? numeroLote,
    Expression<double>? quantidadeItens,
    Expression<DateTime>? dataFabricacao,
    Expression<DateTime>? dataValidade,
    Expression<String>? codigoAgregacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (numeroLote != null) 'NUMERO_LOTE': numeroLote,
      if (quantidadeItens != null) 'QUANTIDADE_ITENS': quantidadeItens,
      if (dataFabricacao != null) 'DATA_FABRICACAO': dataFabricacao,
      if (dataValidade != null) 'DATA_VALIDADE': dataValidade,
      if (codigoAgregacao != null) 'CODIGO_AGREGACAO': codigoAgregacao,
    });
  }

  NfeItemRastreadosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? numeroLote,
      Value<double?>? quantidadeItens,
      Value<DateTime?>? dataFabricacao,
      Value<DateTime?>? dataValidade,
      Value<String?>? codigoAgregacao}) {
    return NfeItemRastreadosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      numeroLote: numeroLote ?? this.numeroLote,
      quantidadeItens: quantidadeItens ?? this.quantidadeItens,
      dataFabricacao: dataFabricacao ?? this.dataFabricacao,
      dataValidade: dataValidade ?? this.dataValidade,
      codigoAgregacao: codigoAgregacao ?? this.codigoAgregacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (numeroLote.present) {
      map['NUMERO_LOTE'] = Variable<String>(numeroLote.value);
    }
    if (quantidadeItens.present) {
      map['QUANTIDADE_ITENS'] = Variable<double>(quantidadeItens.value);
    }
    if (dataFabricacao.present) {
      map['DATA_FABRICACAO'] = Variable<DateTime>(dataFabricacao.value);
    }
    if (dataValidade.present) {
      map['DATA_VALIDADE'] = Variable<DateTime>(dataValidade.value);
    }
    if (codigoAgregacao.present) {
      map['CODIGO_AGREGACAO'] = Variable<String>(codigoAgregacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeItemRastreadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('numeroLote: $numeroLote, ')
          ..write('quantidadeItens: $quantidadeItens, ')
          ..write('dataFabricacao: $dataFabricacao, ')
          ..write('dataValidade: $dataValidade, ')
          ..write('codigoAgregacao: $codigoAgregacao')
          ..write(')'))
        .toString();
  }
}

class $NfeItemRastreadosTable extends NfeItemRastreados
    with TableInfo<$NfeItemRastreadosTable, NfeItemRastreado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeItemRastreadosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _numeroLoteMeta = const VerificationMeta('numeroLote');
  @override
  late final GeneratedColumn<String> numeroLote = GeneratedColumn<String>(
      'NUMERO_LOTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadeItensMeta =
      const VerificationMeta('quantidadeItens');
  @override
  late final GeneratedColumn<double> quantidadeItens =
      GeneratedColumn<double>('QUANTIDADE_ITENS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _dataFabricacaoMeta =
      const VerificationMeta('dataFabricacao');
  @override
  late final GeneratedColumn<DateTime> dataFabricacao =
      GeneratedColumn<DateTime>('DATA_FABRICACAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataValidadeMeta =
      const VerificationMeta('dataValidade');
  @override
  late final GeneratedColumn<DateTime> dataValidade =
      GeneratedColumn<DateTime>('DATA_VALIDADE', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _codigoAgregacaoMeta =
      const VerificationMeta('codigoAgregacao');
  @override
  late final GeneratedColumn<String> codigoAgregacao =
      GeneratedColumn<String>('CODIGO_AGREGACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        numeroLote,
        quantidadeItens,
        dataFabricacao,
        dataValidade,
        codigoAgregacao
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_ITEM_RASTREADO';
  @override
  String get actualTableName => 'NFE_ITEM_RASTREADO';
  @override
  VerificationContext validateIntegrity(Insertable<NfeItemRastreado> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('NUMERO_LOTE')) {
      context.handle(
          _numeroLoteMeta,
          numeroLote.isAcceptableOrUnknown(
              data['NUMERO_LOTE']!, _numeroLoteMeta));
    }
    if (data.containsKey('QUANTIDADE_ITENS')) {
      context.handle(
          _quantidadeItensMeta,
          quantidadeItens.isAcceptableOrUnknown(
              data['QUANTIDADE_ITENS']!, _quantidadeItensMeta));
    }
    if (data.containsKey('DATA_FABRICACAO')) {
      context.handle(
          _dataFabricacaoMeta,
          dataFabricacao.isAcceptableOrUnknown(
              data['DATA_FABRICACAO']!, _dataFabricacaoMeta));
    }
    if (data.containsKey('DATA_VALIDADE')) {
      context.handle(
          _dataValidadeMeta,
          dataValidade.isAcceptableOrUnknown(
              data['DATA_VALIDADE']!, _dataValidadeMeta));
    }
    if (data.containsKey('CODIGO_AGREGACAO')) {
      context.handle(
          _codigoAgregacaoMeta,
          codigoAgregacao.isAcceptableOrUnknown(
              data['CODIGO_AGREGACAO']!, _codigoAgregacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeItemRastreado map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeItemRastreado.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeItemRastreadosTable createAlias(String alias) {
    return $NfeItemRastreadosTable(attachedDatabase, alias);
  }
}

class NfeLocalEntrega extends DataClass implements Insertable<NfeLocalEntrega> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  final String? nomeRecebedor;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final int? codigoMunicipio;
  final String? nomeMunicipio;
  final String? uf;
  final String? cep;
  final int? codigoPais;
  final String? nomePais;
  final String? telefone;
  final String? email;
  final String? inscricaoEstadual;
  NfeLocalEntrega(
      {this.id,
      this.idNfeCabecalho,
      this.cnpj,
      this.cpf,
      this.nomeRecebedor,
      this.logradouro,
      this.numero,
      this.complemento,
      this.bairro,
      this.codigoMunicipio,
      this.nomeMunicipio,
      this.uf,
      this.cep,
      this.codigoPais,
      this.nomePais,
      this.telefone,
      this.email,
      this.inscricaoEstadual});
  factory NfeLocalEntrega.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeLocalEntrega(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
      nomeRecebedor: ValueSqlType.stringType(data['${effectivePrefix}NOME_RECEBEDOR']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      codigoMunicipio: ValueSqlType.intType(data['${effectivePrefix}CODIGO_MUNICIPIO']),
      nomeMunicipio: ValueSqlType.stringType(data['${effectivePrefix}NOME_MUNICIPIO']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      codigoPais: ValueSqlType.intType(data['${effectivePrefix}CODIGO_PAIS']),
      nomePais: ValueSqlType.stringType(data['${effectivePrefix}NOME_PAIS']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || nomeRecebedor != null) {
      map['NOME_RECEBEDOR'] = Variable<String>(nomeRecebedor);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoPais != null) {
      map['CODIGO_PAIS'] = Variable<int>(codigoPais);
    }
    if (!nullToAbsent || nomePais != null) {
      map['NOME_PAIS'] = Variable<String>(nomePais);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    return map;
  }

  NfeLocalEntregasCompanion toCompanion(bool nullToAbsent) {
    return NfeLocalEntregasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      nomeRecebedor: nomeRecebedor == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeRecebedor),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      codigoMunicipio: codigoMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoMunicipio),
      nomeMunicipio: nomeMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeMunicipio),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      codigoPais: codigoPais == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoPais),
      nomePais: nomePais == null && nullToAbsent
          ? const Value.absent()
          : Value(nomePais),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
    );
  }

  factory NfeLocalEntrega.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeLocalEntrega(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      nomeRecebedor: serializer.fromJson<String?>(json['nomeRecebedor']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoPais: serializer.fromJson<int?>(json['codigoPais']),
      nomePais: serializer.fromJson<String?>(json['nomePais']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      email: serializer.fromJson<String?>(json['email']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'nomeRecebedor': serializer.toJson<String?>(nomeRecebedor),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoPais': serializer.toJson<int?>(codigoPais),
      'nomePais': serializer.toJson<String?>(nomePais),
      'telefone': serializer.toJson<String?>(telefone),
      'email': serializer.toJson<String?>(email),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
    };
  }

  NfeLocalEntrega copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? cnpj,
          String? cpf,
          String? nomeRecebedor,
          String? logradouro,
          String? numero,
          String? complemento,
          String? bairro,
          int? codigoMunicipio,
          String? nomeMunicipio,
          String? uf,
          String? cep,
          int? codigoPais,
          String? nomePais,
          String? telefone,
          String? email,
          String? inscricaoEstadual}) =>
      NfeLocalEntrega(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        cnpj: cnpj ?? this.cnpj,
        cpf: cpf ?? this.cpf,
        nomeRecebedor: nomeRecebedor ?? this.nomeRecebedor,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        bairro: bairro ?? this.bairro,
        codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
        nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
        uf: uf ?? this.uf,
        cep: cep ?? this.cep,
        codigoPais: codigoPais ?? this.codigoPais,
        nomePais: nomePais ?? this.nomePais,
        telefone: telefone ?? this.telefone,
        email: email ?? this.email,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      );
  @override
  String toString() {
    return (StringBuffer('NfeLocalEntrega(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nomeRecebedor: $nomeRecebedor, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('email: $email, ')
          ..write('inscricaoEstadual: $inscricaoEstadual')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeCabecalho,
      cnpj,
      cpf,
      nomeRecebedor,
      logradouro,
      numero,
      complemento,
      bairro,
      codigoMunicipio,
      nomeMunicipio,
      uf,
      cep,
      codigoPais,
      nomePais,
      telefone,
      email,
      inscricaoEstadual);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeLocalEntrega &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.nomeRecebedor == this.nomeRecebedor &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoPais == this.codigoPais &&
          other.nomePais == this.nomePais &&
          other.telefone == this.telefone &&
          other.email == this.email &&
          other.inscricaoEstadual == this.inscricaoEstadual);
}

class NfeLocalEntregasCompanion extends UpdateCompanion<NfeLocalEntrega> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> nomeRecebedor;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<int?> codigoMunicipio;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoPais;
  final Value<String?> nomePais;
  final Value<String?> telefone;
  final Value<String?> email;
  final Value<String?> inscricaoEstadual;
  const NfeLocalEntregasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nomeRecebedor = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
  });
  NfeLocalEntregasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nomeRecebedor = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
  });
  static Insertable<NfeLocalEntrega> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? nomeRecebedor,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<int>? codigoMunicipio,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoPais,
    Expression<String>? nomePais,
    Expression<String>? telefone,
    Expression<String>? email,
    Expression<String>? inscricaoEstadual,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (cnpj != null) 'CNPJ': cnpj,
      if (cpf != null) 'CPF': cpf,
      if (nomeRecebedor != null) 'NOME_RECEBEDOR': nomeRecebedor,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (bairro != null) 'BAIRRO': bairro,
      if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
      if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
      if (uf != null) 'UF': uf,
      if (cep != null) 'CEP': cep,
      if (codigoPais != null) 'CODIGO_PAIS': codigoPais,
      if (nomePais != null) 'NOME_PAIS': nomePais,
      if (telefone != null) 'TELEFONE': telefone,
      if (email != null) 'EMAIL': email,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
    });
  }

  NfeLocalEntregasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? cnpj,
      Value<String?>? cpf,
      Value<String?>? nomeRecebedor,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? bairro,
      Value<int?>? codigoMunicipio,
      Value<String?>? nomeMunicipio,
      Value<String?>? uf,
      Value<String?>? cep,
      Value<int?>? codigoPais,
      Value<String?>? nomePais,
      Value<String?>? telefone,
      Value<String?>? email,
      Value<String?>? inscricaoEstadual}) {
    return NfeLocalEntregasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      nomeRecebedor: nomeRecebedor ?? this.nomeRecebedor,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoPais: codigoPais ?? this.codigoPais,
      nomePais: nomePais ?? this.nomePais,
      telefone: telefone ?? this.telefone,
      email: email ?? this.email,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (nomeRecebedor.present) {
      map['NOME_RECEBEDOR'] = Variable<String>(nomeRecebedor.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (codigoMunicipio.present) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio.value);
    }
    if (nomeMunicipio.present) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (codigoPais.present) {
      map['CODIGO_PAIS'] = Variable<int>(codigoPais.value);
    }
    if (nomePais.present) {
      map['NOME_PAIS'] = Variable<String>(nomePais.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeLocalEntregasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nomeRecebedor: $nomeRecebedor, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('email: $email, ')
          ..write('inscricaoEstadual: $inscricaoEstadual')
          ..write(')'))
        .toString();
  }
}

class $NfeLocalEntregasTable extends NfeLocalEntregas
    with TableInfo<$NfeLocalEntregasTable, NfeLocalEntrega> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeLocalEntregasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeRecebedorMeta =
      const VerificationMeta('nomeRecebedor');
  @override
  late final GeneratedColumn<String> nomeRecebedor = GeneratedColumn<String>(
      'NOME_RECEBEDOR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoMunicipioMeta =
      const VerificationMeta('codigoMunicipio');
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
      'CODIGO_MUNICIPIO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMunicipioMeta =
      const VerificationMeta('nomeMunicipio');
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
      'NOME_MUNICIPIO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoPaisMeta = const VerificationMeta('codigoPais');
  @override
  late final GeneratedColumn<int> codigoPais = GeneratedColumn<int>(
      'CODIGO_PAIS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomePaisMeta = const VerificationMeta('nomePais');
  @override
  late final GeneratedColumn<String> nomePais = GeneratedColumn<String>(
      'NOME_PAIS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        cnpj,
        cpf,
        nomeRecebedor,
        logradouro,
        numero,
        complemento,
        bairro,
        codigoMunicipio,
        nomeMunicipio,
        uf,
        cep,
        codigoPais,
        nomePais,
        telefone,
        email,
        inscricaoEstadual
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_LOCAL_ENTREGA';
  @override
  String get actualTableName => 'NFE_LOCAL_ENTREGA';
  @override
  VerificationContext validateIntegrity(Insertable<NfeLocalEntrega> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    if (data.containsKey('NOME_RECEBEDOR')) {
      context.handle(
          _nomeRecebedorMeta,
          nomeRecebedor.isAcceptableOrUnknown(
              data['NOME_RECEBEDOR']!, _nomeRecebedorMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CODIGO_MUNICIPIO')) {
      context.handle(
          _codigoMunicipioMeta,
          codigoMunicipio.isAcceptableOrUnknown(
              data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
    }
    if (data.containsKey('NOME_MUNICIPIO')) {
      context.handle(
          _nomeMunicipioMeta,
          nomeMunicipio.isAcceptableOrUnknown(
              data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('CODIGO_PAIS')) {
      context.handle(
          _codigoPaisMeta,
          codigoPais.isAcceptableOrUnknown(
              data['CODIGO_PAIS']!, _codigoPaisMeta));
    }
    if (data.containsKey('NOME_PAIS')) {
      context.handle(_nomePaisMeta,
          nomePais.isAcceptableOrUnknown(data['NOME_PAIS']!, _nomePaisMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeLocalEntrega map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeLocalEntrega.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeLocalEntregasTable createAlias(String alias) {
    return $NfeLocalEntregasTable(attachedDatabase, alias);
  }
}

class NfeLocalRetirada extends DataClass
    implements Insertable<NfeLocalRetirada> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  final String? nomeExpedidor;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final int? codigoMunicipio;
  final String? nomeMunicipio;
  final String? uf;
  final String? cep;
  final int? codigoPais;
  final String? nomePais;
  final String? telefone;
  final String? email;
  final String? inscricaoEstadual;
  NfeLocalRetirada(
      {this.id,
      this.idNfeCabecalho,
      this.cnpj,
      this.cpf,
      this.nomeExpedidor,
      this.logradouro,
      this.numero,
      this.complemento,
      this.bairro,
      this.codigoMunicipio,
      this.nomeMunicipio,
      this.uf,
      this.cep,
      this.codigoPais,
      this.nomePais,
      this.telefone,
      this.email,
      this.inscricaoEstadual});
  factory NfeLocalRetirada.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeLocalRetirada(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
      nomeExpedidor: ValueSqlType.stringType(data['${effectivePrefix}NOME_EXPEDIDOR']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      codigoMunicipio: ValueSqlType.intType(data['${effectivePrefix}CODIGO_MUNICIPIO']),
      nomeMunicipio: ValueSqlType.stringType(data['${effectivePrefix}NOME_MUNICIPIO']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      codigoPais: ValueSqlType.intType(data['${effectivePrefix}CODIGO_PAIS']),
      nomePais: ValueSqlType.stringType(data['${effectivePrefix}NOME_PAIS']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || nomeExpedidor != null) {
      map['NOME_EXPEDIDOR'] = Variable<String>(nomeExpedidor);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoPais != null) {
      map['CODIGO_PAIS'] = Variable<int>(codigoPais);
    }
    if (!nullToAbsent || nomePais != null) {
      map['NOME_PAIS'] = Variable<String>(nomePais);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    return map;
  }

  NfeLocalRetiradasCompanion toCompanion(bool nullToAbsent) {
    return NfeLocalRetiradasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      nomeExpedidor: nomeExpedidor == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeExpedidor),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      codigoMunicipio: codigoMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoMunicipio),
      nomeMunicipio: nomeMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeMunicipio),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      codigoPais: codigoPais == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoPais),
      nomePais: nomePais == null && nullToAbsent
          ? const Value.absent()
          : Value(nomePais),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
    );
  }

  factory NfeLocalRetirada.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeLocalRetirada(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      nomeExpedidor: serializer.fromJson<String?>(json['nomeExpedidor']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoPais: serializer.fromJson<int?>(json['codigoPais']),
      nomePais: serializer.fromJson<String?>(json['nomePais']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      email: serializer.fromJson<String?>(json['email']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'nomeExpedidor': serializer.toJson<String?>(nomeExpedidor),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoPais': serializer.toJson<int?>(codigoPais),
      'nomePais': serializer.toJson<String?>(nomePais),
      'telefone': serializer.toJson<String?>(telefone),
      'email': serializer.toJson<String?>(email),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
    };
  }

  NfeLocalRetirada copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? cnpj,
          String? cpf,
          String? nomeExpedidor,
          String? logradouro,
          String? numero,
          String? complemento,
          String? bairro,
          int? codigoMunicipio,
          String? nomeMunicipio,
          String? uf,
          String? cep,
          int? codigoPais,
          String? nomePais,
          String? telefone,
          String? email,
          String? inscricaoEstadual}) =>
      NfeLocalRetirada(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        cnpj: cnpj ?? this.cnpj,
        cpf: cpf ?? this.cpf,
        nomeExpedidor: nomeExpedidor ?? this.nomeExpedidor,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        bairro: bairro ?? this.bairro,
        codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
        nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
        uf: uf ?? this.uf,
        cep: cep ?? this.cep,
        codigoPais: codigoPais ?? this.codigoPais,
        nomePais: nomePais ?? this.nomePais,
        telefone: telefone ?? this.telefone,
        email: email ?? this.email,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      );
  @override
  String toString() {
    return (StringBuffer('NfeLocalRetirada(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nomeExpedidor: $nomeExpedidor, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('email: $email, ')
          ..write('inscricaoEstadual: $inscricaoEstadual')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeCabecalho,
      cnpj,
      cpf,
      nomeExpedidor,
      logradouro,
      numero,
      complemento,
      bairro,
      codigoMunicipio,
      nomeMunicipio,
      uf,
      cep,
      codigoPais,
      nomePais,
      telefone,
      email,
      inscricaoEstadual);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeLocalRetirada &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.nomeExpedidor == this.nomeExpedidor &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoPais == this.codigoPais &&
          other.nomePais == this.nomePais &&
          other.telefone == this.telefone &&
          other.email == this.email &&
          other.inscricaoEstadual == this.inscricaoEstadual);
}

class NfeLocalRetiradasCompanion extends UpdateCompanion<NfeLocalRetirada> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> nomeExpedidor;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<int?> codigoMunicipio;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoPais;
  final Value<String?> nomePais;
  final Value<String?> telefone;
  final Value<String?> email;
  final Value<String?> inscricaoEstadual;
  const NfeLocalRetiradasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nomeExpedidor = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
  });
  NfeLocalRetiradasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nomeExpedidor = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
  });
  static Insertable<NfeLocalRetirada> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? nomeExpedidor,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<int>? codigoMunicipio,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoPais,
    Expression<String>? nomePais,
    Expression<String>? telefone,
    Expression<String>? email,
    Expression<String>? inscricaoEstadual,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (cnpj != null) 'CNPJ': cnpj,
      if (cpf != null) 'CPF': cpf,
      if (nomeExpedidor != null) 'NOME_EXPEDIDOR': nomeExpedidor,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (bairro != null) 'BAIRRO': bairro,
      if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
      if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
      if (uf != null) 'UF': uf,
      if (cep != null) 'CEP': cep,
      if (codigoPais != null) 'CODIGO_PAIS': codigoPais,
      if (nomePais != null) 'NOME_PAIS': nomePais,
      if (telefone != null) 'TELEFONE': telefone,
      if (email != null) 'EMAIL': email,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
    });
  }

  NfeLocalRetiradasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? cnpj,
      Value<String?>? cpf,
      Value<String?>? nomeExpedidor,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? bairro,
      Value<int?>? codigoMunicipio,
      Value<String?>? nomeMunicipio,
      Value<String?>? uf,
      Value<String?>? cep,
      Value<int?>? codigoPais,
      Value<String?>? nomePais,
      Value<String?>? telefone,
      Value<String?>? email,
      Value<String?>? inscricaoEstadual}) {
    return NfeLocalRetiradasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      nomeExpedidor: nomeExpedidor ?? this.nomeExpedidor,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoPais: codigoPais ?? this.codigoPais,
      nomePais: nomePais ?? this.nomePais,
      telefone: telefone ?? this.telefone,
      email: email ?? this.email,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (nomeExpedidor.present) {
      map['NOME_EXPEDIDOR'] = Variable<String>(nomeExpedidor.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (codigoMunicipio.present) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio.value);
    }
    if (nomeMunicipio.present) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (codigoPais.present) {
      map['CODIGO_PAIS'] = Variable<int>(codigoPais.value);
    }
    if (nomePais.present) {
      map['NOME_PAIS'] = Variable<String>(nomePais.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeLocalRetiradasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nomeExpedidor: $nomeExpedidor, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('email: $email, ')
          ..write('inscricaoEstadual: $inscricaoEstadual')
          ..write(')'))
        .toString();
  }
}

class $NfeLocalRetiradasTable extends NfeLocalRetiradas
    with TableInfo<$NfeLocalRetiradasTable, NfeLocalRetirada> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeLocalRetiradasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeExpedidorMeta =
      const VerificationMeta('nomeExpedidor');
  @override
  late final GeneratedColumn<String> nomeExpedidor = GeneratedColumn<String>(
      'NOME_EXPEDIDOR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoMunicipioMeta =
      const VerificationMeta('codigoMunicipio');
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
      'CODIGO_MUNICIPIO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMunicipioMeta =
      const VerificationMeta('nomeMunicipio');
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
      'NOME_MUNICIPIO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoPaisMeta = const VerificationMeta('codigoPais');
  @override
  late final GeneratedColumn<int> codigoPais = GeneratedColumn<int>(
      'CODIGO_PAIS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomePaisMeta = const VerificationMeta('nomePais');
  @override
  late final GeneratedColumn<String> nomePais = GeneratedColumn<String>(
      'NOME_PAIS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        cnpj,
        cpf,
        nomeExpedidor,
        logradouro,
        numero,
        complemento,
        bairro,
        codigoMunicipio,
        nomeMunicipio,
        uf,
        cep,
        codigoPais,
        nomePais,
        telefone,
        email,
        inscricaoEstadual
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_LOCAL_RETIRADA';
  @override
  String get actualTableName => 'NFE_LOCAL_RETIRADA';
  @override
  VerificationContext validateIntegrity(Insertable<NfeLocalRetirada> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    if (data.containsKey('NOME_EXPEDIDOR')) {
      context.handle(
          _nomeExpedidorMeta,
          nomeExpedidor.isAcceptableOrUnknown(
              data['NOME_EXPEDIDOR']!, _nomeExpedidorMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CODIGO_MUNICIPIO')) {
      context.handle(
          _codigoMunicipioMeta,
          codigoMunicipio.isAcceptableOrUnknown(
              data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
    }
    if (data.containsKey('NOME_MUNICIPIO')) {
      context.handle(
          _nomeMunicipioMeta,
          nomeMunicipio.isAcceptableOrUnknown(
              data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('CODIGO_PAIS')) {
      context.handle(
          _codigoPaisMeta,
          codigoPais.isAcceptableOrUnknown(
              data['CODIGO_PAIS']!, _codigoPaisMeta));
    }
    if (data.containsKey('NOME_PAIS')) {
      context.handle(_nomePaisMeta,
          nomePais.isAcceptableOrUnknown(data['NOME_PAIS']!, _nomePaisMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeLocalRetirada map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeLocalRetirada.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeLocalRetiradasTable createAlias(String alias) {
    return $NfeLocalRetiradasTable(attachedDatabase, alias);
  }
}

class NfeNfReferenciada extends DataClass
    implements Insertable<NfeNfReferenciada> {
  final int? id;
  final int? idNfeCabecalho;
  final int? codigoUf;
  final String? anoMes;
  final String? cnpj;
  final String? modelo;
  final String? serie;
  final int? numeroNf;
  NfeNfReferenciada(
      {this.id,
      this.idNfeCabecalho,
      this.codigoUf,
      this.anoMes,
      this.cnpj,
      this.modelo,
      this.serie,
      this.numeroNf});
  factory NfeNfReferenciada.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeNfReferenciada(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      codigoUf: ValueSqlType.intType(data['${effectivePrefix}CODIGO_UF']),
      anoMes: ValueSqlType.stringType(data['${effectivePrefix}ANO_MES']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      modelo: ValueSqlType.stringType(data['${effectivePrefix}MODELO']),
      serie: ValueSqlType.stringType(data['${effectivePrefix}SERIE']),
      numeroNf: ValueSqlType.intType(data['${effectivePrefix}NUMERO_NF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || codigoUf != null) {
      map['CODIGO_UF'] = Variable<int>(codigoUf);
    }
    if (!nullToAbsent || anoMes != null) {
      map['ANO_MES'] = Variable<String>(anoMes);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || modelo != null) {
      map['MODELO'] = Variable<String>(modelo);
    }
    if (!nullToAbsent || serie != null) {
      map['SERIE'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numeroNf != null) {
      map['NUMERO_NF'] = Variable<int>(numeroNf);
    }
    return map;
  }

  NfeNfReferenciadasCompanion toCompanion(bool nullToAbsent) {
    return NfeNfReferenciadasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      codigoUf: codigoUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoUf),
      anoMes:
          anoMes == null && nullToAbsent ? const Value.absent() : Value(anoMes),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      modelo:
          modelo == null && nullToAbsent ? const Value.absent() : Value(modelo),
      serie:
          serie == null && nullToAbsent ? const Value.absent() : Value(serie),
      numeroNf: numeroNf == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroNf),
    );
  }

  factory NfeNfReferenciada.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeNfReferenciada(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      codigoUf: serializer.fromJson<int?>(json['codigoUf']),
      anoMes: serializer.fromJson<String?>(json['anoMes']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      modelo: serializer.fromJson<String?>(json['modelo']),
      serie: serializer.fromJson<String?>(json['serie']),
      numeroNf: serializer.fromJson<int?>(json['numeroNf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'codigoUf': serializer.toJson<int?>(codigoUf),
      'anoMes': serializer.toJson<String?>(anoMes),
      'cnpj': serializer.toJson<String?>(cnpj),
      'modelo': serializer.toJson<String?>(modelo),
      'serie': serializer.toJson<String?>(serie),
      'numeroNf': serializer.toJson<int?>(numeroNf),
    };
  }

  NfeNfReferenciada copyWith(
          {int? id,
          int? idNfeCabecalho,
          int? codigoUf,
          String? anoMes,
          String? cnpj,
          String? modelo,
          String? serie,
          int? numeroNf}) =>
      NfeNfReferenciada(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        codigoUf: codigoUf ?? this.codigoUf,
        anoMes: anoMes ?? this.anoMes,
        cnpj: cnpj ?? this.cnpj,
        modelo: modelo ?? this.modelo,
        serie: serie ?? this.serie,
        numeroNf: numeroNf ?? this.numeroNf,
      );
  @override
  String toString() {
    return (StringBuffer('NfeNfReferenciada(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('anoMes: $anoMes, ')
          ..write('cnpj: $cnpj, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numeroNf: $numeroNf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, idNfeCabecalho, codigoUf, anoMes, cnpj, modelo, serie, numeroNf);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeNfReferenciada &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.codigoUf == this.codigoUf &&
          other.anoMes == this.anoMes &&
          other.cnpj == this.cnpj &&
          other.modelo == this.modelo &&
          other.serie == this.serie &&
          other.numeroNf == this.numeroNf);
}

class NfeNfReferenciadasCompanion extends UpdateCompanion<NfeNfReferenciada> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<int?> codigoUf;
  final Value<String?> anoMes;
  final Value<String?> cnpj;
  final Value<String?> modelo;
  final Value<String?> serie;
  final Value<int?> numeroNf;
  const NfeNfReferenciadasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.anoMes = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numeroNf = const Value.absent(),
  });
  NfeNfReferenciadasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.anoMes = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numeroNf = const Value.absent(),
  });
  static Insertable<NfeNfReferenciada> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<int>? codigoUf,
    Expression<String>? anoMes,
    Expression<String>? cnpj,
    Expression<String>? modelo,
    Expression<String>? serie,
    Expression<int>? numeroNf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (codigoUf != null) 'CODIGO_UF': codigoUf,
      if (anoMes != null) 'ANO_MES': anoMes,
      if (cnpj != null) 'CNPJ': cnpj,
      if (modelo != null) 'MODELO': modelo,
      if (serie != null) 'SERIE': serie,
      if (numeroNf != null) 'NUMERO_NF': numeroNf,
    });
  }

  NfeNfReferenciadasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<int?>? codigoUf,
      Value<String?>? anoMes,
      Value<String?>? cnpj,
      Value<String?>? modelo,
      Value<String?>? serie,
      Value<int?>? numeroNf}) {
    return NfeNfReferenciadasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      codigoUf: codigoUf ?? this.codigoUf,
      anoMes: anoMes ?? this.anoMes,
      cnpj: cnpj ?? this.cnpj,
      modelo: modelo ?? this.modelo,
      serie: serie ?? this.serie,
      numeroNf: numeroNf ?? this.numeroNf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (codigoUf.present) {
      map['CODIGO_UF'] = Variable<int>(codigoUf.value);
    }
    if (anoMes.present) {
      map['ANO_MES'] = Variable<String>(anoMes.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (modelo.present) {
      map['MODELO'] = Variable<String>(modelo.value);
    }
    if (serie.present) {
      map['SERIE'] = Variable<String>(serie.value);
    }
    if (numeroNf.present) {
      map['NUMERO_NF'] = Variable<int>(numeroNf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeNfReferenciadasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('anoMes: $anoMes, ')
          ..write('cnpj: $cnpj, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numeroNf: $numeroNf')
          ..write(')'))
        .toString();
  }
}

class $NfeNfReferenciadasTable extends NfeNfReferenciadas
    with TableInfo<$NfeNfReferenciadasTable, NfeNfReferenciada> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeNfReferenciadasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _codigoUfMeta = const VerificationMeta('codigoUf');
  @override
  late final GeneratedColumn<int> codigoUf = GeneratedColumn<int>(
      'CODIGO_UF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _anoMesMeta = const VerificationMeta('anoMes');
  @override
  late final GeneratedColumn<String> anoMes = GeneratedColumn<String>(
      'ANO_MES', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  @override
  late final GeneratedColumn<String> modelo = GeneratedColumn<String>(
      'MODELO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
      'SERIE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroNfMeta = const VerificationMeta('numeroNf');
  @override
  late final GeneratedColumn<int> numeroNf = GeneratedColumn<int>(
      'NUMERO_NF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeCabecalho, codigoUf, anoMes, cnpj, modelo, serie, numeroNf];
  @override
  String get aliasedName => _alias ?? 'NFE_NF_REFERENCIADA';
  @override
  String get actualTableName => 'NFE_NF_REFERENCIADA';
  @override
  VerificationContext validateIntegrity(Insertable<NfeNfReferenciada> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CODIGO_UF')) {
      context.handle(_codigoUfMeta,
          codigoUf.isAcceptableOrUnknown(data['CODIGO_UF']!, _codigoUfMeta));
    }
    if (data.containsKey('ANO_MES')) {
      context.handle(_anoMesMeta,
          anoMes.isAcceptableOrUnknown(data['ANO_MES']!, _anoMesMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('MODELO')) {
      context.handle(_modeloMeta,
          modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
    }
    if (data.containsKey('SERIE')) {
      context.handle(
          _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
    }
    if (data.containsKey('NUMERO_NF')) {
      context.handle(_numeroNfMeta,
          numeroNf.isAcceptableOrUnknown(data['NUMERO_NF']!, _numeroNfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeNfReferenciada map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeNfReferenciada.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeNfReferenciadasTable createAlias(String alias) {
    return $NfeNfReferenciadasTable(attachedDatabase, alias);
  }
}

class NfeNumero extends DataClass implements Insertable<NfeNumero> {
  final int? id;
  final String? modelo;
  final String? serie;
  final int? numero;
  NfeNumero({this.id, this.modelo, this.serie, this.numero});
  factory NfeNumero.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeNumero(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      modelo: ValueSqlType.stringType(data['${effectivePrefix}MODELO']),
      serie: ValueSqlType.stringType(data['${effectivePrefix}SERIE']),
      numero: ValueSqlType.intType(data['${effectivePrefix}NUMERO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || modelo != null) {
      map['MODELO'] = Variable<String>(modelo);
    }
    if (!nullToAbsent || serie != null) {
      map['SERIE'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<int>(numero);
    }
    return map;
  }

  NfeNumerosCompanion toCompanion(bool nullToAbsent) {
    return NfeNumerosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      modelo:
          modelo == null && nullToAbsent ? const Value.absent() : Value(modelo),
      serie:
          serie == null && nullToAbsent ? const Value.absent() : Value(serie),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
    );
  }

  factory NfeNumero.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeNumero(
      id: serializer.fromJson<int?>(json['id']),
      modelo: serializer.fromJson<String?>(json['modelo']),
      serie: serializer.fromJson<String?>(json['serie']),
      numero: serializer.fromJson<int?>(json['numero']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'modelo': serializer.toJson<String?>(modelo),
      'serie': serializer.toJson<String?>(serie),
      'numero': serializer.toJson<int?>(numero),
    };
  }

  NfeNumero copyWith({int? id, String? modelo, String? serie, int? numero}) =>
      NfeNumero(
        id: id ?? this.id,
        modelo: modelo ?? this.modelo,
        serie: serie ?? this.serie,
        numero: numero ?? this.numero,
      );
  @override
  String toString() {
    return (StringBuffer('NfeNumero(')
          ..write('id: $id, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, modelo, serie, numero);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeNumero &&
          other.id == this.id &&
          other.modelo == this.modelo &&
          other.serie == this.serie &&
          other.numero == this.numero);
}

class NfeNumerosCompanion extends UpdateCompanion<NfeNumero> {
  final Value<int?> id;
  final Value<String?> modelo;
  final Value<String?> serie;
  final Value<int?> numero;
  const NfeNumerosCompanion({
    this.id = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
  });
  NfeNumerosCompanion.insert({
    this.id = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
  });
  static Insertable<NfeNumero> custom({
    Expression<int>? id,
    Expression<String>? modelo,
    Expression<String>? serie,
    Expression<int>? numero,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (modelo != null) 'MODELO': modelo,
      if (serie != null) 'SERIE': serie,
      if (numero != null) 'NUMERO': numero,
    });
  }

  NfeNumerosCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? modelo,
      Value<String?>? serie,
      Value<int?>? numero}) {
    return NfeNumerosCompanion(
      id: id ?? this.id,
      modelo: modelo ?? this.modelo,
      serie: serie ?? this.serie,
      numero: numero ?? this.numero,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (modelo.present) {
      map['MODELO'] = Variable<String>(modelo.value);
    }
    if (serie.present) {
      map['SERIE'] = Variable<String>(serie.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<int>(numero.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeNumerosCompanion(')
          ..write('id: $id, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero')
          ..write(')'))
        .toString();
  }
}

class $NfeNumerosTable extends NfeNumeros
    with TableInfo<$NfeNumerosTable, NfeNumero> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeNumerosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  @override
  late final GeneratedColumn<String> modelo = GeneratedColumn<String>(
      'MODELO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
      'SERIE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<int> numero = GeneratedColumn<int>(
      'NUMERO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, modelo, serie, numero];
  @override
  String get aliasedName => _alias ?? 'NFE_NUMERO';
  @override
  String get actualTableName => 'NFE_NUMERO';
  @override
  VerificationContext validateIntegrity(Insertable<NfeNumero> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('MODELO')) {
      context.handle(_modeloMeta,
          modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
    }
    if (data.containsKey('SERIE')) {
      context.handle(
          _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeNumero map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeNumero.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeNumerosTable createAlias(String alias) {
    return $NfeNumerosTable(attachedDatabase, alias);
  }
}

class NfeNumeroInutilizado extends DataClass
    implements Insertable<NfeNumeroInutilizado> {
  final int? id;
  final String? serie;
  final int? numero;
  final DateTime? dataInutilizacao;
  final String? observacao;
  NfeNumeroInutilizado(
      {this.id,
      this.serie,
      this.numero,
      this.dataInutilizacao,
      this.observacao});
  factory NfeNumeroInutilizado.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeNumeroInutilizado(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      serie: ValueSqlType.stringType(data['${effectivePrefix}SERIE']),
      numero: ValueSqlType.intType(data['${effectivePrefix}NUMERO']),
      dataInutilizacao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_INUTILIZACAO']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || serie != null) {
      map['SERIE'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<int>(numero);
    }
    if (!nullToAbsent || dataInutilizacao != null) {
      map['DATA_INUTILIZACAO'] = Variable<DateTime>(dataInutilizacao);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  NfeNumeroInutilizadosCompanion toCompanion(bool nullToAbsent) {
    return NfeNumeroInutilizadosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      serie:
          serie == null && nullToAbsent ? const Value.absent() : Value(serie),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      dataInutilizacao: dataInutilizacao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataInutilizacao),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory NfeNumeroInutilizado.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeNumeroInutilizado(
      id: serializer.fromJson<int?>(json['id']),
      serie: serializer.fromJson<String?>(json['serie']),
      numero: serializer.fromJson<int?>(json['numero']),
      dataInutilizacao:
          serializer.fromJson<DateTime?>(json['dataInutilizacao']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'serie': serializer.toJson<String?>(serie),
      'numero': serializer.toJson<int?>(numero),
      'dataInutilizacao': serializer.toJson<DateTime?>(dataInutilizacao),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  NfeNumeroInutilizado copyWith(
          {int? id,
          String? serie,
          int? numero,
          DateTime? dataInutilizacao,
          String? observacao}) =>
      NfeNumeroInutilizado(
        id: id ?? this.id,
        serie: serie ?? this.serie,
        numero: numero ?? this.numero,
        dataInutilizacao: dataInutilizacao ?? this.dataInutilizacao,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('NfeNumeroInutilizado(')
          ..write('id: $id, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero, ')
          ..write('dataInutilizacao: $dataInutilizacao, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, serie, numero, dataInutilizacao, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeNumeroInutilizado &&
          other.id == this.id &&
          other.serie == this.serie &&
          other.numero == this.numero &&
          other.dataInutilizacao == this.dataInutilizacao &&
          other.observacao == this.observacao);
}

class NfeNumeroInutilizadosCompanion
    extends UpdateCompanion<NfeNumeroInutilizado> {
  final Value<int?> id;
  final Value<String?> serie;
  final Value<int?> numero;
  final Value<DateTime?> dataInutilizacao;
  final Value<String?> observacao;
  const NfeNumeroInutilizadosCompanion({
    this.id = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataInutilizacao = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  NfeNumeroInutilizadosCompanion.insert({
    this.id = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataInutilizacao = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<NfeNumeroInutilizado> custom({
    Expression<int>? id,
    Expression<String>? serie,
    Expression<int>? numero,
    Expression<DateTime>? dataInutilizacao,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (serie != null) 'SERIE': serie,
      if (numero != null) 'NUMERO': numero,
      if (dataInutilizacao != null) 'DATA_INUTILIZACAO': dataInutilizacao,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  NfeNumeroInutilizadosCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? serie,
      Value<int?>? numero,
      Value<DateTime?>? dataInutilizacao,
      Value<String?>? observacao}) {
    return NfeNumeroInutilizadosCompanion(
      id: id ?? this.id,
      serie: serie ?? this.serie,
      numero: numero ?? this.numero,
      dataInutilizacao: dataInutilizacao ?? this.dataInutilizacao,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (serie.present) {
      map['SERIE'] = Variable<String>(serie.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<int>(numero.value);
    }
    if (dataInutilizacao.present) {
      map['DATA_INUTILIZACAO'] = Variable<DateTime>(dataInutilizacao.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeNumeroInutilizadosCompanion(')
          ..write('id: $id, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero, ')
          ..write('dataInutilizacao: $dataInutilizacao, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $NfeNumeroInutilizadosTable extends NfeNumeroInutilizados
    with TableInfo<$NfeNumeroInutilizadosTable, NfeNumeroInutilizado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeNumeroInutilizadosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
      'SERIE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<int> numero = GeneratedColumn<int>(
      'NUMERO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataInutilizacaoMeta =
      const VerificationMeta('dataInutilizacao');
  @override
  late final GeneratedColumn<DateTime> dataInutilizacao =
      GeneratedColumn<DateTime>('DATA_INUTILIZACAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, serie, numero, dataInutilizacao, observacao];
  @override
  String get aliasedName => _alias ?? 'NFE_NUMERO_INUTILIZADO';
  @override
  String get actualTableName => 'NFE_NUMERO_INUTILIZADO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeNumeroInutilizado> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('SERIE')) {
      context.handle(
          _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('DATA_INUTILIZACAO')) {
      context.handle(
          _dataInutilizacaoMeta,
          dataInutilizacao.isAcceptableOrUnknown(
              data['DATA_INUTILIZACAO']!, _dataInutilizacaoMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeNumeroInutilizado map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeNumeroInutilizado.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeNumeroInutilizadosTable createAlias(String alias) {
    return $NfeNumeroInutilizadosTable(attachedDatabase, alias);
  }
}

class NfeProcessoReferenciado extends DataClass
    implements Insertable<NfeProcessoReferenciado> {
  final int? id;
  final int? idNfeCabecalho;
  final String? identificador;
  final String? origem;
  NfeProcessoReferenciado(
      {this.id, this.idNfeCabecalho, this.identificador, this.origem});
  factory NfeProcessoReferenciado.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeProcessoReferenciado(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      identificador: ValueSqlType.stringType(data['${effectivePrefix}IDENTIFICADOR']),
      origem: ValueSqlType.stringType(data['${effectivePrefix}ORIGEM']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || identificador != null) {
      map['IDENTIFICADOR'] = Variable<String>(identificador);
    }
    if (!nullToAbsent || origem != null) {
      map['ORIGEM'] = Variable<String>(origem);
    }
    return map;
  }

  NfeProcessoReferenciadosCompanion toCompanion(bool nullToAbsent) {
    return NfeProcessoReferenciadosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      identificador: identificador == null && nullToAbsent
          ? const Value.absent()
          : Value(identificador),
      origem:
          origem == null && nullToAbsent ? const Value.absent() : Value(origem),
    );
  }

  factory NfeProcessoReferenciado.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeProcessoReferenciado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      identificador: serializer.fromJson<String?>(json['identificador']),
      origem: serializer.fromJson<String?>(json['origem']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'identificador': serializer.toJson<String?>(identificador),
      'origem': serializer.toJson<String?>(origem),
    };
  }

  NfeProcessoReferenciado copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? identificador,
          String? origem}) =>
      NfeProcessoReferenciado(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        identificador: identificador ?? this.identificador,
        origem: origem ?? this.origem,
      );
  @override
  String toString() {
    return (StringBuffer('NfeProcessoReferenciado(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('identificador: $identificador, ')
          ..write('origem: $origem')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, identificador, origem);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeProcessoReferenciado &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.identificador == this.identificador &&
          other.origem == this.origem);
}

class NfeProcessoReferenciadosCompanion
    extends UpdateCompanion<NfeProcessoReferenciado> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> identificador;
  final Value<String?> origem;
  const NfeProcessoReferenciadosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.identificador = const Value.absent(),
    this.origem = const Value.absent(),
  });
  NfeProcessoReferenciadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.identificador = const Value.absent(),
    this.origem = const Value.absent(),
  });
  static Insertable<NfeProcessoReferenciado> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? identificador,
    Expression<String>? origem,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (identificador != null) 'IDENTIFICADOR': identificador,
      if (origem != null) 'ORIGEM': origem,
    });
  }

  NfeProcessoReferenciadosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? identificador,
      Value<String?>? origem}) {
    return NfeProcessoReferenciadosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      identificador: identificador ?? this.identificador,
      origem: origem ?? this.origem,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (identificador.present) {
      map['IDENTIFICADOR'] = Variable<String>(identificador.value);
    }
    if (origem.present) {
      map['ORIGEM'] = Variable<String>(origem.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeProcessoReferenciadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('identificador: $identificador, ')
          ..write('origem: $origem')
          ..write(')'))
        .toString();
  }
}

class $NfeProcessoReferenciadosTable extends NfeProcessoReferenciados
    with TableInfo<$NfeProcessoReferenciadosTable, NfeProcessoReferenciado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeProcessoReferenciadosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _identificadorMeta =
      const VerificationMeta('identificador');
  @override
  late final GeneratedColumn<String> identificador = GeneratedColumn<String>(
      'IDENTIFICADOR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _origemMeta = const VerificationMeta('origem');
  @override
  late final GeneratedColumn<String> origem = GeneratedColumn<String>(
      'ORIGEM', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeCabecalho, identificador, origem];
  @override
  String get aliasedName => _alias ?? 'NFE_PROCESSO_REFERENCIADO';
  @override
  String get actualTableName => 'NFE_PROCESSO_REFERENCIADO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeProcessoReferenciado> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('IDENTIFICADOR')) {
      context.handle(
          _identificadorMeta,
          identificador.isAcceptableOrUnknown(
              data['IDENTIFICADOR']!, _identificadorMeta));
    }
    if (data.containsKey('ORIGEM')) {
      context.handle(_origemMeta,
          origem.isAcceptableOrUnknown(data['ORIGEM']!, _origemMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeProcessoReferenciado map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeProcessoReferenciado.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeProcessoReferenciadosTable createAlias(String alias) {
    return $NfeProcessoReferenciadosTable(attachedDatabase, alias);
  }
}

class NfeProdRuralReferenciada extends DataClass
    implements Insertable<NfeProdRuralReferenciada> {
  final int? id;
  final int? idNfeCabecalho;
  final int? codigoUf;
  final String? anoMes;
  final String? cnpj;
  final String? cpf;
  final String? inscricaoEstadual;
  final String? modelo;
  final String? serie;
  final int? numeroNf;
  NfeProdRuralReferenciada(
      {this.id,
      this.idNfeCabecalho,
      this.codigoUf,
      this.anoMes,
      this.cnpj,
      this.cpf,
      this.inscricaoEstadual,
      this.modelo,
      this.serie,
      this.numeroNf});
  factory NfeProdRuralReferenciada.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeProdRuralReferenciada(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      codigoUf: ValueSqlType.intType(data['${effectivePrefix}CODIGO_UF']),
      anoMes: ValueSqlType.stringType(data['${effectivePrefix}ANO_MES']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      modelo: ValueSqlType.stringType(data['${effectivePrefix}MODELO']),
      serie: ValueSqlType.stringType(data['${effectivePrefix}SERIE']),
      numeroNf: ValueSqlType.intType(data['${effectivePrefix}NUMERO_NF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || codigoUf != null) {
      map['CODIGO_UF'] = Variable<int>(codigoUf);
    }
    if (!nullToAbsent || anoMes != null) {
      map['ANO_MES'] = Variable<String>(anoMes);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || modelo != null) {
      map['MODELO'] = Variable<String>(modelo);
    }
    if (!nullToAbsent || serie != null) {
      map['SERIE'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numeroNf != null) {
      map['NUMERO_NF'] = Variable<int>(numeroNf);
    }
    return map;
  }

  NfeProdRuralReferenciadasCompanion toCompanion(bool nullToAbsent) {
    return NfeProdRuralReferenciadasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      codigoUf: codigoUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoUf),
      anoMes:
          anoMes == null && nullToAbsent ? const Value.absent() : Value(anoMes),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      modelo:
          modelo == null && nullToAbsent ? const Value.absent() : Value(modelo),
      serie:
          serie == null && nullToAbsent ? const Value.absent() : Value(serie),
      numeroNf: numeroNf == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroNf),
    );
  }

  factory NfeProdRuralReferenciada.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeProdRuralReferenciada(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      codigoUf: serializer.fromJson<int?>(json['codigoUf']),
      anoMes: serializer.fromJson<String?>(json['anoMes']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
      modelo: serializer.fromJson<String?>(json['modelo']),
      serie: serializer.fromJson<String?>(json['serie']),
      numeroNf: serializer.fromJson<int?>(json['numeroNf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'codigoUf': serializer.toJson<int?>(codigoUf),
      'anoMes': serializer.toJson<String?>(anoMes),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'modelo': serializer.toJson<String?>(modelo),
      'serie': serializer.toJson<String?>(serie),
      'numeroNf': serializer.toJson<int?>(numeroNf),
    };
  }

  NfeProdRuralReferenciada copyWith(
          {int? id,
          int? idNfeCabecalho,
          int? codigoUf,
          String? anoMes,
          String? cnpj,
          String? cpf,
          String? inscricaoEstadual,
          String? modelo,
          String? serie,
          int? numeroNf}) =>
      NfeProdRuralReferenciada(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        codigoUf: codigoUf ?? this.codigoUf,
        anoMes: anoMes ?? this.anoMes,
        cnpj: cnpj ?? this.cnpj,
        cpf: cpf ?? this.cpf,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        modelo: modelo ?? this.modelo,
        serie: serie ?? this.serie,
        numeroNf: numeroNf ?? this.numeroNf,
      );
  @override
  String toString() {
    return (StringBuffer('NfeProdRuralReferenciada(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('anoMes: $anoMes, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numeroNf: $numeroNf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, codigoUf, anoMes, cnpj,
      cpf, inscricaoEstadual, modelo, serie, numeroNf);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeProdRuralReferenciada &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.codigoUf == this.codigoUf &&
          other.anoMes == this.anoMes &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.modelo == this.modelo &&
          other.serie == this.serie &&
          other.numeroNf == this.numeroNf);
}

class NfeProdRuralReferenciadasCompanion
    extends UpdateCompanion<NfeProdRuralReferenciada> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<int?> codigoUf;
  final Value<String?> anoMes;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> inscricaoEstadual;
  final Value<String?> modelo;
  final Value<String?> serie;
  final Value<int?> numeroNf;
  const NfeProdRuralReferenciadasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.anoMes = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numeroNf = const Value.absent(),
  });
  NfeProdRuralReferenciadasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.codigoUf = const Value.absent(),
    this.anoMes = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.modelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numeroNf = const Value.absent(),
  });
  static Insertable<NfeProdRuralReferenciada> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<int>? codigoUf,
    Expression<String>? anoMes,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? inscricaoEstadual,
    Expression<String>? modelo,
    Expression<String>? serie,
    Expression<int>? numeroNf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (codigoUf != null) 'CODIGO_UF': codigoUf,
      if (anoMes != null) 'ANO_MES': anoMes,
      if (cnpj != null) 'CNPJ': cnpj,
      if (cpf != null) 'CPF': cpf,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (modelo != null) 'MODELO': modelo,
      if (serie != null) 'SERIE': serie,
      if (numeroNf != null) 'NUMERO_NF': numeroNf,
    });
  }

  NfeProdRuralReferenciadasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<int?>? codigoUf,
      Value<String?>? anoMes,
      Value<String?>? cnpj,
      Value<String?>? cpf,
      Value<String?>? inscricaoEstadual,
      Value<String?>? modelo,
      Value<String?>? serie,
      Value<int?>? numeroNf}) {
    return NfeProdRuralReferenciadasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      codigoUf: codigoUf ?? this.codigoUf,
      anoMes: anoMes ?? this.anoMes,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      modelo: modelo ?? this.modelo,
      serie: serie ?? this.serie,
      numeroNf: numeroNf ?? this.numeroNf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (codigoUf.present) {
      map['CODIGO_UF'] = Variable<int>(codigoUf.value);
    }
    if (anoMes.present) {
      map['ANO_MES'] = Variable<String>(anoMes.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (modelo.present) {
      map['MODELO'] = Variable<String>(modelo.value);
    }
    if (serie.present) {
      map['SERIE'] = Variable<String>(serie.value);
    }
    if (numeroNf.present) {
      map['NUMERO_NF'] = Variable<int>(numeroNf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeProdRuralReferenciadasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('codigoUf: $codigoUf, ')
          ..write('anoMes: $anoMes, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('modelo: $modelo, ')
          ..write('serie: $serie, ')
          ..write('numeroNf: $numeroNf')
          ..write(')'))
        .toString();
  }
}

class $NfeProdRuralReferenciadasTable extends NfeProdRuralReferenciadas
    with TableInfo<$NfeProdRuralReferenciadasTable, NfeProdRuralReferenciada> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeProdRuralReferenciadasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _codigoUfMeta = const VerificationMeta('codigoUf');
  @override
  late final GeneratedColumn<int> codigoUf = GeneratedColumn<int>(
      'CODIGO_UF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _anoMesMeta = const VerificationMeta('anoMes');
  @override
  late final GeneratedColumn<String> anoMes = GeneratedColumn<String>(
      'ANO_MES', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  @override
  late final GeneratedColumn<String> modelo = GeneratedColumn<String>(
      'MODELO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
      'SERIE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroNfMeta = const VerificationMeta('numeroNf');
  @override
  late final GeneratedColumn<int> numeroNf = GeneratedColumn<int>(
      'NUMERO_NF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        codigoUf,
        anoMes,
        cnpj,
        cpf,
        inscricaoEstadual,
        modelo,
        serie,
        numeroNf
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_PROD_RURAL_REFERENCIADA';
  @override
  String get actualTableName => 'NFE_PROD_RURAL_REFERENCIADA';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeProdRuralReferenciada> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CODIGO_UF')) {
      context.handle(_codigoUfMeta,
          codigoUf.isAcceptableOrUnknown(data['CODIGO_UF']!, _codigoUfMeta));
    }
    if (data.containsKey('ANO_MES')) {
      context.handle(_anoMesMeta,
          anoMes.isAcceptableOrUnknown(data['ANO_MES']!, _anoMesMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    if (data.containsKey('MODELO')) {
      context.handle(_modeloMeta,
          modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
    }
    if (data.containsKey('SERIE')) {
      context.handle(
          _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
    }
    if (data.containsKey('NUMERO_NF')) {
      context.handle(_numeroNfMeta,
          numeroNf.isAcceptableOrUnknown(data['NUMERO_NF']!, _numeroNfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeProdRuralReferenciada map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeProdRuralReferenciada.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeProdRuralReferenciadasTable createAlias(String alias) {
    return $NfeProdRuralReferenciadasTable(attachedDatabase, alias);
  }
}

class NfeReferenciada extends DataClass implements Insertable<NfeReferenciada> {
  final int? id;
  final int? idNfeCabecalho;
  final String? chaveAcesso;
  NfeReferenciada({this.id, this.idNfeCabecalho, this.chaveAcesso});
  factory NfeReferenciada.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeReferenciada(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      chaveAcesso: ValueSqlType.stringType(data['${effectivePrefix}CHAVE_ACESSO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['CHAVE_ACESSO'] = Variable<String>(chaveAcesso);
    }
    return map;
  }

  NfeReferenciadasCompanion toCompanion(bool nullToAbsent) {
    return NfeReferenciadasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      chaveAcesso: chaveAcesso == null && nullToAbsent
          ? const Value.absent()
          : Value(chaveAcesso),
    );
  }

  factory NfeReferenciada.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeReferenciada(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
    };
  }

  NfeReferenciada copyWith(
          {int? id, int? idNfeCabecalho, String? chaveAcesso}) =>
      NfeReferenciada(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        chaveAcesso: chaveAcesso ?? this.chaveAcesso,
      );
  @override
  String toString() {
    return (StringBuffer('NfeReferenciada(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, chaveAcesso);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeReferenciada &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.chaveAcesso == this.chaveAcesso);
}

class NfeReferenciadasCompanion extends UpdateCompanion<NfeReferenciada> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> chaveAcesso;
  const NfeReferenciadasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
  });
  NfeReferenciadasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
  });
  static Insertable<NfeReferenciada> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? chaveAcesso,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (chaveAcesso != null) 'CHAVE_ACESSO': chaveAcesso,
    });
  }

  NfeReferenciadasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? chaveAcesso}) {
    return NfeReferenciadasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (chaveAcesso.present) {
      map['CHAVE_ACESSO'] = Variable<String>(chaveAcesso.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeReferenciadasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso')
          ..write(')'))
        .toString();
  }
}

class $NfeReferenciadasTable extends NfeReferenciadas
    with TableInfo<$NfeReferenciadasTable, NfeReferenciada> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeReferenciadasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _chaveAcessoMeta =
      const VerificationMeta('chaveAcesso');
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
      'CHAVE_ACESSO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 44),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, idNfeCabecalho, chaveAcesso];
  @override
  String get aliasedName => _alias ?? 'NFE_REFERENCIADA';
  @override
  String get actualTableName => 'NFE_REFERENCIADA';
  @override
  VerificationContext validateIntegrity(Insertable<NfeReferenciada> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CHAVE_ACESSO')) {
      context.handle(
          _chaveAcessoMeta,
          chaveAcesso.isAcceptableOrUnknown(
              data['CHAVE_ACESSO']!, _chaveAcessoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeReferenciada map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeReferenciada.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeReferenciadasTable createAlias(String alias) {
    return $NfeReferenciadasTable(attachedDatabase, alias);
  }
}

class NfeResponsavelTecnico extends DataClass
    implements Insertable<NfeResponsavelTecnico> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? contato;
  final String? email;
  final String? telefone;
  final String? identificadorCsrt;
  final String? hashCsrt;
  NfeResponsavelTecnico(
      {this.id,
      this.idNfeCabecalho,
      this.cnpj,
      this.contato,
      this.email,
      this.telefone,
      this.identificadorCsrt,
      this.hashCsrt});
  factory NfeResponsavelTecnico.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeResponsavelTecnico(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      contato: ValueSqlType.stringType(data['${effectivePrefix}CONTATO']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      identificadorCsrt: ValueSqlType.stringType(
          data['${effectivePrefix}IDENTIFICADOR_CSRT']),
      hashCsrt: ValueSqlType.stringType(data['${effectivePrefix}HASH_CSRT']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || identificadorCsrt != null) {
      map['IDENTIFICADOR_CSRT'] = Variable<String>(identificadorCsrt);
    }
    if (!nullToAbsent || hashCsrt != null) {
      map['HASH_CSRT'] = Variable<String>(hashCsrt);
    }
    return map;
  }

  NfeResponsavelTecnicosCompanion toCompanion(bool nullToAbsent) {
    return NfeResponsavelTecnicosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      identificadorCsrt: identificadorCsrt == null && nullToAbsent
          ? const Value.absent()
          : Value(identificadorCsrt),
      hashCsrt: hashCsrt == null && nullToAbsent
          ? const Value.absent()
          : Value(hashCsrt),
    );
  }

  factory NfeResponsavelTecnico.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeResponsavelTecnico(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      contato: serializer.fromJson<String?>(json['contato']),
      email: serializer.fromJson<String?>(json['email']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      identificadorCsrt:
          serializer.fromJson<String?>(json['identificadorCsrt']),
      hashCsrt: serializer.fromJson<String?>(json['hashCsrt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'contato': serializer.toJson<String?>(contato),
      'email': serializer.toJson<String?>(email),
      'telefone': serializer.toJson<String?>(telefone),
      'identificadorCsrt': serializer.toJson<String?>(identificadorCsrt),
      'hashCsrt': serializer.toJson<String?>(hashCsrt),
    };
  }

  NfeResponsavelTecnico copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? cnpj,
          String? contato,
          String? email,
          String? telefone,
          String? identificadorCsrt,
          String? hashCsrt}) =>
      NfeResponsavelTecnico(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        cnpj: cnpj ?? this.cnpj,
        contato: contato ?? this.contato,
        email: email ?? this.email,
        telefone: telefone ?? this.telefone,
        identificadorCsrt: identificadorCsrt ?? this.identificadorCsrt,
        hashCsrt: hashCsrt ?? this.hashCsrt,
      );
  @override
  String toString() {
    return (StringBuffer('NfeResponsavelTecnico(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('contato: $contato, ')
          ..write('email: $email, ')
          ..write('telefone: $telefone, ')
          ..write('identificadorCsrt: $identificadorCsrt, ')
          ..write('hashCsrt: $hashCsrt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, cnpj, contato, email,
      telefone, identificadorCsrt, hashCsrt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeResponsavelTecnico &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.contato == this.contato &&
          other.email == this.email &&
          other.telefone == this.telefone &&
          other.identificadorCsrt == this.identificadorCsrt &&
          other.hashCsrt == this.hashCsrt);
}

class NfeResponsavelTecnicosCompanion
    extends UpdateCompanion<NfeResponsavelTecnico> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> contato;
  final Value<String?> email;
  final Value<String?> telefone;
  final Value<String?> identificadorCsrt;
  final Value<String?> hashCsrt;
  const NfeResponsavelTecnicosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.contato = const Value.absent(),
    this.email = const Value.absent(),
    this.telefone = const Value.absent(),
    this.identificadorCsrt = const Value.absent(),
    this.hashCsrt = const Value.absent(),
  });
  NfeResponsavelTecnicosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.contato = const Value.absent(),
    this.email = const Value.absent(),
    this.telefone = const Value.absent(),
    this.identificadorCsrt = const Value.absent(),
    this.hashCsrt = const Value.absent(),
  });
  static Insertable<NfeResponsavelTecnico> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? contato,
    Expression<String>? email,
    Expression<String>? telefone,
    Expression<String>? identificadorCsrt,
    Expression<String>? hashCsrt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (cnpj != null) 'CNPJ': cnpj,
      if (contato != null) 'CONTATO': contato,
      if (email != null) 'EMAIL': email,
      if (telefone != null) 'TELEFONE': telefone,
      if (identificadorCsrt != null) 'IDENTIFICADOR_CSRT': identificadorCsrt,
      if (hashCsrt != null) 'HASH_CSRT': hashCsrt,
    });
  }

  NfeResponsavelTecnicosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? cnpj,
      Value<String?>? contato,
      Value<String?>? email,
      Value<String?>? telefone,
      Value<String?>? identificadorCsrt,
      Value<String?>? hashCsrt}) {
    return NfeResponsavelTecnicosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      contato: contato ?? this.contato,
      email: email ?? this.email,
      telefone: telefone ?? this.telefone,
      identificadorCsrt: identificadorCsrt ?? this.identificadorCsrt,
      hashCsrt: hashCsrt ?? this.hashCsrt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (identificadorCsrt.present) {
      map['IDENTIFICADOR_CSRT'] = Variable<String>(identificadorCsrt.value);
    }
    if (hashCsrt.present) {
      map['HASH_CSRT'] = Variable<String>(hashCsrt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeResponsavelTecnicosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('contato: $contato, ')
          ..write('email: $email, ')
          ..write('telefone: $telefone, ')
          ..write('identificadorCsrt: $identificadorCsrt, ')
          ..write('hashCsrt: $hashCsrt')
          ..write(')'))
        .toString();
  }
}

class $NfeResponsavelTecnicosTable extends NfeResponsavelTecnicos
    with TableInfo<$NfeResponsavelTecnicosTable, NfeResponsavelTecnico> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeResponsavelTecnicosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  @override
  late final GeneratedColumn<String> contato = GeneratedColumn<String>(
      'CONTATO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _identificadorCsrtMeta =
      const VerificationMeta('identificadorCsrt');
  @override
  late final GeneratedColumn<String> identificadorCsrt =
      GeneratedColumn<String>('IDENTIFICADOR_CSRT', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _hashCsrtMeta = const VerificationMeta('hashCsrt');
  @override
  late final GeneratedColumn<String> hashCsrt = GeneratedColumn<String>(
      'HASH_CSRT', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 28),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        cnpj,
        contato,
        email,
        telefone,
        identificadorCsrt,
        hashCsrt
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_RESPONSAVEL_TECNICO';
  @override
  String get actualTableName => 'NFE_RESPONSAVEL_TECNICO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeResponsavelTecnico> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('IDENTIFICADOR_CSRT')) {
      context.handle(
          _identificadorCsrtMeta,
          identificadorCsrt.isAcceptableOrUnknown(
              data['IDENTIFICADOR_CSRT']!, _identificadorCsrtMeta));
    }
    if (data.containsKey('HASH_CSRT')) {
      context.handle(_hashCsrtMeta,
          hashCsrt.isAcceptableOrUnknown(data['HASH_CSRT']!, _hashCsrtMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeResponsavelTecnico map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeResponsavelTecnico.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeResponsavelTecnicosTable createAlias(String alias) {
    return $NfeResponsavelTecnicosTable(attachedDatabase, alias);
  }
}

class NfeTransporte extends DataClass implements Insertable<NfeTransporte> {
  final int? id;
  final int? idNfeCabecalho;
  final String? modalidadeFrete;
  final String? cnpj;
  final String? cpf;
  final String? nome;
  final String? inscricaoEstadual;
  final String? endereco;
  final String? nomeMunicipio;
  final String? uf;
  final double? valorServico;
  final double? valorBcRetencaoIcms;
  final double? aliquotaRetencaoIcms;
  final double? valorIcmsRetido;
  final int? cfop;
  final int? municipio;
  final String? placaVeiculo;
  final String? ufVeiculo;
  final String? rntcVeiculo;
  NfeTransporte(
      {this.id,
      this.idNfeCabecalho,
      this.modalidadeFrete,
      this.cnpj,
      this.cpf,
      this.nome,
      this.inscricaoEstadual,
      this.endereco,
      this.nomeMunicipio,
      this.uf,
      this.valorServico,
      this.valorBcRetencaoIcms,
      this.aliquotaRetencaoIcms,
      this.valorIcmsRetido,
      this.cfop,
      this.municipio,
      this.placaVeiculo,
      this.ufVeiculo,
      this.rntcVeiculo});
  factory NfeTransporte.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeTransporte(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      modalidadeFrete: ValueSqlType.stringType(data['${effectivePrefix}MODALIDADE_FRETE']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      endereco: ValueSqlType.stringType(data['${effectivePrefix}ENDERECO']),
      nomeMunicipio: ValueSqlType.stringType(data['${effectivePrefix}NOME_MUNICIPIO']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      valorServico: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_SERVICO']),
      valorBcRetencaoIcms: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_BC_RETENCAO_ICMS']),
      aliquotaRetencaoIcms: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_RETENCAO_ICMS']),
      valorIcmsRetido: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ICMS_RETIDO']),
      cfop: ValueSqlType.intType(data['${effectivePrefix}CFOP']),
      municipio: ValueSqlType.intType(data['${effectivePrefix}MUNICIPIO']),
      placaVeiculo: ValueSqlType.stringType(data['${effectivePrefix}PLACA_VEICULO']),
      ufVeiculo: ValueSqlType.stringType(data['${effectivePrefix}UF_VEICULO']),
      rntcVeiculo: ValueSqlType.stringType(data['${effectivePrefix}RNTC_VEICULO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || modalidadeFrete != null) {
      map['MODALIDADE_FRETE'] = Variable<String>(modalidadeFrete);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || endereco != null) {
      map['ENDERECO'] = Variable<String>(endereco);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || valorServico != null) {
      map['VALOR_SERVICO'] = Variable<double>(valorServico);
    }
    if (!nullToAbsent || valorBcRetencaoIcms != null) {
      map['VALOR_BC_RETENCAO_ICMS'] = Variable<double>(valorBcRetencaoIcms);
    }
    if (!nullToAbsent || aliquotaRetencaoIcms != null) {
      map['ALIQUOTA_RETENCAO_ICMS'] = Variable<double>(aliquotaRetencaoIcms);
    }
    if (!nullToAbsent || valorIcmsRetido != null) {
      map['VALOR_ICMS_RETIDO'] = Variable<double>(valorIcmsRetido);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || municipio != null) {
      map['MUNICIPIO'] = Variable<int>(municipio);
    }
    if (!nullToAbsent || placaVeiculo != null) {
      map['PLACA_VEICULO'] = Variable<String>(placaVeiculo);
    }
    if (!nullToAbsent || ufVeiculo != null) {
      map['UF_VEICULO'] = Variable<String>(ufVeiculo);
    }
    if (!nullToAbsent || rntcVeiculo != null) {
      map['RNTC_VEICULO'] = Variable<String>(rntcVeiculo);
    }
    return map;
  }

  NfeTransportesCompanion toCompanion(bool nullToAbsent) {
    return NfeTransportesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      modalidadeFrete: modalidadeFrete == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeFrete),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      endereco: endereco == null && nullToAbsent
          ? const Value.absent()
          : Value(endereco),
      nomeMunicipio: nomeMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeMunicipio),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      valorServico: valorServico == null && nullToAbsent
          ? const Value.absent()
          : Value(valorServico),
      valorBcRetencaoIcms: valorBcRetencaoIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBcRetencaoIcms),
      aliquotaRetencaoIcms: aliquotaRetencaoIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaRetencaoIcms),
      valorIcmsRetido: valorIcmsRetido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsRetido),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      municipio: municipio == null && nullToAbsent
          ? const Value.absent()
          : Value(municipio),
      placaVeiculo: placaVeiculo == null && nullToAbsent
          ? const Value.absent()
          : Value(placaVeiculo),
      ufVeiculo: ufVeiculo == null && nullToAbsent
          ? const Value.absent()
          : Value(ufVeiculo),
      rntcVeiculo: rntcVeiculo == null && nullToAbsent
          ? const Value.absent()
          : Value(rntcVeiculo),
    );
  }

  factory NfeTransporte.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeTransporte(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      modalidadeFrete: serializer.fromJson<String?>(json['modalidadeFrete']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      nome: serializer.fromJson<String?>(json['nome']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
      endereco: serializer.fromJson<String?>(json['endereco']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      valorServico: serializer.fromJson<double?>(json['valorServico']),
      valorBcRetencaoIcms:
          serializer.fromJson<double?>(json['valorBcRetencaoIcms']),
      aliquotaRetencaoIcms:
          serializer.fromJson<double?>(json['aliquotaRetencaoIcms']),
      valorIcmsRetido: serializer.fromJson<double?>(json['valorIcmsRetido']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      municipio: serializer.fromJson<int?>(json['municipio']),
      placaVeiculo: serializer.fromJson<String?>(json['placaVeiculo']),
      ufVeiculo: serializer.fromJson<String?>(json['ufVeiculo']),
      rntcVeiculo: serializer.fromJson<String?>(json['rntcVeiculo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'modalidadeFrete': serializer.toJson<String?>(modalidadeFrete),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'nome': serializer.toJson<String?>(nome),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'endereco': serializer.toJson<String?>(endereco),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'valorServico': serializer.toJson<double?>(valorServico),
      'valorBcRetencaoIcms': serializer.toJson<double?>(valorBcRetencaoIcms),
      'aliquotaRetencaoIcms': serializer.toJson<double?>(aliquotaRetencaoIcms),
      'valorIcmsRetido': serializer.toJson<double?>(valorIcmsRetido),
      'cfop': serializer.toJson<int?>(cfop),
      'municipio': serializer.toJson<int?>(municipio),
      'placaVeiculo': serializer.toJson<String?>(placaVeiculo),
      'ufVeiculo': serializer.toJson<String?>(ufVeiculo),
      'rntcVeiculo': serializer.toJson<String?>(rntcVeiculo),
    };
  }

  NfeTransporte copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? modalidadeFrete,
          String? cnpj,
          String? cpf,
          String? nome,
          String? inscricaoEstadual,
          String? endereco,
          String? nomeMunicipio,
          String? uf,
          double? valorServico,
          double? valorBcRetencaoIcms,
          double? aliquotaRetencaoIcms,
          double? valorIcmsRetido,
          int? cfop,
          int? municipio,
          String? placaVeiculo,
          String? ufVeiculo,
          String? rntcVeiculo}) =>
      NfeTransporte(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        modalidadeFrete: modalidadeFrete ?? this.modalidadeFrete,
        cnpj: cnpj ?? this.cnpj,
        cpf: cpf ?? this.cpf,
        nome: nome ?? this.nome,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        endereco: endereco ?? this.endereco,
        nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
        uf: uf ?? this.uf,
        valorServico: valorServico ?? this.valorServico,
        valorBcRetencaoIcms: valorBcRetencaoIcms ?? this.valorBcRetencaoIcms,
        aliquotaRetencaoIcms: aliquotaRetencaoIcms ?? this.aliquotaRetencaoIcms,
        valorIcmsRetido: valorIcmsRetido ?? this.valorIcmsRetido,
        cfop: cfop ?? this.cfop,
        municipio: municipio ?? this.municipio,
        placaVeiculo: placaVeiculo ?? this.placaVeiculo,
        ufVeiculo: ufVeiculo ?? this.ufVeiculo,
        rntcVeiculo: rntcVeiculo ?? this.rntcVeiculo,
      );
  @override
  String toString() {
    return (StringBuffer('NfeTransporte(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('modalidadeFrete: $modalidadeFrete, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nome: $nome, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('endereco: $endereco, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('valorServico: $valorServico, ')
          ..write('valorBcRetencaoIcms: $valorBcRetencaoIcms, ')
          ..write('aliquotaRetencaoIcms: $aliquotaRetencaoIcms, ')
          ..write('valorIcmsRetido: $valorIcmsRetido, ')
          ..write('cfop: $cfop, ')
          ..write('municipio: $municipio, ')
          ..write('placaVeiculo: $placaVeiculo, ')
          ..write('ufVeiculo: $ufVeiculo, ')
          ..write('rntcVeiculo: $rntcVeiculo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeCabecalho,
      modalidadeFrete,
      cnpj,
      cpf,
      nome,
      inscricaoEstadual,
      endereco,
      nomeMunicipio,
      uf,
      valorServico,
      valorBcRetencaoIcms,
      aliquotaRetencaoIcms,
      valorIcmsRetido,
      cfop,
      municipio,
      placaVeiculo,
      ufVeiculo,
      rntcVeiculo);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeTransporte &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.modalidadeFrete == this.modalidadeFrete &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.nome == this.nome &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.endereco == this.endereco &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.valorServico == this.valorServico &&
          other.valorBcRetencaoIcms == this.valorBcRetencaoIcms &&
          other.aliquotaRetencaoIcms == this.aliquotaRetencaoIcms &&
          other.valorIcmsRetido == this.valorIcmsRetido &&
          other.cfop == this.cfop &&
          other.municipio == this.municipio &&
          other.placaVeiculo == this.placaVeiculo &&
          other.ufVeiculo == this.ufVeiculo &&
          other.rntcVeiculo == this.rntcVeiculo);
}

class NfeTransportesCompanion extends UpdateCompanion<NfeTransporte> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> modalidadeFrete;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> nome;
  final Value<String?> inscricaoEstadual;
  final Value<String?> endereco;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<double?> valorServico;
  final Value<double?> valorBcRetencaoIcms;
  final Value<double?> aliquotaRetencaoIcms;
  final Value<double?> valorIcmsRetido;
  final Value<int?> cfop;
  final Value<int?> municipio;
  final Value<String?> placaVeiculo;
  final Value<String?> ufVeiculo;
  final Value<String?> rntcVeiculo;
  const NfeTransportesCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.modalidadeFrete = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nome = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.endereco = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.valorServico = const Value.absent(),
    this.valorBcRetencaoIcms = const Value.absent(),
    this.aliquotaRetencaoIcms = const Value.absent(),
    this.valorIcmsRetido = const Value.absent(),
    this.cfop = const Value.absent(),
    this.municipio = const Value.absent(),
    this.placaVeiculo = const Value.absent(),
    this.ufVeiculo = const Value.absent(),
    this.rntcVeiculo = const Value.absent(),
  });
  NfeTransportesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.modalidadeFrete = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.nome = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.endereco = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.valorServico = const Value.absent(),
    this.valorBcRetencaoIcms = const Value.absent(),
    this.aliquotaRetencaoIcms = const Value.absent(),
    this.valorIcmsRetido = const Value.absent(),
    this.cfop = const Value.absent(),
    this.municipio = const Value.absent(),
    this.placaVeiculo = const Value.absent(),
    this.ufVeiculo = const Value.absent(),
    this.rntcVeiculo = const Value.absent(),
  });
  static Insertable<NfeTransporte> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? modalidadeFrete,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? nome,
    Expression<String>? inscricaoEstadual,
    Expression<String>? endereco,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<double>? valorServico,
    Expression<double>? valorBcRetencaoIcms,
    Expression<double>? aliquotaRetencaoIcms,
    Expression<double>? valorIcmsRetido,
    Expression<int>? cfop,
    Expression<int>? municipio,
    Expression<String>? placaVeiculo,
    Expression<String>? ufVeiculo,
    Expression<String>? rntcVeiculo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (modalidadeFrete != null) 'MODALIDADE_FRETE': modalidadeFrete,
      if (cnpj != null) 'CNPJ': cnpj,
      if (cpf != null) 'CPF': cpf,
      if (nome != null) 'NOME': nome,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (endereco != null) 'ENDERECO': endereco,
      if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
      if (uf != null) 'UF': uf,
      if (valorServico != null) 'VALOR_SERVICO': valorServico,
      if (valorBcRetencaoIcms != null)
        'VALOR_BC_RETENCAO_ICMS': valorBcRetencaoIcms,
      if (aliquotaRetencaoIcms != null)
        'ALIQUOTA_RETENCAO_ICMS': aliquotaRetencaoIcms,
      if (valorIcmsRetido != null) 'VALOR_ICMS_RETIDO': valorIcmsRetido,
      if (cfop != null) 'CFOP': cfop,
      if (municipio != null) 'MUNICIPIO': municipio,
      if (placaVeiculo != null) 'PLACA_VEICULO': placaVeiculo,
      if (ufVeiculo != null) 'UF_VEICULO': ufVeiculo,
      if (rntcVeiculo != null) 'RNTC_VEICULO': rntcVeiculo,
    });
  }

  NfeTransportesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? modalidadeFrete,
      Value<String?>? cnpj,
      Value<String?>? cpf,
      Value<String?>? nome,
      Value<String?>? inscricaoEstadual,
      Value<String?>? endereco,
      Value<String?>? nomeMunicipio,
      Value<String?>? uf,
      Value<double?>? valorServico,
      Value<double?>? valorBcRetencaoIcms,
      Value<double?>? aliquotaRetencaoIcms,
      Value<double?>? valorIcmsRetido,
      Value<int?>? cfop,
      Value<int?>? municipio,
      Value<String?>? placaVeiculo,
      Value<String?>? ufVeiculo,
      Value<String?>? rntcVeiculo}) {
    return NfeTransportesCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      modalidadeFrete: modalidadeFrete ?? this.modalidadeFrete,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      nome: nome ?? this.nome,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      endereco: endereco ?? this.endereco,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      valorServico: valorServico ?? this.valorServico,
      valorBcRetencaoIcms: valorBcRetencaoIcms ?? this.valorBcRetencaoIcms,
      aliquotaRetencaoIcms: aliquotaRetencaoIcms ?? this.aliquotaRetencaoIcms,
      valorIcmsRetido: valorIcmsRetido ?? this.valorIcmsRetido,
      cfop: cfop ?? this.cfop,
      municipio: municipio ?? this.municipio,
      placaVeiculo: placaVeiculo ?? this.placaVeiculo,
      ufVeiculo: ufVeiculo ?? this.ufVeiculo,
      rntcVeiculo: rntcVeiculo ?? this.rntcVeiculo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (modalidadeFrete.present) {
      map['MODALIDADE_FRETE'] = Variable<String>(modalidadeFrete.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (endereco.present) {
      map['ENDERECO'] = Variable<String>(endereco.value);
    }
    if (nomeMunicipio.present) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (valorServico.present) {
      map['VALOR_SERVICO'] = Variable<double>(valorServico.value);
    }
    if (valorBcRetencaoIcms.present) {
      map['VALOR_BC_RETENCAO_ICMS'] =
          Variable<double>(valorBcRetencaoIcms.value);
    }
    if (aliquotaRetencaoIcms.present) {
      map['ALIQUOTA_RETENCAO_ICMS'] =
          Variable<double>(aliquotaRetencaoIcms.value);
    }
    if (valorIcmsRetido.present) {
      map['VALOR_ICMS_RETIDO'] = Variable<double>(valorIcmsRetido.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (municipio.present) {
      map['MUNICIPIO'] = Variable<int>(municipio.value);
    }
    if (placaVeiculo.present) {
      map['PLACA_VEICULO'] = Variable<String>(placaVeiculo.value);
    }
    if (ufVeiculo.present) {
      map['UF_VEICULO'] = Variable<String>(ufVeiculo.value);
    }
    if (rntcVeiculo.present) {
      map['RNTC_VEICULO'] = Variable<String>(rntcVeiculo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransportesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('modalidadeFrete: $modalidadeFrete, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('nome: $nome, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('endereco: $endereco, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('valorServico: $valorServico, ')
          ..write('valorBcRetencaoIcms: $valorBcRetencaoIcms, ')
          ..write('aliquotaRetencaoIcms: $aliquotaRetencaoIcms, ')
          ..write('valorIcmsRetido: $valorIcmsRetido, ')
          ..write('cfop: $cfop, ')
          ..write('municipio: $municipio, ')
          ..write('placaVeiculo: $placaVeiculo, ')
          ..write('ufVeiculo: $ufVeiculo, ')
          ..write('rntcVeiculo: $rntcVeiculo')
          ..write(')'))
        .toString();
  }
}

class $NfeTransportesTable extends NfeTransportes
    with TableInfo<$NfeTransportesTable, NfeTransporte> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeTransportesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _modalidadeFreteMeta =
      const VerificationMeta('modalidadeFrete');
  @override
  late final GeneratedColumn<String> modalidadeFrete =
      GeneratedColumn<String>('MODALIDADE_FRETE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _enderecoMeta = const VerificationMeta('endereco');
  @override
  late final GeneratedColumn<String> endereco = GeneratedColumn<String>(
      'ENDERECO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeMunicipioMeta =
      const VerificationMeta('nomeMunicipio');
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
      'NOME_MUNICIPIO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorServicoMeta =
      const VerificationMeta('valorServico');
  @override
  late final GeneratedColumn<double> valorServico = GeneratedColumn<double>(
      'VALOR_SERVICO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBcRetencaoIcmsMeta =
      const VerificationMeta('valorBcRetencaoIcms');
  @override
  late final GeneratedColumn<double> valorBcRetencaoIcms =
      GeneratedColumn<double>('VALOR_BC_RETENCAO_ICMS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaRetencaoIcmsMeta =
      const VerificationMeta('aliquotaRetencaoIcms');
  @override
  late final GeneratedColumn<double> aliquotaRetencaoIcms =
      GeneratedColumn<double>('ALIQUOTA_RETENCAO_ICMS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsRetidoMeta =
      const VerificationMeta('valorIcmsRetido');
  @override
  late final GeneratedColumn<double> valorIcmsRetido =
      GeneratedColumn<double>('VALOR_ICMS_RETIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
      'CFOP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _municipioMeta = const VerificationMeta('municipio');
  @override
  late final GeneratedColumn<int> municipio = GeneratedColumn<int>(
      'MUNICIPIO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _placaVeiculoMeta =
      const VerificationMeta('placaVeiculo');
  @override
  late final GeneratedColumn<String> placaVeiculo = GeneratedColumn<String>(
      'PLACA_VEICULO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufVeiculoMeta = const VerificationMeta('ufVeiculo');
  @override
  late final GeneratedColumn<String> ufVeiculo = GeneratedColumn<String>(
      'UF_VEICULO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _rntcVeiculoMeta =
      const VerificationMeta('rntcVeiculo');
  @override
  late final GeneratedColumn<String> rntcVeiculo = GeneratedColumn<String>(
      'RNTC_VEICULO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        modalidadeFrete,
        cnpj,
        cpf,
        nome,
        inscricaoEstadual,
        endereco,
        nomeMunicipio,
        uf,
        valorServico,
        valorBcRetencaoIcms,
        aliquotaRetencaoIcms,
        valorIcmsRetido,
        cfop,
        municipio,
        placaVeiculo,
        ufVeiculo,
        rntcVeiculo
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_TRANSPORTE';
  @override
  String get actualTableName => 'NFE_TRANSPORTE';
  @override
  VerificationContext validateIntegrity(Insertable<NfeTransporte> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('MODALIDADE_FRETE')) {
      context.handle(
          _modalidadeFreteMeta,
          modalidadeFrete.isAcceptableOrUnknown(
              data['MODALIDADE_FRETE']!, _modalidadeFreteMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    if (data.containsKey('ENDERECO')) {
      context.handle(_enderecoMeta,
          endereco.isAcceptableOrUnknown(data['ENDERECO']!, _enderecoMeta));
    }
    if (data.containsKey('NOME_MUNICIPIO')) {
      context.handle(
          _nomeMunicipioMeta,
          nomeMunicipio.isAcceptableOrUnknown(
              data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('VALOR_SERVICO')) {
      context.handle(
          _valorServicoMeta,
          valorServico.isAcceptableOrUnknown(
              data['VALOR_SERVICO']!, _valorServicoMeta));
    }
    if (data.containsKey('VALOR_BC_RETENCAO_ICMS')) {
      context.handle(
          _valorBcRetencaoIcmsMeta,
          valorBcRetencaoIcms.isAcceptableOrUnknown(
              data['VALOR_BC_RETENCAO_ICMS']!, _valorBcRetencaoIcmsMeta));
    }
    if (data.containsKey('ALIQUOTA_RETENCAO_ICMS')) {
      context.handle(
          _aliquotaRetencaoIcmsMeta,
          aliquotaRetencaoIcms.isAcceptableOrUnknown(
              data['ALIQUOTA_RETENCAO_ICMS']!, _aliquotaRetencaoIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS_RETIDO')) {
      context.handle(
          _valorIcmsRetidoMeta,
          valorIcmsRetido.isAcceptableOrUnknown(
              data['VALOR_ICMS_RETIDO']!, _valorIcmsRetidoMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
    }
    if (data.containsKey('MUNICIPIO')) {
      context.handle(_municipioMeta,
          municipio.isAcceptableOrUnknown(data['MUNICIPIO']!, _municipioMeta));
    }
    if (data.containsKey('PLACA_VEICULO')) {
      context.handle(
          _placaVeiculoMeta,
          placaVeiculo.isAcceptableOrUnknown(
              data['PLACA_VEICULO']!, _placaVeiculoMeta));
    }
    if (data.containsKey('UF_VEICULO')) {
      context.handle(_ufVeiculoMeta,
          ufVeiculo.isAcceptableOrUnknown(data['UF_VEICULO']!, _ufVeiculoMeta));
    }
    if (data.containsKey('RNTC_VEICULO')) {
      context.handle(
          _rntcVeiculoMeta,
          rntcVeiculo.isAcceptableOrUnknown(
              data['RNTC_VEICULO']!, _rntcVeiculoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeTransporte map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeTransporte.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeTransportesTable createAlias(String alias) {
    return $NfeTransportesTable(attachedDatabase, alias);
  }
}

class NfeTransporteReboque extends DataClass
    implements Insertable<NfeTransporteReboque> {
  final int? id;
  final int? idNfeTransporte;
  final String? placa;
  final String? uf;
  final String? rntc;
  final String? vagao;
  final String? balsa;
  NfeTransporteReboque(
      {this.id,
      this.idNfeTransporte,
      this.placa,
      this.uf,
      this.rntc,
      this.vagao,
      this.balsa});
  factory NfeTransporteReboque.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeTransporteReboque(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeTransporte: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_TRANSPORTE']),
      placa: ValueSqlType.stringType(data['${effectivePrefix}PLACA']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      rntc: ValueSqlType.stringType(data['${effectivePrefix}RNTC']),
      vagao: ValueSqlType.stringType(data['${effectivePrefix}VAGAO']),
      balsa: ValueSqlType.stringType(data['${effectivePrefix}BALSA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeTransporte != null) {
      map['ID_NFE_TRANSPORTE'] = Variable<int>(idNfeTransporte);
    }
    if (!nullToAbsent || placa != null) {
      map['PLACA'] = Variable<String>(placa);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || rntc != null) {
      map['RNTC'] = Variable<String>(rntc);
    }
    if (!nullToAbsent || vagao != null) {
      map['VAGAO'] = Variable<String>(vagao);
    }
    if (!nullToAbsent || balsa != null) {
      map['BALSA'] = Variable<String>(balsa);
    }
    return map;
  }

  NfeTransporteReboquesCompanion toCompanion(bool nullToAbsent) {
    return NfeTransporteReboquesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeTransporte: idNfeTransporte == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeTransporte),
      placa:
          placa == null && nullToAbsent ? const Value.absent() : Value(placa),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      rntc: rntc == null && nullToAbsent ? const Value.absent() : Value(rntc),
      vagao:
          vagao == null && nullToAbsent ? const Value.absent() : Value(vagao),
      balsa:
          balsa == null && nullToAbsent ? const Value.absent() : Value(balsa),
    );
  }

  factory NfeTransporteReboque.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeTransporteReboque(
      id: serializer.fromJson<int?>(json['id']),
      idNfeTransporte: serializer.fromJson<int?>(json['idNfeTransporte']),
      placa: serializer.fromJson<String?>(json['placa']),
      uf: serializer.fromJson<String?>(json['uf']),
      rntc: serializer.fromJson<String?>(json['rntc']),
      vagao: serializer.fromJson<String?>(json['vagao']),
      balsa: serializer.fromJson<String?>(json['balsa']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeTransporte': serializer.toJson<int?>(idNfeTransporte),
      'placa': serializer.toJson<String?>(placa),
      'uf': serializer.toJson<String?>(uf),
      'rntc': serializer.toJson<String?>(rntc),
      'vagao': serializer.toJson<String?>(vagao),
      'balsa': serializer.toJson<String?>(balsa),
    };
  }

  NfeTransporteReboque copyWith(
          {int? id,
          int? idNfeTransporte,
          String? placa,
          String? uf,
          String? rntc,
          String? vagao,
          String? balsa}) =>
      NfeTransporteReboque(
        id: id ?? this.id,
        idNfeTransporte: idNfeTransporte ?? this.idNfeTransporte,
        placa: placa ?? this.placa,
        uf: uf ?? this.uf,
        rntc: rntc ?? this.rntc,
        vagao: vagao ?? this.vagao,
        balsa: balsa ?? this.balsa,
      );
  @override
  String toString() {
    return (StringBuffer('NfeTransporteReboque(')
          ..write('id: $id, ')
          ..write('idNfeTransporte: $idNfeTransporte, ')
          ..write('placa: $placa, ')
          ..write('uf: $uf, ')
          ..write('rntc: $rntc, ')
          ..write('vagao: $vagao, ')
          ..write('balsa: $balsa')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idNfeTransporte, placa, uf, rntc, vagao, balsa);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeTransporteReboque &&
          other.id == this.id &&
          other.idNfeTransporte == this.idNfeTransporte &&
          other.placa == this.placa &&
          other.uf == this.uf &&
          other.rntc == this.rntc &&
          other.vagao == this.vagao &&
          other.balsa == this.balsa);
}

class NfeTransporteReboquesCompanion
    extends UpdateCompanion<NfeTransporteReboque> {
  final Value<int?> id;
  final Value<int?> idNfeTransporte;
  final Value<String?> placa;
  final Value<String?> uf;
  final Value<String?> rntc;
  final Value<String?> vagao;
  final Value<String?> balsa;
  const NfeTransporteReboquesCompanion({
    this.id = const Value.absent(),
    this.idNfeTransporte = const Value.absent(),
    this.placa = const Value.absent(),
    this.uf = const Value.absent(),
    this.rntc = const Value.absent(),
    this.vagao = const Value.absent(),
    this.balsa = const Value.absent(),
  });
  NfeTransporteReboquesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeTransporte = const Value.absent(),
    this.placa = const Value.absent(),
    this.uf = const Value.absent(),
    this.rntc = const Value.absent(),
    this.vagao = const Value.absent(),
    this.balsa = const Value.absent(),
  });
  static Insertable<NfeTransporteReboque> custom({
    Expression<int>? id,
    Expression<int>? idNfeTransporte,
    Expression<String>? placa,
    Expression<String>? uf,
    Expression<String>? rntc,
    Expression<String>? vagao,
    Expression<String>? balsa,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeTransporte != null) 'ID_NFE_TRANSPORTE': idNfeTransporte,
      if (placa != null) 'PLACA': placa,
      if (uf != null) 'UF': uf,
      if (rntc != null) 'RNTC': rntc,
      if (vagao != null) 'VAGAO': vagao,
      if (balsa != null) 'BALSA': balsa,
    });
  }

  NfeTransporteReboquesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeTransporte,
      Value<String?>? placa,
      Value<String?>? uf,
      Value<String?>? rntc,
      Value<String?>? vagao,
      Value<String?>? balsa}) {
    return NfeTransporteReboquesCompanion(
      id: id ?? this.id,
      idNfeTransporte: idNfeTransporte ?? this.idNfeTransporte,
      placa: placa ?? this.placa,
      uf: uf ?? this.uf,
      rntc: rntc ?? this.rntc,
      vagao: vagao ?? this.vagao,
      balsa: balsa ?? this.balsa,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeTransporte.present) {
      map['ID_NFE_TRANSPORTE'] = Variable<int>(idNfeTransporte.value);
    }
    if (placa.present) {
      map['PLACA'] = Variable<String>(placa.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (rntc.present) {
      map['RNTC'] = Variable<String>(rntc.value);
    }
    if (vagao.present) {
      map['VAGAO'] = Variable<String>(vagao.value);
    }
    if (balsa.present) {
      map['BALSA'] = Variable<String>(balsa.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteReboquesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeTransporte: $idNfeTransporte, ')
          ..write('placa: $placa, ')
          ..write('uf: $uf, ')
          ..write('rntc: $rntc, ')
          ..write('vagao: $vagao, ')
          ..write('balsa: $balsa')
          ..write(')'))
        .toString();
  }
}

class $NfeTransporteReboquesTable extends NfeTransporteReboques
    with TableInfo<$NfeTransporteReboquesTable, NfeTransporteReboque> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeTransporteReboquesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeTransporteMeta =
      const VerificationMeta('idNfeTransporte');
  @override
  late final GeneratedColumn<int> idNfeTransporte = GeneratedColumn<int>(
      'ID_NFE_TRANSPORTE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_TRANSPORTE(ID)');
  final VerificationMeta _placaMeta = const VerificationMeta('placa');
  @override
  late final GeneratedColumn<String> placa = GeneratedColumn<String>(
      'PLACA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _rntcMeta = const VerificationMeta('rntc');
  @override
  late final GeneratedColumn<String> rntc = GeneratedColumn<String>(
      'RNTC', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _vagaoMeta = const VerificationMeta('vagao');
  @override
  late final GeneratedColumn<String> vagao = GeneratedColumn<String>(
      'VAGAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _balsaMeta = const VerificationMeta('balsa');
  @override
  late final GeneratedColumn<String> balsa = GeneratedColumn<String>(
      'BALSA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeTransporte, placa, uf, rntc, vagao, balsa];
  @override
  String get aliasedName => _alias ?? 'NFE_TRANSPORTE_REBOQUE';
  @override
  String get actualTableName => 'NFE_TRANSPORTE_REBOQUE';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeTransporteReboque> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_TRANSPORTE')) {
      context.handle(
          _idNfeTransporteMeta,
          idNfeTransporte.isAcceptableOrUnknown(
              data['ID_NFE_TRANSPORTE']!, _idNfeTransporteMeta));
    }
    if (data.containsKey('PLACA')) {
      context.handle(
          _placaMeta, placa.isAcceptableOrUnknown(data['PLACA']!, _placaMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('RNTC')) {
      context.handle(
          _rntcMeta, rntc.isAcceptableOrUnknown(data['RNTC']!, _rntcMeta));
    }
    if (data.containsKey('VAGAO')) {
      context.handle(
          _vagaoMeta, vagao.isAcceptableOrUnknown(data['VAGAO']!, _vagaoMeta));
    }
    if (data.containsKey('BALSA')) {
      context.handle(
          _balsaMeta, balsa.isAcceptableOrUnknown(data['BALSA']!, _balsaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeTransporteReboque map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeTransporteReboque.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeTransporteReboquesTable createAlias(String alias) {
    return $NfeTransporteReboquesTable(attachedDatabase, alias);
  }
}

class NfeTransporteVolume extends DataClass
    implements Insertable<NfeTransporteVolume> {
  final int? id;
  final int? idNfeTransporte;
  final int? quantidade;
  final String? especie;
  final String? marca;
  final String? numeracao;
  final double? pesoLiquido;
  final double? pesoBruto;
  NfeTransporteVolume(
      {this.id,
      this.idNfeTransporte,
      this.quantidade,
      this.especie,
      this.marca,
      this.numeracao,
      this.pesoLiquido,
      this.pesoBruto});
  factory NfeTransporteVolume.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeTransporteVolume(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeTransporte: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_TRANSPORTE']),
      quantidade: ValueSqlType.intType(data['${effectivePrefix}QUANTIDADE']),
      especie: ValueSqlType.stringType(data['${effectivePrefix}ESPECIE']),
      marca: ValueSqlType.stringType(data['${effectivePrefix}MARCA']),
      numeracao: ValueSqlType.stringType(data['${effectivePrefix}NUMERACAO']),
      pesoLiquido: ValueSqlType.doubleType(data['${effectivePrefix}PESO_LIQUIDO']),
      pesoBruto: ValueSqlType.doubleType(data['${effectivePrefix}PESO_BRUTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeTransporte != null) {
      map['ID_NFE_TRANSPORTE'] = Variable<int>(idNfeTransporte);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<int>(quantidade);
    }
    if (!nullToAbsent || especie != null) {
      map['ESPECIE'] = Variable<String>(especie);
    }
    if (!nullToAbsent || marca != null) {
      map['MARCA'] = Variable<String>(marca);
    }
    if (!nullToAbsent || numeracao != null) {
      map['NUMERACAO'] = Variable<String>(numeracao);
    }
    if (!nullToAbsent || pesoLiquido != null) {
      map['PESO_LIQUIDO'] = Variable<double>(pesoLiquido);
    }
    if (!nullToAbsent || pesoBruto != null) {
      map['PESO_BRUTO'] = Variable<double>(pesoBruto);
    }
    return map;
  }

  NfeTransporteVolumesCompanion toCompanion(bool nullToAbsent) {
    return NfeTransporteVolumesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeTransporte: idNfeTransporte == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeTransporte),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      especie: especie == null && nullToAbsent
          ? const Value.absent()
          : Value(especie),
      marca:
          marca == null && nullToAbsent ? const Value.absent() : Value(marca),
      numeracao: numeracao == null && nullToAbsent
          ? const Value.absent()
          : Value(numeracao),
      pesoLiquido: pesoLiquido == null && nullToAbsent
          ? const Value.absent()
          : Value(pesoLiquido),
      pesoBruto: pesoBruto == null && nullToAbsent
          ? const Value.absent()
          : Value(pesoBruto),
    );
  }

  factory NfeTransporteVolume.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeTransporteVolume(
      id: serializer.fromJson<int?>(json['id']),
      idNfeTransporte: serializer.fromJson<int?>(json['idNfeTransporte']),
      quantidade: serializer.fromJson<int?>(json['quantidade']),
      especie: serializer.fromJson<String?>(json['especie']),
      marca: serializer.fromJson<String?>(json['marca']),
      numeracao: serializer.fromJson<String?>(json['numeracao']),
      pesoLiquido: serializer.fromJson<double?>(json['pesoLiquido']),
      pesoBruto: serializer.fromJson<double?>(json['pesoBruto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeTransporte': serializer.toJson<int?>(idNfeTransporte),
      'quantidade': serializer.toJson<int?>(quantidade),
      'especie': serializer.toJson<String?>(especie),
      'marca': serializer.toJson<String?>(marca),
      'numeracao': serializer.toJson<String?>(numeracao),
      'pesoLiquido': serializer.toJson<double?>(pesoLiquido),
      'pesoBruto': serializer.toJson<double?>(pesoBruto),
    };
  }

  NfeTransporteVolume copyWith(
          {int? id,
          int? idNfeTransporte,
          int? quantidade,
          String? especie,
          String? marca,
          String? numeracao,
          double? pesoLiquido,
          double? pesoBruto}) =>
      NfeTransporteVolume(
        id: id ?? this.id,
        idNfeTransporte: idNfeTransporte ?? this.idNfeTransporte,
        quantidade: quantidade ?? this.quantidade,
        especie: especie ?? this.especie,
        marca: marca ?? this.marca,
        numeracao: numeracao ?? this.numeracao,
        pesoLiquido: pesoLiquido ?? this.pesoLiquido,
        pesoBruto: pesoBruto ?? this.pesoBruto,
      );
  @override
  String toString() {
    return (StringBuffer('NfeTransporteVolume(')
          ..write('id: $id, ')
          ..write('idNfeTransporte: $idNfeTransporte, ')
          ..write('quantidade: $quantidade, ')
          ..write('especie: $especie, ')
          ..write('marca: $marca, ')
          ..write('numeracao: $numeracao, ')
          ..write('pesoLiquido: $pesoLiquido, ')
          ..write('pesoBruto: $pesoBruto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeTransporte, quantidade, especie,
      marca, numeracao, pesoLiquido, pesoBruto);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeTransporteVolume &&
          other.id == this.id &&
          other.idNfeTransporte == this.idNfeTransporte &&
          other.quantidade == this.quantidade &&
          other.especie == this.especie &&
          other.marca == this.marca &&
          other.numeracao == this.numeracao &&
          other.pesoLiquido == this.pesoLiquido &&
          other.pesoBruto == this.pesoBruto);
}

class NfeTransporteVolumesCompanion
    extends UpdateCompanion<NfeTransporteVolume> {
  final Value<int?> id;
  final Value<int?> idNfeTransporte;
  final Value<int?> quantidade;
  final Value<String?> especie;
  final Value<String?> marca;
  final Value<String?> numeracao;
  final Value<double?> pesoLiquido;
  final Value<double?> pesoBruto;
  const NfeTransporteVolumesCompanion({
    this.id = const Value.absent(),
    this.idNfeTransporte = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.especie = const Value.absent(),
    this.marca = const Value.absent(),
    this.numeracao = const Value.absent(),
    this.pesoLiquido = const Value.absent(),
    this.pesoBruto = const Value.absent(),
  });
  NfeTransporteVolumesCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeTransporte = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.especie = const Value.absent(),
    this.marca = const Value.absent(),
    this.numeracao = const Value.absent(),
    this.pesoLiquido = const Value.absent(),
    this.pesoBruto = const Value.absent(),
  });
  static Insertable<NfeTransporteVolume> custom({
    Expression<int>? id,
    Expression<int>? idNfeTransporte,
    Expression<int>? quantidade,
    Expression<String>? especie,
    Expression<String>? marca,
    Expression<String>? numeracao,
    Expression<double>? pesoLiquido,
    Expression<double>? pesoBruto,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeTransporte != null) 'ID_NFE_TRANSPORTE': idNfeTransporte,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (especie != null) 'ESPECIE': especie,
      if (marca != null) 'MARCA': marca,
      if (numeracao != null) 'NUMERACAO': numeracao,
      if (pesoLiquido != null) 'PESO_LIQUIDO': pesoLiquido,
      if (pesoBruto != null) 'PESO_BRUTO': pesoBruto,
    });
  }

  NfeTransporteVolumesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeTransporte,
      Value<int?>? quantidade,
      Value<String?>? especie,
      Value<String?>? marca,
      Value<String?>? numeracao,
      Value<double?>? pesoLiquido,
      Value<double?>? pesoBruto}) {
    return NfeTransporteVolumesCompanion(
      id: id ?? this.id,
      idNfeTransporte: idNfeTransporte ?? this.idNfeTransporte,
      quantidade: quantidade ?? this.quantidade,
      especie: especie ?? this.especie,
      marca: marca ?? this.marca,
      numeracao: numeracao ?? this.numeracao,
      pesoLiquido: pesoLiquido ?? this.pesoLiquido,
      pesoBruto: pesoBruto ?? this.pesoBruto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeTransporte.present) {
      map['ID_NFE_TRANSPORTE'] = Variable<int>(idNfeTransporte.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<int>(quantidade.value);
    }
    if (especie.present) {
      map['ESPECIE'] = Variable<String>(especie.value);
    }
    if (marca.present) {
      map['MARCA'] = Variable<String>(marca.value);
    }
    if (numeracao.present) {
      map['NUMERACAO'] = Variable<String>(numeracao.value);
    }
    if (pesoLiquido.present) {
      map['PESO_LIQUIDO'] = Variable<double>(pesoLiquido.value);
    }
    if (pesoBruto.present) {
      map['PESO_BRUTO'] = Variable<double>(pesoBruto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteVolumesCompanion(')
          ..write('id: $id, ')
          ..write('idNfeTransporte: $idNfeTransporte, ')
          ..write('quantidade: $quantidade, ')
          ..write('especie: $especie, ')
          ..write('marca: $marca, ')
          ..write('numeracao: $numeracao, ')
          ..write('pesoLiquido: $pesoLiquido, ')
          ..write('pesoBruto: $pesoBruto')
          ..write(')'))
        .toString();
  }
}

class $NfeTransporteVolumesTable extends NfeTransporteVolumes
    with TableInfo<$NfeTransporteVolumesTable, NfeTransporteVolume> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeTransporteVolumesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeTransporteMeta =
      const VerificationMeta('idNfeTransporte');
  @override
  late final GeneratedColumn<int> idNfeTransporte = GeneratedColumn<int>(
      'ID_NFE_TRANSPORTE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_TRANSPORTE(ID)');
  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  @override
  late final GeneratedColumn<int> quantidade = GeneratedColumn<int>(
      'QUANTIDADE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _especieMeta = const VerificationMeta('especie');
  @override
  late final GeneratedColumn<String> especie = GeneratedColumn<String>(
      'ESPECIE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _marcaMeta = const VerificationMeta('marca');
  @override
  late final GeneratedColumn<String> marca = GeneratedColumn<String>(
      'MARCA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeracaoMeta = const VerificationMeta('numeracao');
  @override
  late final GeneratedColumn<String> numeracao = GeneratedColumn<String>(
      'NUMERACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _pesoLiquidoMeta =
      const VerificationMeta('pesoLiquido');
  @override
  late final GeneratedColumn<double> pesoLiquido = GeneratedColumn<double>(
      'PESO_LIQUIDO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _pesoBrutoMeta = const VerificationMeta('pesoBruto');
  @override
  late final GeneratedColumn<double> pesoBruto = GeneratedColumn<double>(
      'PESO_BRUTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeTransporte,
        quantidade,
        especie,
        marca,
        numeracao,
        pesoLiquido,
        pesoBruto
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_TRANSPORTE_VOLUME';
  @override
  String get actualTableName => 'NFE_TRANSPORTE_VOLUME';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeTransporteVolume> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_TRANSPORTE')) {
      context.handle(
          _idNfeTransporteMeta,
          idNfeTransporte.isAcceptableOrUnknown(
              data['ID_NFE_TRANSPORTE']!, _idNfeTransporteMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE']!, _quantidadeMeta));
    }
    if (data.containsKey('ESPECIE')) {
      context.handle(_especieMeta,
          especie.isAcceptableOrUnknown(data['ESPECIE']!, _especieMeta));
    }
    if (data.containsKey('MARCA')) {
      context.handle(
          _marcaMeta, marca.isAcceptableOrUnknown(data['MARCA']!, _marcaMeta));
    }
    if (data.containsKey('NUMERACAO')) {
      context.handle(_numeracaoMeta,
          numeracao.isAcceptableOrUnknown(data['NUMERACAO']!, _numeracaoMeta));
    }
    if (data.containsKey('PESO_LIQUIDO')) {
      context.handle(
          _pesoLiquidoMeta,
          pesoLiquido.isAcceptableOrUnknown(
              data['PESO_LIQUIDO']!, _pesoLiquidoMeta));
    }
    if (data.containsKey('PESO_BRUTO')) {
      context.handle(_pesoBrutoMeta,
          pesoBruto.isAcceptableOrUnknown(data['PESO_BRUTO']!, _pesoBrutoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeTransporteVolume map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeTransporteVolume.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeTransporteVolumesTable createAlias(String alias) {
    return $NfeTransporteVolumesTable(attachedDatabase, alias);
  }
}

class NfeTransporteVolumeLacre extends DataClass
    implements Insertable<NfeTransporteVolumeLacre> {
  final int? id;
  final int? idNfeTransporteVolume;
  final String? numero;
  NfeTransporteVolumeLacre({this.id, this.idNfeTransporteVolume, this.numero});
  factory NfeTransporteVolumeLacre.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeTransporteVolumeLacre(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeTransporteVolume: ValueSqlType.intType(
          data['${effectivePrefix}ID_NFE_TRANSPORTE_VOLUME']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeTransporteVolume != null) {
      map['ID_NFE_TRANSPORTE_VOLUME'] = Variable<int>(idNfeTransporteVolume);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    return map;
  }

  NfeTransporteVolumeLacresCompanion toCompanion(bool nullToAbsent) {
    return NfeTransporteVolumeLacresCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeTransporteVolume: idNfeTransporteVolume == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeTransporteVolume),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
    );
  }

  factory NfeTransporteVolumeLacre.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeTransporteVolumeLacre(
      id: serializer.fromJson<int?>(json['id']),
      idNfeTransporteVolume:
          serializer.fromJson<int?>(json['idNfeTransporteVolume']),
      numero: serializer.fromJson<String?>(json['numero']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeTransporteVolume': serializer.toJson<int?>(idNfeTransporteVolume),
      'numero': serializer.toJson<String?>(numero),
    };
  }

  NfeTransporteVolumeLacre copyWith(
          {int? id, int? idNfeTransporteVolume, String? numero}) =>
      NfeTransporteVolumeLacre(
        id: id ?? this.id,
        idNfeTransporteVolume:
            idNfeTransporteVolume ?? this.idNfeTransporteVolume,
        numero: numero ?? this.numero,
      );
  @override
  String toString() {
    return (StringBuffer('NfeTransporteVolumeLacre(')
          ..write('id: $id, ')
          ..write('idNfeTransporteVolume: $idNfeTransporteVolume, ')
          ..write('numero: $numero')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeTransporteVolume, numero);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeTransporteVolumeLacre &&
          other.id == this.id &&
          other.idNfeTransporteVolume == this.idNfeTransporteVolume &&
          other.numero == this.numero);
}

class NfeTransporteVolumeLacresCompanion
    extends UpdateCompanion<NfeTransporteVolumeLacre> {
  final Value<int?> id;
  final Value<int?> idNfeTransporteVolume;
  final Value<String?> numero;
  const NfeTransporteVolumeLacresCompanion({
    this.id = const Value.absent(),
    this.idNfeTransporteVolume = const Value.absent(),
    this.numero = const Value.absent(),
  });
  NfeTransporteVolumeLacresCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeTransporteVolume = const Value.absent(),
    this.numero = const Value.absent(),
  });
  static Insertable<NfeTransporteVolumeLacre> custom({
    Expression<int>? id,
    Expression<int>? idNfeTransporteVolume,
    Expression<String>? numero,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeTransporteVolume != null)
        'ID_NFE_TRANSPORTE_VOLUME': idNfeTransporteVolume,
      if (numero != null) 'NUMERO': numero,
    });
  }

  NfeTransporteVolumeLacresCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeTransporteVolume,
      Value<String?>? numero}) {
    return NfeTransporteVolumeLacresCompanion(
      id: id ?? this.id,
      idNfeTransporteVolume:
          idNfeTransporteVolume ?? this.idNfeTransporteVolume,
      numero: numero ?? this.numero,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeTransporteVolume.present) {
      map['ID_NFE_TRANSPORTE_VOLUME'] =
          Variable<int>(idNfeTransporteVolume.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeTransporteVolumeLacresCompanion(')
          ..write('id: $id, ')
          ..write('idNfeTransporteVolume: $idNfeTransporteVolume, ')
          ..write('numero: $numero')
          ..write(')'))
        .toString();
  }
}

class $NfeTransporteVolumeLacresTable extends NfeTransporteVolumeLacres
    with TableInfo<$NfeTransporteVolumeLacresTable, NfeTransporteVolumeLacre> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeTransporteVolumeLacresTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeTransporteVolumeMeta =
      const VerificationMeta('idNfeTransporteVolume');
  @override
  late final GeneratedColumn<int> idNfeTransporteVolume =
      GeneratedColumn<int>('ID_NFE_TRANSPORTE_VOLUME', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES NFE_TRANSPORTE_VOLUME(ID)');
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, idNfeTransporteVolume, numero];
  @override
  String get aliasedName => _alias ?? 'NFE_TRANSPORTE_VOLUME_LACRE';
  @override
  String get actualTableName => 'NFE_TRANSPORTE_VOLUME_LACRE';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeTransporteVolumeLacre> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_TRANSPORTE_VOLUME')) {
      context.handle(
          _idNfeTransporteVolumeMeta,
          idNfeTransporteVolume.isAcceptableOrUnknown(
              data['ID_NFE_TRANSPORTE_VOLUME']!, _idNfeTransporteVolumeMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeTransporteVolumeLacre map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeTransporteVolumeLacre.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeTransporteVolumeLacresTable createAlias(String alias) {
    return $NfeTransporteVolumeLacresTable(attachedDatabase, alias);
  }
}

class PdvCaixa extends DataClass implements Insertable<PdvCaixa> {
  final int? id;
  final String? nome;
  final DateTime? dataCadastro;
  PdvCaixa({this.id, this.nome, this.dataCadastro});
  factory PdvCaixa.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvCaixa(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      dataCadastro: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_CADASTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro);
    }
    return map;
  }

  PdvCaixasCompanion toCompanion(bool nullToAbsent) {
    return PdvCaixasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      dataCadastro: dataCadastro == null && nullToAbsent
          ? const Value.absent()
          : Value(dataCadastro),
    );
  }

  factory PdvCaixa.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvCaixa(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
    };
  }

  PdvCaixa copyWith({int? id, String? nome, DateTime? dataCadastro}) =>
      PdvCaixa(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        dataCadastro: dataCadastro ?? this.dataCadastro,
      );
  @override
  String toString() {
    return (StringBuffer('PdvCaixa(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('dataCadastro: $dataCadastro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, nome, dataCadastro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvCaixa &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.dataCadastro == this.dataCadastro);
}

class PdvCaixasCompanion extends UpdateCompanion<PdvCaixa> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<DateTime?> dataCadastro;
  const PdvCaixasCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.dataCadastro = const Value.absent(),
  });
  PdvCaixasCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.dataCadastro = const Value.absent(),
  });
  static Insertable<PdvCaixa> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<DateTime>? dataCadastro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
    });
  }

  PdvCaixasCompanion copyWith(
      {Value<int?>? id, Value<String?>? nome, Value<DateTime?>? dataCadastro}) {
    return PdvCaixasCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      dataCadastro: dataCadastro ?? this.dataCadastro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (dataCadastro.present) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvCaixasCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('dataCadastro: $dataCadastro')
          ..write(')'))
        .toString();
  }
}

class $PdvCaixasTable extends PdvCaixas
    with TableInfo<$PdvCaixasTable, PdvCaixa> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvCaixasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataCadastroMeta =
      const VerificationMeta('dataCadastro');
  @override
  late final GeneratedColumn<DateTime> dataCadastro =
      GeneratedColumn<DateTime>('DATA_CADASTRO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, nome, dataCadastro];
  @override
  String get aliasedName => _alias ?? 'PDV_CAIXA';
  @override
  String get actualTableName => 'PDV_CAIXA';
  @override
  VerificationContext validateIntegrity(Insertable<PdvCaixa> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('DATA_CADASTRO')) {
      context.handle(
          _dataCadastroMeta,
          dataCadastro.isAcceptableOrUnknown(
              data['DATA_CADASTRO']!, _dataCadastroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvCaixa map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvCaixa.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvCaixasTable createAlias(String alias) {
    return $PdvCaixasTable(attachedDatabase, alias);
  }
}

class PdvConfiguracao extends DataClass implements Insertable<PdvConfiguracao> {
  final int? id;
  final int? idEcfImpressora;
  final int? idPdvCaixa;
  final int? idTributOperacaoFiscalPadrao;
  final String? mensagemCupom;
  final String? portaEcf;
  final String? ipServidor;
  final String? ipSitef;
  final String? tipoTef;
  final String? tituloTelaCaixa;
  final String? caminhoImagensProdutos;
  final String? caminhoImagensMarketing;
  final String? corJanelasInternas;
  final String? marketingAtivo;
  final int? cfopEcf;
  final int? timeoutEcf;
  final int? intervaloEcf;
  final String? descricaoSuprimento;
  final String? descricaoSangria;
  final int? tefTipoGp;
  final int? tefTempoEspera;
  final int? tefEsperaSts;
  final int? tefNumeroVias;
  final int? decimaisQuantidade;
  final int? decimaisValor;
  final int? bitsPorSegundo;
  final int? quantidadeMaximaCartoes;
  final String? pesquisaParte;
  final String? laudo;
  final DateTime? dataAtualizacaoEstoque;
  final String? pedeCpfCupom;
  final int? tipoIntegracao;
  final int? timerIntegracao;
  final String? gavetaSinalInvertido;
  final int? gavetaUtilizacao;
  final String? usaTecladoReduzido;
  final String? modulo;
  final String? plano;
  final double? planoValor;
  final String? planoSituacao;
  final String? reciboFormatoPagina;
  final double? reciboLarguraPagina;
  final double? reciboMargemPagina;
  final String? encerraMovimentoAuto;
  final String? permiteEstoqueNegativo;
  final String? moduloFiscalPrincipal;
  final String? moduloFiscalContingencia;
  final String? acbrMonitorEndereco;
  final int? acbrMonitorPorta;
  PdvConfiguracao(
      {this.id,
      this.idEcfImpressora,
      this.idPdvCaixa,
      this.idTributOperacaoFiscalPadrao,
      this.mensagemCupom,
      this.portaEcf,
      this.ipServidor,
      this.ipSitef,
      this.tipoTef,
      this.tituloTelaCaixa,
      this.caminhoImagensProdutos,
      this.caminhoImagensMarketing,
      this.corJanelasInternas,
      this.marketingAtivo,
      this.cfopEcf,
      this.timeoutEcf,
      this.intervaloEcf,
      this.descricaoSuprimento,
      this.descricaoSangria,
      this.tefTipoGp,
      this.tefTempoEspera,
      this.tefEsperaSts,
      this.tefNumeroVias,
      this.decimaisQuantidade,
      this.decimaisValor,
      this.bitsPorSegundo,
      this.quantidadeMaximaCartoes,
      this.pesquisaParte,
      this.laudo,
      this.dataAtualizacaoEstoque,
      this.pedeCpfCupom,
      this.tipoIntegracao,
      this.timerIntegracao,
      this.gavetaSinalInvertido,
      this.gavetaUtilizacao,
      this.usaTecladoReduzido,
      this.modulo,
      this.plano,
      this.planoValor,
      this.planoSituacao,
      this.reciboFormatoPagina,
      this.reciboLarguraPagina,
      this.reciboMargemPagina,
      this.encerraMovimentoAuto,
      this.permiteEstoqueNegativo,
      this.moduloFiscalPrincipal,
      this.moduloFiscalContingencia,
      this.acbrMonitorEndereco,
      this.acbrMonitorPorta});
  factory PdvConfiguracao.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvConfiguracao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idEcfImpressora: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
      idPdvCaixa: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_CAIXA']),
      idTributOperacaoFiscalPadrao: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_OPERACAO_FISCAL_PADRAO']),
      mensagemCupom: ValueSqlType.stringType(data['${effectivePrefix}MENSAGEM_CUPOM']),
      portaEcf: ValueSqlType.stringType(data['${effectivePrefix}PORTA_ECF']),
      ipServidor: ValueSqlType.stringType(data['${effectivePrefix}IP_SERVIDOR']),
      ipSitef: ValueSqlType.stringType(data['${effectivePrefix}IP_SITEF']),
      tipoTef: ValueSqlType.stringType(data['${effectivePrefix}TIPO_TEF']),
      tituloTelaCaixa: ValueSqlType.stringType(data['${effectivePrefix}TITULO_TELA_CAIXA']),
      caminhoImagensProdutos: ValueSqlType.stringType(
          data['${effectivePrefix}CAMINHO_IMAGENS_PRODUTOS']),
      caminhoImagensMarketing: ValueSqlType.stringType(
          data['${effectivePrefix}CAMINHO_IMAGENS_MARKETING']),
      corJanelasInternas: ValueSqlType.stringType(
          data['${effectivePrefix}COR_JANELAS_INTERNAS']),
      marketingAtivo: ValueSqlType.stringType(data['${effectivePrefix}MARKETING_ATIVO']),
      cfopEcf: ValueSqlType.intType(data['${effectivePrefix}CFOP_ECF']),
      timeoutEcf: ValueSqlType.intType(data['${effectivePrefix}TIMEOUT_ECF']),
      intervaloEcf: ValueSqlType.intType(data['${effectivePrefix}INTERVALO_ECF']),
      descricaoSuprimento: ValueSqlType.stringType(
          data['${effectivePrefix}DESCRICAO_SUPRIMENTO']),
      descricaoSangria: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO_SANGRIA']),
      tefTipoGp: ValueSqlType.intType(data['${effectivePrefix}TEF_TIPO_GP']),
      tefTempoEspera: ValueSqlType.intType(data['${effectivePrefix}TEF_TEMPO_ESPERA']),
      tefEsperaSts: ValueSqlType.intType(data['${effectivePrefix}TEF_ESPERA_STS']),
      tefNumeroVias: ValueSqlType.intType(data['${effectivePrefix}TEF_NUMERO_VIAS']),
      decimaisQuantidade: ValueSqlType.intType(
          data['${effectivePrefix}DECIMAIS_QUANTIDADE']),
      decimaisValor: ValueSqlType.intType(data['${effectivePrefix}DECIMAIS_VALOR']),
      bitsPorSegundo: ValueSqlType.intType(data['${effectivePrefix}BITS_POR_SEGUNDO']),
      quantidadeMaximaCartoes: ValueSqlType.intType(
          data['${effectivePrefix}QUANTIDADE_MAXIMA_CARTOES']),
      pesquisaParte: ValueSqlType.stringType(data['${effectivePrefix}PESQUISA_PARTE']),
      laudo: ValueSqlType.stringType(data['${effectivePrefix}LAUDO']),
      dataAtualizacaoEstoque: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_ATUALIZACAO_ESTOQUE']),
      pedeCpfCupom: ValueSqlType.stringType(data['${effectivePrefix}PEDE_CPF_CUPOM']),
      tipoIntegracao: ValueSqlType.intType(data['${effectivePrefix}TIPO_INTEGRACAO']),
      timerIntegracao: ValueSqlType.intType(data['${effectivePrefix}TIMER_INTEGRACAO']),
      gavetaSinalInvertido: ValueSqlType.stringType(
          data['${effectivePrefix}GAVETA_SINAL_INVERTIDO']),
      gavetaUtilizacao: ValueSqlType.intType(data['${effectivePrefix}GAVETA_UTILIZACAO']),
      usaTecladoReduzido: ValueSqlType.stringType(
          data['${effectivePrefix}USA_TECLADO_REDUZIDO']),
      modulo: ValueSqlType.stringType(data['${effectivePrefix}MODULO']),
      plano: ValueSqlType.stringType(data['${effectivePrefix}PLANO']),
      planoValor: ValueSqlType.doubleType(data['${effectivePrefix}PLANO_VALOR']),
      planoSituacao: ValueSqlType.stringType(data['${effectivePrefix}PLANO_SITUACAO']),
      reciboFormatoPagina: ValueSqlType.stringType(
          data['${effectivePrefix}RECIBO_FORMATO_PAGINA']),
      reciboLarguraPagina: ValueSqlType.doubleType(
          data['${effectivePrefix}RECIBO_LARGURA_PAGINA']),
      reciboMargemPagina: ValueSqlType.doubleType(
          data['${effectivePrefix}RECIBO_MARGEM_PAGINA']),
      encerraMovimentoAuto: ValueSqlType.stringType(
          data['${effectivePrefix}ENCERRA_MOVIMENTO_AUTO']),
      permiteEstoqueNegativo: ValueSqlType.stringType(
          data['${effectivePrefix}PERMITE_ESTOQUE_NEGATIVO']),
      moduloFiscalPrincipal: ValueSqlType.stringType(
          data['${effectivePrefix}MODULO_FISCAL_PRINCIPAL']),
      moduloFiscalContingencia: ValueSqlType.stringType(
          data['${effectivePrefix}MODULO_FISCAL_CONTINGENCIA']),
      acbrMonitorEndereco: ValueSqlType.stringType(
          data['${effectivePrefix}ACBR_MONITOR_ENDERECO']),
      acbrMonitorPorta: ValueSqlType.intType(
          data['${effectivePrefix}ACBR_MONITOR_PORTA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfImpressora != null) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora);
    }
    if (!nullToAbsent || idPdvCaixa != null) {
      map['ID_PDV_CAIXA'] = Variable<int>(idPdvCaixa);
    }
    if (!nullToAbsent || idTributOperacaoFiscalPadrao != null) {
      map['ID_TRIBUT_OPERACAO_FISCAL_PADRAO'] =
          Variable<int>(idTributOperacaoFiscalPadrao);
    }
    if (!nullToAbsent || mensagemCupom != null) {
      map['MENSAGEM_CUPOM'] = Variable<String>(mensagemCupom);
    }
    if (!nullToAbsent || portaEcf != null) {
      map['PORTA_ECF'] = Variable<String>(portaEcf);
    }
    if (!nullToAbsent || ipServidor != null) {
      map['IP_SERVIDOR'] = Variable<String>(ipServidor);
    }
    if (!nullToAbsent || ipSitef != null) {
      map['IP_SITEF'] = Variable<String>(ipSitef);
    }
    if (!nullToAbsent || tipoTef != null) {
      map['TIPO_TEF'] = Variable<String>(tipoTef);
    }
    if (!nullToAbsent || tituloTelaCaixa != null) {
      map['TITULO_TELA_CAIXA'] = Variable<String>(tituloTelaCaixa);
    }
    if (!nullToAbsent || caminhoImagensProdutos != null) {
      map['CAMINHO_IMAGENS_PRODUTOS'] =
          Variable<String>(caminhoImagensProdutos);
    }
    if (!nullToAbsent || caminhoImagensMarketing != null) {
      map['CAMINHO_IMAGENS_MARKETING'] =
          Variable<String>(caminhoImagensMarketing);
    }
    if (!nullToAbsent || corJanelasInternas != null) {
      map['COR_JANELAS_INTERNAS'] = Variable<String>(corJanelasInternas);
    }
    if (!nullToAbsent || marketingAtivo != null) {
      map['MARKETING_ATIVO'] = Variable<String>(marketingAtivo);
    }
    if (!nullToAbsent || cfopEcf != null) {
      map['CFOP_ECF'] = Variable<int>(cfopEcf);
    }
    if (!nullToAbsent || timeoutEcf != null) {
      map['TIMEOUT_ECF'] = Variable<int>(timeoutEcf);
    }
    if (!nullToAbsent || intervaloEcf != null) {
      map['INTERVALO_ECF'] = Variable<int>(intervaloEcf);
    }
    if (!nullToAbsent || descricaoSuprimento != null) {
      map['DESCRICAO_SUPRIMENTO'] = Variable<String>(descricaoSuprimento);
    }
    if (!nullToAbsent || descricaoSangria != null) {
      map['DESCRICAO_SANGRIA'] = Variable<String>(descricaoSangria);
    }
    if (!nullToAbsent || tefTipoGp != null) {
      map['TEF_TIPO_GP'] = Variable<int>(tefTipoGp);
    }
    if (!nullToAbsent || tefTempoEspera != null) {
      map['TEF_TEMPO_ESPERA'] = Variable<int>(tefTempoEspera);
    }
    if (!nullToAbsent || tefEsperaSts != null) {
      map['TEF_ESPERA_STS'] = Variable<int>(tefEsperaSts);
    }
    if (!nullToAbsent || tefNumeroVias != null) {
      map['TEF_NUMERO_VIAS'] = Variable<int>(tefNumeroVias);
    }
    if (!nullToAbsent || decimaisQuantidade != null) {
      map['DECIMAIS_QUANTIDADE'] = Variable<int>(decimaisQuantidade);
    }
    if (!nullToAbsent || decimaisValor != null) {
      map['DECIMAIS_VALOR'] = Variable<int>(decimaisValor);
    }
    if (!nullToAbsent || bitsPorSegundo != null) {
      map['BITS_POR_SEGUNDO'] = Variable<int>(bitsPorSegundo);
    }
    if (!nullToAbsent || quantidadeMaximaCartoes != null) {
      map['QUANTIDADE_MAXIMA_CARTOES'] =
          Variable<int>(quantidadeMaximaCartoes);
    }
    if (!nullToAbsent || pesquisaParte != null) {
      map['PESQUISA_PARTE'] = Variable<String>(pesquisaParte);
    }
    if (!nullToAbsent || laudo != null) {
      map['LAUDO'] = Variable<String>(laudo);
    }
    if (!nullToAbsent || dataAtualizacaoEstoque != null) {
      map['DATA_ATUALIZACAO_ESTOQUE'] =
          Variable<DateTime>(dataAtualizacaoEstoque);
    }
    if (!nullToAbsent || pedeCpfCupom != null) {
      map['PEDE_CPF_CUPOM'] = Variable<String>(pedeCpfCupom);
    }
    if (!nullToAbsent || tipoIntegracao != null) {
      map['TIPO_INTEGRACAO'] = Variable<int>(tipoIntegracao);
    }
    if (!nullToAbsent || timerIntegracao != null) {
      map['TIMER_INTEGRACAO'] = Variable<int>(timerIntegracao);
    }
    if (!nullToAbsent || gavetaSinalInvertido != null) {
      map['GAVETA_SINAL_INVERTIDO'] = Variable<String>(gavetaSinalInvertido);
    }
    if (!nullToAbsent || gavetaUtilizacao != null) {
      map['GAVETA_UTILIZACAO'] = Variable<int>(gavetaUtilizacao);
    }
    if (!nullToAbsent || usaTecladoReduzido != null) {
      map['USA_TECLADO_REDUZIDO'] = Variable<String>(usaTecladoReduzido);
    }
    if (!nullToAbsent || modulo != null) {
      map['MODULO'] = Variable<String>(modulo);
    }
    if (!nullToAbsent || plano != null) {
      map['PLANO'] = Variable<String>(plano);
    }
    if (!nullToAbsent || planoValor != null) {
      map['PLANO_VALOR'] = Variable<double>(planoValor);
    }
    if (!nullToAbsent || planoSituacao != null) {
      map['PLANO_SITUACAO'] = Variable<String>(planoSituacao);
    }
    if (!nullToAbsent || reciboFormatoPagina != null) {
      map['RECIBO_FORMATO_PAGINA'] = Variable<String>(reciboFormatoPagina);
    }
    if (!nullToAbsent || reciboLarguraPagina != null) {
      map['RECIBO_LARGURA_PAGINA'] = Variable<double>(reciboLarguraPagina);
    }
    if (!nullToAbsent || reciboMargemPagina != null) {
      map['RECIBO_MARGEM_PAGINA'] = Variable<double>(reciboMargemPagina);
    }
    if (!nullToAbsent || encerraMovimentoAuto != null) {
      map['ENCERRA_MOVIMENTO_AUTO'] = Variable<String>(encerraMovimentoAuto);
    }
    if (!nullToAbsent || permiteEstoqueNegativo != null) {
      map['PERMITE_ESTOQUE_NEGATIVO'] =
          Variable<String>(permiteEstoqueNegativo);
    }
    if (!nullToAbsent || moduloFiscalPrincipal != null) {
      map['MODULO_FISCAL_PRINCIPAL'] = Variable<String>(moduloFiscalPrincipal);
    }
    if (!nullToAbsent || moduloFiscalContingencia != null) {
      map['MODULO_FISCAL_CONTINGENCIA'] =
          Variable<String>(moduloFiscalContingencia);
    }
    if (!nullToAbsent || acbrMonitorEndereco != null) {
      map['ACBR_MONITOR_ENDERECO'] = Variable<String>(acbrMonitorEndereco);
    }
    if (!nullToAbsent || acbrMonitorPorta != null) {
      map['ACBR_MONITOR_PORTA'] = Variable<int>(acbrMonitorPorta);
    }
    return map;
  }

  PdvConfiguracaosCompanion toCompanion(bool nullToAbsent) {
    return PdvConfiguracaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfImpressora: idEcfImpressora == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfImpressora),
      idPdvCaixa: idPdvCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvCaixa),
      idTributOperacaoFiscalPadrao:
          idTributOperacaoFiscalPadrao == null && nullToAbsent
              ? const Value.absent()
              : Value(idTributOperacaoFiscalPadrao),
      mensagemCupom: mensagemCupom == null && nullToAbsent
          ? const Value.absent()
          : Value(mensagemCupom),
      portaEcf: portaEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(portaEcf),
      ipServidor: ipServidor == null && nullToAbsent
          ? const Value.absent()
          : Value(ipServidor),
      ipSitef: ipSitef == null && nullToAbsent
          ? const Value.absent()
          : Value(ipSitef),
      tipoTef: tipoTef == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoTef),
      tituloTelaCaixa: tituloTelaCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(tituloTelaCaixa),
      caminhoImagensProdutos: caminhoImagensProdutos == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoImagensProdutos),
      caminhoImagensMarketing: caminhoImagensMarketing == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoImagensMarketing),
      corJanelasInternas: corJanelasInternas == null && nullToAbsent
          ? const Value.absent()
          : Value(corJanelasInternas),
      marketingAtivo: marketingAtivo == null && nullToAbsent
          ? const Value.absent()
          : Value(marketingAtivo),
      cfopEcf: cfopEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(cfopEcf),
      timeoutEcf: timeoutEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(timeoutEcf),
      intervaloEcf: intervaloEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(intervaloEcf),
      descricaoSuprimento: descricaoSuprimento == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoSuprimento),
      descricaoSangria: descricaoSangria == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoSangria),
      tefTipoGp: tefTipoGp == null && nullToAbsent
          ? const Value.absent()
          : Value(tefTipoGp),
      tefTempoEspera: tefTempoEspera == null && nullToAbsent
          ? const Value.absent()
          : Value(tefTempoEspera),
      tefEsperaSts: tefEsperaSts == null && nullToAbsent
          ? const Value.absent()
          : Value(tefEsperaSts),
      tefNumeroVias: tefNumeroVias == null && nullToAbsent
          ? const Value.absent()
          : Value(tefNumeroVias),
      decimaisQuantidade: decimaisQuantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(decimaisQuantidade),
      decimaisValor: decimaisValor == null && nullToAbsent
          ? const Value.absent()
          : Value(decimaisValor),
      bitsPorSegundo: bitsPorSegundo == null && nullToAbsent
          ? const Value.absent()
          : Value(bitsPorSegundo),
      quantidadeMaximaCartoes: quantidadeMaximaCartoes == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeMaximaCartoes),
      pesquisaParte: pesquisaParte == null && nullToAbsent
          ? const Value.absent()
          : Value(pesquisaParte),
      laudo:
          laudo == null && nullToAbsent ? const Value.absent() : Value(laudo),
      dataAtualizacaoEstoque: dataAtualizacaoEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(dataAtualizacaoEstoque),
      pedeCpfCupom: pedeCpfCupom == null && nullToAbsent
          ? const Value.absent()
          : Value(pedeCpfCupom),
      tipoIntegracao: tipoIntegracao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoIntegracao),
      timerIntegracao: timerIntegracao == null && nullToAbsent
          ? const Value.absent()
          : Value(timerIntegracao),
      gavetaSinalInvertido: gavetaSinalInvertido == null && nullToAbsent
          ? const Value.absent()
          : Value(gavetaSinalInvertido),
      gavetaUtilizacao: gavetaUtilizacao == null && nullToAbsent
          ? const Value.absent()
          : Value(gavetaUtilizacao),
      usaTecladoReduzido: usaTecladoReduzido == null && nullToAbsent
          ? const Value.absent()
          : Value(usaTecladoReduzido),
      modulo:
          modulo == null && nullToAbsent ? const Value.absent() : Value(modulo),
      plano:
          plano == null && nullToAbsent ? const Value.absent() : Value(plano),
      planoValor: planoValor == null && nullToAbsent
          ? const Value.absent()
          : Value(planoValor),
      planoSituacao: planoSituacao == null && nullToAbsent
          ? const Value.absent()
          : Value(planoSituacao),
      reciboFormatoPagina: reciboFormatoPagina == null && nullToAbsent
          ? const Value.absent()
          : Value(reciboFormatoPagina),
      reciboLarguraPagina: reciboLarguraPagina == null && nullToAbsent
          ? const Value.absent()
          : Value(reciboLarguraPagina),
      reciboMargemPagina: reciboMargemPagina == null && nullToAbsent
          ? const Value.absent()
          : Value(reciboMargemPagina),
      encerraMovimentoAuto: encerraMovimentoAuto == null && nullToAbsent
          ? const Value.absent()
          : Value(encerraMovimentoAuto),
      permiteEstoqueNegativo: permiteEstoqueNegativo == null && nullToAbsent
          ? const Value.absent()
          : Value(permiteEstoqueNegativo),
      moduloFiscalPrincipal: moduloFiscalPrincipal == null && nullToAbsent
          ? const Value.absent()
          : Value(moduloFiscalPrincipal),
      moduloFiscalContingencia: moduloFiscalContingencia == null && nullToAbsent
          ? const Value.absent()
          : Value(moduloFiscalContingencia),
      acbrMonitorEndereco: acbrMonitorEndereco == null && nullToAbsent
          ? const Value.absent()
          : Value(acbrMonitorEndereco),
      acbrMonitorPorta: acbrMonitorPorta == null && nullToAbsent
          ? const Value.absent()
          : Value(acbrMonitorPorta),
    );
  }

  factory PdvConfiguracao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvConfiguracao(
      id: serializer.fromJson<int?>(json['id']),
      idEcfImpressora: serializer.fromJson<int?>(json['idEcfImpressora']),
      idPdvCaixa: serializer.fromJson<int?>(json['idPdvCaixa']),
      idTributOperacaoFiscalPadrao:
          serializer.fromJson<int?>(json['idTributOperacaoFiscalPadrao']),
      mensagemCupom: serializer.fromJson<String?>(json['mensagemCupom']),
      portaEcf: serializer.fromJson<String?>(json['portaEcf']),
      ipServidor: serializer.fromJson<String?>(json['ipServidor']),
      ipSitef: serializer.fromJson<String?>(json['ipSitef']),
      tipoTef: serializer.fromJson<String?>(json['tipoTef']),
      tituloTelaCaixa: serializer.fromJson<String?>(json['tituloTelaCaixa']),
      caminhoImagensProdutos:
          serializer.fromJson<String?>(json['caminhoImagensProdutos']),
      caminhoImagensMarketing:
          serializer.fromJson<String?>(json['caminhoImagensMarketing']),
      corJanelasInternas:
          serializer.fromJson<String?>(json['corJanelasInternas']),
      marketingAtivo: serializer.fromJson<String?>(json['marketingAtivo']),
      cfopEcf: serializer.fromJson<int?>(json['cfopEcf']),
      timeoutEcf: serializer.fromJson<int?>(json['timeoutEcf']),
      intervaloEcf: serializer.fromJson<int?>(json['intervaloEcf']),
      descricaoSuprimento:
          serializer.fromJson<String?>(json['descricaoSuprimento']),
      descricaoSangria: serializer.fromJson<String?>(json['descricaoSangria']),
      tefTipoGp: serializer.fromJson<int?>(json['tefTipoGp']),
      tefTempoEspera: serializer.fromJson<int?>(json['tefTempoEspera']),
      tefEsperaSts: serializer.fromJson<int?>(json['tefEsperaSts']),
      tefNumeroVias: serializer.fromJson<int?>(json['tefNumeroVias']),
      decimaisQuantidade: serializer.fromJson<int?>(json['decimaisQuantidade']),
      decimaisValor: serializer.fromJson<int?>(json['decimaisValor']),
      bitsPorSegundo: serializer.fromJson<int?>(json['bitsPorSegundo']),
      quantidadeMaximaCartoes:
          serializer.fromJson<int?>(json['quantidadeMaximaCartoes']),
      pesquisaParte: serializer.fromJson<String?>(json['pesquisaParte']),
      laudo: serializer.fromJson<String?>(json['laudo']),
      dataAtualizacaoEstoque:
          serializer.fromJson<DateTime?>(json['dataAtualizacaoEstoque']),
      pedeCpfCupom: serializer.fromJson<String?>(json['pedeCpfCupom']),
      tipoIntegracao: serializer.fromJson<int?>(json['tipoIntegracao']),
      timerIntegracao: serializer.fromJson<int?>(json['timerIntegracao']),
      gavetaSinalInvertido:
          serializer.fromJson<String?>(json['gavetaSinalInvertido']),
      gavetaUtilizacao: serializer.fromJson<int?>(json['gavetaUtilizacao']),
      usaTecladoReduzido:
          serializer.fromJson<String?>(json['usaTecladoReduzido']),
      modulo: serializer.fromJson<String?>(json['modulo']),
      plano: serializer.fromJson<String?>(json['plano']),
      planoValor: serializer.fromJson<double?>(json['planoValor']),
      planoSituacao: serializer.fromJson<String?>(json['planoSituacao']),
      reciboFormatoPagina:
          serializer.fromJson<String?>(json['reciboFormatoPagina']),
      reciboLarguraPagina:
          serializer.fromJson<double?>(json['reciboLarguraPagina']),
      reciboMargemPagina:
          serializer.fromJson<double?>(json['reciboMargemPagina']),
      encerraMovimentoAuto:
          serializer.fromJson<String?>(json['encerraMovimentoAuto']),
      permiteEstoqueNegativo:
          serializer.fromJson<String?>(json['permiteEstoqueNegativo']),
      moduloFiscalPrincipal:
          serializer.fromJson<String?>(json['moduloFiscalPrincipal']),
      moduloFiscalContingencia:
          serializer.fromJson<String?>(json['moduloFiscalContingencia']),
      acbrMonitorEndereco:
          serializer.fromJson<String?>(json['acbrMonitorEndereco']),
      acbrMonitorPorta: serializer.fromJson<int?>(json['acbrMonitorPorta']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idEcfImpressora': serializer.toJson<int?>(idEcfImpressora),
      'idPdvCaixa': serializer.toJson<int?>(idPdvCaixa),
      'idTributOperacaoFiscalPadrao':
          serializer.toJson<int?>(idTributOperacaoFiscalPadrao),
      'mensagemCupom': serializer.toJson<String?>(mensagemCupom),
      'portaEcf': serializer.toJson<String?>(portaEcf),
      'ipServidor': serializer.toJson<String?>(ipServidor),
      'ipSitef': serializer.toJson<String?>(ipSitef),
      'tipoTef': serializer.toJson<String?>(tipoTef),
      'tituloTelaCaixa': serializer.toJson<String?>(tituloTelaCaixa),
      'caminhoImagensProdutos':
          serializer.toJson<String?>(caminhoImagensProdutos),
      'caminhoImagensMarketing':
          serializer.toJson<String?>(caminhoImagensMarketing),
      'corJanelasInternas': serializer.toJson<String?>(corJanelasInternas),
      'marketingAtivo': serializer.toJson<String?>(marketingAtivo),
      'cfopEcf': serializer.toJson<int?>(cfopEcf),
      'timeoutEcf': serializer.toJson<int?>(timeoutEcf),
      'intervaloEcf': serializer.toJson<int?>(intervaloEcf),
      'descricaoSuprimento': serializer.toJson<String?>(descricaoSuprimento),
      'descricaoSangria': serializer.toJson<String?>(descricaoSangria),
      'tefTipoGp': serializer.toJson<int?>(tefTipoGp),
      'tefTempoEspera': serializer.toJson<int?>(tefTempoEspera),
      'tefEsperaSts': serializer.toJson<int?>(tefEsperaSts),
      'tefNumeroVias': serializer.toJson<int?>(tefNumeroVias),
      'decimaisQuantidade': serializer.toJson<int?>(decimaisQuantidade),
      'decimaisValor': serializer.toJson<int?>(decimaisValor),
      'bitsPorSegundo': serializer.toJson<int?>(bitsPorSegundo),
      'quantidadeMaximaCartoes':
          serializer.toJson<int?>(quantidadeMaximaCartoes),
      'pesquisaParte': serializer.toJson<String?>(pesquisaParte),
      'laudo': serializer.toJson<String?>(laudo),
      'dataAtualizacaoEstoque':
          serializer.toJson<DateTime?>(dataAtualizacaoEstoque),
      'pedeCpfCupom': serializer.toJson<String?>(pedeCpfCupom),
      'tipoIntegracao': serializer.toJson<int?>(tipoIntegracao),
      'timerIntegracao': serializer.toJson<int?>(timerIntegracao),
      'gavetaSinalInvertido': serializer.toJson<String?>(gavetaSinalInvertido),
      'gavetaUtilizacao': serializer.toJson<int?>(gavetaUtilizacao),
      'usaTecladoReduzido': serializer.toJson<String?>(usaTecladoReduzido),
      'modulo': serializer.toJson<String?>(modulo),
      'plano': serializer.toJson<String?>(plano),
      'planoValor': serializer.toJson<double?>(planoValor),
      'planoSituacao': serializer.toJson<String?>(planoSituacao),
      'reciboFormatoPagina': serializer.toJson<String?>(reciboFormatoPagina),
      'reciboLarguraPagina': serializer.toJson<double?>(reciboLarguraPagina),
      'reciboMargemPagina': serializer.toJson<double?>(reciboMargemPagina),
      'encerraMovimentoAuto': serializer.toJson<String?>(encerraMovimentoAuto),
      'permiteEstoqueNegativo':
          serializer.toJson<String?>(permiteEstoqueNegativo),
      'moduloFiscalPrincipal':
          serializer.toJson<String?>(moduloFiscalPrincipal),
      'moduloFiscalContingencia':
          serializer.toJson<String?>(moduloFiscalContingencia),
      'acbrMonitorEndereco': serializer.toJson<String?>(acbrMonitorEndereco),
      'acbrMonitorPorta': serializer.toJson<int?>(acbrMonitorPorta),
    };
  }

  PdvConfiguracao copyWith(
          {int? id,
          int? idEcfImpressora,
          int? idPdvCaixa,
          int? idTributOperacaoFiscalPadrao,
          String? mensagemCupom,
          String? portaEcf,
          String? ipServidor,
          String? ipSitef,
          String? tipoTef,
          String? tituloTelaCaixa,
          String? caminhoImagensProdutos,
          String? caminhoImagensMarketing,
          String? corJanelasInternas,
          String? marketingAtivo,
          int? cfopEcf,
          int? timeoutEcf,
          int? intervaloEcf,
          String? descricaoSuprimento,
          String? descricaoSangria,
          int? tefTipoGp,
          int? tefTempoEspera,
          int? tefEsperaSts,
          int? tefNumeroVias,
          int? decimaisQuantidade,
          int? decimaisValor,
          int? bitsPorSegundo,
          int? quantidadeMaximaCartoes,
          String? pesquisaParte,
          String? laudo,
          DateTime? dataAtualizacaoEstoque,
          String? pedeCpfCupom,
          int? tipoIntegracao,
          int? timerIntegracao,
          String? gavetaSinalInvertido,
          int? gavetaUtilizacao,
          String? usaTecladoReduzido,
          String? modulo,
          String? plano,
          double? planoValor,
          String? planoSituacao,
          String? reciboFormatoPagina,
          double? reciboLarguraPagina,
          double? reciboMargemPagina,
          String? encerraMovimentoAuto,
          String? permiteEstoqueNegativo,
          String? moduloFiscalPrincipal,
          String? moduloFiscalContingencia,
          String? acbrMonitorEndereco,
          int? acbrMonitorPorta}) =>
      PdvConfiguracao(
        id: id ?? this.id,
        idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
        idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
        idTributOperacaoFiscalPadrao:
            idTributOperacaoFiscalPadrao ?? this.idTributOperacaoFiscalPadrao,
        mensagemCupom: mensagemCupom ?? this.mensagemCupom,
        portaEcf: portaEcf ?? this.portaEcf,
        ipServidor: ipServidor ?? this.ipServidor,
        ipSitef: ipSitef ?? this.ipSitef,
        tipoTef: tipoTef ?? this.tipoTef,
        tituloTelaCaixa: tituloTelaCaixa ?? this.tituloTelaCaixa,
        caminhoImagensProdutos:
            caminhoImagensProdutos ?? this.caminhoImagensProdutos,
        caminhoImagensMarketing:
            caminhoImagensMarketing ?? this.caminhoImagensMarketing,
        corJanelasInternas: corJanelasInternas ?? this.corJanelasInternas,
        marketingAtivo: marketingAtivo ?? this.marketingAtivo,
        cfopEcf: cfopEcf ?? this.cfopEcf,
        timeoutEcf: timeoutEcf ?? this.timeoutEcf,
        intervaloEcf: intervaloEcf ?? this.intervaloEcf,
        descricaoSuprimento: descricaoSuprimento ?? this.descricaoSuprimento,
        descricaoSangria: descricaoSangria ?? this.descricaoSangria,
        tefTipoGp: tefTipoGp ?? this.tefTipoGp,
        tefTempoEspera: tefTempoEspera ?? this.tefTempoEspera,
        tefEsperaSts: tefEsperaSts ?? this.tefEsperaSts,
        tefNumeroVias: tefNumeroVias ?? this.tefNumeroVias,
        decimaisQuantidade: decimaisQuantidade ?? this.decimaisQuantidade,
        decimaisValor: decimaisValor ?? this.decimaisValor,
        bitsPorSegundo: bitsPorSegundo ?? this.bitsPorSegundo,
        quantidadeMaximaCartoes:
            quantidadeMaximaCartoes ?? this.quantidadeMaximaCartoes,
        pesquisaParte: pesquisaParte ?? this.pesquisaParte,
        laudo: laudo ?? this.laudo,
        dataAtualizacaoEstoque:
            dataAtualizacaoEstoque ?? this.dataAtualizacaoEstoque,
        pedeCpfCupom: pedeCpfCupom ?? this.pedeCpfCupom,
        tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
        timerIntegracao: timerIntegracao ?? this.timerIntegracao,
        gavetaSinalInvertido: gavetaSinalInvertido ?? this.gavetaSinalInvertido,
        gavetaUtilizacao: gavetaUtilizacao ?? this.gavetaUtilizacao,
        usaTecladoReduzido: usaTecladoReduzido ?? this.usaTecladoReduzido,
        modulo: modulo ?? this.modulo,
        plano: plano ?? this.plano,
        planoValor: planoValor ?? this.planoValor,
        planoSituacao: planoSituacao ?? this.planoSituacao,
        reciboFormatoPagina: reciboFormatoPagina ?? this.reciboFormatoPagina,
        reciboLarguraPagina: reciboLarguraPagina ?? this.reciboLarguraPagina,
        reciboMargemPagina: reciboMargemPagina ?? this.reciboMargemPagina,
        encerraMovimentoAuto: encerraMovimentoAuto ?? this.encerraMovimentoAuto,
        permiteEstoqueNegativo:
            permiteEstoqueNegativo ?? this.permiteEstoqueNegativo,
        moduloFiscalPrincipal:
            moduloFiscalPrincipal ?? this.moduloFiscalPrincipal,
        moduloFiscalContingencia:
            moduloFiscalContingencia ?? this.moduloFiscalContingencia,
        acbrMonitorEndereco: acbrMonitorEndereco ?? this.acbrMonitorEndereco,
        acbrMonitorPorta: acbrMonitorPorta ?? this.acbrMonitorPorta,
      );
  @override
  String toString() {
    return (StringBuffer('PdvConfiguracao(')
          ..write('id: $id, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idPdvCaixa: $idPdvCaixa, ')
          ..write(
              'idTributOperacaoFiscalPadrao: $idTributOperacaoFiscalPadrao, ')
          ..write('mensagemCupom: $mensagemCupom, ')
          ..write('portaEcf: $portaEcf, ')
          ..write('ipServidor: $ipServidor, ')
          ..write('ipSitef: $ipSitef, ')
          ..write('tipoTef: $tipoTef, ')
          ..write('tituloTelaCaixa: $tituloTelaCaixa, ')
          ..write('caminhoImagensProdutos: $caminhoImagensProdutos, ')
          ..write('caminhoImagensMarketing: $caminhoImagensMarketing, ')
          ..write('corJanelasInternas: $corJanelasInternas, ')
          ..write('marketingAtivo: $marketingAtivo, ')
          ..write('cfopEcf: $cfopEcf, ')
          ..write('timeoutEcf: $timeoutEcf, ')
          ..write('intervaloEcf: $intervaloEcf, ')
          ..write('descricaoSuprimento: $descricaoSuprimento, ')
          ..write('descricaoSangria: $descricaoSangria, ')
          ..write('tefTipoGp: $tefTipoGp, ')
          ..write('tefTempoEspera: $tefTempoEspera, ')
          ..write('tefEsperaSts: $tefEsperaSts, ')
          ..write('tefNumeroVias: $tefNumeroVias, ')
          ..write('decimaisQuantidade: $decimaisQuantidade, ')
          ..write('decimaisValor: $decimaisValor, ')
          ..write('bitsPorSegundo: $bitsPorSegundo, ')
          ..write('quantidadeMaximaCartoes: $quantidadeMaximaCartoes, ')
          ..write('pesquisaParte: $pesquisaParte, ')
          ..write('laudo: $laudo, ')
          ..write('dataAtualizacaoEstoque: $dataAtualizacaoEstoque, ')
          ..write('pedeCpfCupom: $pedeCpfCupom, ')
          ..write('tipoIntegracao: $tipoIntegracao, ')
          ..write('timerIntegracao: $timerIntegracao, ')
          ..write('gavetaSinalInvertido: $gavetaSinalInvertido, ')
          ..write('gavetaUtilizacao: $gavetaUtilizacao, ')
          ..write('usaTecladoReduzido: $usaTecladoReduzido, ')
          ..write('modulo: $modulo, ')
          ..write('plano: $plano, ')
          ..write('planoValor: $planoValor, ')
          ..write('planoSituacao: $planoSituacao, ')
          ..write('reciboFormatoPagina: $reciboFormatoPagina, ')
          ..write('reciboLarguraPagina: $reciboLarguraPagina, ')
          ..write('reciboMargemPagina: $reciboMargemPagina, ')
          ..write('encerraMovimentoAuto: $encerraMovimentoAuto, ')
          ..write('permiteEstoqueNegativo: $permiteEstoqueNegativo, ')
          ..write('moduloFiscalPrincipal: $moduloFiscalPrincipal, ')
          ..write('moduloFiscalContingencia: $moduloFiscalContingencia, ')
          ..write('acbrMonitorEndereco: $acbrMonitorEndereco, ')
          ..write('acbrMonitorPorta: $acbrMonitorPorta')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idEcfImpressora,
        idPdvCaixa,
        idTributOperacaoFiscalPadrao,
        mensagemCupom,
        portaEcf,
        ipServidor,
        ipSitef,
        tipoTef,
        tituloTelaCaixa,
        caminhoImagensProdutos,
        caminhoImagensMarketing,
        corJanelasInternas,
        marketingAtivo,
        cfopEcf,
        timeoutEcf,
        intervaloEcf,
        descricaoSuprimento,
        descricaoSangria,
        tefTipoGp,
        tefTempoEspera,
        tefEsperaSts,
        tefNumeroVias,
        decimaisQuantidade,
        decimaisValor,
        bitsPorSegundo,
        quantidadeMaximaCartoes,
        pesquisaParte,
        laudo,
        dataAtualizacaoEstoque,
        pedeCpfCupom,
        tipoIntegracao,
        timerIntegracao,
        gavetaSinalInvertido,
        gavetaUtilizacao,
        usaTecladoReduzido,
        modulo,
        plano,
        planoValor,
        planoSituacao,
        reciboFormatoPagina,
        reciboLarguraPagina,
        reciboMargemPagina,
        encerraMovimentoAuto,
        permiteEstoqueNegativo,
        moduloFiscalPrincipal,
        moduloFiscalContingencia,
        acbrMonitorEndereco,
        acbrMonitorPorta
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvConfiguracao &&
          other.id == this.id &&
          other.idEcfImpressora == this.idEcfImpressora &&
          other.idPdvCaixa == this.idPdvCaixa &&
          other.idTributOperacaoFiscalPadrao ==
              this.idTributOperacaoFiscalPadrao &&
          other.mensagemCupom == this.mensagemCupom &&
          other.portaEcf == this.portaEcf &&
          other.ipServidor == this.ipServidor &&
          other.ipSitef == this.ipSitef &&
          other.tipoTef == this.tipoTef &&
          other.tituloTelaCaixa == this.tituloTelaCaixa &&
          other.caminhoImagensProdutos == this.caminhoImagensProdutos &&
          other.caminhoImagensMarketing == this.caminhoImagensMarketing &&
          other.corJanelasInternas == this.corJanelasInternas &&
          other.marketingAtivo == this.marketingAtivo &&
          other.cfopEcf == this.cfopEcf &&
          other.timeoutEcf == this.timeoutEcf &&
          other.intervaloEcf == this.intervaloEcf &&
          other.descricaoSuprimento == this.descricaoSuprimento &&
          other.descricaoSangria == this.descricaoSangria &&
          other.tefTipoGp == this.tefTipoGp &&
          other.tefTempoEspera == this.tefTempoEspera &&
          other.tefEsperaSts == this.tefEsperaSts &&
          other.tefNumeroVias == this.tefNumeroVias &&
          other.decimaisQuantidade == this.decimaisQuantidade &&
          other.decimaisValor == this.decimaisValor &&
          other.bitsPorSegundo == this.bitsPorSegundo &&
          other.quantidadeMaximaCartoes == this.quantidadeMaximaCartoes &&
          other.pesquisaParte == this.pesquisaParte &&
          other.laudo == this.laudo &&
          other.dataAtualizacaoEstoque == this.dataAtualizacaoEstoque &&
          other.pedeCpfCupom == this.pedeCpfCupom &&
          other.tipoIntegracao == this.tipoIntegracao &&
          other.timerIntegracao == this.timerIntegracao &&
          other.gavetaSinalInvertido == this.gavetaSinalInvertido &&
          other.gavetaUtilizacao == this.gavetaUtilizacao &&
          other.usaTecladoReduzido == this.usaTecladoReduzido &&
          other.modulo == this.modulo &&
          other.plano == this.plano &&
          other.planoValor == this.planoValor &&
          other.planoSituacao == this.planoSituacao &&
          other.reciboFormatoPagina == this.reciboFormatoPagina &&
          other.reciboLarguraPagina == this.reciboLarguraPagina &&
          other.reciboMargemPagina == this.reciboMargemPagina &&
          other.encerraMovimentoAuto == this.encerraMovimentoAuto &&
          other.permiteEstoqueNegativo == this.permiteEstoqueNegativo &&
          other.moduloFiscalPrincipal == this.moduloFiscalPrincipal &&
          other.moduloFiscalContingencia == this.moduloFiscalContingencia &&
          other.acbrMonitorEndereco == this.acbrMonitorEndereco &&
          other.acbrMonitorPorta == this.acbrMonitorPorta);
}

class PdvConfiguracaosCompanion extends UpdateCompanion<PdvConfiguracao> {
  final Value<int?> id;
  final Value<int?> idEcfImpressora;
  final Value<int?> idPdvCaixa;
  final Value<int?> idTributOperacaoFiscalPadrao;
  final Value<String?> mensagemCupom;
  final Value<String?> portaEcf;
  final Value<String?> ipServidor;
  final Value<String?> ipSitef;
  final Value<String?> tipoTef;
  final Value<String?> tituloTelaCaixa;
  final Value<String?> caminhoImagensProdutos;
  final Value<String?> caminhoImagensMarketing;
  final Value<String?> corJanelasInternas;
  final Value<String?> marketingAtivo;
  final Value<int?> cfopEcf;
  final Value<int?> timeoutEcf;
  final Value<int?> intervaloEcf;
  final Value<String?> descricaoSuprimento;
  final Value<String?> descricaoSangria;
  final Value<int?> tefTipoGp;
  final Value<int?> tefTempoEspera;
  final Value<int?> tefEsperaSts;
  final Value<int?> tefNumeroVias;
  final Value<int?> decimaisQuantidade;
  final Value<int?> decimaisValor;
  final Value<int?> bitsPorSegundo;
  final Value<int?> quantidadeMaximaCartoes;
  final Value<String?> pesquisaParte;
  final Value<String?> laudo;
  final Value<DateTime?> dataAtualizacaoEstoque;
  final Value<String?> pedeCpfCupom;
  final Value<int?> tipoIntegracao;
  final Value<int?> timerIntegracao;
  final Value<String?> gavetaSinalInvertido;
  final Value<int?> gavetaUtilizacao;
  final Value<String?> usaTecladoReduzido;
  final Value<String?> modulo;
  final Value<String?> plano;
  final Value<double?> planoValor;
  final Value<String?> planoSituacao;
  final Value<String?> reciboFormatoPagina;
  final Value<double?> reciboLarguraPagina;
  final Value<double?> reciboMargemPagina;
  final Value<String?> encerraMovimentoAuto;
  final Value<String?> permiteEstoqueNegativo;
  final Value<String?> moduloFiscalPrincipal;
  final Value<String?> moduloFiscalContingencia;
  final Value<String?> acbrMonitorEndereco;
  final Value<int?> acbrMonitorPorta;
  const PdvConfiguracaosCompanion({
    this.id = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idPdvCaixa = const Value.absent(),
    this.idTributOperacaoFiscalPadrao = const Value.absent(),
    this.mensagemCupom = const Value.absent(),
    this.portaEcf = const Value.absent(),
    this.ipServidor = const Value.absent(),
    this.ipSitef = const Value.absent(),
    this.tipoTef = const Value.absent(),
    this.tituloTelaCaixa = const Value.absent(),
    this.caminhoImagensProdutos = const Value.absent(),
    this.caminhoImagensMarketing = const Value.absent(),
    this.corJanelasInternas = const Value.absent(),
    this.marketingAtivo = const Value.absent(),
    this.cfopEcf = const Value.absent(),
    this.timeoutEcf = const Value.absent(),
    this.intervaloEcf = const Value.absent(),
    this.descricaoSuprimento = const Value.absent(),
    this.descricaoSangria = const Value.absent(),
    this.tefTipoGp = const Value.absent(),
    this.tefTempoEspera = const Value.absent(),
    this.tefEsperaSts = const Value.absent(),
    this.tefNumeroVias = const Value.absent(),
    this.decimaisQuantidade = const Value.absent(),
    this.decimaisValor = const Value.absent(),
    this.bitsPorSegundo = const Value.absent(),
    this.quantidadeMaximaCartoes = const Value.absent(),
    this.pesquisaParte = const Value.absent(),
    this.laudo = const Value.absent(),
    this.dataAtualizacaoEstoque = const Value.absent(),
    this.pedeCpfCupom = const Value.absent(),
    this.tipoIntegracao = const Value.absent(),
    this.timerIntegracao = const Value.absent(),
    this.gavetaSinalInvertido = const Value.absent(),
    this.gavetaUtilizacao = const Value.absent(),
    this.usaTecladoReduzido = const Value.absent(),
    this.modulo = const Value.absent(),
    this.plano = const Value.absent(),
    this.planoValor = const Value.absent(),
    this.planoSituacao = const Value.absent(),
    this.reciboFormatoPagina = const Value.absent(),
    this.reciboLarguraPagina = const Value.absent(),
    this.reciboMargemPagina = const Value.absent(),
    this.encerraMovimentoAuto = const Value.absent(),
    this.permiteEstoqueNegativo = const Value.absent(),
    this.moduloFiscalPrincipal = const Value.absent(),
    this.moduloFiscalContingencia = const Value.absent(),
    this.acbrMonitorEndereco = const Value.absent(),
    this.acbrMonitorPorta = const Value.absent(),
  });
  PdvConfiguracaosCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idPdvCaixa = const Value.absent(),
    this.idTributOperacaoFiscalPadrao = const Value.absent(),
    this.mensagemCupom = const Value.absent(),
    this.portaEcf = const Value.absent(),
    this.ipServidor = const Value.absent(),
    this.ipSitef = const Value.absent(),
    this.tipoTef = const Value.absent(),
    this.tituloTelaCaixa = const Value.absent(),
    this.caminhoImagensProdutos = const Value.absent(),
    this.caminhoImagensMarketing = const Value.absent(),
    this.corJanelasInternas = const Value.absent(),
    this.marketingAtivo = const Value.absent(),
    this.cfopEcf = const Value.absent(),
    this.timeoutEcf = const Value.absent(),
    this.intervaloEcf = const Value.absent(),
    this.descricaoSuprimento = const Value.absent(),
    this.descricaoSangria = const Value.absent(),
    this.tefTipoGp = const Value.absent(),
    this.tefTempoEspera = const Value.absent(),
    this.tefEsperaSts = const Value.absent(),
    this.tefNumeroVias = const Value.absent(),
    this.decimaisQuantidade = const Value.absent(),
    this.decimaisValor = const Value.absent(),
    this.bitsPorSegundo = const Value.absent(),
    this.quantidadeMaximaCartoes = const Value.absent(),
    this.pesquisaParte = const Value.absent(),
    this.laudo = const Value.absent(),
    this.dataAtualizacaoEstoque = const Value.absent(),
    this.pedeCpfCupom = const Value.absent(),
    this.tipoIntegracao = const Value.absent(),
    this.timerIntegracao = const Value.absent(),
    this.gavetaSinalInvertido = const Value.absent(),
    this.gavetaUtilizacao = const Value.absent(),
    this.usaTecladoReduzido = const Value.absent(),
    this.modulo = const Value.absent(),
    this.plano = const Value.absent(),
    this.planoValor = const Value.absent(),
    this.planoSituacao = const Value.absent(),
    this.reciboFormatoPagina = const Value.absent(),
    this.reciboLarguraPagina = const Value.absent(),
    this.reciboMargemPagina = const Value.absent(),
    this.encerraMovimentoAuto = const Value.absent(),
    this.permiteEstoqueNegativo = const Value.absent(),
    this.moduloFiscalPrincipal = const Value.absent(),
    this.moduloFiscalContingencia = const Value.absent(),
    this.acbrMonitorEndereco = const Value.absent(),
    this.acbrMonitorPorta = const Value.absent(),
  });
  static Insertable<PdvConfiguracao> custom({
    Expression<int>? id,
    Expression<int>? idEcfImpressora,
    Expression<int>? idPdvCaixa,
    Expression<int>? idTributOperacaoFiscalPadrao,
    Expression<String>? mensagemCupom,
    Expression<String>? portaEcf,
    Expression<String>? ipServidor,
    Expression<String>? ipSitef,
    Expression<String>? tipoTef,
    Expression<String>? tituloTelaCaixa,
    Expression<String>? caminhoImagensProdutos,
    Expression<String>? caminhoImagensMarketing,
    Expression<String>? corJanelasInternas,
    Expression<String>? marketingAtivo,
    Expression<int>? cfopEcf,
    Expression<int>? timeoutEcf,
    Expression<int>? intervaloEcf,
    Expression<String>? descricaoSuprimento,
    Expression<String>? descricaoSangria,
    Expression<int>? tefTipoGp,
    Expression<int>? tefTempoEspera,
    Expression<int>? tefEsperaSts,
    Expression<int>? tefNumeroVias,
    Expression<int>? decimaisQuantidade,
    Expression<int>? decimaisValor,
    Expression<int>? bitsPorSegundo,
    Expression<int>? quantidadeMaximaCartoes,
    Expression<String>? pesquisaParte,
    Expression<String>? laudo,
    Expression<DateTime>? dataAtualizacaoEstoque,
    Expression<String>? pedeCpfCupom,
    Expression<int>? tipoIntegracao,
    Expression<int>? timerIntegracao,
    Expression<String>? gavetaSinalInvertido,
    Expression<int>? gavetaUtilizacao,
    Expression<String>? usaTecladoReduzido,
    Expression<String>? modulo,
    Expression<String>? plano,
    Expression<double>? planoValor,
    Expression<String>? planoSituacao,
    Expression<String>? reciboFormatoPagina,
    Expression<double>? reciboLarguraPagina,
    Expression<double>? reciboMargemPagina,
    Expression<String>? encerraMovimentoAuto,
    Expression<String>? permiteEstoqueNegativo,
    Expression<String>? moduloFiscalPrincipal,
    Expression<String>? moduloFiscalContingencia,
    Expression<String>? acbrMonitorEndereco,
    Expression<int>? acbrMonitorPorta,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
      if (idPdvCaixa != null) 'ID_PDV_CAIXA': idPdvCaixa,
      if (idTributOperacaoFiscalPadrao != null)
        'ID_TRIBUT_OPERACAO_FISCAL_PADRAO': idTributOperacaoFiscalPadrao,
      if (mensagemCupom != null) 'MENSAGEM_CUPOM': mensagemCupom,
      if (portaEcf != null) 'PORTA_ECF': portaEcf,
      if (ipServidor != null) 'IP_SERVIDOR': ipServidor,
      if (ipSitef != null) 'IP_SITEF': ipSitef,
      if (tipoTef != null) 'TIPO_TEF': tipoTef,
      if (tituloTelaCaixa != null) 'TITULO_TELA_CAIXA': tituloTelaCaixa,
      if (caminhoImagensProdutos != null)
        'CAMINHO_IMAGENS_PRODUTOS': caminhoImagensProdutos,
      if (caminhoImagensMarketing != null)
        'CAMINHO_IMAGENS_MARKETING': caminhoImagensMarketing,
      if (corJanelasInternas != null)
        'COR_JANELAS_INTERNAS': corJanelasInternas,
      if (marketingAtivo != null) 'MARKETING_ATIVO': marketingAtivo,
      if (cfopEcf != null) 'CFOP_ECF': cfopEcf,
      if (timeoutEcf != null) 'TIMEOUT_ECF': timeoutEcf,
      if (intervaloEcf != null) 'INTERVALO_ECF': intervaloEcf,
      if (descricaoSuprimento != null)
        'DESCRICAO_SUPRIMENTO': descricaoSuprimento,
      if (descricaoSangria != null) 'DESCRICAO_SANGRIA': descricaoSangria,
      if (tefTipoGp != null) 'TEF_TIPO_GP': tefTipoGp,
      if (tefTempoEspera != null) 'TEF_TEMPO_ESPERA': tefTempoEspera,
      if (tefEsperaSts != null) 'TEF_ESPERA_STS': tefEsperaSts,
      if (tefNumeroVias != null) 'TEF_NUMERO_VIAS': tefNumeroVias,
      if (decimaisQuantidade != null) 'DECIMAIS_QUANTIDADE': decimaisQuantidade,
      if (decimaisValor != null) 'DECIMAIS_VALOR': decimaisValor,
      if (bitsPorSegundo != null) 'BITS_POR_SEGUNDO': bitsPorSegundo,
      if (quantidadeMaximaCartoes != null)
        'QUANTIDADE_MAXIMA_CARTOES': quantidadeMaximaCartoes,
      if (pesquisaParte != null) 'PESQUISA_PARTE': pesquisaParte,
      if (laudo != null) 'LAUDO': laudo,
      if (dataAtualizacaoEstoque != null)
        'DATA_ATUALIZACAO_ESTOQUE': dataAtualizacaoEstoque,
      if (pedeCpfCupom != null) 'PEDE_CPF_CUPOM': pedeCpfCupom,
      if (tipoIntegracao != null) 'TIPO_INTEGRACAO': tipoIntegracao,
      if (timerIntegracao != null) 'TIMER_INTEGRACAO': timerIntegracao,
      if (gavetaSinalInvertido != null)
        'GAVETA_SINAL_INVERTIDO': gavetaSinalInvertido,
      if (gavetaUtilizacao != null) 'GAVETA_UTILIZACAO': gavetaUtilizacao,
      if (usaTecladoReduzido != null)
        'USA_TECLADO_REDUZIDO': usaTecladoReduzido,
      if (modulo != null) 'MODULO': modulo,
      if (plano != null) 'PLANO': plano,
      if (planoValor != null) 'PLANO_VALOR': planoValor,
      if (planoSituacao != null) 'PLANO_SITUACAO': planoSituacao,
      if (reciboFormatoPagina != null)
        'RECIBO_FORMATO_PAGINA': reciboFormatoPagina,
      if (reciboLarguraPagina != null)
        'RECIBO_LARGURA_PAGINA': reciboLarguraPagina,
      if (reciboMargemPagina != null)
        'RECIBO_MARGEM_PAGINA': reciboMargemPagina,
      if (encerraMovimentoAuto != null)
        'ENCERRA_MOVIMENTO_AUTO': encerraMovimentoAuto,
      if (permiteEstoqueNegativo != null)
        'PERMITE_ESTOQUE_NEGATIVO': permiteEstoqueNegativo,
      if (moduloFiscalPrincipal != null)
        'MODULO_FISCAL_PRINCIPAL': moduloFiscalPrincipal,
      if (moduloFiscalContingencia != null)
        'MODULO_FISCAL_CONTINGENCIA': moduloFiscalContingencia,
      if (acbrMonitorEndereco != null)
        'ACBR_MONITOR_ENDERECO': acbrMonitorEndereco,
      if (acbrMonitorPorta != null) 'ACBR_MONITOR_PORTA': acbrMonitorPorta,
    });
  }

  PdvConfiguracaosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idEcfImpressora,
      Value<int?>? idPdvCaixa,
      Value<int?>? idTributOperacaoFiscalPadrao,
      Value<String?>? mensagemCupom,
      Value<String?>? portaEcf,
      Value<String?>? ipServidor,
      Value<String?>? ipSitef,
      Value<String?>? tipoTef,
      Value<String?>? tituloTelaCaixa,
      Value<String?>? caminhoImagensProdutos,
      Value<String?>? caminhoImagensMarketing,
      Value<String?>? corJanelasInternas,
      Value<String?>? marketingAtivo,
      Value<int?>? cfopEcf,
      Value<int?>? timeoutEcf,
      Value<int?>? intervaloEcf,
      Value<String?>? descricaoSuprimento,
      Value<String?>? descricaoSangria,
      Value<int?>? tefTipoGp,
      Value<int?>? tefTempoEspera,
      Value<int?>? tefEsperaSts,
      Value<int?>? tefNumeroVias,
      Value<int?>? decimaisQuantidade,
      Value<int?>? decimaisValor,
      Value<int?>? bitsPorSegundo,
      Value<int?>? quantidadeMaximaCartoes,
      Value<String?>? pesquisaParte,
      Value<String?>? laudo,
      Value<DateTime?>? dataAtualizacaoEstoque,
      Value<String?>? pedeCpfCupom,
      Value<int?>? tipoIntegracao,
      Value<int?>? timerIntegracao,
      Value<String?>? gavetaSinalInvertido,
      Value<int?>? gavetaUtilizacao,
      Value<String?>? usaTecladoReduzido,
      Value<String?>? modulo,
      Value<String?>? plano,
      Value<double?>? planoValor,
      Value<String?>? planoSituacao,
      Value<String?>? reciboFormatoPagina,
      Value<double?>? reciboLarguraPagina,
      Value<double?>? reciboMargemPagina,
      Value<String?>? encerraMovimentoAuto,
      Value<String?>? permiteEstoqueNegativo,
      Value<String?>? moduloFiscalPrincipal,
      Value<String?>? moduloFiscalContingencia,
      Value<String?>? acbrMonitorEndereco,
      Value<int?>? acbrMonitorPorta}) {
    return PdvConfiguracaosCompanion(
      id: id ?? this.id,
      idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
      idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
      idTributOperacaoFiscalPadrao:
          idTributOperacaoFiscalPadrao ?? this.idTributOperacaoFiscalPadrao,
      mensagemCupom: mensagemCupom ?? this.mensagemCupom,
      portaEcf: portaEcf ?? this.portaEcf,
      ipServidor: ipServidor ?? this.ipServidor,
      ipSitef: ipSitef ?? this.ipSitef,
      tipoTef: tipoTef ?? this.tipoTef,
      tituloTelaCaixa: tituloTelaCaixa ?? this.tituloTelaCaixa,
      caminhoImagensProdutos:
          caminhoImagensProdutos ?? this.caminhoImagensProdutos,
      caminhoImagensMarketing:
          caminhoImagensMarketing ?? this.caminhoImagensMarketing,
      corJanelasInternas: corJanelasInternas ?? this.corJanelasInternas,
      marketingAtivo: marketingAtivo ?? this.marketingAtivo,
      cfopEcf: cfopEcf ?? this.cfopEcf,
      timeoutEcf: timeoutEcf ?? this.timeoutEcf,
      intervaloEcf: intervaloEcf ?? this.intervaloEcf,
      descricaoSuprimento: descricaoSuprimento ?? this.descricaoSuprimento,
      descricaoSangria: descricaoSangria ?? this.descricaoSangria,
      tefTipoGp: tefTipoGp ?? this.tefTipoGp,
      tefTempoEspera: tefTempoEspera ?? this.tefTempoEspera,
      tefEsperaSts: tefEsperaSts ?? this.tefEsperaSts,
      tefNumeroVias: tefNumeroVias ?? this.tefNumeroVias,
      decimaisQuantidade: decimaisQuantidade ?? this.decimaisQuantidade,
      decimaisValor: decimaisValor ?? this.decimaisValor,
      bitsPorSegundo: bitsPorSegundo ?? this.bitsPorSegundo,
      quantidadeMaximaCartoes:
          quantidadeMaximaCartoes ?? this.quantidadeMaximaCartoes,
      pesquisaParte: pesquisaParte ?? this.pesquisaParte,
      laudo: laudo ?? this.laudo,
      dataAtualizacaoEstoque:
          dataAtualizacaoEstoque ?? this.dataAtualizacaoEstoque,
      pedeCpfCupom: pedeCpfCupom ?? this.pedeCpfCupom,
      tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
      timerIntegracao: timerIntegracao ?? this.timerIntegracao,
      gavetaSinalInvertido: gavetaSinalInvertido ?? this.gavetaSinalInvertido,
      gavetaUtilizacao: gavetaUtilizacao ?? this.gavetaUtilizacao,
      usaTecladoReduzido: usaTecladoReduzido ?? this.usaTecladoReduzido,
      modulo: modulo ?? this.modulo,
      plano: plano ?? this.plano,
      planoValor: planoValor ?? this.planoValor,
      planoSituacao: planoSituacao ?? this.planoSituacao,
      reciboFormatoPagina: reciboFormatoPagina ?? this.reciboFormatoPagina,
      reciboLarguraPagina: reciboLarguraPagina ?? this.reciboLarguraPagina,
      reciboMargemPagina: reciboMargemPagina ?? this.reciboMargemPagina,
      encerraMovimentoAuto: encerraMovimentoAuto ?? this.encerraMovimentoAuto,
      permiteEstoqueNegativo:
          permiteEstoqueNegativo ?? this.permiteEstoqueNegativo,
      moduloFiscalPrincipal:
          moduloFiscalPrincipal ?? this.moduloFiscalPrincipal,
      moduloFiscalContingencia:
          moduloFiscalContingencia ?? this.moduloFiscalContingencia,
      acbrMonitorEndereco: acbrMonitorEndereco ?? this.acbrMonitorEndereco,
      acbrMonitorPorta: acbrMonitorPorta ?? this.acbrMonitorPorta,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfImpressora.present) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora.value);
    }
    if (idPdvCaixa.present) {
      map['ID_PDV_CAIXA'] = Variable<int>(idPdvCaixa.value);
    }
    if (idTributOperacaoFiscalPadrao.present) {
      map['ID_TRIBUT_OPERACAO_FISCAL_PADRAO'] =
          Variable<int>(idTributOperacaoFiscalPadrao.value);
    }
    if (mensagemCupom.present) {
      map['MENSAGEM_CUPOM'] = Variable<String>(mensagemCupom.value);
    }
    if (portaEcf.present) {
      map['PORTA_ECF'] = Variable<String>(portaEcf.value);
    }
    if (ipServidor.present) {
      map['IP_SERVIDOR'] = Variable<String>(ipServidor.value);
    }
    if (ipSitef.present) {
      map['IP_SITEF'] = Variable<String>(ipSitef.value);
    }
    if (tipoTef.present) {
      map['TIPO_TEF'] = Variable<String>(tipoTef.value);
    }
    if (tituloTelaCaixa.present) {
      map['TITULO_TELA_CAIXA'] = Variable<String>(tituloTelaCaixa.value);
    }
    if (caminhoImagensProdutos.present) {
      map['CAMINHO_IMAGENS_PRODUTOS'] =
          Variable<String>(caminhoImagensProdutos.value);
    }
    if (caminhoImagensMarketing.present) {
      map['CAMINHO_IMAGENS_MARKETING'] =
          Variable<String>(caminhoImagensMarketing.value);
    }
    if (corJanelasInternas.present) {
      map['COR_JANELAS_INTERNAS'] = Variable<String>(corJanelasInternas.value);
    }
    if (marketingAtivo.present) {
      map['MARKETING_ATIVO'] = Variable<String>(marketingAtivo.value);
    }
    if (cfopEcf.present) {
      map['CFOP_ECF'] = Variable<int>(cfopEcf.value);
    }
    if (timeoutEcf.present) {
      map['TIMEOUT_ECF'] = Variable<int>(timeoutEcf.value);
    }
    if (intervaloEcf.present) {
      map['INTERVALO_ECF'] = Variable<int>(intervaloEcf.value);
    }
    if (descricaoSuprimento.present) {
      map['DESCRICAO_SUPRIMENTO'] =
          Variable<String>(descricaoSuprimento.value);
    }
    if (descricaoSangria.present) {
      map['DESCRICAO_SANGRIA'] = Variable<String>(descricaoSangria.value);
    }
    if (tefTipoGp.present) {
      map['TEF_TIPO_GP'] = Variable<int>(tefTipoGp.value);
    }
    if (tefTempoEspera.present) {
      map['TEF_TEMPO_ESPERA'] = Variable<int>(tefTempoEspera.value);
    }
    if (tefEsperaSts.present) {
      map['TEF_ESPERA_STS'] = Variable<int>(tefEsperaSts.value);
    }
    if (tefNumeroVias.present) {
      map['TEF_NUMERO_VIAS'] = Variable<int>(tefNumeroVias.value);
    }
    if (decimaisQuantidade.present) {
      map['DECIMAIS_QUANTIDADE'] = Variable<int>(decimaisQuantidade.value);
    }
    if (decimaisValor.present) {
      map['DECIMAIS_VALOR'] = Variable<int>(decimaisValor.value);
    }
    if (bitsPorSegundo.present) {
      map['BITS_POR_SEGUNDO'] = Variable<int>(bitsPorSegundo.value);
    }
    if (quantidadeMaximaCartoes.present) {
      map['QUANTIDADE_MAXIMA_CARTOES'] =
          Variable<int>(quantidadeMaximaCartoes.value);
    }
    if (pesquisaParte.present) {
      map['PESQUISA_PARTE'] = Variable<String>(pesquisaParte.value);
    }
    if (laudo.present) {
      map['LAUDO'] = Variable<String>(laudo.value);
    }
    if (dataAtualizacaoEstoque.present) {
      map['DATA_ATUALIZACAO_ESTOQUE'] =
          Variable<DateTime>(dataAtualizacaoEstoque.value);
    }
    if (pedeCpfCupom.present) {
      map['PEDE_CPF_CUPOM'] = Variable<String>(pedeCpfCupom.value);
    }
    if (tipoIntegracao.present) {
      map['TIPO_INTEGRACAO'] = Variable<int>(tipoIntegracao.value);
    }
    if (timerIntegracao.present) {
      map['TIMER_INTEGRACAO'] = Variable<int>(timerIntegracao.value);
    }
    if (gavetaSinalInvertido.present) {
      map['GAVETA_SINAL_INVERTIDO'] =
          Variable<String>(gavetaSinalInvertido.value);
    }
    if (gavetaUtilizacao.present) {
      map['GAVETA_UTILIZACAO'] = Variable<int>(gavetaUtilizacao.value);
    }
    if (usaTecladoReduzido.present) {
      map['USA_TECLADO_REDUZIDO'] = Variable<String>(usaTecladoReduzido.value);
    }
    if (modulo.present) {
      map['MODULO'] = Variable<String>(modulo.value);
    }
    if (plano.present) {
      map['PLANO'] = Variable<String>(plano.value);
    }
    if (planoValor.present) {
      map['PLANO_VALOR'] = Variable<double>(planoValor.value);
    }
    if (planoSituacao.present) {
      map['PLANO_SITUACAO'] = Variable<String>(planoSituacao.value);
    }
    if (reciboFormatoPagina.present) {
      map['RECIBO_FORMATO_PAGINA'] =
          Variable<String>(reciboFormatoPagina.value);
    }
    if (reciboLarguraPagina.present) {
      map['RECIBO_LARGURA_PAGINA'] =
          Variable<double>(reciboLarguraPagina.value);
    }
    if (reciboMargemPagina.present) {
      map['RECIBO_MARGEM_PAGINA'] = Variable<double>(reciboMargemPagina.value);
    }
    if (encerraMovimentoAuto.present) {
      map['ENCERRA_MOVIMENTO_AUTO'] =
          Variable<String>(encerraMovimentoAuto.value);
    }
    if (permiteEstoqueNegativo.present) {
      map['PERMITE_ESTOQUE_NEGATIVO'] =
          Variable<String>(permiteEstoqueNegativo.value);
    }
    if (moduloFiscalPrincipal.present) {
      map['MODULO_FISCAL_PRINCIPAL'] =
          Variable<String>(moduloFiscalPrincipal.value);
    }
    if (moduloFiscalContingencia.present) {
      map['MODULO_FISCAL_CONTINGENCIA'] =
          Variable<String>(moduloFiscalContingencia.value);
    }
    if (acbrMonitorEndereco.present) {
      map['ACBR_MONITOR_ENDERECO'] =
          Variable<String>(acbrMonitorEndereco.value);
    }
    if (acbrMonitorPorta.present) {
      map['ACBR_MONITOR_PORTA'] = Variable<int>(acbrMonitorPorta.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaosCompanion(')
          ..write('id: $id, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idPdvCaixa: $idPdvCaixa, ')
          ..write(
              'idTributOperacaoFiscalPadrao: $idTributOperacaoFiscalPadrao, ')
          ..write('mensagemCupom: $mensagemCupom, ')
          ..write('portaEcf: $portaEcf, ')
          ..write('ipServidor: $ipServidor, ')
          ..write('ipSitef: $ipSitef, ')
          ..write('tipoTef: $tipoTef, ')
          ..write('tituloTelaCaixa: $tituloTelaCaixa, ')
          ..write('caminhoImagensProdutos: $caminhoImagensProdutos, ')
          ..write('caminhoImagensMarketing: $caminhoImagensMarketing, ')
          ..write('corJanelasInternas: $corJanelasInternas, ')
          ..write('marketingAtivo: $marketingAtivo, ')
          ..write('cfopEcf: $cfopEcf, ')
          ..write('timeoutEcf: $timeoutEcf, ')
          ..write('intervaloEcf: $intervaloEcf, ')
          ..write('descricaoSuprimento: $descricaoSuprimento, ')
          ..write('descricaoSangria: $descricaoSangria, ')
          ..write('tefTipoGp: $tefTipoGp, ')
          ..write('tefTempoEspera: $tefTempoEspera, ')
          ..write('tefEsperaSts: $tefEsperaSts, ')
          ..write('tefNumeroVias: $tefNumeroVias, ')
          ..write('decimaisQuantidade: $decimaisQuantidade, ')
          ..write('decimaisValor: $decimaisValor, ')
          ..write('bitsPorSegundo: $bitsPorSegundo, ')
          ..write('quantidadeMaximaCartoes: $quantidadeMaximaCartoes, ')
          ..write('pesquisaParte: $pesquisaParte, ')
          ..write('laudo: $laudo, ')
          ..write('dataAtualizacaoEstoque: $dataAtualizacaoEstoque, ')
          ..write('pedeCpfCupom: $pedeCpfCupom, ')
          ..write('tipoIntegracao: $tipoIntegracao, ')
          ..write('timerIntegracao: $timerIntegracao, ')
          ..write('gavetaSinalInvertido: $gavetaSinalInvertido, ')
          ..write('gavetaUtilizacao: $gavetaUtilizacao, ')
          ..write('usaTecladoReduzido: $usaTecladoReduzido, ')
          ..write('modulo: $modulo, ')
          ..write('plano: $plano, ')
          ..write('planoValor: $planoValor, ')
          ..write('planoSituacao: $planoSituacao, ')
          ..write('reciboFormatoPagina: $reciboFormatoPagina, ')
          ..write('reciboLarguraPagina: $reciboLarguraPagina, ')
          ..write('reciboMargemPagina: $reciboMargemPagina, ')
          ..write('encerraMovimentoAuto: $encerraMovimentoAuto, ')
          ..write('permiteEstoqueNegativo: $permiteEstoqueNegativo, ')
          ..write('moduloFiscalPrincipal: $moduloFiscalPrincipal, ')
          ..write('moduloFiscalContingencia: $moduloFiscalContingencia, ')
          ..write('acbrMonitorEndereco: $acbrMonitorEndereco, ')
          ..write('acbrMonitorPorta: $acbrMonitorPorta')
          ..write(')'))
        .toString();
  }
}

class $PdvConfiguracaosTable extends PdvConfiguracaos
    with TableInfo<$PdvConfiguracaosTable, PdvConfiguracao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvConfiguracaosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idEcfImpressoraMeta =
      const VerificationMeta('idEcfImpressora');
  @override
  late final GeneratedColumn<int> idEcfImpressora = GeneratedColumn<int>(
      'ID_ECF_IMPRESSORA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
  final VerificationMeta _idPdvCaixaMeta = const VerificationMeta('idPdvCaixa');
  @override
  late final GeneratedColumn<int> idPdvCaixa = GeneratedColumn<int>(
      'ID_PDV_CAIXA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_CAIXA(ID)');
  final VerificationMeta _idTributOperacaoFiscalPadraoMeta =
      const VerificationMeta('idTributOperacaoFiscalPadrao');
  @override
  late final GeneratedColumn<int> idTributOperacaoFiscalPadrao =
      GeneratedColumn<int>(
          'ID_TRIBUT_OPERACAO_FISCAL_PADRAO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES TRIBUT_OPERACAO_FISCAL_PADRAO(ID)');
  final VerificationMeta _mensagemCupomMeta =
      const VerificationMeta('mensagemCupom');
  @override
  late final GeneratedColumn<String> mensagemCupom = GeneratedColumn<String>(
      'MENSAGEM_CUPOM', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _portaEcfMeta = const VerificationMeta('portaEcf');
  @override
  late final GeneratedColumn<String> portaEcf = GeneratedColumn<String>(
      'PORTA_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ipServidorMeta = const VerificationMeta('ipServidor');
  @override
  late final GeneratedColumn<String> ipServidor = GeneratedColumn<String>(
      'IP_SERVIDOR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ipSitefMeta = const VerificationMeta('ipSitef');
  @override
  late final GeneratedColumn<String> ipSitef = GeneratedColumn<String>(
      'IP_SITEF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoTefMeta = const VerificationMeta('tipoTef');
  @override
  late final GeneratedColumn<String> tipoTef = GeneratedColumn<String>(
      'TIPO_TEF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tituloTelaCaixaMeta =
      const VerificationMeta('tituloTelaCaixa');
  @override
  late final GeneratedColumn<String> tituloTelaCaixa =
      GeneratedColumn<String>('TITULO_TELA_CAIXA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _caminhoImagensProdutosMeta =
      const VerificationMeta('caminhoImagensProdutos');
  @override
  late final GeneratedColumn<String> caminhoImagensProdutos =
      GeneratedColumn<String>('CAMINHO_IMAGENS_PRODUTOS', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _caminhoImagensMarketingMeta =
      const VerificationMeta('caminhoImagensMarketing');
  @override
  late final GeneratedColumn<String> caminhoImagensMarketing =
      GeneratedColumn<String>('CAMINHO_IMAGENS_MARKETING', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _corJanelasInternasMeta =
      const VerificationMeta('corJanelasInternas');
  @override
  late final GeneratedColumn<String> corJanelasInternas =
      GeneratedColumn<String>(
          'COR_JANELAS_INTERNAS', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _marketingAtivoMeta =
      const VerificationMeta('marketingAtivo');
  @override
  late final GeneratedColumn<String> marketingAtivo = GeneratedColumn<String>(
      'MARKETING_ATIVO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cfopEcfMeta = const VerificationMeta('cfopEcf');
  @override
  late final GeneratedColumn<int> cfopEcf = GeneratedColumn<int>(
      'CFOP_ECF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _timeoutEcfMeta = const VerificationMeta('timeoutEcf');
  @override
  late final GeneratedColumn<int> timeoutEcf = GeneratedColumn<int>(
      'TIMEOUT_ECF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _intervaloEcfMeta =
      const VerificationMeta('intervaloEcf');
  @override
  late final GeneratedColumn<int> intervaloEcf = GeneratedColumn<int>(
      'INTERVALO_ECF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _descricaoSuprimentoMeta =
      const VerificationMeta('descricaoSuprimento');
  @override
  late final GeneratedColumn<String> descricaoSuprimento =
      GeneratedColumn<String>('DESCRICAO_SUPRIMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _descricaoSangriaMeta =
      const VerificationMeta('descricaoSangria');
  @override
  late final GeneratedColumn<String> descricaoSangria =
      GeneratedColumn<String>('DESCRICAO_SANGRIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _tefTipoGpMeta = const VerificationMeta('tefTipoGp');
  @override
  late final GeneratedColumn<int> tefTipoGp = GeneratedColumn<int>(
      'TEF_TIPO_GP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _tefTempoEsperaMeta =
      const VerificationMeta('tefTempoEspera');
  @override
  late final GeneratedColumn<int> tefTempoEspera = GeneratedColumn<int>(
      'TEF_TEMPO_ESPERA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _tefEsperaStsMeta =
      const VerificationMeta('tefEsperaSts');
  @override
  late final GeneratedColumn<int> tefEsperaSts = GeneratedColumn<int>(
      'TEF_ESPERA_STS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _tefNumeroViasMeta =
      const VerificationMeta('tefNumeroVias');
  @override
  late final GeneratedColumn<int> tefNumeroVias = GeneratedColumn<int>(
      'TEF_NUMERO_VIAS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _decimaisQuantidadeMeta =
      const VerificationMeta('decimaisQuantidade');
  @override
  late final GeneratedColumn<int> decimaisQuantidade = GeneratedColumn<int>(
      'DECIMAIS_QUANTIDADE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _decimaisValorMeta =
      const VerificationMeta('decimaisValor');
  @override
  late final GeneratedColumn<int> decimaisValor = GeneratedColumn<int>(
      'DECIMAIS_VALOR', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _bitsPorSegundoMeta =
      const VerificationMeta('bitsPorSegundo');
  @override
  late final GeneratedColumn<int> bitsPorSegundo = GeneratedColumn<int>(
      'BITS_POR_SEGUNDO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _quantidadeMaximaCartoesMeta =
      const VerificationMeta('quantidadeMaximaCartoes');
  @override
  late final GeneratedColumn<int> quantidadeMaximaCartoes =
      GeneratedColumn<int>('QUANTIDADE_MAXIMA_CARTOES', aliasedName, true,
          type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _pesquisaParteMeta =
      const VerificationMeta('pesquisaParte');
  @override
  late final GeneratedColumn<String> pesquisaParte = GeneratedColumn<String>(
      'PESQUISA_PARTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _laudoMeta = const VerificationMeta('laudo');
  @override
  late final GeneratedColumn<String> laudo = GeneratedColumn<String>(
      'LAUDO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataAtualizacaoEstoqueMeta =
      const VerificationMeta('dataAtualizacaoEstoque');
  @override
  late final GeneratedColumn<DateTime> dataAtualizacaoEstoque =
      GeneratedColumn<DateTime>('DATA_ATUALIZACAO_ESTOQUE', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _pedeCpfCupomMeta =
      const VerificationMeta('pedeCpfCupom');
  @override
  late final GeneratedColumn<String> pedeCpfCupom = GeneratedColumn<String>(
      'PEDE_CPF_CUPOM', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoIntegracaoMeta =
      const VerificationMeta('tipoIntegracao');
  @override
  late final GeneratedColumn<int> tipoIntegracao = GeneratedColumn<int>(
      'TIPO_INTEGRACAO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _timerIntegracaoMeta =
      const VerificationMeta('timerIntegracao');
  @override
  late final GeneratedColumn<int> timerIntegracao = GeneratedColumn<int>(
      'TIMER_INTEGRACAO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _gavetaSinalInvertidoMeta =
      const VerificationMeta('gavetaSinalInvertido');
  @override
  late final GeneratedColumn<String> gavetaSinalInvertido =
      GeneratedColumn<String>('GAVETA_SINAL_INVERTIDO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _gavetaUtilizacaoMeta =
      const VerificationMeta('gavetaUtilizacao');
  @override
  late final GeneratedColumn<int> gavetaUtilizacao = GeneratedColumn<int>(
      'GAVETA_UTILIZACAO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _usaTecladoReduzidoMeta =
      const VerificationMeta('usaTecladoReduzido');
  @override
  late final GeneratedColumn<String> usaTecladoReduzido =
      GeneratedColumn<String>(
          'USA_TECLADO_REDUZIDO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _moduloMeta = const VerificationMeta('modulo');
  @override
  late final GeneratedColumn<String> modulo = GeneratedColumn<String>(
      'MODULO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _planoMeta = const VerificationMeta('plano');
  @override
  late final GeneratedColumn<String> plano = GeneratedColumn<String>(
      'PLANO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _planoValorMeta = const VerificationMeta('planoValor');
  @override
  late final GeneratedColumn<double> planoValor = GeneratedColumn<double>(
      'PLANO_VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _planoSituacaoMeta =
      const VerificationMeta('planoSituacao');
  @override
  late final GeneratedColumn<String> planoSituacao = GeneratedColumn<String>(
      'PLANO_SITUACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _reciboFormatoPaginaMeta =
      const VerificationMeta('reciboFormatoPagina');
  @override
  late final GeneratedColumn<String> reciboFormatoPagina =
      GeneratedColumn<String>('RECIBO_FORMATO_PAGINA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _reciboLarguraPaginaMeta =
      const VerificationMeta('reciboLarguraPagina');
  @override
  late final GeneratedColumn<double> reciboLarguraPagina =
      GeneratedColumn<double>('RECIBO_LARGURA_PAGINA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _reciboMargemPaginaMeta =
      const VerificationMeta('reciboMargemPagina');
  @override
  late final GeneratedColumn<double> reciboMargemPagina =
      GeneratedColumn<double>('RECIBO_MARGEM_PAGINA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _encerraMovimentoAutoMeta =
      const VerificationMeta('encerraMovimentoAuto');
  @override
  late final GeneratedColumn<String> encerraMovimentoAuto =
      GeneratedColumn<String>('ENCERRA_MOVIMENTO_AUTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _permiteEstoqueNegativoMeta =
      const VerificationMeta('permiteEstoqueNegativo');
  @override
  late final GeneratedColumn<String> permiteEstoqueNegativo =
      GeneratedColumn<String>('PERMITE_ESTOQUE_NEGATIVO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _moduloFiscalPrincipalMeta =
      const VerificationMeta('moduloFiscalPrincipal');
  @override
  late final GeneratedColumn<String> moduloFiscalPrincipal =
      GeneratedColumn<String>('MODULO_FISCAL_PRINCIPAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 5),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _moduloFiscalContingenciaMeta =
      const VerificationMeta('moduloFiscalContingencia');
  @override
  late final GeneratedColumn<String> moduloFiscalContingencia =
      GeneratedColumn<String>('MODULO_FISCAL_CONTINGENCIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 5),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _acbrMonitorEnderecoMeta =
      const VerificationMeta('acbrMonitorEndereco');
  @override
  late final GeneratedColumn<String> acbrMonitorEndereco =
      GeneratedColumn<String>('ACBR_MONITOR_ENDERECO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _acbrMonitorPortaMeta =
      const VerificationMeta('acbrMonitorPorta');
  @override
  late final GeneratedColumn<int> acbrMonitorPorta = GeneratedColumn<int>(
      'ACBR_MONITOR_PORTA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idEcfImpressora,
        idPdvCaixa,
        idTributOperacaoFiscalPadrao,
        mensagemCupom,
        portaEcf,
        ipServidor,
        ipSitef,
        tipoTef,
        tituloTelaCaixa,
        caminhoImagensProdutos,
        caminhoImagensMarketing,
        corJanelasInternas,
        marketingAtivo,
        cfopEcf,
        timeoutEcf,
        intervaloEcf,
        descricaoSuprimento,
        descricaoSangria,
        tefTipoGp,
        tefTempoEspera,
        tefEsperaSts,
        tefNumeroVias,
        decimaisQuantidade,
        decimaisValor,
        bitsPorSegundo,
        quantidadeMaximaCartoes,
        pesquisaParte,
        laudo,
        dataAtualizacaoEstoque,
        pedeCpfCupom,
        tipoIntegracao,
        timerIntegracao,
        gavetaSinalInvertido,
        gavetaUtilizacao,
        usaTecladoReduzido,
        modulo,
        plano,
        planoValor,
        planoSituacao,
        reciboFormatoPagina,
        reciboLarguraPagina,
        reciboMargemPagina,
        encerraMovimentoAuto,
        permiteEstoqueNegativo,
        moduloFiscalPrincipal,
        moduloFiscalContingencia,
        acbrMonitorEndereco,
        acbrMonitorPorta
      ];
  @override
  String get aliasedName => _alias ?? 'PDV_CONFIGURACAO';
  @override
  String get actualTableName => 'PDV_CONFIGURACAO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvConfiguracao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_ECF_IMPRESSORA')) {
      context.handle(
          _idEcfImpressoraMeta,
          idEcfImpressora.isAcceptableOrUnknown(
              data['ID_ECF_IMPRESSORA']!, _idEcfImpressoraMeta));
    }
    if (data.containsKey('ID_PDV_CAIXA')) {
      context.handle(
          _idPdvCaixaMeta,
          idPdvCaixa.isAcceptableOrUnknown(
              data['ID_PDV_CAIXA']!, _idPdvCaixaMeta));
    }
    if (data.containsKey('ID_TRIBUT_OPERACAO_FISCAL_PADRAO')) {
      context.handle(
          _idTributOperacaoFiscalPadraoMeta,
          idTributOperacaoFiscalPadrao.isAcceptableOrUnknown(
              data['ID_TRIBUT_OPERACAO_FISCAL_PADRAO']!,
              _idTributOperacaoFiscalPadraoMeta));
    }
    if (data.containsKey('MENSAGEM_CUPOM')) {
      context.handle(
          _mensagemCupomMeta,
          mensagemCupom.isAcceptableOrUnknown(
              data['MENSAGEM_CUPOM']!, _mensagemCupomMeta));
    }
    if (data.containsKey('PORTA_ECF')) {
      context.handle(_portaEcfMeta,
          portaEcf.isAcceptableOrUnknown(data['PORTA_ECF']!, _portaEcfMeta));
    }
    if (data.containsKey('IP_SERVIDOR')) {
      context.handle(
          _ipServidorMeta,
          ipServidor.isAcceptableOrUnknown(
              data['IP_SERVIDOR']!, _ipServidorMeta));
    }
    if (data.containsKey('IP_SITEF')) {
      context.handle(_ipSitefMeta,
          ipSitef.isAcceptableOrUnknown(data['IP_SITEF']!, _ipSitefMeta));
    }
    if (data.containsKey('TIPO_TEF')) {
      context.handle(_tipoTefMeta,
          tipoTef.isAcceptableOrUnknown(data['TIPO_TEF']!, _tipoTefMeta));
    }
    if (data.containsKey('TITULO_TELA_CAIXA')) {
      context.handle(
          _tituloTelaCaixaMeta,
          tituloTelaCaixa.isAcceptableOrUnknown(
              data['TITULO_TELA_CAIXA']!, _tituloTelaCaixaMeta));
    }
    if (data.containsKey('CAMINHO_IMAGENS_PRODUTOS')) {
      context.handle(
          _caminhoImagensProdutosMeta,
          caminhoImagensProdutos.isAcceptableOrUnknown(
              data['CAMINHO_IMAGENS_PRODUTOS']!, _caminhoImagensProdutosMeta));
    }
    if (data.containsKey('CAMINHO_IMAGENS_MARKETING')) {
      context.handle(
          _caminhoImagensMarketingMeta,
          caminhoImagensMarketing.isAcceptableOrUnknown(
              data['CAMINHO_IMAGENS_MARKETING']!,
              _caminhoImagensMarketingMeta));
    }
    if (data.containsKey('COR_JANELAS_INTERNAS')) {
      context.handle(
          _corJanelasInternasMeta,
          corJanelasInternas.isAcceptableOrUnknown(
              data['COR_JANELAS_INTERNAS']!, _corJanelasInternasMeta));
    }
    if (data.containsKey('MARKETING_ATIVO')) {
      context.handle(
          _marketingAtivoMeta,
          marketingAtivo.isAcceptableOrUnknown(
              data['MARKETING_ATIVO']!, _marketingAtivoMeta));
    }
    if (data.containsKey('CFOP_ECF')) {
      context.handle(_cfopEcfMeta,
          cfopEcf.isAcceptableOrUnknown(data['CFOP_ECF']!, _cfopEcfMeta));
    }
    if (data.containsKey('TIMEOUT_ECF')) {
      context.handle(
          _timeoutEcfMeta,
          timeoutEcf.isAcceptableOrUnknown(
              data['TIMEOUT_ECF']!, _timeoutEcfMeta));
    }
    if (data.containsKey('INTERVALO_ECF')) {
      context.handle(
          _intervaloEcfMeta,
          intervaloEcf.isAcceptableOrUnknown(
              data['INTERVALO_ECF']!, _intervaloEcfMeta));
    }
    if (data.containsKey('DESCRICAO_SUPRIMENTO')) {
      context.handle(
          _descricaoSuprimentoMeta,
          descricaoSuprimento.isAcceptableOrUnknown(
              data['DESCRICAO_SUPRIMENTO']!, _descricaoSuprimentoMeta));
    }
    if (data.containsKey('DESCRICAO_SANGRIA')) {
      context.handle(
          _descricaoSangriaMeta,
          descricaoSangria.isAcceptableOrUnknown(
              data['DESCRICAO_SANGRIA']!, _descricaoSangriaMeta));
    }
    if (data.containsKey('TEF_TIPO_GP')) {
      context.handle(
          _tefTipoGpMeta,
          tefTipoGp.isAcceptableOrUnknown(
              data['TEF_TIPO_GP']!, _tefTipoGpMeta));
    }
    if (data.containsKey('TEF_TEMPO_ESPERA')) {
      context.handle(
          _tefTempoEsperaMeta,
          tefTempoEspera.isAcceptableOrUnknown(
              data['TEF_TEMPO_ESPERA']!, _tefTempoEsperaMeta));
    }
    if (data.containsKey('TEF_ESPERA_STS')) {
      context.handle(
          _tefEsperaStsMeta,
          tefEsperaSts.isAcceptableOrUnknown(
              data['TEF_ESPERA_STS']!, _tefEsperaStsMeta));
    }
    if (data.containsKey('TEF_NUMERO_VIAS')) {
      context.handle(
          _tefNumeroViasMeta,
          tefNumeroVias.isAcceptableOrUnknown(
              data['TEF_NUMERO_VIAS']!, _tefNumeroViasMeta));
    }
    if (data.containsKey('DECIMAIS_QUANTIDADE')) {
      context.handle(
          _decimaisQuantidadeMeta,
          decimaisQuantidade.isAcceptableOrUnknown(
              data['DECIMAIS_QUANTIDADE']!, _decimaisQuantidadeMeta));
    }
    if (data.containsKey('DECIMAIS_VALOR')) {
      context.handle(
          _decimaisValorMeta,
          decimaisValor.isAcceptableOrUnknown(
              data['DECIMAIS_VALOR']!, _decimaisValorMeta));
    }
    if (data.containsKey('BITS_POR_SEGUNDO')) {
      context.handle(
          _bitsPorSegundoMeta,
          bitsPorSegundo.isAcceptableOrUnknown(
              data['BITS_POR_SEGUNDO']!, _bitsPorSegundoMeta));
    }
    if (data.containsKey('QUANTIDADE_MAXIMA_CARTOES')) {
      context.handle(
          _quantidadeMaximaCartoesMeta,
          quantidadeMaximaCartoes.isAcceptableOrUnknown(
              data['QUANTIDADE_MAXIMA_CARTOES']!,
              _quantidadeMaximaCartoesMeta));
    }
    if (data.containsKey('PESQUISA_PARTE')) {
      context.handle(
          _pesquisaParteMeta,
          pesquisaParte.isAcceptableOrUnknown(
              data['PESQUISA_PARTE']!, _pesquisaParteMeta));
    }
    if (data.containsKey('LAUDO')) {
      context.handle(
          _laudoMeta, laudo.isAcceptableOrUnknown(data['LAUDO']!, _laudoMeta));
    }
    if (data.containsKey('DATA_ATUALIZACAO_ESTOQUE')) {
      context.handle(
          _dataAtualizacaoEstoqueMeta,
          dataAtualizacaoEstoque.isAcceptableOrUnknown(
              data['DATA_ATUALIZACAO_ESTOQUE']!, _dataAtualizacaoEstoqueMeta));
    }
    if (data.containsKey('PEDE_CPF_CUPOM')) {
      context.handle(
          _pedeCpfCupomMeta,
          pedeCpfCupom.isAcceptableOrUnknown(
              data['PEDE_CPF_CUPOM']!, _pedeCpfCupomMeta));
    }
    if (data.containsKey('TIPO_INTEGRACAO')) {
      context.handle(
          _tipoIntegracaoMeta,
          tipoIntegracao.isAcceptableOrUnknown(
              data['TIPO_INTEGRACAO']!, _tipoIntegracaoMeta));
    }
    if (data.containsKey('TIMER_INTEGRACAO')) {
      context.handle(
          _timerIntegracaoMeta,
          timerIntegracao.isAcceptableOrUnknown(
              data['TIMER_INTEGRACAO']!, _timerIntegracaoMeta));
    }
    if (data.containsKey('GAVETA_SINAL_INVERTIDO')) {
      context.handle(
          _gavetaSinalInvertidoMeta,
          gavetaSinalInvertido.isAcceptableOrUnknown(
              data['GAVETA_SINAL_INVERTIDO']!, _gavetaSinalInvertidoMeta));
    }
    if (data.containsKey('GAVETA_UTILIZACAO')) {
      context.handle(
          _gavetaUtilizacaoMeta,
          gavetaUtilizacao.isAcceptableOrUnknown(
              data['GAVETA_UTILIZACAO']!, _gavetaUtilizacaoMeta));
    }
    if (data.containsKey('USA_TECLADO_REDUZIDO')) {
      context.handle(
          _usaTecladoReduzidoMeta,
          usaTecladoReduzido.isAcceptableOrUnknown(
              data['USA_TECLADO_REDUZIDO']!, _usaTecladoReduzidoMeta));
    }
    if (data.containsKey('MODULO')) {
      context.handle(_moduloMeta,
          modulo.isAcceptableOrUnknown(data['MODULO']!, _moduloMeta));
    }
    if (data.containsKey('PLANO')) {
      context.handle(
          _planoMeta, plano.isAcceptableOrUnknown(data['PLANO']!, _planoMeta));
    }
    if (data.containsKey('PLANO_VALOR')) {
      context.handle(
          _planoValorMeta,
          planoValor.isAcceptableOrUnknown(
              data['PLANO_VALOR']!, _planoValorMeta));
    }
    if (data.containsKey('PLANO_SITUACAO')) {
      context.handle(
          _planoSituacaoMeta,
          planoSituacao.isAcceptableOrUnknown(
              data['PLANO_SITUACAO']!, _planoSituacaoMeta));
    }
    if (data.containsKey('RECIBO_FORMATO_PAGINA')) {
      context.handle(
          _reciboFormatoPaginaMeta,
          reciboFormatoPagina.isAcceptableOrUnknown(
              data['RECIBO_FORMATO_PAGINA']!, _reciboFormatoPaginaMeta));
    }
    if (data.containsKey('RECIBO_LARGURA_PAGINA')) {
      context.handle(
          _reciboLarguraPaginaMeta,
          reciboLarguraPagina.isAcceptableOrUnknown(
              data['RECIBO_LARGURA_PAGINA']!, _reciboLarguraPaginaMeta));
    }
    if (data.containsKey('RECIBO_MARGEM_PAGINA')) {
      context.handle(
          _reciboMargemPaginaMeta,
          reciboMargemPagina.isAcceptableOrUnknown(
              data['RECIBO_MARGEM_PAGINA']!, _reciboMargemPaginaMeta));
    }
    if (data.containsKey('ENCERRA_MOVIMENTO_AUTO')) {
      context.handle(
          _encerraMovimentoAutoMeta,
          encerraMovimentoAuto.isAcceptableOrUnknown(
              data['ENCERRA_MOVIMENTO_AUTO']!, _encerraMovimentoAutoMeta));
    }
    if (data.containsKey('PERMITE_ESTOQUE_NEGATIVO')) {
      context.handle(
          _permiteEstoqueNegativoMeta,
          permiteEstoqueNegativo.isAcceptableOrUnknown(
              data['PERMITE_ESTOQUE_NEGATIVO']!, _permiteEstoqueNegativoMeta));
    }
    if (data.containsKey('MODULO_FISCAL_PRINCIPAL')) {
      context.handle(
          _moduloFiscalPrincipalMeta,
          moduloFiscalPrincipal.isAcceptableOrUnknown(
              data['MODULO_FISCAL_PRINCIPAL']!, _moduloFiscalPrincipalMeta));
    }
    if (data.containsKey('MODULO_FISCAL_CONTINGENCIA')) {
      context.handle(
          _moduloFiscalContingenciaMeta,
          moduloFiscalContingencia.isAcceptableOrUnknown(
              data['MODULO_FISCAL_CONTINGENCIA']!,
              _moduloFiscalContingenciaMeta));
    }
    if (data.containsKey('ACBR_MONITOR_ENDERECO')) {
      context.handle(
          _acbrMonitorEnderecoMeta,
          acbrMonitorEndereco.isAcceptableOrUnknown(
              data['ACBR_MONITOR_ENDERECO']!, _acbrMonitorEnderecoMeta));
    }
    if (data.containsKey('ACBR_MONITOR_PORTA')) {
      context.handle(
          _acbrMonitorPortaMeta,
          acbrMonitorPorta.isAcceptableOrUnknown(
              data['ACBR_MONITOR_PORTA']!, _acbrMonitorPortaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvConfiguracao map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvConfiguracao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvConfiguracaosTable createAlias(String alias) {
    return $PdvConfiguracaosTable(attachedDatabase, alias);
  }
}

class PdvConfiguracaoBalanca extends DataClass
    implements Insertable<PdvConfiguracaoBalanca> {
  final int? id;
  final int? idPdvConfiguracao;
  final int? modelo;
  final String? identificador;
  final int? handShake;
  final int? parity;
  final int? stopBits;
  final int? dataBits;
  final int? baudRate;
  final String? porta;
  final int? timeout;
  final String? tipoConfiguracao;
  PdvConfiguracaoBalanca(
      {this.id,
      this.idPdvConfiguracao,
      this.modelo,
      this.identificador,
      this.handShake,
      this.parity,
      this.stopBits,
      this.dataBits,
      this.baudRate,
      this.porta,
      this.timeout,
      this.tipoConfiguracao});
  factory PdvConfiguracaoBalanca.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvConfiguracaoBalanca(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvConfiguracao: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
      modelo: ValueSqlType.intType(data['${effectivePrefix}MODELO']),
      identificador: ValueSqlType.stringType(data['${effectivePrefix}IDENTIFICADOR']),
      handShake: ValueSqlType.intType(data['${effectivePrefix}HAND_SHAKE']),
      parity: ValueSqlType.intType(data['${effectivePrefix}PARITY']),
      stopBits: ValueSqlType.intType(data['${effectivePrefix}STOP_BITS']),
      dataBits: ValueSqlType.intType(data['${effectivePrefix}DATA_BITS']),
      baudRate: ValueSqlType.intType(data['${effectivePrefix}BAUD_RATE']),
      porta: ValueSqlType.stringType(data['${effectivePrefix}PORTA']),
      timeout: ValueSqlType.intType(data['${effectivePrefix}TIMEOUT']),
      tipoConfiguracao: ValueSqlType.stringType(data['${effectivePrefix}TIPO_CONFIGURACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvConfiguracao != null) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao);
    }
    if (!nullToAbsent || modelo != null) {
      map['MODELO'] = Variable<int>(modelo);
    }
    if (!nullToAbsent || identificador != null) {
      map['IDENTIFICADOR'] = Variable<String>(identificador);
    }
    if (!nullToAbsent || handShake != null) {
      map['HAND_SHAKE'] = Variable<int>(handShake);
    }
    if (!nullToAbsent || parity != null) {
      map['PARITY'] = Variable<int>(parity);
    }
    if (!nullToAbsent || stopBits != null) {
      map['STOP_BITS'] = Variable<int>(stopBits);
    }
    if (!nullToAbsent || dataBits != null) {
      map['DATA_BITS'] = Variable<int>(dataBits);
    }
    if (!nullToAbsent || baudRate != null) {
      map['BAUD_RATE'] = Variable<int>(baudRate);
    }
    if (!nullToAbsent || porta != null) {
      map['PORTA'] = Variable<String>(porta);
    }
    if (!nullToAbsent || timeout != null) {
      map['TIMEOUT'] = Variable<int>(timeout);
    }
    if (!nullToAbsent || tipoConfiguracao != null) {
      map['TIPO_CONFIGURACAO'] = Variable<String>(tipoConfiguracao);
    }
    return map;
  }

  PdvConfiguracaoBalancasCompanion toCompanion(bool nullToAbsent) {
    return PdvConfiguracaoBalancasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvConfiguracao: idPdvConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvConfiguracao),
      modelo:
          modelo == null && nullToAbsent ? const Value.absent() : Value(modelo),
      identificador: identificador == null && nullToAbsent
          ? const Value.absent()
          : Value(identificador),
      handShake: handShake == null && nullToAbsent
          ? const Value.absent()
          : Value(handShake),
      parity:
          parity == null && nullToAbsent ? const Value.absent() : Value(parity),
      stopBits: stopBits == null && nullToAbsent
          ? const Value.absent()
          : Value(stopBits),
      dataBits: dataBits == null && nullToAbsent
          ? const Value.absent()
          : Value(dataBits),
      baudRate: baudRate == null && nullToAbsent
          ? const Value.absent()
          : Value(baudRate),
      porta:
          porta == null && nullToAbsent ? const Value.absent() : Value(porta),
      timeout: timeout == null && nullToAbsent
          ? const Value.absent()
          : Value(timeout),
      tipoConfiguracao: tipoConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoConfiguracao),
    );
  }

  factory PdvConfiguracaoBalanca.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvConfiguracaoBalanca(
      id: serializer.fromJson<int?>(json['id']),
      idPdvConfiguracao: serializer.fromJson<int?>(json['idPdvConfiguracao']),
      modelo: serializer.fromJson<int?>(json['modelo']),
      identificador: serializer.fromJson<String?>(json['identificador']),
      handShake: serializer.fromJson<int?>(json['handShake']),
      parity: serializer.fromJson<int?>(json['parity']),
      stopBits: serializer.fromJson<int?>(json['stopBits']),
      dataBits: serializer.fromJson<int?>(json['dataBits']),
      baudRate: serializer.fromJson<int?>(json['baudRate']),
      porta: serializer.fromJson<String?>(json['porta']),
      timeout: serializer.fromJson<int?>(json['timeout']),
      tipoConfiguracao: serializer.fromJson<String?>(json['tipoConfiguracao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvConfiguracao': serializer.toJson<int?>(idPdvConfiguracao),
      'modelo': serializer.toJson<int?>(modelo),
      'identificador': serializer.toJson<String?>(identificador),
      'handShake': serializer.toJson<int?>(handShake),
      'parity': serializer.toJson<int?>(parity),
      'stopBits': serializer.toJson<int?>(stopBits),
      'dataBits': serializer.toJson<int?>(dataBits),
      'baudRate': serializer.toJson<int?>(baudRate),
      'porta': serializer.toJson<String?>(porta),
      'timeout': serializer.toJson<int?>(timeout),
      'tipoConfiguracao': serializer.toJson<String?>(tipoConfiguracao),
    };
  }

  PdvConfiguracaoBalanca copyWith(
          {int? id,
          int? idPdvConfiguracao,
          int? modelo,
          String? identificador,
          int? handShake,
          int? parity,
          int? stopBits,
          int? dataBits,
          int? baudRate,
          String? porta,
          int? timeout,
          String? tipoConfiguracao}) =>
      PdvConfiguracaoBalanca(
        id: id ?? this.id,
        idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
        modelo: modelo ?? this.modelo,
        identificador: identificador ?? this.identificador,
        handShake: handShake ?? this.handShake,
        parity: parity ?? this.parity,
        stopBits: stopBits ?? this.stopBits,
        dataBits: dataBits ?? this.dataBits,
        baudRate: baudRate ?? this.baudRate,
        porta: porta ?? this.porta,
        timeout: timeout ?? this.timeout,
        tipoConfiguracao: tipoConfiguracao ?? this.tipoConfiguracao,
      );
  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaoBalanca(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('modelo: $modelo, ')
          ..write('identificador: $identificador, ')
          ..write('handShake: $handShake, ')
          ..write('parity: $parity, ')
          ..write('stopBits: $stopBits, ')
          ..write('dataBits: $dataBits, ')
          ..write('baudRate: $baudRate, ')
          ..write('porta: $porta, ')
          ..write('timeout: $timeout, ')
          ..write('tipoConfiguracao: $tipoConfiguracao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idPdvConfiguracao,
      modelo,
      identificador,
      handShake,
      parity,
      stopBits,
      dataBits,
      baudRate,
      porta,
      timeout,
      tipoConfiguracao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvConfiguracaoBalanca &&
          other.id == this.id &&
          other.idPdvConfiguracao == this.idPdvConfiguracao &&
          other.modelo == this.modelo &&
          other.identificador == this.identificador &&
          other.handShake == this.handShake &&
          other.parity == this.parity &&
          other.stopBits == this.stopBits &&
          other.dataBits == this.dataBits &&
          other.baudRate == this.baudRate &&
          other.porta == this.porta &&
          other.timeout == this.timeout &&
          other.tipoConfiguracao == this.tipoConfiguracao);
}

class PdvConfiguracaoBalancasCompanion
    extends UpdateCompanion<PdvConfiguracaoBalanca> {
  final Value<int?> id;
  final Value<int?> idPdvConfiguracao;
  final Value<int?> modelo;
  final Value<String?> identificador;
  final Value<int?> handShake;
  final Value<int?> parity;
  final Value<int?> stopBits;
  final Value<int?> dataBits;
  final Value<int?> baudRate;
  final Value<String?> porta;
  final Value<int?> timeout;
  final Value<String?> tipoConfiguracao;
  const PdvConfiguracaoBalancasCompanion({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.modelo = const Value.absent(),
    this.identificador = const Value.absent(),
    this.handShake = const Value.absent(),
    this.parity = const Value.absent(),
    this.stopBits = const Value.absent(),
    this.dataBits = const Value.absent(),
    this.baudRate = const Value.absent(),
    this.porta = const Value.absent(),
    this.timeout = const Value.absent(),
    this.tipoConfiguracao = const Value.absent(),
  });
  PdvConfiguracaoBalancasCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.modelo = const Value.absent(),
    this.identificador = const Value.absent(),
    this.handShake = const Value.absent(),
    this.parity = const Value.absent(),
    this.stopBits = const Value.absent(),
    this.dataBits = const Value.absent(),
    this.baudRate = const Value.absent(),
    this.porta = const Value.absent(),
    this.timeout = const Value.absent(),
    this.tipoConfiguracao = const Value.absent(),
  });
  static Insertable<PdvConfiguracaoBalanca> custom({
    Expression<int>? id,
    Expression<int>? idPdvConfiguracao,
    Expression<int>? modelo,
    Expression<String>? identificador,
    Expression<int>? handShake,
    Expression<int>? parity,
    Expression<int>? stopBits,
    Expression<int>? dataBits,
    Expression<int>? baudRate,
    Expression<String>? porta,
    Expression<int>? timeout,
    Expression<String>? tipoConfiguracao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
      if (modelo != null) 'MODELO': modelo,
      if (identificador != null) 'IDENTIFICADOR': identificador,
      if (handShake != null) 'HAND_SHAKE': handShake,
      if (parity != null) 'PARITY': parity,
      if (stopBits != null) 'STOP_BITS': stopBits,
      if (dataBits != null) 'DATA_BITS': dataBits,
      if (baudRate != null) 'BAUD_RATE': baudRate,
      if (porta != null) 'PORTA': porta,
      if (timeout != null) 'TIMEOUT': timeout,
      if (tipoConfiguracao != null) 'TIPO_CONFIGURACAO': tipoConfiguracao,
    });
  }

  PdvConfiguracaoBalancasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvConfiguracao,
      Value<int?>? modelo,
      Value<String?>? identificador,
      Value<int?>? handShake,
      Value<int?>? parity,
      Value<int?>? stopBits,
      Value<int?>? dataBits,
      Value<int?>? baudRate,
      Value<String?>? porta,
      Value<int?>? timeout,
      Value<String?>? tipoConfiguracao}) {
    return PdvConfiguracaoBalancasCompanion(
      id: id ?? this.id,
      idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
      modelo: modelo ?? this.modelo,
      identificador: identificador ?? this.identificador,
      handShake: handShake ?? this.handShake,
      parity: parity ?? this.parity,
      stopBits: stopBits ?? this.stopBits,
      dataBits: dataBits ?? this.dataBits,
      baudRate: baudRate ?? this.baudRate,
      porta: porta ?? this.porta,
      timeout: timeout ?? this.timeout,
      tipoConfiguracao: tipoConfiguracao ?? this.tipoConfiguracao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvConfiguracao.present) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao.value);
    }
    if (modelo.present) {
      map['MODELO'] = Variable<int>(modelo.value);
    }
    if (identificador.present) {
      map['IDENTIFICADOR'] = Variable<String>(identificador.value);
    }
    if (handShake.present) {
      map['HAND_SHAKE'] = Variable<int>(handShake.value);
    }
    if (parity.present) {
      map['PARITY'] = Variable<int>(parity.value);
    }
    if (stopBits.present) {
      map['STOP_BITS'] = Variable<int>(stopBits.value);
    }
    if (dataBits.present) {
      map['DATA_BITS'] = Variable<int>(dataBits.value);
    }
    if (baudRate.present) {
      map['BAUD_RATE'] = Variable<int>(baudRate.value);
    }
    if (porta.present) {
      map['PORTA'] = Variable<String>(porta.value);
    }
    if (timeout.present) {
      map['TIMEOUT'] = Variable<int>(timeout.value);
    }
    if (tipoConfiguracao.present) {
      map['TIPO_CONFIGURACAO'] = Variable<String>(tipoConfiguracao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaoBalancasCompanion(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('modelo: $modelo, ')
          ..write('identificador: $identificador, ')
          ..write('handShake: $handShake, ')
          ..write('parity: $parity, ')
          ..write('stopBits: $stopBits, ')
          ..write('dataBits: $dataBits, ')
          ..write('baudRate: $baudRate, ')
          ..write('porta: $porta, ')
          ..write('timeout: $timeout, ')
          ..write('tipoConfiguracao: $tipoConfiguracao')
          ..write(')'))
        .toString();
  }
}

class $PdvConfiguracaoBalancasTable extends PdvConfiguracaoBalancas
    with TableInfo<$PdvConfiguracaoBalancasTable, PdvConfiguracaoBalanca> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvConfiguracaoBalancasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvConfiguracaoMeta =
      const VerificationMeta('idPdvConfiguracao');
  @override
  late final GeneratedColumn<int> idPdvConfiguracao = GeneratedColumn<int>(
      'ID_PDV_CONFIGURACAO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
  final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  @override
  late final GeneratedColumn<int> modelo = GeneratedColumn<int>(
      'MODELO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _identificadorMeta =
      const VerificationMeta('identificador');
  @override
  late final GeneratedColumn<String> identificador = GeneratedColumn<String>(
      'IDENTIFICADOR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _handShakeMeta = const VerificationMeta('handShake');
  @override
  late final GeneratedColumn<int> handShake = GeneratedColumn<int>(
      'HAND_SHAKE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _parityMeta = const VerificationMeta('parity');
  @override
  late final GeneratedColumn<int> parity = GeneratedColumn<int>(
      'PARITY', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _stopBitsMeta = const VerificationMeta('stopBits');
  @override
  late final GeneratedColumn<int> stopBits = GeneratedColumn<int>(
      'STOP_BITS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataBitsMeta = const VerificationMeta('dataBits');
  @override
  late final GeneratedColumn<int> dataBits = GeneratedColumn<int>(
      'DATA_BITS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _baudRateMeta = const VerificationMeta('baudRate');
  @override
  late final GeneratedColumn<int> baudRate = GeneratedColumn<int>(
      'BAUD_RATE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _portaMeta = const VerificationMeta('porta');
  @override
  late final GeneratedColumn<String> porta = GeneratedColumn<String>(
      'PORTA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _timeoutMeta = const VerificationMeta('timeout');
  @override
  late final GeneratedColumn<int> timeout = GeneratedColumn<int>(
      'TIMEOUT', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _tipoConfiguracaoMeta =
      const VerificationMeta('tipoConfiguracao');
  @override
  late final GeneratedColumn<String> tipoConfiguracao =
      GeneratedColumn<String>('TIPO_CONFIGURACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvConfiguracao,
        modelo,
        identificador,
        handShake,
        parity,
        stopBits,
        dataBits,
        baudRate,
        porta,
        timeout,
        tipoConfiguracao
      ];
  @override
  String get aliasedName => _alias ?? 'PDV_CONFIGURACAO_BALANCA';
  @override
  String get actualTableName => 'PDV_CONFIGURACAO_BALANCA';
  @override
  VerificationContext validateIntegrity(
      Insertable<PdvConfiguracaoBalanca> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_CONFIGURACAO')) {
      context.handle(
          _idPdvConfiguracaoMeta,
          idPdvConfiguracao.isAcceptableOrUnknown(
              data['ID_PDV_CONFIGURACAO']!, _idPdvConfiguracaoMeta));
    }
    if (data.containsKey('MODELO')) {
      context.handle(_modeloMeta,
          modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
    }
    if (data.containsKey('IDENTIFICADOR')) {
      context.handle(
          _identificadorMeta,
          identificador.isAcceptableOrUnknown(
              data['IDENTIFICADOR']!, _identificadorMeta));
    }
    if (data.containsKey('HAND_SHAKE')) {
      context.handle(_handShakeMeta,
          handShake.isAcceptableOrUnknown(data['HAND_SHAKE']!, _handShakeMeta));
    }
    if (data.containsKey('PARITY')) {
      context.handle(_parityMeta,
          parity.isAcceptableOrUnknown(data['PARITY']!, _parityMeta));
    }
    if (data.containsKey('STOP_BITS')) {
      context.handle(_stopBitsMeta,
          stopBits.isAcceptableOrUnknown(data['STOP_BITS']!, _stopBitsMeta));
    }
    if (data.containsKey('DATA_BITS')) {
      context.handle(_dataBitsMeta,
          dataBits.isAcceptableOrUnknown(data['DATA_BITS']!, _dataBitsMeta));
    }
    if (data.containsKey('BAUD_RATE')) {
      context.handle(_baudRateMeta,
          baudRate.isAcceptableOrUnknown(data['BAUD_RATE']!, _baudRateMeta));
    }
    if (data.containsKey('PORTA')) {
      context.handle(
          _portaMeta, porta.isAcceptableOrUnknown(data['PORTA']!, _portaMeta));
    }
    if (data.containsKey('TIMEOUT')) {
      context.handle(_timeoutMeta,
          timeout.isAcceptableOrUnknown(data['TIMEOUT']!, _timeoutMeta));
    }
    if (data.containsKey('TIPO_CONFIGURACAO')) {
      context.handle(
          _tipoConfiguracaoMeta,
          tipoConfiguracao.isAcceptableOrUnknown(
              data['TIPO_CONFIGURACAO']!, _tipoConfiguracaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvConfiguracaoBalanca map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvConfiguracaoBalanca.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvConfiguracaoBalancasTable createAlias(String alias) {
    return $PdvConfiguracaoBalancasTable(attachedDatabase, alias);
  }
}

class PdvConfiguracaoLeitorSerial extends DataClass
    implements Insertable<PdvConfiguracaoLeitorSerial> {
  final int? id;
  final int? idPdvConfiguracao;
  final String? usa;
  final String? porta;
  final int? baud;
  final int? handShake;
  final int? parity;
  final int? stopBits;
  final int? dataBits;
  final int? intervalo;
  final String? usarFila;
  final String? hardFlow;
  final String? softFlow;
  final String? sufixo;
  final String? excluirSufixo;
  PdvConfiguracaoLeitorSerial(
      {this.id,
      this.idPdvConfiguracao,
      this.usa,
      this.porta,
      this.baud,
      this.handShake,
      this.parity,
      this.stopBits,
      this.dataBits,
      this.intervalo,
      this.usarFila,
      this.hardFlow,
      this.softFlow,
      this.sufixo,
      this.excluirSufixo});
  factory PdvConfiguracaoLeitorSerial.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvConfiguracaoLeitorSerial(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvConfiguracao: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
      usa: ValueSqlType.stringType(data['${effectivePrefix}USA']),
      porta: ValueSqlType.stringType(data['${effectivePrefix}PORTA']),
      baud: ValueSqlType.intType(data['${effectivePrefix}BAUD']),
      handShake: ValueSqlType.intType(data['${effectivePrefix}HAND_SHAKE']),
      parity: ValueSqlType.intType(data['${effectivePrefix}PARITY']),
      stopBits: ValueSqlType.intType(data['${effectivePrefix}STOP_BITS']),
      dataBits: ValueSqlType.intType(data['${effectivePrefix}DATA_BITS']),
      intervalo: ValueSqlType.intType(data['${effectivePrefix}INTERVALO']),
      usarFila: ValueSqlType.stringType(data['${effectivePrefix}USAR_FILA']),
      hardFlow: ValueSqlType.stringType(data['${effectivePrefix}HARD_FLOW']),
      softFlow: ValueSqlType.stringType(data['${effectivePrefix}SOFT_FLOW']),
      sufixo: ValueSqlType.stringType(data['${effectivePrefix}SUFIXO']),
      excluirSufixo: ValueSqlType.stringType(data['${effectivePrefix}EXCLUIR_SUFIXO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvConfiguracao != null) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao);
    }
    if (!nullToAbsent || usa != null) {
      map['USA'] = Variable<String>(usa);
    }
    if (!nullToAbsent || porta != null) {
      map['PORTA'] = Variable<String>(porta);
    }
    if (!nullToAbsent || baud != null) {
      map['BAUD'] = Variable<int>(baud);
    }
    if (!nullToAbsent || handShake != null) {
      map['HAND_SHAKE'] = Variable<int>(handShake);
    }
    if (!nullToAbsent || parity != null) {
      map['PARITY'] = Variable<int>(parity);
    }
    if (!nullToAbsent || stopBits != null) {
      map['STOP_BITS'] = Variable<int>(stopBits);
    }
    if (!nullToAbsent || dataBits != null) {
      map['DATA_BITS'] = Variable<int>(dataBits);
    }
    if (!nullToAbsent || intervalo != null) {
      map['INTERVALO'] = Variable<int>(intervalo);
    }
    if (!nullToAbsent || usarFila != null) {
      map['USAR_FILA'] = Variable<String>(usarFila);
    }
    if (!nullToAbsent || hardFlow != null) {
      map['HARD_FLOW'] = Variable<String>(hardFlow);
    }
    if (!nullToAbsent || softFlow != null) {
      map['SOFT_FLOW'] = Variable<String>(softFlow);
    }
    if (!nullToAbsent || sufixo != null) {
      map['SUFIXO'] = Variable<String>(sufixo);
    }
    if (!nullToAbsent || excluirSufixo != null) {
      map['EXCLUIR_SUFIXO'] = Variable<String>(excluirSufixo);
    }
    return map;
  }

  PdvConfiguracaoLeitorSerialsCompanion toCompanion(bool nullToAbsent) {
    return PdvConfiguracaoLeitorSerialsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvConfiguracao: idPdvConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvConfiguracao),
      usa: usa == null && nullToAbsent ? const Value.absent() : Value(usa),
      porta:
          porta == null && nullToAbsent ? const Value.absent() : Value(porta),
      baud: baud == null && nullToAbsent ? const Value.absent() : Value(baud),
      handShake: handShake == null && nullToAbsent
          ? const Value.absent()
          : Value(handShake),
      parity:
          parity == null && nullToAbsent ? const Value.absent() : Value(parity),
      stopBits: stopBits == null && nullToAbsent
          ? const Value.absent()
          : Value(stopBits),
      dataBits: dataBits == null && nullToAbsent
          ? const Value.absent()
          : Value(dataBits),
      intervalo: intervalo == null && nullToAbsent
          ? const Value.absent()
          : Value(intervalo),
      usarFila: usarFila == null && nullToAbsent
          ? const Value.absent()
          : Value(usarFila),
      hardFlow: hardFlow == null && nullToAbsent
          ? const Value.absent()
          : Value(hardFlow),
      softFlow: softFlow == null && nullToAbsent
          ? const Value.absent()
          : Value(softFlow),
      sufixo:
          sufixo == null && nullToAbsent ? const Value.absent() : Value(sufixo),
      excluirSufixo: excluirSufixo == null && nullToAbsent
          ? const Value.absent()
          : Value(excluirSufixo),
    );
  }

  factory PdvConfiguracaoLeitorSerial.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvConfiguracaoLeitorSerial(
      id: serializer.fromJson<int?>(json['id']),
      idPdvConfiguracao: serializer.fromJson<int?>(json['idPdvConfiguracao']),
      usa: serializer.fromJson<String?>(json['usa']),
      porta: serializer.fromJson<String?>(json['porta']),
      baud: serializer.fromJson<int?>(json['baud']),
      handShake: serializer.fromJson<int?>(json['handShake']),
      parity: serializer.fromJson<int?>(json['parity']),
      stopBits: serializer.fromJson<int?>(json['stopBits']),
      dataBits: serializer.fromJson<int?>(json['dataBits']),
      intervalo: serializer.fromJson<int?>(json['intervalo']),
      usarFila: serializer.fromJson<String?>(json['usarFila']),
      hardFlow: serializer.fromJson<String?>(json['hardFlow']),
      softFlow: serializer.fromJson<String?>(json['softFlow']),
      sufixo: serializer.fromJson<String?>(json['sufixo']),
      excluirSufixo: serializer.fromJson<String?>(json['excluirSufixo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvConfiguracao': serializer.toJson<int?>(idPdvConfiguracao),
      'usa': serializer.toJson<String?>(usa),
      'porta': serializer.toJson<String?>(porta),
      'baud': serializer.toJson<int?>(baud),
      'handShake': serializer.toJson<int?>(handShake),
      'parity': serializer.toJson<int?>(parity),
      'stopBits': serializer.toJson<int?>(stopBits),
      'dataBits': serializer.toJson<int?>(dataBits),
      'intervalo': serializer.toJson<int?>(intervalo),
      'usarFila': serializer.toJson<String?>(usarFila),
      'hardFlow': serializer.toJson<String?>(hardFlow),
      'softFlow': serializer.toJson<String?>(softFlow),
      'sufixo': serializer.toJson<String?>(sufixo),
      'excluirSufixo': serializer.toJson<String?>(excluirSufixo),
    };
  }

  PdvConfiguracaoLeitorSerial copyWith(
          {int? id,
          int? idPdvConfiguracao,
          String? usa,
          String? porta,
          int? baud,
          int? handShake,
          int? parity,
          int? stopBits,
          int? dataBits,
          int? intervalo,
          String? usarFila,
          String? hardFlow,
          String? softFlow,
          String? sufixo,
          String? excluirSufixo}) =>
      PdvConfiguracaoLeitorSerial(
        id: id ?? this.id,
        idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
        usa: usa ?? this.usa,
        porta: porta ?? this.porta,
        baud: baud ?? this.baud,
        handShake: handShake ?? this.handShake,
        parity: parity ?? this.parity,
        stopBits: stopBits ?? this.stopBits,
        dataBits: dataBits ?? this.dataBits,
        intervalo: intervalo ?? this.intervalo,
        usarFila: usarFila ?? this.usarFila,
        hardFlow: hardFlow ?? this.hardFlow,
        softFlow: softFlow ?? this.softFlow,
        sufixo: sufixo ?? this.sufixo,
        excluirSufixo: excluirSufixo ?? this.excluirSufixo,
      );
  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaoLeitorSerial(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('usa: $usa, ')
          ..write('porta: $porta, ')
          ..write('baud: $baud, ')
          ..write('handShake: $handShake, ')
          ..write('parity: $parity, ')
          ..write('stopBits: $stopBits, ')
          ..write('dataBits: $dataBits, ')
          ..write('intervalo: $intervalo, ')
          ..write('usarFila: $usarFila, ')
          ..write('hardFlow: $hardFlow, ')
          ..write('softFlow: $softFlow, ')
          ..write('sufixo: $sufixo, ')
          ..write('excluirSufixo: $excluirSufixo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idPdvConfiguracao,
      usa,
      porta,
      baud,
      handShake,
      parity,
      stopBits,
      dataBits,
      intervalo,
      usarFila,
      hardFlow,
      softFlow,
      sufixo,
      excluirSufixo);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvConfiguracaoLeitorSerial &&
          other.id == this.id &&
          other.idPdvConfiguracao == this.idPdvConfiguracao &&
          other.usa == this.usa &&
          other.porta == this.porta &&
          other.baud == this.baud &&
          other.handShake == this.handShake &&
          other.parity == this.parity &&
          other.stopBits == this.stopBits &&
          other.dataBits == this.dataBits &&
          other.intervalo == this.intervalo &&
          other.usarFila == this.usarFila &&
          other.hardFlow == this.hardFlow &&
          other.softFlow == this.softFlow &&
          other.sufixo == this.sufixo &&
          other.excluirSufixo == this.excluirSufixo);
}

class PdvConfiguracaoLeitorSerialsCompanion
    extends UpdateCompanion<PdvConfiguracaoLeitorSerial> {
  final Value<int?> id;
  final Value<int?> idPdvConfiguracao;
  final Value<String?> usa;
  final Value<String?> porta;
  final Value<int?> baud;
  final Value<int?> handShake;
  final Value<int?> parity;
  final Value<int?> stopBits;
  final Value<int?> dataBits;
  final Value<int?> intervalo;
  final Value<String?> usarFila;
  final Value<String?> hardFlow;
  final Value<String?> softFlow;
  final Value<String?> sufixo;
  final Value<String?> excluirSufixo;
  const PdvConfiguracaoLeitorSerialsCompanion({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.usa = const Value.absent(),
    this.porta = const Value.absent(),
    this.baud = const Value.absent(),
    this.handShake = const Value.absent(),
    this.parity = const Value.absent(),
    this.stopBits = const Value.absent(),
    this.dataBits = const Value.absent(),
    this.intervalo = const Value.absent(),
    this.usarFila = const Value.absent(),
    this.hardFlow = const Value.absent(),
    this.softFlow = const Value.absent(),
    this.sufixo = const Value.absent(),
    this.excluirSufixo = const Value.absent(),
  });
  PdvConfiguracaoLeitorSerialsCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.usa = const Value.absent(),
    this.porta = const Value.absent(),
    this.baud = const Value.absent(),
    this.handShake = const Value.absent(),
    this.parity = const Value.absent(),
    this.stopBits = const Value.absent(),
    this.dataBits = const Value.absent(),
    this.intervalo = const Value.absent(),
    this.usarFila = const Value.absent(),
    this.hardFlow = const Value.absent(),
    this.softFlow = const Value.absent(),
    this.sufixo = const Value.absent(),
    this.excluirSufixo = const Value.absent(),
  });
  static Insertable<PdvConfiguracaoLeitorSerial> custom({
    Expression<int>? id,
    Expression<int>? idPdvConfiguracao,
    Expression<String>? usa,
    Expression<String>? porta,
    Expression<int>? baud,
    Expression<int>? handShake,
    Expression<int>? parity,
    Expression<int>? stopBits,
    Expression<int>? dataBits,
    Expression<int>? intervalo,
    Expression<String>? usarFila,
    Expression<String>? hardFlow,
    Expression<String>? softFlow,
    Expression<String>? sufixo,
    Expression<String>? excluirSufixo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
      if (usa != null) 'USA': usa,
      if (porta != null) 'PORTA': porta,
      if (baud != null) 'BAUD': baud,
      if (handShake != null) 'HAND_SHAKE': handShake,
      if (parity != null) 'PARITY': parity,
      if (stopBits != null) 'STOP_BITS': stopBits,
      if (dataBits != null) 'DATA_BITS': dataBits,
      if (intervalo != null) 'INTERVALO': intervalo,
      if (usarFila != null) 'USAR_FILA': usarFila,
      if (hardFlow != null) 'HARD_FLOW': hardFlow,
      if (softFlow != null) 'SOFT_FLOW': softFlow,
      if (sufixo != null) 'SUFIXO': sufixo,
      if (excluirSufixo != null) 'EXCLUIR_SUFIXO': excluirSufixo,
    });
  }

  PdvConfiguracaoLeitorSerialsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvConfiguracao,
      Value<String?>? usa,
      Value<String?>? porta,
      Value<int?>? baud,
      Value<int?>? handShake,
      Value<int?>? parity,
      Value<int?>? stopBits,
      Value<int?>? dataBits,
      Value<int?>? intervalo,
      Value<String?>? usarFila,
      Value<String?>? hardFlow,
      Value<String?>? softFlow,
      Value<String?>? sufixo,
      Value<String?>? excluirSufixo}) {
    return PdvConfiguracaoLeitorSerialsCompanion(
      id: id ?? this.id,
      idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
      usa: usa ?? this.usa,
      porta: porta ?? this.porta,
      baud: baud ?? this.baud,
      handShake: handShake ?? this.handShake,
      parity: parity ?? this.parity,
      stopBits: stopBits ?? this.stopBits,
      dataBits: dataBits ?? this.dataBits,
      intervalo: intervalo ?? this.intervalo,
      usarFila: usarFila ?? this.usarFila,
      hardFlow: hardFlow ?? this.hardFlow,
      softFlow: softFlow ?? this.softFlow,
      sufixo: sufixo ?? this.sufixo,
      excluirSufixo: excluirSufixo ?? this.excluirSufixo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvConfiguracao.present) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao.value);
    }
    if (usa.present) {
      map['USA'] = Variable<String>(usa.value);
    }
    if (porta.present) {
      map['PORTA'] = Variable<String>(porta.value);
    }
    if (baud.present) {
      map['BAUD'] = Variable<int>(baud.value);
    }
    if (handShake.present) {
      map['HAND_SHAKE'] = Variable<int>(handShake.value);
    }
    if (parity.present) {
      map['PARITY'] = Variable<int>(parity.value);
    }
    if (stopBits.present) {
      map['STOP_BITS'] = Variable<int>(stopBits.value);
    }
    if (dataBits.present) {
      map['DATA_BITS'] = Variable<int>(dataBits.value);
    }
    if (intervalo.present) {
      map['INTERVALO'] = Variable<int>(intervalo.value);
    }
    if (usarFila.present) {
      map['USAR_FILA'] = Variable<String>(usarFila.value);
    }
    if (hardFlow.present) {
      map['HARD_FLOW'] = Variable<String>(hardFlow.value);
    }
    if (softFlow.present) {
      map['SOFT_FLOW'] = Variable<String>(softFlow.value);
    }
    if (sufixo.present) {
      map['SUFIXO'] = Variable<String>(sufixo.value);
    }
    if (excluirSufixo.present) {
      map['EXCLUIR_SUFIXO'] = Variable<String>(excluirSufixo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaoLeitorSerialsCompanion(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('usa: $usa, ')
          ..write('porta: $porta, ')
          ..write('baud: $baud, ')
          ..write('handShake: $handShake, ')
          ..write('parity: $parity, ')
          ..write('stopBits: $stopBits, ')
          ..write('dataBits: $dataBits, ')
          ..write('intervalo: $intervalo, ')
          ..write('usarFila: $usarFila, ')
          ..write('hardFlow: $hardFlow, ')
          ..write('softFlow: $softFlow, ')
          ..write('sufixo: $sufixo, ')
          ..write('excluirSufixo: $excluirSufixo')
          ..write(')'))
        .toString();
  }
}

class $PdvConfiguracaoLeitorSerialsTable extends PdvConfiguracaoLeitorSerials
    with
        TableInfo<$PdvConfiguracaoLeitorSerialsTable,
            PdvConfiguracaoLeitorSerial> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvConfiguracaoLeitorSerialsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvConfiguracaoMeta =
      const VerificationMeta('idPdvConfiguracao');
  @override
  late final GeneratedColumn<int> idPdvConfiguracao = GeneratedColumn<int>(
      'ID_PDV_CONFIGURACAO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
  final VerificationMeta _usaMeta = const VerificationMeta('usa');
  @override
  late final GeneratedColumn<String> usa = GeneratedColumn<String>(
      'USA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _portaMeta = const VerificationMeta('porta');
  @override
  late final GeneratedColumn<String> porta = GeneratedColumn<String>(
      'PORTA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _baudMeta = const VerificationMeta('baud');
  @override
  late final GeneratedColumn<int> baud = GeneratedColumn<int>(
      'BAUD', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _handShakeMeta = const VerificationMeta('handShake');
  @override
  late final GeneratedColumn<int> handShake = GeneratedColumn<int>(
      'HAND_SHAKE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _parityMeta = const VerificationMeta('parity');
  @override
  late final GeneratedColumn<int> parity = GeneratedColumn<int>(
      'PARITY', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _stopBitsMeta = const VerificationMeta('stopBits');
  @override
  late final GeneratedColumn<int> stopBits = GeneratedColumn<int>(
      'STOP_BITS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataBitsMeta = const VerificationMeta('dataBits');
  @override
  late final GeneratedColumn<int> dataBits = GeneratedColumn<int>(
      'DATA_BITS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _intervaloMeta = const VerificationMeta('intervalo');
  @override
  late final GeneratedColumn<int> intervalo = GeneratedColumn<int>(
      'INTERVALO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _usarFilaMeta = const VerificationMeta('usarFila');
  @override
  late final GeneratedColumn<String> usarFila = GeneratedColumn<String>(
      'USAR_FILA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _hardFlowMeta = const VerificationMeta('hardFlow');
  @override
  late final GeneratedColumn<String> hardFlow = GeneratedColumn<String>(
      'HARD_FLOW', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _softFlowMeta = const VerificationMeta('softFlow');
  @override
  late final GeneratedColumn<String> softFlow = GeneratedColumn<String>(
      'SOFT_FLOW', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _sufixoMeta = const VerificationMeta('sufixo');
  @override
  late final GeneratedColumn<String> sufixo = GeneratedColumn<String>(
      'SUFIXO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _excluirSufixoMeta =
      const VerificationMeta('excluirSufixo');
  @override
  late final GeneratedColumn<String> excluirSufixo = GeneratedColumn<String>(
      'EXCLUIR_SUFIXO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvConfiguracao,
        usa,
        porta,
        baud,
        handShake,
        parity,
        stopBits,
        dataBits,
        intervalo,
        usarFila,
        hardFlow,
        softFlow,
        sufixo,
        excluirSufixo
      ];
  @override
  String get aliasedName => _alias ?? 'PDV_CONFIGURACAO_LEITOR_SERIAL';
  @override
  String get actualTableName => 'PDV_CONFIGURACAO_LEITOR_SERIAL';
  @override
  VerificationContext validateIntegrity(
      Insertable<PdvConfiguracaoLeitorSerial> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_CONFIGURACAO')) {
      context.handle(
          _idPdvConfiguracaoMeta,
          idPdvConfiguracao.isAcceptableOrUnknown(
              data['ID_PDV_CONFIGURACAO']!, _idPdvConfiguracaoMeta));
    }
    if (data.containsKey('USA')) {
      context.handle(
          _usaMeta, usa.isAcceptableOrUnknown(data['USA']!, _usaMeta));
    }
    if (data.containsKey('PORTA')) {
      context.handle(
          _portaMeta, porta.isAcceptableOrUnknown(data['PORTA']!, _portaMeta));
    }
    if (data.containsKey('BAUD')) {
      context.handle(
          _baudMeta, baud.isAcceptableOrUnknown(data['BAUD']!, _baudMeta));
    }
    if (data.containsKey('HAND_SHAKE')) {
      context.handle(_handShakeMeta,
          handShake.isAcceptableOrUnknown(data['HAND_SHAKE']!, _handShakeMeta));
    }
    if (data.containsKey('PARITY')) {
      context.handle(_parityMeta,
          parity.isAcceptableOrUnknown(data['PARITY']!, _parityMeta));
    }
    if (data.containsKey('STOP_BITS')) {
      context.handle(_stopBitsMeta,
          stopBits.isAcceptableOrUnknown(data['STOP_BITS']!, _stopBitsMeta));
    }
    if (data.containsKey('DATA_BITS')) {
      context.handle(_dataBitsMeta,
          dataBits.isAcceptableOrUnknown(data['DATA_BITS']!, _dataBitsMeta));
    }
    if (data.containsKey('INTERVALO')) {
      context.handle(_intervaloMeta,
          intervalo.isAcceptableOrUnknown(data['INTERVALO']!, _intervaloMeta));
    }
    if (data.containsKey('USAR_FILA')) {
      context.handle(_usarFilaMeta,
          usarFila.isAcceptableOrUnknown(data['USAR_FILA']!, _usarFilaMeta));
    }
    if (data.containsKey('HARD_FLOW')) {
      context.handle(_hardFlowMeta,
          hardFlow.isAcceptableOrUnknown(data['HARD_FLOW']!, _hardFlowMeta));
    }
    if (data.containsKey('SOFT_FLOW')) {
      context.handle(_softFlowMeta,
          softFlow.isAcceptableOrUnknown(data['SOFT_FLOW']!, _softFlowMeta));
    }
    if (data.containsKey('SUFIXO')) {
      context.handle(_sufixoMeta,
          sufixo.isAcceptableOrUnknown(data['SUFIXO']!, _sufixoMeta));
    }
    if (data.containsKey('EXCLUIR_SUFIXO')) {
      context.handle(
          _excluirSufixoMeta,
          excluirSufixo.isAcceptableOrUnknown(
              data['EXCLUIR_SUFIXO']!, _excluirSufixoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvConfiguracaoLeitorSerial map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return PdvConfiguracaoLeitorSerial.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvConfiguracaoLeitorSerialsTable createAlias(String alias) {
    return $PdvConfiguracaoLeitorSerialsTable(attachedDatabase, alias);
  }
}

class PdvFechamento extends DataClass implements Insertable<PdvFechamento> {
  final int? id;
  final int? idPdvMovimento;
  final int? idPdvTipoPagamento;
  final double? valor;
  PdvFechamento(
      {this.id, this.idPdvMovimento, this.idPdvTipoPagamento, this.valor});
  factory PdvFechamento.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvFechamento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvMovimento: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      idPdvTipoPagamento: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_TIPO_PAGAMENTO']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || idPdvTipoPagamento != null) {
      map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int>(idPdvTipoPagamento);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  PdvFechamentosCompanion toCompanion(bool nullToAbsent) {
    return PdvFechamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      idPdvTipoPagamento: idPdvTipoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvTipoPagamento),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory PdvFechamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvFechamento(
      id: serializer.fromJson<int?>(json['id']),
      idPdvMovimento: serializer.fromJson<int?>(json['idPdvMovimento']),
      idPdvTipoPagamento: serializer.fromJson<int?>(json['idPdvTipoPagamento']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvMovimento': serializer.toJson<int?>(idPdvMovimento),
      'idPdvTipoPagamento': serializer.toJson<int?>(idPdvTipoPagamento),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  PdvFechamento copyWith(
          {int? id,
          int? idPdvMovimento,
          int? idPdvTipoPagamento,
          double? valor}) =>
      PdvFechamento(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('PdvFechamento(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idPdvMovimento, idPdvTipoPagamento, valor);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvFechamento &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.idPdvTipoPagamento == this.idPdvTipoPagamento &&
          other.valor == this.valor);
}

class PdvFechamentosCompanion extends UpdateCompanion<PdvFechamento> {
  final Value<int?> id;
  final Value<int?> idPdvMovimento;
  final Value<int?> idPdvTipoPagamento;
  final Value<double?> valor;
  const PdvFechamentosCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.idPdvTipoPagamento = const Value.absent(),
    this.valor = const Value.absent(),
  });
  PdvFechamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.idPdvTipoPagamento = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<PdvFechamento> custom({
    Expression<int>? id,
    Expression<int>? idPdvMovimento,
    Expression<int>? idPdvTipoPagamento,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (idPdvTipoPagamento != null)
        'ID_PDV_TIPO_PAGAMENTO': idPdvTipoPagamento,
      if (valor != null) 'VALOR': valor,
    });
  }

  PdvFechamentosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvMovimento,
      Value<int?>? idPdvTipoPagamento,
      Value<double?>? valor}) {
    return PdvFechamentosCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (idPdvTipoPagamento.present) {
      map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int>(idPdvTipoPagamento.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvFechamentosCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $PdvFechamentosTable extends PdvFechamentos
    with TableInfo<$PdvFechamentosTable, PdvFechamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvFechamentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  @override
  late final GeneratedColumn<int> idPdvMovimento = GeneratedColumn<int>(
      'ID_PDV_MOVIMENTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  final VerificationMeta _idPdvTipoPagamentoMeta =
      const VerificationMeta('idPdvTipoPagamento');
  @override
  late final GeneratedColumn<int> idPdvTipoPagamento = GeneratedColumn<int>(
      'ID_PDV_TIPO_PAGAMENTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_TIPO_PAGAMENTO(ID)');
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, idPdvTipoPagamento, valor];
  @override
  String get aliasedName => _alias ?? 'PDV_FECHAMENTO';
  @override
  String get actualTableName => 'PDV_FECHAMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvFechamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
    }
    if (data.containsKey('ID_PDV_TIPO_PAGAMENTO')) {
      context.handle(
          _idPdvTipoPagamentoMeta,
          idPdvTipoPagamento.isAcceptableOrUnknown(
              data['ID_PDV_TIPO_PAGAMENTO']!, _idPdvTipoPagamentoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvFechamento map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvFechamento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvFechamentosTable createAlias(String alias) {
    return $PdvFechamentosTable(attachedDatabase, alias);
  }
}

class PdvMovimento extends DataClass implements Insertable<PdvMovimento> {
  final int? id;
  final int? idEcfImpressora;
  final int? idPdvOperador;
  final int? idPdvCaixa;
  final int? idGerenteSupervisor;
  final DateTime? dataAbertura;
  final String? horaAbertura;
  final DateTime? dataFechamento;
  final String? horaFechamento;
  final double? totalSuprimento;
  final double? totalSangria;
  final double? totalNaoFiscal;
  final double? totalVenda;
  final double? totalDesconto;
  final double? totalAcrescimo;
  final double? totalFinal;
  final double? totalRecebido;
  final double? totalTroco;
  final double? totalCancelado;
  final String? statusMovimento;
  PdvMovimento(
      {this.id,
      this.idEcfImpressora,
      this.idPdvOperador,
      this.idPdvCaixa,
      this.idGerenteSupervisor,
      this.dataAbertura,
      this.horaAbertura,
      this.dataFechamento,
      this.horaFechamento,
      this.totalSuprimento,
      this.totalSangria,
      this.totalNaoFiscal,
      this.totalVenda,
      this.totalDesconto,
      this.totalAcrescimo,
      this.totalFinal,
      this.totalRecebido,
      this.totalTroco,
      this.totalCancelado,
      this.statusMovimento});
  factory PdvMovimento.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvMovimento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idEcfImpressora: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
      idPdvOperador: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_OPERADOR']),
      idPdvCaixa: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_CAIXA']),
      idGerenteSupervisor: ValueSqlType.intType(
          data['${effectivePrefix}ID_GERENTE_SUPERVISOR']),
      dataAbertura: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_ABERTURA']),
      horaAbertura: ValueSqlType.stringType(data['${effectivePrefix}HORA_ABERTURA']),
      dataFechamento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_FECHAMENTO']),
      horaFechamento: ValueSqlType.stringType(data['${effectivePrefix}HORA_FECHAMENTO']),
      totalSuprimento: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_SUPRIMENTO']),
      totalSangria: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_SANGRIA']),
      totalNaoFiscal: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_NAO_FISCAL']),
      totalVenda: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_VENDA']),
      totalDesconto: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_DESCONTO']),
      totalAcrescimo: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_ACRESCIMO']),
      totalFinal: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_FINAL']),
      totalRecebido: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_RECEBIDO']),
      totalTroco: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_TROCO']),
      totalCancelado: ValueSqlType.doubleType(data['${effectivePrefix}TOTAL_CANCELADO']),
      statusMovimento: ValueSqlType.stringType(data['${effectivePrefix}STATUS_MOVIMENTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfImpressora != null) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora);
    }
    if (!nullToAbsent || idPdvOperador != null) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador);
    }
    if (!nullToAbsent || idPdvCaixa != null) {
      map['ID_PDV_CAIXA'] = Variable<int>(idPdvCaixa);
    }
    if (!nullToAbsent || idGerenteSupervisor != null) {
      map['ID_GERENTE_SUPERVISOR'] = Variable<int>(idGerenteSupervisor);
    }
    if (!nullToAbsent || dataAbertura != null) {
      map['DATA_ABERTURA'] = Variable<DateTime>(dataAbertura);
    }
    if (!nullToAbsent || horaAbertura != null) {
      map['HORA_ABERTURA'] = Variable<String>(horaAbertura);
    }
    if (!nullToAbsent || dataFechamento != null) {
      map['DATA_FECHAMENTO'] = Variable<DateTime>(dataFechamento);
    }
    if (!nullToAbsent || horaFechamento != null) {
      map['HORA_FECHAMENTO'] = Variable<String>(horaFechamento);
    }
    if (!nullToAbsent || totalSuprimento != null) {
      map['TOTAL_SUPRIMENTO'] = Variable<double>(totalSuprimento);
    }
    if (!nullToAbsent || totalSangria != null) {
      map['TOTAL_SANGRIA'] = Variable<double>(totalSangria);
    }
    if (!nullToAbsent || totalNaoFiscal != null) {
      map['TOTAL_NAO_FISCAL'] = Variable<double>(totalNaoFiscal);
    }
    if (!nullToAbsent || totalVenda != null) {
      map['TOTAL_VENDA'] = Variable<double>(totalVenda);
    }
    if (!nullToAbsent || totalDesconto != null) {
      map['TOTAL_DESCONTO'] = Variable<double>(totalDesconto);
    }
    if (!nullToAbsent || totalAcrescimo != null) {
      map['TOTAL_ACRESCIMO'] = Variable<double>(totalAcrescimo);
    }
    if (!nullToAbsent || totalFinal != null) {
      map['TOTAL_FINAL'] = Variable<double>(totalFinal);
    }
    if (!nullToAbsent || totalRecebido != null) {
      map['TOTAL_RECEBIDO'] = Variable<double>(totalRecebido);
    }
    if (!nullToAbsent || totalTroco != null) {
      map['TOTAL_TROCO'] = Variable<double>(totalTroco);
    }
    if (!nullToAbsent || totalCancelado != null) {
      map['TOTAL_CANCELADO'] = Variable<double>(totalCancelado);
    }
    if (!nullToAbsent || statusMovimento != null) {
      map['STATUS_MOVIMENTO'] = Variable<String>(statusMovimento);
    }
    return map;
  }

  PdvMovimentosCompanion toCompanion(bool nullToAbsent) {
    return PdvMovimentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfImpressora: idEcfImpressora == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfImpressora),
      idPdvOperador: idPdvOperador == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvOperador),
      idPdvCaixa: idPdvCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvCaixa),
      idGerenteSupervisor: idGerenteSupervisor == null && nullToAbsent
          ? const Value.absent()
          : Value(idGerenteSupervisor),
      dataAbertura: dataAbertura == null && nullToAbsent
          ? const Value.absent()
          : Value(dataAbertura),
      horaAbertura: horaAbertura == null && nullToAbsent
          ? const Value.absent()
          : Value(horaAbertura),
      dataFechamento: dataFechamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataFechamento),
      horaFechamento: horaFechamento == null && nullToAbsent
          ? const Value.absent()
          : Value(horaFechamento),
      totalSuprimento: totalSuprimento == null && nullToAbsent
          ? const Value.absent()
          : Value(totalSuprimento),
      totalSangria: totalSangria == null && nullToAbsent
          ? const Value.absent()
          : Value(totalSangria),
      totalNaoFiscal: totalNaoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(totalNaoFiscal),
      totalVenda: totalVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(totalVenda),
      totalDesconto: totalDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(totalDesconto),
      totalAcrescimo: totalAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(totalAcrescimo),
      totalFinal: totalFinal == null && nullToAbsent
          ? const Value.absent()
          : Value(totalFinal),
      totalRecebido: totalRecebido == null && nullToAbsent
          ? const Value.absent()
          : Value(totalRecebido),
      totalTroco: totalTroco == null && nullToAbsent
          ? const Value.absent()
          : Value(totalTroco),
      totalCancelado: totalCancelado == null && nullToAbsent
          ? const Value.absent()
          : Value(totalCancelado),
      statusMovimento: statusMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(statusMovimento),
    );
  }

  factory PdvMovimento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvMovimento(
      id: serializer.fromJson<int?>(json['id']),
      idEcfImpressora: serializer.fromJson<int?>(json['idEcfImpressora']),
      idPdvOperador: serializer.fromJson<int?>(json['idPdvOperador']),
      idPdvCaixa: serializer.fromJson<int?>(json['idPdvCaixa']),
      idGerenteSupervisor:
          serializer.fromJson<int?>(json['idGerenteSupervisor']),
      dataAbertura: serializer.fromJson<DateTime?>(json['dataAbertura']),
      horaAbertura: serializer.fromJson<String?>(json['horaAbertura']),
      dataFechamento: serializer.fromJson<DateTime?>(json['dataFechamento']),
      horaFechamento: serializer.fromJson<String?>(json['horaFechamento']),
      totalSuprimento: serializer.fromJson<double?>(json['totalSuprimento']),
      totalSangria: serializer.fromJson<double?>(json['totalSangria']),
      totalNaoFiscal: serializer.fromJson<double?>(json['totalNaoFiscal']),
      totalVenda: serializer.fromJson<double?>(json['totalVenda']),
      totalDesconto: serializer.fromJson<double?>(json['totalDesconto']),
      totalAcrescimo: serializer.fromJson<double?>(json['totalAcrescimo']),
      totalFinal: serializer.fromJson<double?>(json['totalFinal']),
      totalRecebido: serializer.fromJson<double?>(json['totalRecebido']),
      totalTroco: serializer.fromJson<double?>(json['totalTroco']),
      totalCancelado: serializer.fromJson<double?>(json['totalCancelado']),
      statusMovimento: serializer.fromJson<String?>(json['statusMovimento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idEcfImpressora': serializer.toJson<int?>(idEcfImpressora),
      'idPdvOperador': serializer.toJson<int?>(idPdvOperador),
      'idPdvCaixa': serializer.toJson<int?>(idPdvCaixa),
      'idGerenteSupervisor': serializer.toJson<int?>(idGerenteSupervisor),
      'dataAbertura': serializer.toJson<DateTime?>(dataAbertura),
      'horaAbertura': serializer.toJson<String?>(horaAbertura),
      'dataFechamento': serializer.toJson<DateTime?>(dataFechamento),
      'horaFechamento': serializer.toJson<String?>(horaFechamento),
      'totalSuprimento': serializer.toJson<double?>(totalSuprimento),
      'totalSangria': serializer.toJson<double?>(totalSangria),
      'totalNaoFiscal': serializer.toJson<double?>(totalNaoFiscal),
      'totalVenda': serializer.toJson<double?>(totalVenda),
      'totalDesconto': serializer.toJson<double?>(totalDesconto),
      'totalAcrescimo': serializer.toJson<double?>(totalAcrescimo),
      'totalFinal': serializer.toJson<double?>(totalFinal),
      'totalRecebido': serializer.toJson<double?>(totalRecebido),
      'totalTroco': serializer.toJson<double?>(totalTroco),
      'totalCancelado': serializer.toJson<double?>(totalCancelado),
      'statusMovimento': serializer.toJson<String?>(statusMovimento),
    };
  }

  PdvMovimento copyWith(
          {int? id,
          int? idEcfImpressora,
          int? idPdvOperador,
          int? idPdvCaixa,
          int? idGerenteSupervisor,
          DateTime? dataAbertura,
          String? horaAbertura,
          DateTime? dataFechamento,
          String? horaFechamento,
          double? totalSuprimento,
          double? totalSangria,
          double? totalNaoFiscal,
          double? totalVenda,
          double? totalDesconto,
          double? totalAcrescimo,
          double? totalFinal,
          double? totalRecebido,
          double? totalTroco,
          double? totalCancelado,
          String? statusMovimento}) =>
      PdvMovimento(
        id: id ?? this.id,
        idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
        idPdvOperador: idPdvOperador ?? this.idPdvOperador,
        idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
        idGerenteSupervisor: idGerenteSupervisor ?? this.idGerenteSupervisor,
        dataAbertura: dataAbertura ?? this.dataAbertura,
        horaAbertura: horaAbertura ?? this.horaAbertura,
        dataFechamento: dataFechamento ?? this.dataFechamento,
        horaFechamento: horaFechamento ?? this.horaFechamento,
        totalSuprimento: totalSuprimento ?? this.totalSuprimento,
        totalSangria: totalSangria ?? this.totalSangria,
        totalNaoFiscal: totalNaoFiscal ?? this.totalNaoFiscal,
        totalVenda: totalVenda ?? this.totalVenda,
        totalDesconto: totalDesconto ?? this.totalDesconto,
        totalAcrescimo: totalAcrescimo ?? this.totalAcrescimo,
        totalFinal: totalFinal ?? this.totalFinal,
        totalRecebido: totalRecebido ?? this.totalRecebido,
        totalTroco: totalTroco ?? this.totalTroco,
        totalCancelado: totalCancelado ?? this.totalCancelado,
        statusMovimento: statusMovimento ?? this.statusMovimento,
      );
  @override
  String toString() {
    return (StringBuffer('PdvMovimento(')
          ..write('id: $id, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idPdvCaixa: $idPdvCaixa, ')
          ..write('idGerenteSupervisor: $idGerenteSupervisor, ')
          ..write('dataAbertura: $dataAbertura, ')
          ..write('horaAbertura: $horaAbertura, ')
          ..write('dataFechamento: $dataFechamento, ')
          ..write('horaFechamento: $horaFechamento, ')
          ..write('totalSuprimento: $totalSuprimento, ')
          ..write('totalSangria: $totalSangria, ')
          ..write('totalNaoFiscal: $totalNaoFiscal, ')
          ..write('totalVenda: $totalVenda, ')
          ..write('totalDesconto: $totalDesconto, ')
          ..write('totalAcrescimo: $totalAcrescimo, ')
          ..write('totalFinal: $totalFinal, ')
          ..write('totalRecebido: $totalRecebido, ')
          ..write('totalTroco: $totalTroco, ')
          ..write('totalCancelado: $totalCancelado, ')
          ..write('statusMovimento: $statusMovimento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idEcfImpressora,
      idPdvOperador,
      idPdvCaixa,
      idGerenteSupervisor,
      dataAbertura,
      horaAbertura,
      dataFechamento,
      horaFechamento,
      totalSuprimento,
      totalSangria,
      totalNaoFiscal,
      totalVenda,
      totalDesconto,
      totalAcrescimo,
      totalFinal,
      totalRecebido,
      totalTroco,
      totalCancelado,
      statusMovimento);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvMovimento &&
          other.id == this.id &&
          other.idEcfImpressora == this.idEcfImpressora &&
          other.idPdvOperador == this.idPdvOperador &&
          other.idPdvCaixa == this.idPdvCaixa &&
          other.idGerenteSupervisor == this.idGerenteSupervisor &&
          other.dataAbertura == this.dataAbertura &&
          other.horaAbertura == this.horaAbertura &&
          other.dataFechamento == this.dataFechamento &&
          other.horaFechamento == this.horaFechamento &&
          other.totalSuprimento == this.totalSuprimento &&
          other.totalSangria == this.totalSangria &&
          other.totalNaoFiscal == this.totalNaoFiscal &&
          other.totalVenda == this.totalVenda &&
          other.totalDesconto == this.totalDesconto &&
          other.totalAcrescimo == this.totalAcrescimo &&
          other.totalFinal == this.totalFinal &&
          other.totalRecebido == this.totalRecebido &&
          other.totalTroco == this.totalTroco &&
          other.totalCancelado == this.totalCancelado &&
          other.statusMovimento == this.statusMovimento);
}

class PdvMovimentosCompanion extends UpdateCompanion<PdvMovimento> {
  final Value<int?> id;
  final Value<int?> idEcfImpressora;
  final Value<int?> idPdvOperador;
  final Value<int?> idPdvCaixa;
  final Value<int?> idGerenteSupervisor;
  final Value<DateTime?> dataAbertura;
  final Value<String?> horaAbertura;
  final Value<DateTime?> dataFechamento;
  final Value<String?> horaFechamento;
  final Value<double?> totalSuprimento;
  final Value<double?> totalSangria;
  final Value<double?> totalNaoFiscal;
  final Value<double?> totalVenda;
  final Value<double?> totalDesconto;
  final Value<double?> totalAcrescimo;
  final Value<double?> totalFinal;
  final Value<double?> totalRecebido;
  final Value<double?> totalTroco;
  final Value<double?> totalCancelado;
  final Value<String?> statusMovimento;
  const PdvMovimentosCompanion({
    this.id = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idPdvCaixa = const Value.absent(),
    this.idGerenteSupervisor = const Value.absent(),
    this.dataAbertura = const Value.absent(),
    this.horaAbertura = const Value.absent(),
    this.dataFechamento = const Value.absent(),
    this.horaFechamento = const Value.absent(),
    this.totalSuprimento = const Value.absent(),
    this.totalSangria = const Value.absent(),
    this.totalNaoFiscal = const Value.absent(),
    this.totalVenda = const Value.absent(),
    this.totalDesconto = const Value.absent(),
    this.totalAcrescimo = const Value.absent(),
    this.totalFinal = const Value.absent(),
    this.totalRecebido = const Value.absent(),
    this.totalTroco = const Value.absent(),
    this.totalCancelado = const Value.absent(),
    this.statusMovimento = const Value.absent(),
  });
  PdvMovimentosCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idPdvCaixa = const Value.absent(),
    this.idGerenteSupervisor = const Value.absent(),
    this.dataAbertura = const Value.absent(),
    this.horaAbertura = const Value.absent(),
    this.dataFechamento = const Value.absent(),
    this.horaFechamento = const Value.absent(),
    this.totalSuprimento = const Value.absent(),
    this.totalSangria = const Value.absent(),
    this.totalNaoFiscal = const Value.absent(),
    this.totalVenda = const Value.absent(),
    this.totalDesconto = const Value.absent(),
    this.totalAcrescimo = const Value.absent(),
    this.totalFinal = const Value.absent(),
    this.totalRecebido = const Value.absent(),
    this.totalTroco = const Value.absent(),
    this.totalCancelado = const Value.absent(),
    this.statusMovimento = const Value.absent(),
  });
  static Insertable<PdvMovimento> custom({
    Expression<int>? id,
    Expression<int>? idEcfImpressora,
    Expression<int>? idPdvOperador,
    Expression<int>? idPdvCaixa,
    Expression<int>? idGerenteSupervisor,
    Expression<DateTime>? dataAbertura,
    Expression<String>? horaAbertura,
    Expression<DateTime>? dataFechamento,
    Expression<String>? horaFechamento,
    Expression<double>? totalSuprimento,
    Expression<double>? totalSangria,
    Expression<double>? totalNaoFiscal,
    Expression<double>? totalVenda,
    Expression<double>? totalDesconto,
    Expression<double>? totalAcrescimo,
    Expression<double>? totalFinal,
    Expression<double>? totalRecebido,
    Expression<double>? totalTroco,
    Expression<double>? totalCancelado,
    Expression<String>? statusMovimento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
      if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
      if (idPdvCaixa != null) 'ID_PDV_CAIXA': idPdvCaixa,
      if (idGerenteSupervisor != null)
        'ID_GERENTE_SUPERVISOR': idGerenteSupervisor,
      if (dataAbertura != null) 'DATA_ABERTURA': dataAbertura,
      if (horaAbertura != null) 'HORA_ABERTURA': horaAbertura,
      if (dataFechamento != null) 'DATA_FECHAMENTO': dataFechamento,
      if (horaFechamento != null) 'HORA_FECHAMENTO': horaFechamento,
      if (totalSuprimento != null) 'TOTAL_SUPRIMENTO': totalSuprimento,
      if (totalSangria != null) 'TOTAL_SANGRIA': totalSangria,
      if (totalNaoFiscal != null) 'TOTAL_NAO_FISCAL': totalNaoFiscal,
      if (totalVenda != null) 'TOTAL_VENDA': totalVenda,
      if (totalDesconto != null) 'TOTAL_DESCONTO': totalDesconto,
      if (totalAcrescimo != null) 'TOTAL_ACRESCIMO': totalAcrescimo,
      if (totalFinal != null) 'TOTAL_FINAL': totalFinal,
      if (totalRecebido != null) 'TOTAL_RECEBIDO': totalRecebido,
      if (totalTroco != null) 'TOTAL_TROCO': totalTroco,
      if (totalCancelado != null) 'TOTAL_CANCELADO': totalCancelado,
      if (statusMovimento != null) 'STATUS_MOVIMENTO': statusMovimento,
    });
  }

  PdvMovimentosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idEcfImpressora,
      Value<int?>? idPdvOperador,
      Value<int?>? idPdvCaixa,
      Value<int?>? idGerenteSupervisor,
      Value<DateTime?>? dataAbertura,
      Value<String?>? horaAbertura,
      Value<DateTime?>? dataFechamento,
      Value<String?>? horaFechamento,
      Value<double?>? totalSuprimento,
      Value<double?>? totalSangria,
      Value<double?>? totalNaoFiscal,
      Value<double?>? totalVenda,
      Value<double?>? totalDesconto,
      Value<double?>? totalAcrescimo,
      Value<double?>? totalFinal,
      Value<double?>? totalRecebido,
      Value<double?>? totalTroco,
      Value<double?>? totalCancelado,
      Value<String?>? statusMovimento}) {
    return PdvMovimentosCompanion(
      id: id ?? this.id,
      idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
      idPdvOperador: idPdvOperador ?? this.idPdvOperador,
      idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
      idGerenteSupervisor: idGerenteSupervisor ?? this.idGerenteSupervisor,
      dataAbertura: dataAbertura ?? this.dataAbertura,
      horaAbertura: horaAbertura ?? this.horaAbertura,
      dataFechamento: dataFechamento ?? this.dataFechamento,
      horaFechamento: horaFechamento ?? this.horaFechamento,
      totalSuprimento: totalSuprimento ?? this.totalSuprimento,
      totalSangria: totalSangria ?? this.totalSangria,
      totalNaoFiscal: totalNaoFiscal ?? this.totalNaoFiscal,
      totalVenda: totalVenda ?? this.totalVenda,
      totalDesconto: totalDesconto ?? this.totalDesconto,
      totalAcrescimo: totalAcrescimo ?? this.totalAcrescimo,
      totalFinal: totalFinal ?? this.totalFinal,
      totalRecebido: totalRecebido ?? this.totalRecebido,
      totalTroco: totalTroco ?? this.totalTroco,
      totalCancelado: totalCancelado ?? this.totalCancelado,
      statusMovimento: statusMovimento ?? this.statusMovimento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfImpressora.present) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora.value);
    }
    if (idPdvOperador.present) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador.value);
    }
    if (idPdvCaixa.present) {
      map['ID_PDV_CAIXA'] = Variable<int>(idPdvCaixa.value);
    }
    if (idGerenteSupervisor.present) {
      map['ID_GERENTE_SUPERVISOR'] = Variable<int>(idGerenteSupervisor.value);
    }
    if (dataAbertura.present) {
      map['DATA_ABERTURA'] = Variable<DateTime>(dataAbertura.value);
    }
    if (horaAbertura.present) {
      map['HORA_ABERTURA'] = Variable<String>(horaAbertura.value);
    }
    if (dataFechamento.present) {
      map['DATA_FECHAMENTO'] = Variable<DateTime>(dataFechamento.value);
    }
    if (horaFechamento.present) {
      map['HORA_FECHAMENTO'] = Variable<String>(horaFechamento.value);
    }
    if (totalSuprimento.present) {
      map['TOTAL_SUPRIMENTO'] = Variable<double>(totalSuprimento.value);
    }
    if (totalSangria.present) {
      map['TOTAL_SANGRIA'] = Variable<double>(totalSangria.value);
    }
    if (totalNaoFiscal.present) {
      map['TOTAL_NAO_FISCAL'] = Variable<double>(totalNaoFiscal.value);
    }
    if (totalVenda.present) {
      map['TOTAL_VENDA'] = Variable<double>(totalVenda.value);
    }
    if (totalDesconto.present) {
      map['TOTAL_DESCONTO'] = Variable<double>(totalDesconto.value);
    }
    if (totalAcrescimo.present) {
      map['TOTAL_ACRESCIMO'] = Variable<double>(totalAcrescimo.value);
    }
    if (totalFinal.present) {
      map['TOTAL_FINAL'] = Variable<double>(totalFinal.value);
    }
    if (totalRecebido.present) {
      map['TOTAL_RECEBIDO'] = Variable<double>(totalRecebido.value);
    }
    if (totalTroco.present) {
      map['TOTAL_TROCO'] = Variable<double>(totalTroco.value);
    }
    if (totalCancelado.present) {
      map['TOTAL_CANCELADO'] = Variable<double>(totalCancelado.value);
    }
    if (statusMovimento.present) {
      map['STATUS_MOVIMENTO'] = Variable<String>(statusMovimento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvMovimentosCompanion(')
          ..write('id: $id, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idPdvCaixa: $idPdvCaixa, ')
          ..write('idGerenteSupervisor: $idGerenteSupervisor, ')
          ..write('dataAbertura: $dataAbertura, ')
          ..write('horaAbertura: $horaAbertura, ')
          ..write('dataFechamento: $dataFechamento, ')
          ..write('horaFechamento: $horaFechamento, ')
          ..write('totalSuprimento: $totalSuprimento, ')
          ..write('totalSangria: $totalSangria, ')
          ..write('totalNaoFiscal: $totalNaoFiscal, ')
          ..write('totalVenda: $totalVenda, ')
          ..write('totalDesconto: $totalDesconto, ')
          ..write('totalAcrescimo: $totalAcrescimo, ')
          ..write('totalFinal: $totalFinal, ')
          ..write('totalRecebido: $totalRecebido, ')
          ..write('totalTroco: $totalTroco, ')
          ..write('totalCancelado: $totalCancelado, ')
          ..write('statusMovimento: $statusMovimento')
          ..write(')'))
        .toString();
  }
}

class $PdvMovimentosTable extends PdvMovimentos
    with TableInfo<$PdvMovimentosTable, PdvMovimento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvMovimentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idEcfImpressoraMeta =
      const VerificationMeta('idEcfImpressora');
  @override
  late final GeneratedColumn<int> idEcfImpressora = GeneratedColumn<int>(
      'ID_ECF_IMPRESSORA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
  final VerificationMeta _idPdvOperadorMeta =
      const VerificationMeta('idPdvOperador');
  @override
  late final GeneratedColumn<int> idPdvOperador = GeneratedColumn<int>(
      'ID_PDV_OPERADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
  final VerificationMeta _idPdvCaixaMeta = const VerificationMeta('idPdvCaixa');
  @override
  late final GeneratedColumn<int> idPdvCaixa = GeneratedColumn<int>(
      'ID_PDV_CAIXA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_CAIXA(ID)');
  final VerificationMeta _idGerenteSupervisorMeta =
      const VerificationMeta('idGerenteSupervisor');
  @override
  late final GeneratedColumn<int> idGerenteSupervisor = GeneratedColumn<int>(
      'ID_GERENTE_SUPERVISOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES GERENTE_SUPERVISOR(ID)');
  final VerificationMeta _dataAberturaMeta =
      const VerificationMeta('dataAbertura');
  @override
  late final GeneratedColumn<DateTime> dataAbertura =
      GeneratedColumn<DateTime>('DATA_ABERTURA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaAberturaMeta =
      const VerificationMeta('horaAbertura');
  @override
  late final GeneratedColumn<String> horaAbertura = GeneratedColumn<String>(
      'HORA_ABERTURA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataFechamentoMeta =
      const VerificationMeta('dataFechamento');
  @override
  late final GeneratedColumn<DateTime> dataFechamento =
      GeneratedColumn<DateTime>('DATA_FECHAMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaFechamentoMeta =
      const VerificationMeta('horaFechamento');
  @override
  late final GeneratedColumn<String> horaFechamento = GeneratedColumn<String>(
      'HORA_FECHAMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _totalSuprimentoMeta =
      const VerificationMeta('totalSuprimento');
  @override
  late final GeneratedColumn<double> totalSuprimento =
      GeneratedColumn<double>('TOTAL_SUPRIMENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalSangriaMeta =
      const VerificationMeta('totalSangria');
  @override
  late final GeneratedColumn<double> totalSangria = GeneratedColumn<double>(
      'TOTAL_SANGRIA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalNaoFiscalMeta =
      const VerificationMeta('totalNaoFiscal');
  @override
  late final GeneratedColumn<double> totalNaoFiscal = GeneratedColumn<double>(
      'TOTAL_NAO_FISCAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalVendaMeta = const VerificationMeta('totalVenda');
  @override
  late final GeneratedColumn<double> totalVenda = GeneratedColumn<double>(
      'TOTAL_VENDA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalDescontoMeta =
      const VerificationMeta('totalDesconto');
  @override
  late final GeneratedColumn<double> totalDesconto = GeneratedColumn<double>(
      'TOTAL_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalAcrescimoMeta =
      const VerificationMeta('totalAcrescimo');
  @override
  late final GeneratedColumn<double> totalAcrescimo = GeneratedColumn<double>(
      'TOTAL_ACRESCIMO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalFinalMeta = const VerificationMeta('totalFinal');
  @override
  late final GeneratedColumn<double> totalFinal = GeneratedColumn<double>(
      'TOTAL_FINAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalRecebidoMeta =
      const VerificationMeta('totalRecebido');
  @override
  late final GeneratedColumn<double> totalRecebido = GeneratedColumn<double>(
      'TOTAL_RECEBIDO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalTrocoMeta = const VerificationMeta('totalTroco');
  @override
  late final GeneratedColumn<double> totalTroco = GeneratedColumn<double>(
      'TOTAL_TROCO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalCanceladoMeta =
      const VerificationMeta('totalCancelado');
  @override
  late final GeneratedColumn<double> totalCancelado = GeneratedColumn<double>(
      'TOTAL_CANCELADO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _statusMovimentoMeta =
      const VerificationMeta('statusMovimento');
  @override
  late final GeneratedColumn<String> statusMovimento =
      GeneratedColumn<String>('STATUS_MOVIMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idEcfImpressora,
        idPdvOperador,
        idPdvCaixa,
        idGerenteSupervisor,
        dataAbertura,
        horaAbertura,
        dataFechamento,
        horaFechamento,
        totalSuprimento,
        totalSangria,
        totalNaoFiscal,
        totalVenda,
        totalDesconto,
        totalAcrescimo,
        totalFinal,
        totalRecebido,
        totalTroco,
        totalCancelado,
        statusMovimento
      ];
  @override
  String get aliasedName => _alias ?? 'PDV_MOVIMENTO';
  @override
  String get actualTableName => 'PDV_MOVIMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvMovimento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_ECF_IMPRESSORA')) {
      context.handle(
          _idEcfImpressoraMeta,
          idEcfImpressora.isAcceptableOrUnknown(
              data['ID_ECF_IMPRESSORA']!, _idEcfImpressoraMeta));
    }
    if (data.containsKey('ID_PDV_OPERADOR')) {
      context.handle(
          _idPdvOperadorMeta,
          idPdvOperador.isAcceptableOrUnknown(
              data['ID_PDV_OPERADOR']!, _idPdvOperadorMeta));
    }
    if (data.containsKey('ID_PDV_CAIXA')) {
      context.handle(
          _idPdvCaixaMeta,
          idPdvCaixa.isAcceptableOrUnknown(
              data['ID_PDV_CAIXA']!, _idPdvCaixaMeta));
    }
    if (data.containsKey('ID_GERENTE_SUPERVISOR')) {
      context.handle(
          _idGerenteSupervisorMeta,
          idGerenteSupervisor.isAcceptableOrUnknown(
              data['ID_GERENTE_SUPERVISOR']!, _idGerenteSupervisorMeta));
    }
    if (data.containsKey('DATA_ABERTURA')) {
      context.handle(
          _dataAberturaMeta,
          dataAbertura.isAcceptableOrUnknown(
              data['DATA_ABERTURA']!, _dataAberturaMeta));
    }
    if (data.containsKey('HORA_ABERTURA')) {
      context.handle(
          _horaAberturaMeta,
          horaAbertura.isAcceptableOrUnknown(
              data['HORA_ABERTURA']!, _horaAberturaMeta));
    }
    if (data.containsKey('DATA_FECHAMENTO')) {
      context.handle(
          _dataFechamentoMeta,
          dataFechamento.isAcceptableOrUnknown(
              data['DATA_FECHAMENTO']!, _dataFechamentoMeta));
    }
    if (data.containsKey('HORA_FECHAMENTO')) {
      context.handle(
          _horaFechamentoMeta,
          horaFechamento.isAcceptableOrUnknown(
              data['HORA_FECHAMENTO']!, _horaFechamentoMeta));
    }
    if (data.containsKey('TOTAL_SUPRIMENTO')) {
      context.handle(
          _totalSuprimentoMeta,
          totalSuprimento.isAcceptableOrUnknown(
              data['TOTAL_SUPRIMENTO']!, _totalSuprimentoMeta));
    }
    if (data.containsKey('TOTAL_SANGRIA')) {
      context.handle(
          _totalSangriaMeta,
          totalSangria.isAcceptableOrUnknown(
              data['TOTAL_SANGRIA']!, _totalSangriaMeta));
    }
    if (data.containsKey('TOTAL_NAO_FISCAL')) {
      context.handle(
          _totalNaoFiscalMeta,
          totalNaoFiscal.isAcceptableOrUnknown(
              data['TOTAL_NAO_FISCAL']!, _totalNaoFiscalMeta));
    }
    if (data.containsKey('TOTAL_VENDA')) {
      context.handle(
          _totalVendaMeta,
          totalVenda.isAcceptableOrUnknown(
              data['TOTAL_VENDA']!, _totalVendaMeta));
    }
    if (data.containsKey('TOTAL_DESCONTO')) {
      context.handle(
          _totalDescontoMeta,
          totalDesconto.isAcceptableOrUnknown(
              data['TOTAL_DESCONTO']!, _totalDescontoMeta));
    }
    if (data.containsKey('TOTAL_ACRESCIMO')) {
      context.handle(
          _totalAcrescimoMeta,
          totalAcrescimo.isAcceptableOrUnknown(
              data['TOTAL_ACRESCIMO']!, _totalAcrescimoMeta));
    }
    if (data.containsKey('TOTAL_FINAL')) {
      context.handle(
          _totalFinalMeta,
          totalFinal.isAcceptableOrUnknown(
              data['TOTAL_FINAL']!, _totalFinalMeta));
    }
    if (data.containsKey('TOTAL_RECEBIDO')) {
      context.handle(
          _totalRecebidoMeta,
          totalRecebido.isAcceptableOrUnknown(
              data['TOTAL_RECEBIDO']!, _totalRecebidoMeta));
    }
    if (data.containsKey('TOTAL_TROCO')) {
      context.handle(
          _totalTrocoMeta,
          totalTroco.isAcceptableOrUnknown(
              data['TOTAL_TROCO']!, _totalTrocoMeta));
    }
    if (data.containsKey('TOTAL_CANCELADO')) {
      context.handle(
          _totalCanceladoMeta,
          totalCancelado.isAcceptableOrUnknown(
              data['TOTAL_CANCELADO']!, _totalCanceladoMeta));
    }
    if (data.containsKey('STATUS_MOVIMENTO')) {
      context.handle(
          _statusMovimentoMeta,
          statusMovimento.isAcceptableOrUnknown(
              data['STATUS_MOVIMENTO']!, _statusMovimentoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvMovimento map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvMovimento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvMovimentosTable createAlias(String alias) {
    return $PdvMovimentosTable(attachedDatabase, alias);
  }
}

class PdvOperador extends DataClass implements Insertable<PdvOperador> {
  final int? id;
  final int? idColaborador;
  final String? login;
  final String? senha;
  PdvOperador({this.id, this.idColaborador, this.login, this.senha});
  factory PdvOperador.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvOperador(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idColaborador: ValueSqlType.intType(data['${effectivePrefix}ID_COLABORADOR']),
      login: ValueSqlType.stringType(data['${effectivePrefix}LOGIN']),
      senha: ValueSqlType.stringType(data['${effectivePrefix}SENHA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || login != null) {
      map['LOGIN'] = Variable<String>(login);
    }
    if (!nullToAbsent || senha != null) {
      map['SENHA'] = Variable<String>(senha);
    }
    return map;
  }

  PdvOperadorsCompanion toCompanion(bool nullToAbsent) {
    return PdvOperadorsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      login:
          login == null && nullToAbsent ? const Value.absent() : Value(login),
      senha:
          senha == null && nullToAbsent ? const Value.absent() : Value(senha),
    );
  }

  factory PdvOperador.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvOperador(
      id: serializer.fromJson<int?>(json['id']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      login: serializer.fromJson<String?>(json['login']),
      senha: serializer.fromJson<String?>(json['senha']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'login': serializer.toJson<String?>(login),
      'senha': serializer.toJson<String?>(senha),
    };
  }

  PdvOperador copyWith(
          {int? id, int? idColaborador, String? login, String? senha}) =>
      PdvOperador(
        id: id ?? this.id,
        idColaborador: idColaborador ?? this.idColaborador,
        login: login ?? this.login,
        senha: senha ?? this.senha,
      );
  @override
  String toString() {
    return (StringBuffer('PdvOperador(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('login: $login, ')
          ..write('senha: $senha')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idColaborador, login, senha);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvOperador &&
          other.id == this.id &&
          other.idColaborador == this.idColaborador &&
          other.login == this.login &&
          other.senha == this.senha);
}

class PdvOperadorsCompanion extends UpdateCompanion<PdvOperador> {
  final Value<int?> id;
  final Value<int?> idColaborador;
  final Value<String?> login;
  final Value<String?> senha;
  const PdvOperadorsCompanion({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.login = const Value.absent(),
    this.senha = const Value.absent(),
  });
  PdvOperadorsCompanion.insert({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.login = const Value.absent(),
    this.senha = const Value.absent(),
  });
  static Insertable<PdvOperador> custom({
    Expression<int>? id,
    Expression<int>? idColaborador,
    Expression<String>? login,
    Expression<String>? senha,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (login != null) 'LOGIN': login,
      if (senha != null) 'SENHA': senha,
    });
  }

  PdvOperadorsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idColaborador,
      Value<String?>? login,
      Value<String?>? senha}) {
    return PdvOperadorsCompanion(
      id: id ?? this.id,
      idColaborador: idColaborador ?? this.idColaborador,
      login: login ?? this.login,
      senha: senha ?? this.senha,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (login.present) {
      map['LOGIN'] = Variable<String>(login.value);
    }
    if (senha.present) {
      map['SENHA'] = Variable<String>(senha.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvOperadorsCompanion(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('login: $login, ')
          ..write('senha: $senha')
          ..write(')'))
        .toString();
  }
}

class $PdvOperadorsTable extends PdvOperadors
    with TableInfo<$PdvOperadorsTable, PdvOperador> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvOperadorsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
      'ID_COLABORADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  final VerificationMeta _loginMeta = const VerificationMeta('login');
  @override
  late final GeneratedColumn<String> login = GeneratedColumn<String>(
      'LOGIN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _senhaMeta = const VerificationMeta('senha');
  @override
  late final GeneratedColumn<String> senha = GeneratedColumn<String>(
      'SENHA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, idColaborador, login, senha];
  @override
  String get aliasedName => _alias ?? 'PDV_OPERADOR';
  @override
  String get actualTableName => 'PDV_OPERADOR';
  @override
  VerificationContext validateIntegrity(Insertable<PdvOperador> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR']!, _idColaboradorMeta));
    }
    if (data.containsKey('LOGIN')) {
      context.handle(
          _loginMeta, login.isAcceptableOrUnknown(data['LOGIN']!, _loginMeta));
    }
    if (data.containsKey('SENHA')) {
      context.handle(
          _senhaMeta, senha.isAcceptableOrUnknown(data['SENHA']!, _senhaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvOperador map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvOperador.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvOperadorsTable createAlias(String alias) {
    return $PdvOperadorsTable(attachedDatabase, alias);
  }
}

class PdvSangria extends DataClass implements Insertable<PdvSangria> {
  final int? id;
  final int? idPdvMovimento;
  final DateTime? dataSangria;
  final String? horaSangria;
  final double? valor;
  final String? observacao;
  PdvSangria(
      {this.id,
      this.idPdvMovimento,
      this.dataSangria,
      this.horaSangria,
      this.valor,
      this.observacao});
  factory PdvSangria.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvSangria(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvMovimento: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      dataSangria: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_SANGRIA']),
      horaSangria: ValueSqlType.stringType(data['${effectivePrefix}HORA_SANGRIA']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || dataSangria != null) {
      map['DATA_SANGRIA'] = Variable<DateTime>(dataSangria);
    }
    if (!nullToAbsent || horaSangria != null) {
      map['HORA_SANGRIA'] = Variable<String>(horaSangria);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  PdvSangriasCompanion toCompanion(bool nullToAbsent) {
    return PdvSangriasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      dataSangria: dataSangria == null && nullToAbsent
          ? const Value.absent()
          : Value(dataSangria),
      horaSangria: horaSangria == null && nullToAbsent
          ? const Value.absent()
          : Value(horaSangria),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory PdvSangria.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvSangria(
      id: serializer.fromJson<int?>(json['id']),
      idPdvMovimento: serializer.fromJson<int?>(json['idPdvMovimento']),
      dataSangria: serializer.fromJson<DateTime?>(json['dataSangria']),
      horaSangria: serializer.fromJson<String?>(json['horaSangria']),
      valor: serializer.fromJson<double?>(json['valor']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvMovimento': serializer.toJson<int?>(idPdvMovimento),
      'dataSangria': serializer.toJson<DateTime?>(dataSangria),
      'horaSangria': serializer.toJson<String?>(horaSangria),
      'valor': serializer.toJson<double?>(valor),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  PdvSangria copyWith(
          {int? id,
          int? idPdvMovimento,
          DateTime? dataSangria,
          String? horaSangria,
          double? valor,
          String? observacao}) =>
      PdvSangria(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        dataSangria: dataSangria ?? this.dataSangria,
        horaSangria: horaSangria ?? this.horaSangria,
        valor: valor ?? this.valor,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('PdvSangria(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataSangria: $dataSangria, ')
          ..write('horaSangria: $horaSangria, ')
          ..write('valor: $valor, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, idPdvMovimento, dataSangria, horaSangria, valor, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvSangria &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.dataSangria == this.dataSangria &&
          other.horaSangria == this.horaSangria &&
          other.valor == this.valor &&
          other.observacao == this.observacao);
}

class PdvSangriasCompanion extends UpdateCompanion<PdvSangria> {
  final Value<int?> id;
  final Value<int?> idPdvMovimento;
  final Value<DateTime?> dataSangria;
  final Value<String?> horaSangria;
  final Value<double?> valor;
  final Value<String?> observacao;
  const PdvSangriasCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataSangria = const Value.absent(),
    this.horaSangria = const Value.absent(),
    this.valor = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  PdvSangriasCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataSangria = const Value.absent(),
    this.horaSangria = const Value.absent(),
    this.valor = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<PdvSangria> custom({
    Expression<int>? id,
    Expression<int>? idPdvMovimento,
    Expression<DateTime>? dataSangria,
    Expression<String>? horaSangria,
    Expression<double>? valor,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (dataSangria != null) 'DATA_SANGRIA': dataSangria,
      if (horaSangria != null) 'HORA_SANGRIA': horaSangria,
      if (valor != null) 'VALOR': valor,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  PdvSangriasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvMovimento,
      Value<DateTime?>? dataSangria,
      Value<String?>? horaSangria,
      Value<double?>? valor,
      Value<String?>? observacao}) {
    return PdvSangriasCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      dataSangria: dataSangria ?? this.dataSangria,
      horaSangria: horaSangria ?? this.horaSangria,
      valor: valor ?? this.valor,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (dataSangria.present) {
      map['DATA_SANGRIA'] = Variable<DateTime>(dataSangria.value);
    }
    if (horaSangria.present) {
      map['HORA_SANGRIA'] = Variable<String>(horaSangria.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvSangriasCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataSangria: $dataSangria, ')
          ..write('horaSangria: $horaSangria, ')
          ..write('valor: $valor, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $PdvSangriasTable extends PdvSangrias
    with TableInfo<$PdvSangriasTable, PdvSangria> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvSangriasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  @override
  late final GeneratedColumn<int> idPdvMovimento = GeneratedColumn<int>(
      'ID_PDV_MOVIMENTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  final VerificationMeta _dataSangriaMeta =
      const VerificationMeta('dataSangria');
  @override
  late final GeneratedColumn<DateTime> dataSangria =
      GeneratedColumn<DateTime>('DATA_SANGRIA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaSangriaMeta =
      const VerificationMeta('horaSangria');
  @override
  late final GeneratedColumn<String> horaSangria = GeneratedColumn<String>(
      'HORA_SANGRIA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, dataSangria, horaSangria, valor, observacao];
  @override
  String get aliasedName => _alias ?? 'PDV_SANGRIA';
  @override
  String get actualTableName => 'PDV_SANGRIA';
  @override
  VerificationContext validateIntegrity(Insertable<PdvSangria> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
    }
    if (data.containsKey('DATA_SANGRIA')) {
      context.handle(
          _dataSangriaMeta,
          dataSangria.isAcceptableOrUnknown(
              data['DATA_SANGRIA']!, _dataSangriaMeta));
    }
    if (data.containsKey('HORA_SANGRIA')) {
      context.handle(
          _horaSangriaMeta,
          horaSangria.isAcceptableOrUnknown(
              data['HORA_SANGRIA']!, _horaSangriaMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvSangria map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvSangria.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvSangriasTable createAlias(String alias) {
    return $PdvSangriasTable(attachedDatabase, alias);
  }
}

class PdvSuprimento extends DataClass implements Insertable<PdvSuprimento> {
  final int? id;
  final int? idPdvMovimento;
  final DateTime? dataSuprimento;
  final String? horaSuprimento;
  final double? valor;
  final String? observacao;
  PdvSuprimento(
      {this.id,
      this.idPdvMovimento,
      this.dataSuprimento,
      this.horaSuprimento,
      this.valor,
      this.observacao});
  factory PdvSuprimento.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvSuprimento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvMovimento: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      dataSuprimento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_SUPRIMENTO']),
      horaSuprimento: ValueSqlType.stringType(data['${effectivePrefix}HORA_SUPRIMENTO']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || dataSuprimento != null) {
      map['DATA_SUPRIMENTO'] = Variable<DateTime>(dataSuprimento);
    }
    if (!nullToAbsent || horaSuprimento != null) {
      map['HORA_SUPRIMENTO'] = Variable<String>(horaSuprimento);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  PdvSuprimentosCompanion toCompanion(bool nullToAbsent) {
    return PdvSuprimentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      dataSuprimento: dataSuprimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataSuprimento),
      horaSuprimento: horaSuprimento == null && nullToAbsent
          ? const Value.absent()
          : Value(horaSuprimento),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory PdvSuprimento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvSuprimento(
      id: serializer.fromJson<int?>(json['id']),
      idPdvMovimento: serializer.fromJson<int?>(json['idPdvMovimento']),
      dataSuprimento: serializer.fromJson<DateTime?>(json['dataSuprimento']),
      horaSuprimento: serializer.fromJson<String?>(json['horaSuprimento']),
      valor: serializer.fromJson<double?>(json['valor']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvMovimento': serializer.toJson<int?>(idPdvMovimento),
      'dataSuprimento': serializer.toJson<DateTime?>(dataSuprimento),
      'horaSuprimento': serializer.toJson<String?>(horaSuprimento),
      'valor': serializer.toJson<double?>(valor),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  PdvSuprimento copyWith(
          {int? id,
          int? idPdvMovimento,
          DateTime? dataSuprimento,
          String? horaSuprimento,
          double? valor,
          String? observacao}) =>
      PdvSuprimento(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        dataSuprimento: dataSuprimento ?? this.dataSuprimento,
        horaSuprimento: horaSuprimento ?? this.horaSuprimento,
        valor: valor ?? this.valor,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('PdvSuprimento(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataSuprimento: $dataSuprimento, ')
          ..write('horaSuprimento: $horaSuprimento, ')
          ..write('valor: $valor, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, idPdvMovimento, dataSuprimento, horaSuprimento, valor, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvSuprimento &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.dataSuprimento == this.dataSuprimento &&
          other.horaSuprimento == this.horaSuprimento &&
          other.valor == this.valor &&
          other.observacao == this.observacao);
}

class PdvSuprimentosCompanion extends UpdateCompanion<PdvSuprimento> {
  final Value<int?> id;
  final Value<int?> idPdvMovimento;
  final Value<DateTime?> dataSuprimento;
  final Value<String?> horaSuprimento;
  final Value<double?> valor;
  final Value<String?> observacao;
  const PdvSuprimentosCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataSuprimento = const Value.absent(),
    this.horaSuprimento = const Value.absent(),
    this.valor = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  PdvSuprimentosCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataSuprimento = const Value.absent(),
    this.horaSuprimento = const Value.absent(),
    this.valor = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<PdvSuprimento> custom({
    Expression<int>? id,
    Expression<int>? idPdvMovimento,
    Expression<DateTime>? dataSuprimento,
    Expression<String>? horaSuprimento,
    Expression<double>? valor,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (dataSuprimento != null) 'DATA_SUPRIMENTO': dataSuprimento,
      if (horaSuprimento != null) 'HORA_SUPRIMENTO': horaSuprimento,
      if (valor != null) 'VALOR': valor,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  PdvSuprimentosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvMovimento,
      Value<DateTime?>? dataSuprimento,
      Value<String?>? horaSuprimento,
      Value<double?>? valor,
      Value<String?>? observacao}) {
    return PdvSuprimentosCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      dataSuprimento: dataSuprimento ?? this.dataSuprimento,
      horaSuprimento: horaSuprimento ?? this.horaSuprimento,
      valor: valor ?? this.valor,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (dataSuprimento.present) {
      map['DATA_SUPRIMENTO'] = Variable<DateTime>(dataSuprimento.value);
    }
    if (horaSuprimento.present) {
      map['HORA_SUPRIMENTO'] = Variable<String>(horaSuprimento.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvSuprimentosCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataSuprimento: $dataSuprimento, ')
          ..write('horaSuprimento: $horaSuprimento, ')
          ..write('valor: $valor, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $PdvSuprimentosTable extends PdvSuprimentos
    with TableInfo<$PdvSuprimentosTable, PdvSuprimento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvSuprimentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  @override
  late final GeneratedColumn<int> idPdvMovimento = GeneratedColumn<int>(
      'ID_PDV_MOVIMENTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  final VerificationMeta _dataSuprimentoMeta =
      const VerificationMeta('dataSuprimento');
  @override
  late final GeneratedColumn<DateTime> dataSuprimento =
      GeneratedColumn<DateTime>('DATA_SUPRIMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaSuprimentoMeta =
      const VerificationMeta('horaSuprimento');
  @override
  late final GeneratedColumn<String> horaSuprimento = GeneratedColumn<String>(
      'HORA_SUPRIMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, dataSuprimento, horaSuprimento, valor, observacao];
  @override
  String get aliasedName => _alias ?? 'PDV_SUPRIMENTO';
  @override
  String get actualTableName => 'PDV_SUPRIMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvSuprimento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
    }
    if (data.containsKey('DATA_SUPRIMENTO')) {
      context.handle(
          _dataSuprimentoMeta,
          dataSuprimento.isAcceptableOrUnknown(
              data['DATA_SUPRIMENTO']!, _dataSuprimentoMeta));
    }
    if (data.containsKey('HORA_SUPRIMENTO')) {
      context.handle(
          _horaSuprimentoMeta,
          horaSuprimento.isAcceptableOrUnknown(
              data['HORA_SUPRIMENTO']!, _horaSuprimentoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvSuprimento map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvSuprimento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvSuprimentosTable createAlias(String alias) {
    return $PdvSuprimentosTable(attachedDatabase, alias);
  }
}

class PdvTipoPagamento extends DataClass
    implements Insertable<PdvTipoPagamento> {
  final int? id;
  final String? codigo;
  final String? descricao;
  final String? tef;
  final String? imprimeVinculado;
  final String? permiteTroco;
  final String? tefTipoGp;
  final String? geraParcelas;
  final String? codigoPagamentoNfce;
  PdvTipoPagamento(
      {this.id,
      this.codigo,
      this.descricao,
      this.tef,
      this.imprimeVinculado,
      this.permiteTroco,
      this.tefTipoGp,
      this.geraParcelas,
      this.codigoPagamentoNfce});
  factory PdvTipoPagamento.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvTipoPagamento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      codigo: ValueSqlType.stringType(data['${effectivePrefix}CODIGO']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      tef: ValueSqlType.stringType(data['${effectivePrefix}TEF']),
      imprimeVinculado: ValueSqlType.stringType(data['${effectivePrefix}IMPRIME_VINCULADO']),
      permiteTroco: ValueSqlType.stringType(data['${effectivePrefix}PERMITE_TROCO']),
      tefTipoGp: ValueSqlType.stringType(data['${effectivePrefix}TEF_TIPO_GP']),
      geraParcelas: ValueSqlType.stringType(data['${effectivePrefix}GERA_PARCELAS']),
      codigoPagamentoNfce: ValueSqlType.stringType(
          data['${effectivePrefix}CODIGO_PAGAMENTO_NFCE']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<String>(codigo);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || tef != null) {
      map['TEF'] = Variable<String>(tef);
    }
    if (!nullToAbsent || imprimeVinculado != null) {
      map['IMPRIME_VINCULADO'] = Variable<String>(imprimeVinculado);
    }
    if (!nullToAbsent || permiteTroco != null) {
      map['PERMITE_TROCO'] = Variable<String>(permiteTroco);
    }
    if (!nullToAbsent || tefTipoGp != null) {
      map['TEF_TIPO_GP'] = Variable<String>(tefTipoGp);
    }
    if (!nullToAbsent || geraParcelas != null) {
      map['GERA_PARCELAS'] = Variable<String>(geraParcelas);
    }
    if (!nullToAbsent || codigoPagamentoNfce != null) {
      map['CODIGO_PAGAMENTO_NFCE'] = Variable<String>(codigoPagamentoNfce);
    }
    return map;
  }

  PdvTipoPagamentosCompanion toCompanion(bool nullToAbsent) {
    return PdvTipoPagamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      tef: tef == null && nullToAbsent ? const Value.absent() : Value(tef),
      imprimeVinculado: imprimeVinculado == null && nullToAbsent
          ? const Value.absent()
          : Value(imprimeVinculado),
      permiteTroco: permiteTroco == null && nullToAbsent
          ? const Value.absent()
          : Value(permiteTroco),
      tefTipoGp: tefTipoGp == null && nullToAbsent
          ? const Value.absent()
          : Value(tefTipoGp),
      geraParcelas: geraParcelas == null && nullToAbsent
          ? const Value.absent()
          : Value(geraParcelas),
      codigoPagamentoNfce: codigoPagamentoNfce == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoPagamentoNfce),
    );
  }

  factory PdvTipoPagamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvTipoPagamento(
      id: serializer.fromJson<int?>(json['id']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      tef: serializer.fromJson<String?>(json['tef']),
      imprimeVinculado: serializer.fromJson<String?>(json['imprimeVinculado']),
      permiteTroco: serializer.fromJson<String?>(json['permiteTroco']),
      tefTipoGp: serializer.fromJson<String?>(json['tefTipoGp']),
      geraParcelas: serializer.fromJson<String?>(json['geraParcelas']),
      codigoPagamentoNfce:
          serializer.fromJson<String?>(json['codigoPagamentoNfce']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'codigo': serializer.toJson<String?>(codigo),
      'descricao': serializer.toJson<String?>(descricao),
      'tef': serializer.toJson<String?>(tef),
      'imprimeVinculado': serializer.toJson<String?>(imprimeVinculado),
      'permiteTroco': serializer.toJson<String?>(permiteTroco),
      'tefTipoGp': serializer.toJson<String?>(tefTipoGp),
      'geraParcelas': serializer.toJson<String?>(geraParcelas),
      'codigoPagamentoNfce': serializer.toJson<String?>(codigoPagamentoNfce),
    };
  }

  PdvTipoPagamento copyWith(
          {int? id,
          String? codigo,
          String? descricao,
          String? tef,
          String? imprimeVinculado,
          String? permiteTroco,
          String? tefTipoGp,
          String? geraParcelas,
          String? codigoPagamentoNfce}) =>
      PdvTipoPagamento(
        id: id ?? this.id,
        codigo: codigo ?? this.codigo,
        descricao: descricao ?? this.descricao,
        tef: tef ?? this.tef,
        imprimeVinculado: imprimeVinculado ?? this.imprimeVinculado,
        permiteTroco: permiteTroco ?? this.permiteTroco,
        tefTipoGp: tefTipoGp ?? this.tefTipoGp,
        geraParcelas: geraParcelas ?? this.geraParcelas,
        codigoPagamentoNfce: codigoPagamentoNfce ?? this.codigoPagamentoNfce,
      );
  @override
  String toString() {
    return (StringBuffer('PdvTipoPagamento(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao, ')
          ..write('tef: $tef, ')
          ..write('imprimeVinculado: $imprimeVinculado, ')
          ..write('permiteTroco: $permiteTroco, ')
          ..write('tefTipoGp: $tefTipoGp, ')
          ..write('geraParcelas: $geraParcelas, ')
          ..write('codigoPagamentoNfce: $codigoPagamentoNfce')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, codigo, descricao, tef, imprimeVinculado,
      permiteTroco, tefTipoGp, geraParcelas, codigoPagamentoNfce);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvTipoPagamento &&
          other.id == this.id &&
          other.codigo == this.codigo &&
          other.descricao == this.descricao &&
          other.tef == this.tef &&
          other.imprimeVinculado == this.imprimeVinculado &&
          other.permiteTroco == this.permiteTroco &&
          other.tefTipoGp == this.tefTipoGp &&
          other.geraParcelas == this.geraParcelas &&
          other.codigoPagamentoNfce == this.codigoPagamentoNfce);
}

class PdvTipoPagamentosCompanion extends UpdateCompanion<PdvTipoPagamento> {
  final Value<int?> id;
  final Value<String?> codigo;
  final Value<String?> descricao;
  final Value<String?> tef;
  final Value<String?> imprimeVinculado;
  final Value<String?> permiteTroco;
  final Value<String?> tefTipoGp;
  final Value<String?> geraParcelas;
  final Value<String?> codigoPagamentoNfce;
  const PdvTipoPagamentosCompanion({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.tef = const Value.absent(),
    this.imprimeVinculado = const Value.absent(),
    this.permiteTroco = const Value.absent(),
    this.tefTipoGp = const Value.absent(),
    this.geraParcelas = const Value.absent(),
    this.codigoPagamentoNfce = const Value.absent(),
  });
  PdvTipoPagamentosCompanion.insert({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.tef = const Value.absent(),
    this.imprimeVinculado = const Value.absent(),
    this.permiteTroco = const Value.absent(),
    this.tefTipoGp = const Value.absent(),
    this.geraParcelas = const Value.absent(),
    this.codigoPagamentoNfce = const Value.absent(),
  });
  static Insertable<PdvTipoPagamento> custom({
    Expression<int>? id,
    Expression<String>? codigo,
    Expression<String>? descricao,
    Expression<String>? tef,
    Expression<String>? imprimeVinculado,
    Expression<String>? permiteTroco,
    Expression<String>? tefTipoGp,
    Expression<String>? geraParcelas,
    Expression<String>? codigoPagamentoNfce,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigo != null) 'CODIGO': codigo,
      if (descricao != null) 'DESCRICAO': descricao,
      if (tef != null) 'TEF': tef,
      if (imprimeVinculado != null) 'IMPRIME_VINCULADO': imprimeVinculado,
      if (permiteTroco != null) 'PERMITE_TROCO': permiteTroco,
      if (tefTipoGp != null) 'TEF_TIPO_GP': tefTipoGp,
      if (geraParcelas != null) 'GERA_PARCELAS': geraParcelas,
      if (codigoPagamentoNfce != null)
        'CODIGO_PAGAMENTO_NFCE': codigoPagamentoNfce,
    });
  }

  PdvTipoPagamentosCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? codigo,
      Value<String?>? descricao,
      Value<String?>? tef,
      Value<String?>? imprimeVinculado,
      Value<String?>? permiteTroco,
      Value<String?>? tefTipoGp,
      Value<String?>? geraParcelas,
      Value<String?>? codigoPagamentoNfce}) {
    return PdvTipoPagamentosCompanion(
      id: id ?? this.id,
      codigo: codigo ?? this.codigo,
      descricao: descricao ?? this.descricao,
      tef: tef ?? this.tef,
      imprimeVinculado: imprimeVinculado ?? this.imprimeVinculado,
      permiteTroco: permiteTroco ?? this.permiteTroco,
      tefTipoGp: tefTipoGp ?? this.tefTipoGp,
      geraParcelas: geraParcelas ?? this.geraParcelas,
      codigoPagamentoNfce: codigoPagamentoNfce ?? this.codigoPagamentoNfce,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<String>(codigo.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (tef.present) {
      map['TEF'] = Variable<String>(tef.value);
    }
    if (imprimeVinculado.present) {
      map['IMPRIME_VINCULADO'] = Variable<String>(imprimeVinculado.value);
    }
    if (permiteTroco.present) {
      map['PERMITE_TROCO'] = Variable<String>(permiteTroco.value);
    }
    if (tefTipoGp.present) {
      map['TEF_TIPO_GP'] = Variable<String>(tefTipoGp.value);
    }
    if (geraParcelas.present) {
      map['GERA_PARCELAS'] = Variable<String>(geraParcelas.value);
    }
    if (codigoPagamentoNfce.present) {
      map['CODIGO_PAGAMENTO_NFCE'] =
          Variable<String>(codigoPagamentoNfce.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvTipoPagamentosCompanion(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao, ')
          ..write('tef: $tef, ')
          ..write('imprimeVinculado: $imprimeVinculado, ')
          ..write('permiteTroco: $permiteTroco, ')
          ..write('tefTipoGp: $tefTipoGp, ')
          ..write('geraParcelas: $geraParcelas, ')
          ..write('codigoPagamentoNfce: $codigoPagamentoNfce')
          ..write(')'))
        .toString();
  }
}

class $PdvTipoPagamentosTable extends PdvTipoPagamentos
    with TableInfo<$PdvTipoPagamentosTable, PdvTipoPagamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvTipoPagamentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  @override
  late final GeneratedColumn<String> codigo = GeneratedColumn<String>(
      'CODIGO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tefMeta = const VerificationMeta('tef');
  @override
  late final GeneratedColumn<String> tef = GeneratedColumn<String>(
      'TEF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _imprimeVinculadoMeta =
      const VerificationMeta('imprimeVinculado');
  @override
  late final GeneratedColumn<String> imprimeVinculado =
      GeneratedColumn<String>('IMPRIME_VINCULADO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _permiteTrocoMeta =
      const VerificationMeta('permiteTroco');
  @override
  late final GeneratedColumn<String> permiteTroco = GeneratedColumn<String>(
      'PERMITE_TROCO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tefTipoGpMeta = const VerificationMeta('tefTipoGp');
  @override
  late final GeneratedColumn<String> tefTipoGp = GeneratedColumn<String>(
      'TEF_TIPO_GP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _geraParcelasMeta =
      const VerificationMeta('geraParcelas');
  @override
  late final GeneratedColumn<String> geraParcelas = GeneratedColumn<String>(
      'GERA_PARCELAS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoPagamentoNfceMeta =
      const VerificationMeta('codigoPagamentoNfce');
  @override
  late final GeneratedColumn<String> codigoPagamentoNfce =
      GeneratedColumn<String>('CODIGO_PAGAMENTO_NFCE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        codigo,
        descricao,
        tef,
        imprimeVinculado,
        permiteTroco,
        tefTipoGp,
        geraParcelas,
        codigoPagamentoNfce
      ];
  @override
  String get aliasedName => _alias ?? 'PDV_TIPO_PAGAMENTO';
  @override
  String get actualTableName => 'PDV_TIPO_PAGAMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvTipoPagamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('TEF')) {
      context.handle(
          _tefMeta, tef.isAcceptableOrUnknown(data['TEF']!, _tefMeta));
    }
    if (data.containsKey('IMPRIME_VINCULADO')) {
      context.handle(
          _imprimeVinculadoMeta,
          imprimeVinculado.isAcceptableOrUnknown(
              data['IMPRIME_VINCULADO']!, _imprimeVinculadoMeta));
    }
    if (data.containsKey('PERMITE_TROCO')) {
      context.handle(
          _permiteTrocoMeta,
          permiteTroco.isAcceptableOrUnknown(
              data['PERMITE_TROCO']!, _permiteTrocoMeta));
    }
    if (data.containsKey('TEF_TIPO_GP')) {
      context.handle(
          _tefTipoGpMeta,
          tefTipoGp.isAcceptableOrUnknown(
              data['TEF_TIPO_GP']!, _tefTipoGpMeta));
    }
    if (data.containsKey('GERA_PARCELAS')) {
      context.handle(
          _geraParcelasMeta,
          geraParcelas.isAcceptableOrUnknown(
              data['GERA_PARCELAS']!, _geraParcelasMeta));
    }
    if (data.containsKey('CODIGO_PAGAMENTO_NFCE')) {
      context.handle(
          _codigoPagamentoNfceMeta,
          codigoPagamentoNfce.isAcceptableOrUnknown(
              data['CODIGO_PAGAMENTO_NFCE']!, _codigoPagamentoNfceMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvTipoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvTipoPagamento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvTipoPagamentosTable createAlias(String alias) {
    return $PdvTipoPagamentosTable(attachedDatabase, alias);
  }
}

class PdvTotalTipoPagamento extends DataClass
    implements Insertable<PdvTotalTipoPagamento> {
  final int? id;
  final int? idPdvVendaCabecalho;
  final int? idPdvTipoPagamento;
  final DateTime? dataVenda;
  final String? horaVenda;
  final String? serieEcf;
  final int? coo;
  final int? ccf;
  final int? gnf;
  final double? valor;
  final String? nsu;
  final String? estorno;
  final String? rede;
  final String? cartaoDc;
  final String? hashRegistro;
  PdvTotalTipoPagamento(
      {this.id,
      this.idPdvVendaCabecalho,
      this.idPdvTipoPagamento,
      this.dataVenda,
      this.horaVenda,
      this.serieEcf,
      this.coo,
      this.ccf,
      this.gnf,
      this.valor,
      this.nsu,
      this.estorno,
      this.rede,
      this.cartaoDc,
      this.hashRegistro});
  factory PdvTotalTipoPagamento.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvTotalTipoPagamento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvVendaCabecalho: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
      idPdvTipoPagamento: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_TIPO_PAGAMENTO']),
      dataVenda: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_VENDA']),
      horaVenda: ValueSqlType.stringType(data['${effectivePrefix}HORA_VENDA']),
      serieEcf: ValueSqlType.stringType(data['${effectivePrefix}SERIE_ECF']),
      coo: ValueSqlType.intType(data['${effectivePrefix}COO']),
      ccf: ValueSqlType.intType(data['${effectivePrefix}CCF']),
      gnf: ValueSqlType.intType(data['${effectivePrefix}GNF']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
      nsu: ValueSqlType.stringType(data['${effectivePrefix}NSU']),
      estorno: ValueSqlType.stringType(data['${effectivePrefix}ESTORNO']),
      rede: ValueSqlType.stringType(data['${effectivePrefix}REDE']),
      cartaoDc: ValueSqlType.stringType(data['${effectivePrefix}CARTAO_DC']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvVendaCabecalho != null) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho);
    }
    if (!nullToAbsent || idPdvTipoPagamento != null) {
      map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int>(idPdvTipoPagamento);
    }
    if (!nullToAbsent || dataVenda != null) {
      map['DATA_VENDA'] = Variable<DateTime>(dataVenda);
    }
    if (!nullToAbsent || horaVenda != null) {
      map['HORA_VENDA'] = Variable<String>(horaVenda);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || ccf != null) {
      map['CCF'] = Variable<int>(ccf);
    }
    if (!nullToAbsent || gnf != null) {
      map['GNF'] = Variable<int>(gnf);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || nsu != null) {
      map['NSU'] = Variable<String>(nsu);
    }
    if (!nullToAbsent || estorno != null) {
      map['ESTORNO'] = Variable<String>(estorno);
    }
    if (!nullToAbsent || rede != null) {
      map['REDE'] = Variable<String>(rede);
    }
    if (!nullToAbsent || cartaoDc != null) {
      map['CARTAO_DC'] = Variable<String>(cartaoDc);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  PdvTotalTipoPagamentosCompanion toCompanion(bool nullToAbsent) {
    return PdvTotalTipoPagamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvVendaCabecalho: idPdvVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvVendaCabecalho),
      idPdvTipoPagamento: idPdvTipoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvTipoPagamento),
      dataVenda: dataVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVenda),
      horaVenda: horaVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(horaVenda),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      ccf: ccf == null && nullToAbsent ? const Value.absent() : Value(ccf),
      gnf: gnf == null && nullToAbsent ? const Value.absent() : Value(gnf),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      nsu: nsu == null && nullToAbsent ? const Value.absent() : Value(nsu),
      estorno: estorno == null && nullToAbsent
          ? const Value.absent()
          : Value(estorno),
      rede: rede == null && nullToAbsent ? const Value.absent() : Value(rede),
      cartaoDc: cartaoDc == null && nullToAbsent
          ? const Value.absent()
          : Value(cartaoDc),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory PdvTotalTipoPagamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvTotalTipoPagamento(
      id: serializer.fromJson<int?>(json['id']),
      idPdvVendaCabecalho:
          serializer.fromJson<int?>(json['idPdvVendaCabecalho']),
      idPdvTipoPagamento: serializer.fromJson<int?>(json['idPdvTipoPagamento']),
      dataVenda: serializer.fromJson<DateTime?>(json['dataVenda']),
      horaVenda: serializer.fromJson<String?>(json['horaVenda']),
      serieEcf: serializer.fromJson<String?>(json['serieEcf']),
      coo: serializer.fromJson<int?>(json['coo']),
      ccf: serializer.fromJson<int?>(json['ccf']),
      gnf: serializer.fromJson<int?>(json['gnf']),
      valor: serializer.fromJson<double?>(json['valor']),
      nsu: serializer.fromJson<String?>(json['nsu']),
      estorno: serializer.fromJson<String?>(json['estorno']),
      rede: serializer.fromJson<String?>(json['rede']),
      cartaoDc: serializer.fromJson<String?>(json['cartaoDc']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvVendaCabecalho': serializer.toJson<int?>(idPdvVendaCabecalho),
      'idPdvTipoPagamento': serializer.toJson<int?>(idPdvTipoPagamento),
      'dataVenda': serializer.toJson<DateTime?>(dataVenda),
      'horaVenda': serializer.toJson<String?>(horaVenda),
      'serieEcf': serializer.toJson<String?>(serieEcf),
      'coo': serializer.toJson<int?>(coo),
      'ccf': serializer.toJson<int?>(ccf),
      'gnf': serializer.toJson<int?>(gnf),
      'valor': serializer.toJson<double?>(valor),
      'nsu': serializer.toJson<String?>(nsu),
      'estorno': serializer.toJson<String?>(estorno),
      'rede': serializer.toJson<String?>(rede),
      'cartaoDc': serializer.toJson<String?>(cartaoDc),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  PdvTotalTipoPagamento copyWith(
          {int? id,
          int? idPdvVendaCabecalho,
          int? idPdvTipoPagamento,
          DateTime? dataVenda,
          String? horaVenda,
          String? serieEcf,
          int? coo,
          int? ccf,
          int? gnf,
          double? valor,
          String? nsu,
          String? estorno,
          String? rede,
          String? cartaoDc,
          String? hashRegistro}) =>
      PdvTotalTipoPagamento(
        id: id ?? this.id,
        idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
        idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
        dataVenda: dataVenda ?? this.dataVenda,
        horaVenda: horaVenda ?? this.horaVenda,
        serieEcf: serieEcf ?? this.serieEcf,
        coo: coo ?? this.coo,
        ccf: ccf ?? this.ccf,
        gnf: gnf ?? this.gnf,
        valor: valor ?? this.valor,
        nsu: nsu ?? this.nsu,
        estorno: estorno ?? this.estorno,
        rede: rede ?? this.rede,
        cartaoDc: cartaoDc ?? this.cartaoDc,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('PdvTotalTipoPagamento(')
          ..write('id: $id, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('horaVenda: $horaVenda, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('coo: $coo, ')
          ..write('ccf: $ccf, ')
          ..write('gnf: $gnf, ')
          ..write('valor: $valor, ')
          ..write('nsu: $nsu, ')
          ..write('estorno: $estorno, ')
          ..write('rede: $rede, ')
          ..write('cartaoDc: $cartaoDc, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idPdvVendaCabecalho,
      idPdvTipoPagamento,
      dataVenda,
      horaVenda,
      serieEcf,
      coo,
      ccf,
      gnf,
      valor,
      nsu,
      estorno,
      rede,
      cartaoDc,
      hashRegistro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvTotalTipoPagamento &&
          other.id == this.id &&
          other.idPdvVendaCabecalho == this.idPdvVendaCabecalho &&
          other.idPdvTipoPagamento == this.idPdvTipoPagamento &&
          other.dataVenda == this.dataVenda &&
          other.horaVenda == this.horaVenda &&
          other.serieEcf == this.serieEcf &&
          other.coo == this.coo &&
          other.ccf == this.ccf &&
          other.gnf == this.gnf &&
          other.valor == this.valor &&
          other.nsu == this.nsu &&
          other.estorno == this.estorno &&
          other.rede == this.rede &&
          other.cartaoDc == this.cartaoDc &&
          other.hashRegistro == this.hashRegistro);
}

class PdvTotalTipoPagamentosCompanion
    extends UpdateCompanion<PdvTotalTipoPagamento> {
  final Value<int?> id;
  final Value<int?> idPdvVendaCabecalho;
  final Value<int?> idPdvTipoPagamento;
  final Value<DateTime?> dataVenda;
  final Value<String?> horaVenda;
  final Value<String?> serieEcf;
  final Value<int?> coo;
  final Value<int?> ccf;
  final Value<int?> gnf;
  final Value<double?> valor;
  final Value<String?> nsu;
  final Value<String?> estorno;
  final Value<String?> rede;
  final Value<String?> cartaoDc;
  final Value<String?> hashRegistro;
  const PdvTotalTipoPagamentosCompanion({
    this.id = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.idPdvTipoPagamento = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.horaVenda = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.ccf = const Value.absent(),
    this.gnf = const Value.absent(),
    this.valor = const Value.absent(),
    this.nsu = const Value.absent(),
    this.estorno = const Value.absent(),
    this.rede = const Value.absent(),
    this.cartaoDc = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  PdvTotalTipoPagamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.idPdvTipoPagamento = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.horaVenda = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.ccf = const Value.absent(),
    this.gnf = const Value.absent(),
    this.valor = const Value.absent(),
    this.nsu = const Value.absent(),
    this.estorno = const Value.absent(),
    this.rede = const Value.absent(),
    this.cartaoDc = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<PdvTotalTipoPagamento> custom({
    Expression<int>? id,
    Expression<int>? idPdvVendaCabecalho,
    Expression<int>? idPdvTipoPagamento,
    Expression<DateTime>? dataVenda,
    Expression<String>? horaVenda,
    Expression<String>? serieEcf,
    Expression<int>? coo,
    Expression<int>? ccf,
    Expression<int>? gnf,
    Expression<double>? valor,
    Expression<String>? nsu,
    Expression<String>? estorno,
    Expression<String>? rede,
    Expression<String>? cartaoDc,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvVendaCabecalho != null)
        'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
      if (idPdvTipoPagamento != null)
        'ID_PDV_TIPO_PAGAMENTO': idPdvTipoPagamento,
      if (dataVenda != null) 'DATA_VENDA': dataVenda,
      if (horaVenda != null) 'HORA_VENDA': horaVenda,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (coo != null) 'COO': coo,
      if (ccf != null) 'CCF': ccf,
      if (gnf != null) 'GNF': gnf,
      if (valor != null) 'VALOR': valor,
      if (nsu != null) 'NSU': nsu,
      if (estorno != null) 'ESTORNO': estorno,
      if (rede != null) 'REDE': rede,
      if (cartaoDc != null) 'CARTAO_DC': cartaoDc,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  PdvTotalTipoPagamentosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvVendaCabecalho,
      Value<int?>? idPdvTipoPagamento,
      Value<DateTime?>? dataVenda,
      Value<String?>? horaVenda,
      Value<String?>? serieEcf,
      Value<int?>? coo,
      Value<int?>? ccf,
      Value<int?>? gnf,
      Value<double?>? valor,
      Value<String?>? nsu,
      Value<String?>? estorno,
      Value<String?>? rede,
      Value<String?>? cartaoDc,
      Value<String?>? hashRegistro}) {
    return PdvTotalTipoPagamentosCompanion(
      id: id ?? this.id,
      idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
      idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
      dataVenda: dataVenda ?? this.dataVenda,
      horaVenda: horaVenda ?? this.horaVenda,
      serieEcf: serieEcf ?? this.serieEcf,
      coo: coo ?? this.coo,
      ccf: ccf ?? this.ccf,
      gnf: gnf ?? this.gnf,
      valor: valor ?? this.valor,
      nsu: nsu ?? this.nsu,
      estorno: estorno ?? this.estorno,
      rede: rede ?? this.rede,
      cartaoDc: cartaoDc ?? this.cartaoDc,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvVendaCabecalho.present) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho.value);
    }
    if (idPdvTipoPagamento.present) {
      map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int>(idPdvTipoPagamento.value);
    }
    if (dataVenda.present) {
      map['DATA_VENDA'] = Variable<DateTime>(dataVenda.value);
    }
    if (horaVenda.present) {
      map['HORA_VENDA'] = Variable<String>(horaVenda.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (ccf.present) {
      map['CCF'] = Variable<int>(ccf.value);
    }
    if (gnf.present) {
      map['GNF'] = Variable<int>(gnf.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (nsu.present) {
      map['NSU'] = Variable<String>(nsu.value);
    }
    if (estorno.present) {
      map['ESTORNO'] = Variable<String>(estorno.value);
    }
    if (rede.present) {
      map['REDE'] = Variable<String>(rede.value);
    }
    if (cartaoDc.present) {
      map['CARTAO_DC'] = Variable<String>(cartaoDc.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvTotalTipoPagamentosCompanion(')
          ..write('id: $id, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('horaVenda: $horaVenda, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('coo: $coo, ')
          ..write('ccf: $ccf, ')
          ..write('gnf: $gnf, ')
          ..write('valor: $valor, ')
          ..write('nsu: $nsu, ')
          ..write('estorno: $estorno, ')
          ..write('rede: $rede, ')
          ..write('cartaoDc: $cartaoDc, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $PdvTotalTipoPagamentosTable extends PdvTotalTipoPagamentos
    with TableInfo<$PdvTotalTipoPagamentosTable, PdvTotalTipoPagamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvTotalTipoPagamentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvVendaCabecalhoMeta =
      const VerificationMeta('idPdvVendaCabecalho');
  @override
  late final GeneratedColumn<int> idPdvVendaCabecalho = GeneratedColumn<int>(
      'ID_PDV_VENDA_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
  final VerificationMeta _idPdvTipoPagamentoMeta =
      const VerificationMeta('idPdvTipoPagamento');
  @override
  late final GeneratedColumn<int> idPdvTipoPagamento = GeneratedColumn<int>(
      'ID_PDV_TIPO_PAGAMENTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_TIPO_PAGAMENTO(ID)');
  final VerificationMeta _dataVendaMeta = const VerificationMeta('dataVenda');
  @override
  late final GeneratedColumn<DateTime> dataVenda = GeneratedColumn<DateTime>(
      'DATA_VENDA', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaVendaMeta = const VerificationMeta('horaVenda');
  @override
  late final GeneratedColumn<String> horaVenda = GeneratedColumn<String>(
      'HORA_VENDA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  @override
  late final GeneratedColumn<String> serieEcf = GeneratedColumn<String>(
      'SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  @override
  late final GeneratedColumn<int> coo = GeneratedColumn<int>(
      'COO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
  @override
  late final GeneratedColumn<int> ccf = GeneratedColumn<int>(
      'CCF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _gnfMeta = const VerificationMeta('gnf');
  @override
  late final GeneratedColumn<int> gnf = GeneratedColumn<int>(
      'GNF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _nsuMeta = const VerificationMeta('nsu');
  @override
  late final GeneratedColumn<String> nsu = GeneratedColumn<String>(
      'NSU', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _estornoMeta = const VerificationMeta('estorno');
  @override
  late final GeneratedColumn<String> estorno = GeneratedColumn<String>(
      'ESTORNO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _redeMeta = const VerificationMeta('rede');
  @override
  late final GeneratedColumn<String> rede = GeneratedColumn<String>(
      'REDE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cartaoDcMeta = const VerificationMeta('cartaoDc');
  @override
  late final GeneratedColumn<String> cartaoDc = GeneratedColumn<String>(
      'CARTAO_DC', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvVendaCabecalho,
        idPdvTipoPagamento,
        dataVenda,
        horaVenda,
        serieEcf,
        coo,
        ccf,
        gnf,
        valor,
        nsu,
        estorno,
        rede,
        cartaoDc,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'PDV_TOTAL_TIPO_PAGAMENTO';
  @override
  String get actualTableName => 'PDV_TOTAL_TIPO_PAGAMENTO';
  @override
  VerificationContext validateIntegrity(
      Insertable<PdvTotalTipoPagamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
      context.handle(
          _idPdvVendaCabecalhoMeta,
          idPdvVendaCabecalho.isAcceptableOrUnknown(
              data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
    }
    if (data.containsKey('ID_PDV_TIPO_PAGAMENTO')) {
      context.handle(
          _idPdvTipoPagamentoMeta,
          idPdvTipoPagamento.isAcceptableOrUnknown(
              data['ID_PDV_TIPO_PAGAMENTO']!, _idPdvTipoPagamentoMeta));
    }
    if (data.containsKey('DATA_VENDA')) {
      context.handle(_dataVendaMeta,
          dataVenda.isAcceptableOrUnknown(data['DATA_VENDA']!, _dataVendaMeta));
    }
    if (data.containsKey('HORA_VENDA')) {
      context.handle(_horaVendaMeta,
          horaVenda.isAcceptableOrUnknown(data['HORA_VENDA']!, _horaVendaMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
    }
    if (data.containsKey('CCF')) {
      context.handle(
          _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF']!, _ccfMeta));
    }
    if (data.containsKey('GNF')) {
      context.handle(
          _gnfMeta, gnf.isAcceptableOrUnknown(data['GNF']!, _gnfMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    if (data.containsKey('NSU')) {
      context.handle(
          _nsuMeta, nsu.isAcceptableOrUnknown(data['NSU']!, _nsuMeta));
    }
    if (data.containsKey('ESTORNO')) {
      context.handle(_estornoMeta,
          estorno.isAcceptableOrUnknown(data['ESTORNO']!, _estornoMeta));
    }
    if (data.containsKey('REDE')) {
      context.handle(
          _redeMeta, rede.isAcceptableOrUnknown(data['REDE']!, _redeMeta));
    }
    if (data.containsKey('CARTAO_DC')) {
      context.handle(_cartaoDcMeta,
          cartaoDc.isAcceptableOrUnknown(data['CARTAO_DC']!, _cartaoDcMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvTotalTipoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvTotalTipoPagamento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvTotalTipoPagamentosTable createAlias(String alias) {
    return $PdvTotalTipoPagamentosTable(attachedDatabase, alias);
  }
}

class PdvVendaCabecalho extends DataClass
    implements Insertable<PdvVendaCabecalho> {
  final int? id;
  final int? idCliente;
  final int? idColaborador;
  final int? idPdvMovimento;
  final int? idEcfDav;
  final int? idEcfPreVendaCabecalho;
  final String? serieEcf;
  final int? cfop;
  final int? coo;
  final int? ccf;
  final DateTime? dataVenda;
  final String? horaVenda;
  final double? valorVenda;
  final double? taxaDesconto;
  final double? valorDesconto;
  final double? taxaAcrescimo;
  final double? valorAcrescimo;
  final double? valorFinal;
  final double? valorRecebido;
  final double? valorTroco;
  final double? valorCancelado;
  final double? valorTotalProdutos;
  final double? valorTotalDocumento;
  final double? valorBaseIcms;
  final double? valorIcms;
  final double? valorIcmsOutras;
  final double? valorIssqn;
  final double? valorPis;
  final double? valorCofins;
  final double? valorAcrescimoItens;
  final double? valorDescontoItens;
  final String? statusVenda;
  final String? nomeCliente;
  final String? cpfCnpjCliente;
  final String? cupomCancelado;
  final String? hashRegistro;
  final String? tipoOperacao;
  PdvVendaCabecalho(
      {this.id,
      this.idCliente,
      this.idColaborador,
      this.idPdvMovimento,
      this.idEcfDav,
      this.idEcfPreVendaCabecalho,
      this.serieEcf,
      this.cfop,
      this.coo,
      this.ccf,
      this.dataVenda,
      this.horaVenda,
      this.valorVenda,
      this.taxaDesconto,
      this.valorDesconto,
      this.taxaAcrescimo,
      this.valorAcrescimo,
      this.valorFinal,
      this.valorRecebido,
      this.valorTroco,
      this.valorCancelado,
      this.valorTotalProdutos,
      this.valorTotalDocumento,
      this.valorBaseIcms,
      this.valorIcms,
      this.valorIcmsOutras,
      this.valorIssqn,
      this.valorPis,
      this.valorCofins,
      this.valorAcrescimoItens,
      this.valorDescontoItens,
      this.statusVenda,
      this.nomeCliente,
      this.cpfCnpjCliente,
      this.cupomCancelado,
      this.hashRegistro,
      this.tipoOperacao});
  factory PdvVendaCabecalho.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvVendaCabecalho(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idCliente: ValueSqlType.intType(data['${effectivePrefix}ID_CLIENTE']),
      idColaborador: ValueSqlType.intType(data['${effectivePrefix}ID_COLABORADOR']),
      idPdvMovimento: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      idEcfDav: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_DAV']),
      idEcfPreVendaCabecalho: ValueSqlType.intType(
          data['${effectivePrefix}ID_ECF_PRE_VENDA_CABECALHO']),
      serieEcf: ValueSqlType.stringType(data['${effectivePrefix}SERIE_ECF']),
      cfop: ValueSqlType.intType(data['${effectivePrefix}CFOP']),
      coo: ValueSqlType.intType(data['${effectivePrefix}COO']),
      ccf: ValueSqlType.intType(data['${effectivePrefix}CCF']),
      dataVenda: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_VENDA']),
      horaVenda: ValueSqlType.stringType(data['${effectivePrefix}HORA_VENDA']),
      valorVenda: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_VENDA']),
      taxaDesconto: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_DESCONTO']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      taxaAcrescimo: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_ACRESCIMO']),
      valorAcrescimo: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ACRESCIMO']),
      valorFinal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_FINAL']),
      valorRecebido: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_RECEBIDO']),
      valorTroco: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TROCO']),
      valorCancelado: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_CANCELADO']),
      valorTotalProdutos: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_PRODUTOS']),
      valorTotalDocumento: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_DOCUMENTO']),
      valorBaseIcms: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_BASE_ICMS']),
      valorIcms: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ICMS']),
      valorIcmsOutras: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ICMS_OUTRAS']),
      valorIssqn: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ISSQN']),
      valorPis: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PIS']),
      valorCofins: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_COFINS']),
      valorAcrescimoItens: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ACRESCIMO_ITENS']),
      valorDescontoItens: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_DESCONTO_ITENS']),
      statusVenda: ValueSqlType.stringType(data['${effectivePrefix}STATUS_VENDA']),
      nomeCliente: ValueSqlType.stringType(data['${effectivePrefix}NOME_CLIENTE']),
      cpfCnpjCliente: ValueSqlType.stringType(data['${effectivePrefix}CPF_CNPJ_CLIENTE']),
      cupomCancelado: ValueSqlType.stringType(data['${effectivePrefix}CUPOM_CANCELADO']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
      tipoOperacao: ValueSqlType.stringType(data['${effectivePrefix}TIPO_OPERACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCliente != null) {
      map['ID_CLIENTE'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || idEcfDav != null) {
      map['ID_ECF_DAV'] = Variable<int>(idEcfDav);
    }
    if (!nullToAbsent || idEcfPreVendaCabecalho != null) {
      map['ID_ECF_PRE_VENDA_CABECALHO'] =
          Variable<int>(idEcfPreVendaCabecalho);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || ccf != null) {
      map['CCF'] = Variable<int>(ccf);
    }
    if (!nullToAbsent || dataVenda != null) {
      map['DATA_VENDA'] = Variable<DateTime>(dataVenda);
    }
    if (!nullToAbsent || horaVenda != null) {
      map['HORA_VENDA'] = Variable<String>(horaVenda);
    }
    if (!nullToAbsent || valorVenda != null) {
      map['VALOR_VENDA'] = Variable<double>(valorVenda);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || taxaAcrescimo != null) {
      map['TAXA_ACRESCIMO'] = Variable<double>(taxaAcrescimo);
    }
    if (!nullToAbsent || valorAcrescimo != null) {
      map['VALOR_ACRESCIMO'] = Variable<double>(valorAcrescimo);
    }
    if (!nullToAbsent || valorFinal != null) {
      map['VALOR_FINAL'] = Variable<double>(valorFinal);
    }
    if (!nullToAbsent || valorRecebido != null) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido);
    }
    if (!nullToAbsent || valorTroco != null) {
      map['VALOR_TROCO'] = Variable<double>(valorTroco);
    }
    if (!nullToAbsent || valorCancelado != null) {
      map['VALOR_CANCELADO'] = Variable<double>(valorCancelado);
    }
    if (!nullToAbsent || valorTotalProdutos != null) {
      map['VALOR_TOTAL_PRODUTOS'] = Variable<double>(valorTotalProdutos);
    }
    if (!nullToAbsent || valorTotalDocumento != null) {
      map['VALOR_TOTAL_DOCUMENTO'] = Variable<double>(valorTotalDocumento);
    }
    if (!nullToAbsent || valorBaseIcms != null) {
      map['VALOR_BASE_ICMS'] = Variable<double>(valorBaseIcms);
    }
    if (!nullToAbsent || valorIcms != null) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms);
    }
    if (!nullToAbsent || valorIcmsOutras != null) {
      map['VALOR_ICMS_OUTRAS'] = Variable<double>(valorIcmsOutras);
    }
    if (!nullToAbsent || valorIssqn != null) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn);
    }
    if (!nullToAbsent || valorPis != null) {
      map['VALOR_PIS'] = Variable<double>(valorPis);
    }
    if (!nullToAbsent || valorCofins != null) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins);
    }
    if (!nullToAbsent || valorAcrescimoItens != null) {
      map['VALOR_ACRESCIMO_ITENS'] = Variable<double>(valorAcrescimoItens);
    }
    if (!nullToAbsent || valorDescontoItens != null) {
      map['VALOR_DESCONTO_ITENS'] = Variable<double>(valorDescontoItens);
    }
    if (!nullToAbsent || statusVenda != null) {
      map['STATUS_VENDA'] = Variable<String>(statusVenda);
    }
    if (!nullToAbsent || nomeCliente != null) {
      map['NOME_CLIENTE'] = Variable<String>(nomeCliente);
    }
    if (!nullToAbsent || cpfCnpjCliente != null) {
      map['CPF_CNPJ_CLIENTE'] = Variable<String>(cpfCnpjCliente);
    }
    if (!nullToAbsent || cupomCancelado != null) {
      map['CUPOM_CANCELADO'] = Variable<String>(cupomCancelado);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    if (!nullToAbsent || tipoOperacao != null) {
      map['TIPO_OPERACAO'] = Variable<String>(tipoOperacao);
    }
    return map;
  }

  PdvVendaCabecalhosCompanion toCompanion(bool nullToAbsent) {
    return PdvVendaCabecalhosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCliente: idCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(idCliente),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      idEcfDav: idEcfDav == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfDav),
      idEcfPreVendaCabecalho: idEcfPreVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfPreVendaCabecalho),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      ccf: ccf == null && nullToAbsent ? const Value.absent() : Value(ccf),
      dataVenda: dataVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVenda),
      horaVenda: horaVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(horaVenda),
      valorVenda: valorVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(valorVenda),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      taxaAcrescimo: taxaAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaAcrescimo),
      valorAcrescimo: valorAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAcrescimo),
      valorFinal: valorFinal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFinal),
      valorRecebido: valorRecebido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRecebido),
      valorTroco: valorTroco == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTroco),
      valorCancelado: valorCancelado == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCancelado),
      valorTotalProdutos: valorTotalProdutos == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalProdutos),
      valorTotalDocumento: valorTotalDocumento == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalDocumento),
      valorBaseIcms: valorBaseIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBaseIcms),
      valorIcms: valorIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcms),
      valorIcmsOutras: valorIcmsOutras == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsOutras),
      valorIssqn: valorIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIssqn),
      valorPis: valorPis == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPis),
      valorCofins: valorCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCofins),
      valorAcrescimoItens: valorAcrescimoItens == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAcrescimoItens),
      valorDescontoItens: valorDescontoItens == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDescontoItens),
      statusVenda: statusVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(statusVenda),
      nomeCliente: nomeCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeCliente),
      cpfCnpjCliente: cpfCnpjCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(cpfCnpjCliente),
      cupomCancelado: cupomCancelado == null && nullToAbsent
          ? const Value.absent()
          : Value(cupomCancelado),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
      tipoOperacao: tipoOperacao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoOperacao),
    );
  }

  factory PdvVendaCabecalho.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvVendaCabecalho(
      id: serializer.fromJson<int?>(json['id']),
      idCliente: serializer.fromJson<int?>(json['idCliente']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      idPdvMovimento: serializer.fromJson<int?>(json['idPdvMovimento']),
      idEcfDav: serializer.fromJson<int?>(json['idEcfDav']),
      idEcfPreVendaCabecalho:
          serializer.fromJson<int?>(json['idEcfPreVendaCabecalho']),
      serieEcf: serializer.fromJson<String?>(json['serieEcf']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      coo: serializer.fromJson<int?>(json['coo']),
      ccf: serializer.fromJson<int?>(json['ccf']),
      dataVenda: serializer.fromJson<DateTime?>(json['dataVenda']),
      horaVenda: serializer.fromJson<String?>(json['horaVenda']),
      valorVenda: serializer.fromJson<double?>(json['valorVenda']),
      taxaDesconto: serializer.fromJson<double?>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      taxaAcrescimo: serializer.fromJson<double?>(json['taxaAcrescimo']),
      valorAcrescimo: serializer.fromJson<double?>(json['valorAcrescimo']),
      valorFinal: serializer.fromJson<double?>(json['valorFinal']),
      valorRecebido: serializer.fromJson<double?>(json['valorRecebido']),
      valorTroco: serializer.fromJson<double?>(json['valorTroco']),
      valorCancelado: serializer.fromJson<double?>(json['valorCancelado']),
      valorTotalProdutos:
          serializer.fromJson<double?>(json['valorTotalProdutos']),
      valorTotalDocumento:
          serializer.fromJson<double?>(json['valorTotalDocumento']),
      valorBaseIcms: serializer.fromJson<double?>(json['valorBaseIcms']),
      valorIcms: serializer.fromJson<double?>(json['valorIcms']),
      valorIcmsOutras: serializer.fromJson<double?>(json['valorIcmsOutras']),
      valorIssqn: serializer.fromJson<double?>(json['valorIssqn']),
      valorPis: serializer.fromJson<double?>(json['valorPis']),
      valorCofins: serializer.fromJson<double?>(json['valorCofins']),
      valorAcrescimoItens:
          serializer.fromJson<double?>(json['valorAcrescimoItens']),
      valorDescontoItens:
          serializer.fromJson<double?>(json['valorDescontoItens']),
      statusVenda: serializer.fromJson<String?>(json['statusVenda']),
      nomeCliente: serializer.fromJson<String?>(json['nomeCliente']),
      cpfCnpjCliente: serializer.fromJson<String?>(json['cpfCnpjCliente']),
      cupomCancelado: serializer.fromJson<String?>(json['cupomCancelado']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
      tipoOperacao: serializer.fromJson<String?>(json['tipoOperacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idCliente': serializer.toJson<int?>(idCliente),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'idPdvMovimento': serializer.toJson<int?>(idPdvMovimento),
      'idEcfDav': serializer.toJson<int?>(idEcfDav),
      'idEcfPreVendaCabecalho': serializer.toJson<int?>(idEcfPreVendaCabecalho),
      'serieEcf': serializer.toJson<String?>(serieEcf),
      'cfop': serializer.toJson<int?>(cfop),
      'coo': serializer.toJson<int?>(coo),
      'ccf': serializer.toJson<int?>(ccf),
      'dataVenda': serializer.toJson<DateTime?>(dataVenda),
      'horaVenda': serializer.toJson<String?>(horaVenda),
      'valorVenda': serializer.toJson<double?>(valorVenda),
      'taxaDesconto': serializer.toJson<double?>(taxaDesconto),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'taxaAcrescimo': serializer.toJson<double?>(taxaAcrescimo),
      'valorAcrescimo': serializer.toJson<double?>(valorAcrescimo),
      'valorFinal': serializer.toJson<double?>(valorFinal),
      'valorRecebido': serializer.toJson<double?>(valorRecebido),
      'valorTroco': serializer.toJson<double?>(valorTroco),
      'valorCancelado': serializer.toJson<double?>(valorCancelado),
      'valorTotalProdutos': serializer.toJson<double?>(valorTotalProdutos),
      'valorTotalDocumento': serializer.toJson<double?>(valorTotalDocumento),
      'valorBaseIcms': serializer.toJson<double?>(valorBaseIcms),
      'valorIcms': serializer.toJson<double?>(valorIcms),
      'valorIcmsOutras': serializer.toJson<double?>(valorIcmsOutras),
      'valorIssqn': serializer.toJson<double?>(valorIssqn),
      'valorPis': serializer.toJson<double?>(valorPis),
      'valorCofins': serializer.toJson<double?>(valorCofins),
      'valorAcrescimoItens': serializer.toJson<double?>(valorAcrescimoItens),
      'valorDescontoItens': serializer.toJson<double?>(valorDescontoItens),
      'statusVenda': serializer.toJson<String?>(statusVenda),
      'nomeCliente': serializer.toJson<String?>(nomeCliente),
      'cpfCnpjCliente': serializer.toJson<String?>(cpfCnpjCliente),
      'cupomCancelado': serializer.toJson<String?>(cupomCancelado),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
      'tipoOperacao': serializer.toJson<String?>(tipoOperacao),
    };
  }

  PdvVendaCabecalho copyWith(
          {int? id,
          int? idCliente,
          int? idColaborador,
          int? idPdvMovimento,
          int? idEcfDav,
          int? idEcfPreVendaCabecalho,
          String? serieEcf,
          int? cfop,
          int? coo,
          int? ccf,
          DateTime? dataVenda,
          String? horaVenda,
          double? valorVenda,
          double? taxaDesconto,
          double? valorDesconto,
          double? taxaAcrescimo,
          double? valorAcrescimo,
          double? valorFinal,
          double? valorRecebido,
          double? valorTroco,
          double? valorCancelado,
          double? valorTotalProdutos,
          double? valorTotalDocumento,
          double? valorBaseIcms,
          double? valorIcms,
          double? valorIcmsOutras,
          double? valorIssqn,
          double? valorPis,
          double? valorCofins,
          double? valorAcrescimoItens,
          double? valorDescontoItens,
          String? statusVenda,
          String? nomeCliente,
          String? cpfCnpjCliente,
          String? cupomCancelado,
          String? hashRegistro,
          String? tipoOperacao}) =>
      PdvVendaCabecalho(
        id: id ?? this.id,
        idCliente: idCliente ?? this.idCliente,
        idColaborador: idColaborador ?? this.idColaborador,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        idEcfDav: idEcfDav ?? this.idEcfDav,
        idEcfPreVendaCabecalho:
            idEcfPreVendaCabecalho ?? this.idEcfPreVendaCabecalho,
        serieEcf: serieEcf ?? this.serieEcf,
        cfop: cfop ?? this.cfop,
        coo: coo ?? this.coo,
        ccf: ccf ?? this.ccf,
        dataVenda: dataVenda ?? this.dataVenda,
        horaVenda: horaVenda ?? this.horaVenda,
        valorVenda: valorVenda ?? this.valorVenda,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
        valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
        valorFinal: valorFinal ?? this.valorFinal,
        valorRecebido: valorRecebido ?? this.valorRecebido,
        valorTroco: valorTroco ?? this.valorTroco,
        valorCancelado: valorCancelado ?? this.valorCancelado,
        valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
        valorTotalDocumento: valorTotalDocumento ?? this.valorTotalDocumento,
        valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
        valorIcms: valorIcms ?? this.valorIcms,
        valorIcmsOutras: valorIcmsOutras ?? this.valorIcmsOutras,
        valorIssqn: valorIssqn ?? this.valorIssqn,
        valorPis: valorPis ?? this.valorPis,
        valorCofins: valorCofins ?? this.valorCofins,
        valorAcrescimoItens: valorAcrescimoItens ?? this.valorAcrescimoItens,
        valorDescontoItens: valorDescontoItens ?? this.valorDescontoItens,
        statusVenda: statusVenda ?? this.statusVenda,
        nomeCliente: nomeCliente ?? this.nomeCliente,
        cpfCnpjCliente: cpfCnpjCliente ?? this.cpfCnpjCliente,
        cupomCancelado: cupomCancelado ?? this.cupomCancelado,
        hashRegistro: hashRegistro ?? this.hashRegistro,
        tipoOperacao: tipoOperacao ?? this.tipoOperacao,
      );
  @override
  String toString() {
    return (StringBuffer('PdvVendaCabecalho(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('idEcfDav: $idEcfDav, ')
          ..write('idEcfPreVendaCabecalho: $idEcfPreVendaCabecalho, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('cfop: $cfop, ')
          ..write('coo: $coo, ')
          ..write('ccf: $ccf, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('horaVenda: $horaVenda, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('taxaAcrescimo: $taxaAcrescimo, ')
          ..write('valorAcrescimo: $valorAcrescimo, ')
          ..write('valorFinal: $valorFinal, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('valorTroco: $valorTroco, ')
          ..write('valorCancelado: $valorCancelado, ')
          ..write('valorTotalProdutos: $valorTotalProdutos, ')
          ..write('valorTotalDocumento: $valorTotalDocumento, ')
          ..write('valorBaseIcms: $valorBaseIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('valorIcmsOutras: $valorIcmsOutras, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('valorPis: $valorPis, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('valorAcrescimoItens: $valorAcrescimoItens, ')
          ..write('valorDescontoItens: $valorDescontoItens, ')
          ..write('statusVenda: $statusVenda, ')
          ..write('nomeCliente: $nomeCliente, ')
          ..write('cpfCnpjCliente: $cpfCnpjCliente, ')
          ..write('cupomCancelado: $cupomCancelado, ')
          ..write('hashRegistro: $hashRegistro, ')
          ..write('tipoOperacao: $tipoOperacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idCliente,
        idColaborador,
        idPdvMovimento,
        idEcfDav,
        idEcfPreVendaCabecalho,
        serieEcf,
        cfop,
        coo,
        ccf,
        dataVenda,
        horaVenda,
        valorVenda,
        taxaDesconto,
        valorDesconto,
        taxaAcrescimo,
        valorAcrescimo,
        valorFinal,
        valorRecebido,
        valorTroco,
        valorCancelado,
        valorTotalProdutos,
        valorTotalDocumento,
        valorBaseIcms,
        valorIcms,
        valorIcmsOutras,
        valorIssqn,
        valorPis,
        valorCofins,
        valorAcrescimoItens,
        valorDescontoItens,
        statusVenda,
        nomeCliente,
        cpfCnpjCliente,
        cupomCancelado,
        hashRegistro,
        tipoOperacao
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvVendaCabecalho &&
          other.id == this.id &&
          other.idCliente == this.idCliente &&
          other.idColaborador == this.idColaborador &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.idEcfDav == this.idEcfDav &&
          other.idEcfPreVendaCabecalho == this.idEcfPreVendaCabecalho &&
          other.serieEcf == this.serieEcf &&
          other.cfop == this.cfop &&
          other.coo == this.coo &&
          other.ccf == this.ccf &&
          other.dataVenda == this.dataVenda &&
          other.horaVenda == this.horaVenda &&
          other.valorVenda == this.valorVenda &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.taxaAcrescimo == this.taxaAcrescimo &&
          other.valorAcrescimo == this.valorAcrescimo &&
          other.valorFinal == this.valorFinal &&
          other.valorRecebido == this.valorRecebido &&
          other.valorTroco == this.valorTroco &&
          other.valorCancelado == this.valorCancelado &&
          other.valorTotalProdutos == this.valorTotalProdutos &&
          other.valorTotalDocumento == this.valorTotalDocumento &&
          other.valorBaseIcms == this.valorBaseIcms &&
          other.valorIcms == this.valorIcms &&
          other.valorIcmsOutras == this.valorIcmsOutras &&
          other.valorIssqn == this.valorIssqn &&
          other.valorPis == this.valorPis &&
          other.valorCofins == this.valorCofins &&
          other.valorAcrescimoItens == this.valorAcrescimoItens &&
          other.valorDescontoItens == this.valorDescontoItens &&
          other.statusVenda == this.statusVenda &&
          other.nomeCliente == this.nomeCliente &&
          other.cpfCnpjCliente == this.cpfCnpjCliente &&
          other.cupomCancelado == this.cupomCancelado &&
          other.hashRegistro == this.hashRegistro &&
          other.tipoOperacao == this.tipoOperacao);
}

class PdvVendaCabecalhosCompanion extends UpdateCompanion<PdvVendaCabecalho> {
  final Value<int?> id;
  final Value<int?> idCliente;
  final Value<int?> idColaborador;
  final Value<int?> idPdvMovimento;
  final Value<int?> idEcfDav;
  final Value<int?> idEcfPreVendaCabecalho;
  final Value<String?> serieEcf;
  final Value<int?> cfop;
  final Value<int?> coo;
  final Value<int?> ccf;
  final Value<DateTime?> dataVenda;
  final Value<String?> horaVenda;
  final Value<double?> valorVenda;
  final Value<double?> taxaDesconto;
  final Value<double?> valorDesconto;
  final Value<double?> taxaAcrescimo;
  final Value<double?> valorAcrescimo;
  final Value<double?> valorFinal;
  final Value<double?> valorRecebido;
  final Value<double?> valorTroco;
  final Value<double?> valorCancelado;
  final Value<double?> valorTotalProdutos;
  final Value<double?> valorTotalDocumento;
  final Value<double?> valorBaseIcms;
  final Value<double?> valorIcms;
  final Value<double?> valorIcmsOutras;
  final Value<double?> valorIssqn;
  final Value<double?> valorPis;
  final Value<double?> valorCofins;
  final Value<double?> valorAcrescimoItens;
  final Value<double?> valorDescontoItens;
  final Value<String?> statusVenda;
  final Value<String?> nomeCliente;
  final Value<String?> cpfCnpjCliente;
  final Value<String?> cupomCancelado;
  final Value<String?> hashRegistro;
  final Value<String?> tipoOperacao;
  const PdvVendaCabecalhosCompanion({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.idEcfDav = const Value.absent(),
    this.idEcfPreVendaCabecalho = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.cfop = const Value.absent(),
    this.coo = const Value.absent(),
    this.ccf = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.horaVenda = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.taxaAcrescimo = const Value.absent(),
    this.valorAcrescimo = const Value.absent(),
    this.valorFinal = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.valorTroco = const Value.absent(),
    this.valorCancelado = const Value.absent(),
    this.valorTotalProdutos = const Value.absent(),
    this.valorTotalDocumento = const Value.absent(),
    this.valorBaseIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.valorIcmsOutras = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.valorAcrescimoItens = const Value.absent(),
    this.valorDescontoItens = const Value.absent(),
    this.statusVenda = const Value.absent(),
    this.nomeCliente = const Value.absent(),
    this.cpfCnpjCliente = const Value.absent(),
    this.cupomCancelado = const Value.absent(),
    this.hashRegistro = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
  });
  PdvVendaCabecalhosCompanion.insert({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.idEcfDav = const Value.absent(),
    this.idEcfPreVendaCabecalho = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.cfop = const Value.absent(),
    this.coo = const Value.absent(),
    this.ccf = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.horaVenda = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.taxaAcrescimo = const Value.absent(),
    this.valorAcrescimo = const Value.absent(),
    this.valorFinal = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.valorTroco = const Value.absent(),
    this.valorCancelado = const Value.absent(),
    this.valorTotalProdutos = const Value.absent(),
    this.valorTotalDocumento = const Value.absent(),
    this.valorBaseIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.valorIcmsOutras = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.valorAcrescimoItens = const Value.absent(),
    this.valorDescontoItens = const Value.absent(),
    this.statusVenda = const Value.absent(),
    this.nomeCliente = const Value.absent(),
    this.cpfCnpjCliente = const Value.absent(),
    this.cupomCancelado = const Value.absent(),
    this.hashRegistro = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
  });
  static Insertable<PdvVendaCabecalho> custom({
    Expression<int>? id,
    Expression<int>? idCliente,
    Expression<int>? idColaborador,
    Expression<int>? idPdvMovimento,
    Expression<int>? idEcfDav,
    Expression<int>? idEcfPreVendaCabecalho,
    Expression<String>? serieEcf,
    Expression<int>? cfop,
    Expression<int>? coo,
    Expression<int>? ccf,
    Expression<DateTime>? dataVenda,
    Expression<String>? horaVenda,
    Expression<double>? valorVenda,
    Expression<double>? taxaDesconto,
    Expression<double>? valorDesconto,
    Expression<double>? taxaAcrescimo,
    Expression<double>? valorAcrescimo,
    Expression<double>? valorFinal,
    Expression<double>? valorRecebido,
    Expression<double>? valorTroco,
    Expression<double>? valorCancelado,
    Expression<double>? valorTotalProdutos,
    Expression<double>? valorTotalDocumento,
    Expression<double>? valorBaseIcms,
    Expression<double>? valorIcms,
    Expression<double>? valorIcmsOutras,
    Expression<double>? valorIssqn,
    Expression<double>? valorPis,
    Expression<double>? valorCofins,
    Expression<double>? valorAcrescimoItens,
    Expression<double>? valorDescontoItens,
    Expression<String>? statusVenda,
    Expression<String>? nomeCliente,
    Expression<String>? cpfCnpjCliente,
    Expression<String>? cupomCancelado,
    Expression<String>? hashRegistro,
    Expression<String>? tipoOperacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCliente != null) 'ID_CLIENTE': idCliente,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (idEcfDav != null) 'ID_ECF_DAV': idEcfDav,
      if (idEcfPreVendaCabecalho != null)
        'ID_ECF_PRE_VENDA_CABECALHO': idEcfPreVendaCabecalho,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (cfop != null) 'CFOP': cfop,
      if (coo != null) 'COO': coo,
      if (ccf != null) 'CCF': ccf,
      if (dataVenda != null) 'DATA_VENDA': dataVenda,
      if (horaVenda != null) 'HORA_VENDA': horaVenda,
      if (valorVenda != null) 'VALOR_VENDA': valorVenda,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (taxaAcrescimo != null) 'TAXA_ACRESCIMO': taxaAcrescimo,
      if (valorAcrescimo != null) 'VALOR_ACRESCIMO': valorAcrescimo,
      if (valorFinal != null) 'VALOR_FINAL': valorFinal,
      if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
      if (valorTroco != null) 'VALOR_TROCO': valorTroco,
      if (valorCancelado != null) 'VALOR_CANCELADO': valorCancelado,
      if (valorTotalProdutos != null)
        'VALOR_TOTAL_PRODUTOS': valorTotalProdutos,
      if (valorTotalDocumento != null)
        'VALOR_TOTAL_DOCUMENTO': valorTotalDocumento,
      if (valorBaseIcms != null) 'VALOR_BASE_ICMS': valorBaseIcms,
      if (valorIcms != null) 'VALOR_ICMS': valorIcms,
      if (valorIcmsOutras != null) 'VALOR_ICMS_OUTRAS': valorIcmsOutras,
      if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
      if (valorPis != null) 'VALOR_PIS': valorPis,
      if (valorCofins != null) 'VALOR_COFINS': valorCofins,
      if (valorAcrescimoItens != null)
        'VALOR_ACRESCIMO_ITENS': valorAcrescimoItens,
      if (valorDescontoItens != null)
        'VALOR_DESCONTO_ITENS': valorDescontoItens,
      if (statusVenda != null) 'STATUS_VENDA': statusVenda,
      if (nomeCliente != null) 'NOME_CLIENTE': nomeCliente,
      if (cpfCnpjCliente != null) 'CPF_CNPJ_CLIENTE': cpfCnpjCliente,
      if (cupomCancelado != null) 'CUPOM_CANCELADO': cupomCancelado,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
      if (tipoOperacao != null) 'TIPO_OPERACAO': tipoOperacao,
    });
  }

  PdvVendaCabecalhosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idCliente,
      Value<int?>? idColaborador,
      Value<int?>? idPdvMovimento,
      Value<int?>? idEcfDav,
      Value<int?>? idEcfPreVendaCabecalho,
      Value<String?>? serieEcf,
      Value<int?>? cfop,
      Value<int?>? coo,
      Value<int?>? ccf,
      Value<DateTime?>? dataVenda,
      Value<String?>? horaVenda,
      Value<double?>? valorVenda,
      Value<double?>? taxaDesconto,
      Value<double?>? valorDesconto,
      Value<double?>? taxaAcrescimo,
      Value<double?>? valorAcrescimo,
      Value<double?>? valorFinal,
      Value<double?>? valorRecebido,
      Value<double?>? valorTroco,
      Value<double?>? valorCancelado,
      Value<double?>? valorTotalProdutos,
      Value<double?>? valorTotalDocumento,
      Value<double?>? valorBaseIcms,
      Value<double?>? valorIcms,
      Value<double?>? valorIcmsOutras,
      Value<double?>? valorIssqn,
      Value<double?>? valorPis,
      Value<double?>? valorCofins,
      Value<double?>? valorAcrescimoItens,
      Value<double?>? valorDescontoItens,
      Value<String?>? statusVenda,
      Value<String?>? nomeCliente,
      Value<String?>? cpfCnpjCliente,
      Value<String?>? cupomCancelado,
      Value<String?>? hashRegistro,
      Value<String?>? tipoOperacao}) {
    return PdvVendaCabecalhosCompanion(
      id: id ?? this.id,
      idCliente: idCliente ?? this.idCliente,
      idColaborador: idColaborador ?? this.idColaborador,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      idEcfDav: idEcfDav ?? this.idEcfDav,
      idEcfPreVendaCabecalho:
          idEcfPreVendaCabecalho ?? this.idEcfPreVendaCabecalho,
      serieEcf: serieEcf ?? this.serieEcf,
      cfop: cfop ?? this.cfop,
      coo: coo ?? this.coo,
      ccf: ccf ?? this.ccf,
      dataVenda: dataVenda ?? this.dataVenda,
      horaVenda: horaVenda ?? this.horaVenda,
      valorVenda: valorVenda ?? this.valorVenda,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
      valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
      valorFinal: valorFinal ?? this.valorFinal,
      valorRecebido: valorRecebido ?? this.valorRecebido,
      valorTroco: valorTroco ?? this.valorTroco,
      valorCancelado: valorCancelado ?? this.valorCancelado,
      valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
      valorTotalDocumento: valorTotalDocumento ?? this.valorTotalDocumento,
      valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
      valorIcms: valorIcms ?? this.valorIcms,
      valorIcmsOutras: valorIcmsOutras ?? this.valorIcmsOutras,
      valorIssqn: valorIssqn ?? this.valorIssqn,
      valorPis: valorPis ?? this.valorPis,
      valorCofins: valorCofins ?? this.valorCofins,
      valorAcrescimoItens: valorAcrescimoItens ?? this.valorAcrescimoItens,
      valorDescontoItens: valorDescontoItens ?? this.valorDescontoItens,
      statusVenda: statusVenda ?? this.statusVenda,
      nomeCliente: nomeCliente ?? this.nomeCliente,
      cpfCnpjCliente: cpfCnpjCliente ?? this.cpfCnpjCliente,
      cupomCancelado: cupomCancelado ?? this.cupomCancelado,
      hashRegistro: hashRegistro ?? this.hashRegistro,
      tipoOperacao: tipoOperacao ?? this.tipoOperacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCliente.present) {
      map['ID_CLIENTE'] = Variable<int>(idCliente.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (idEcfDav.present) {
      map['ID_ECF_DAV'] = Variable<int>(idEcfDav.value);
    }
    if (idEcfPreVendaCabecalho.present) {
      map['ID_ECF_PRE_VENDA_CABECALHO'] =
          Variable<int>(idEcfPreVendaCabecalho.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (ccf.present) {
      map['CCF'] = Variable<int>(ccf.value);
    }
    if (dataVenda.present) {
      map['DATA_VENDA'] = Variable<DateTime>(dataVenda.value);
    }
    if (horaVenda.present) {
      map['HORA_VENDA'] = Variable<String>(horaVenda.value);
    }
    if (valorVenda.present) {
      map['VALOR_VENDA'] = Variable<double>(valorVenda.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (taxaAcrescimo.present) {
      map['TAXA_ACRESCIMO'] = Variable<double>(taxaAcrescimo.value);
    }
    if (valorAcrescimo.present) {
      map['VALOR_ACRESCIMO'] = Variable<double>(valorAcrescimo.value);
    }
    if (valorFinal.present) {
      map['VALOR_FINAL'] = Variable<double>(valorFinal.value);
    }
    if (valorRecebido.present) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido.value);
    }
    if (valorTroco.present) {
      map['VALOR_TROCO'] = Variable<double>(valorTroco.value);
    }
    if (valorCancelado.present) {
      map['VALOR_CANCELADO'] = Variable<double>(valorCancelado.value);
    }
    if (valorTotalProdutos.present) {
      map['VALOR_TOTAL_PRODUTOS'] = Variable<double>(valorTotalProdutos.value);
    }
    if (valorTotalDocumento.present) {
      map['VALOR_TOTAL_DOCUMENTO'] =
          Variable<double>(valorTotalDocumento.value);
    }
    if (valorBaseIcms.present) {
      map['VALOR_BASE_ICMS'] = Variable<double>(valorBaseIcms.value);
    }
    if (valorIcms.present) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms.value);
    }
    if (valorIcmsOutras.present) {
      map['VALOR_ICMS_OUTRAS'] = Variable<double>(valorIcmsOutras.value);
    }
    if (valorIssqn.present) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn.value);
    }
    if (valorPis.present) {
      map['VALOR_PIS'] = Variable<double>(valorPis.value);
    }
    if (valorCofins.present) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins.value);
    }
    if (valorAcrescimoItens.present) {
      map['VALOR_ACRESCIMO_ITENS'] =
          Variable<double>(valorAcrescimoItens.value);
    }
    if (valorDescontoItens.present) {
      map['VALOR_DESCONTO_ITENS'] = Variable<double>(valorDescontoItens.value);
    }
    if (statusVenda.present) {
      map['STATUS_VENDA'] = Variable<String>(statusVenda.value);
    }
    if (nomeCliente.present) {
      map['NOME_CLIENTE'] = Variable<String>(nomeCliente.value);
    }
    if (cpfCnpjCliente.present) {
      map['CPF_CNPJ_CLIENTE'] = Variable<String>(cpfCnpjCliente.value);
    }
    if (cupomCancelado.present) {
      map['CUPOM_CANCELADO'] = Variable<String>(cupomCancelado.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    if (tipoOperacao.present) {
      map['TIPO_OPERACAO'] = Variable<String>(tipoOperacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvVendaCabecalhosCompanion(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('idEcfDav: $idEcfDav, ')
          ..write('idEcfPreVendaCabecalho: $idEcfPreVendaCabecalho, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('cfop: $cfop, ')
          ..write('coo: $coo, ')
          ..write('ccf: $ccf, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('horaVenda: $horaVenda, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('taxaAcrescimo: $taxaAcrescimo, ')
          ..write('valorAcrescimo: $valorAcrescimo, ')
          ..write('valorFinal: $valorFinal, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('valorTroco: $valorTroco, ')
          ..write('valorCancelado: $valorCancelado, ')
          ..write('valorTotalProdutos: $valorTotalProdutos, ')
          ..write('valorTotalDocumento: $valorTotalDocumento, ')
          ..write('valorBaseIcms: $valorBaseIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('valorIcmsOutras: $valorIcmsOutras, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('valorPis: $valorPis, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('valorAcrescimoItens: $valorAcrescimoItens, ')
          ..write('valorDescontoItens: $valorDescontoItens, ')
          ..write('statusVenda: $statusVenda, ')
          ..write('nomeCliente: $nomeCliente, ')
          ..write('cpfCnpjCliente: $cpfCnpjCliente, ')
          ..write('cupomCancelado: $cupomCancelado, ')
          ..write('hashRegistro: $hashRegistro, ')
          ..write('tipoOperacao: $tipoOperacao')
          ..write(')'))
        .toString();
  }
}

class $PdvVendaCabecalhosTable extends PdvVendaCabecalhos
    with TableInfo<$PdvVendaCabecalhosTable, PdvVendaCabecalho> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvVendaCabecalhosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
  @override
  late final GeneratedColumn<int> idCliente = GeneratedColumn<int>(
      'ID_CLIENTE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
      'ID_COLABORADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  @override
  late final GeneratedColumn<int> idPdvMovimento = GeneratedColumn<int>(
      'ID_PDV_MOVIMENTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  final VerificationMeta _idEcfDavMeta = const VerificationMeta('idEcfDav');
  @override
  late final GeneratedColumn<int> idEcfDav = GeneratedColumn<int>(
      'ID_ECF_DAV', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_DAV(ID)');
  final VerificationMeta _idEcfPreVendaCabecalhoMeta =
      const VerificationMeta('idEcfPreVendaCabecalho');
  @override
  late final GeneratedColumn<int> idEcfPreVendaCabecalho =
      GeneratedColumn<int>('ID_ECF_PRE_VENDA_CABECALHO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES ECF_PRE_VENDA_CABECALHO(ID)');
  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  @override
  late final GeneratedColumn<String> serieEcf = GeneratedColumn<String>(
      'SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
      'CFOP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  @override
  late final GeneratedColumn<int> coo = GeneratedColumn<int>(
      'COO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
  @override
  late final GeneratedColumn<int> ccf = GeneratedColumn<int>(
      'CCF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataVendaMeta = const VerificationMeta('dataVenda');
  @override
  late final GeneratedColumn<DateTime> dataVenda = GeneratedColumn<DateTime>(
      'DATA_VENDA', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaVendaMeta = const VerificationMeta('horaVenda');
  @override
  late final GeneratedColumn<String> horaVenda = GeneratedColumn<String>(
      'HORA_VENDA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorVendaMeta = const VerificationMeta('valorVenda');
  @override
  late final GeneratedColumn<double> valorVenda = GeneratedColumn<double>(
      'VALOR_VENDA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  @override
  late final GeneratedColumn<double> taxaDesconto = GeneratedColumn<double>(
      'TAXA_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaAcrescimoMeta =
      const VerificationMeta('taxaAcrescimo');
  @override
  late final GeneratedColumn<double> taxaAcrescimo = GeneratedColumn<double>(
      'TAXA_ACRESCIMO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorAcrescimoMeta =
      const VerificationMeta('valorAcrescimo');
  @override
  late final GeneratedColumn<double> valorAcrescimo = GeneratedColumn<double>(
      'VALOR_ACRESCIMO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorFinalMeta = const VerificationMeta('valorFinal');
  @override
  late final GeneratedColumn<double> valorFinal = GeneratedColumn<double>(
      'VALOR_FINAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorRecebidoMeta =
      const VerificationMeta('valorRecebido');
  @override
  late final GeneratedColumn<double> valorRecebido = GeneratedColumn<double>(
      'VALOR_RECEBIDO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTrocoMeta = const VerificationMeta('valorTroco');
  @override
  late final GeneratedColumn<double> valorTroco = GeneratedColumn<double>(
      'VALOR_TROCO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCanceladoMeta =
      const VerificationMeta('valorCancelado');
  @override
  late final GeneratedColumn<double> valorCancelado = GeneratedColumn<double>(
      'VALOR_CANCELADO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalProdutosMeta =
      const VerificationMeta('valorTotalProdutos');
  @override
  late final GeneratedColumn<double> valorTotalProdutos =
      GeneratedColumn<double>('VALOR_TOTAL_PRODUTOS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalDocumentoMeta =
      const VerificationMeta('valorTotalDocumento');
  @override
  late final GeneratedColumn<double> valorTotalDocumento =
      GeneratedColumn<double>('VALOR_TOTAL_DOCUMENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBaseIcmsMeta =
      const VerificationMeta('valorBaseIcms');
  @override
  late final GeneratedColumn<double> valorBaseIcms = GeneratedColumn<double>(
      'VALOR_BASE_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
  @override
  late final GeneratedColumn<double> valorIcms = GeneratedColumn<double>(
      'VALOR_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsOutrasMeta =
      const VerificationMeta('valorIcmsOutras');
  @override
  late final GeneratedColumn<double> valorIcmsOutras =
      GeneratedColumn<double>('VALOR_ICMS_OUTRAS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
  @override
  late final GeneratedColumn<double> valorIssqn = GeneratedColumn<double>(
      'VALOR_ISSQN', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
  @override
  late final GeneratedColumn<double> valorPis = GeneratedColumn<double>(
      'VALOR_PIS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCofinsMeta =
      const VerificationMeta('valorCofins');
  @override
  late final GeneratedColumn<double> valorCofins = GeneratedColumn<double>(
      'VALOR_COFINS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorAcrescimoItensMeta =
      const VerificationMeta('valorAcrescimoItens');
  @override
  late final GeneratedColumn<double> valorAcrescimoItens =
      GeneratedColumn<double>('VALOR_ACRESCIMO_ITENS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoItensMeta =
      const VerificationMeta('valorDescontoItens');
  @override
  late final GeneratedColumn<double> valorDescontoItens =
      GeneratedColumn<double>('VALOR_DESCONTO_ITENS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _statusVendaMeta =
      const VerificationMeta('statusVenda');
  @override
  late final GeneratedColumn<String> statusVenda = GeneratedColumn<String>(
      'STATUS_VENDA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeClienteMeta =
      const VerificationMeta('nomeCliente');
  @override
  late final GeneratedColumn<String> nomeCliente = GeneratedColumn<String>(
      'NOME_CLIENTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfCnpjClienteMeta =
      const VerificationMeta('cpfCnpjCliente');
  @override
  late final GeneratedColumn<String> cpfCnpjCliente = GeneratedColumn<String>(
      'CPF_CNPJ_CLIENTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cupomCanceladoMeta =
      const VerificationMeta('cupomCancelado');
  @override
  late final GeneratedColumn<String> cupomCancelado = GeneratedColumn<String>(
      'CUPOM_CANCELADO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoOperacaoMeta =
      const VerificationMeta('tipoOperacao');
  @override
  late final GeneratedColumn<String> tipoOperacao = GeneratedColumn<String>(
      'TIPO_OPERACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCliente,
        idColaborador,
        idPdvMovimento,
        idEcfDav,
        idEcfPreVendaCabecalho,
        serieEcf,
        cfop,
        coo,
        ccf,
        dataVenda,
        horaVenda,
        valorVenda,
        taxaDesconto,
        valorDesconto,
        taxaAcrescimo,
        valorAcrescimo,
        valorFinal,
        valorRecebido,
        valorTroco,
        valorCancelado,
        valorTotalProdutos,
        valorTotalDocumento,
        valorBaseIcms,
        valorIcms,
        valorIcmsOutras,
        valorIssqn,
        valorPis,
        valorCofins,
        valorAcrescimoItens,
        valorDescontoItens,
        statusVenda,
        nomeCliente,
        cpfCnpjCliente,
        cupomCancelado,
        hashRegistro,
        tipoOperacao
      ];
  @override
  String get aliasedName => _alias ?? 'PDV_VENDA_CABECALHO';
  @override
  String get actualTableName => 'PDV_VENDA_CABECALHO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvVendaCabecalho> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_CLIENTE')) {
      context.handle(_idClienteMeta,
          idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR']!, _idColaboradorMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
    }
    if (data.containsKey('ID_ECF_DAV')) {
      context.handle(_idEcfDavMeta,
          idEcfDav.isAcceptableOrUnknown(data['ID_ECF_DAV']!, _idEcfDavMeta));
    }
    if (data.containsKey('ID_ECF_PRE_VENDA_CABECALHO')) {
      context.handle(
          _idEcfPreVendaCabecalhoMeta,
          idEcfPreVendaCabecalho.isAcceptableOrUnknown(
              data['ID_ECF_PRE_VENDA_CABECALHO']!,
              _idEcfPreVendaCabecalhoMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
    }
    if (data.containsKey('CCF')) {
      context.handle(
          _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF']!, _ccfMeta));
    }
    if (data.containsKey('DATA_VENDA')) {
      context.handle(_dataVendaMeta,
          dataVenda.isAcceptableOrUnknown(data['DATA_VENDA']!, _dataVendaMeta));
    }
    if (data.containsKey('HORA_VENDA')) {
      context.handle(_horaVendaMeta,
          horaVenda.isAcceptableOrUnknown(data['HORA_VENDA']!, _horaVendaMeta));
    }
    if (data.containsKey('VALOR_VENDA')) {
      context.handle(
          _valorVendaMeta,
          valorVenda.isAcceptableOrUnknown(
              data['VALOR_VENDA']!, _valorVendaMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO']!, _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('TAXA_ACRESCIMO')) {
      context.handle(
          _taxaAcrescimoMeta,
          taxaAcrescimo.isAcceptableOrUnknown(
              data['TAXA_ACRESCIMO']!, _taxaAcrescimoMeta));
    }
    if (data.containsKey('VALOR_ACRESCIMO')) {
      context.handle(
          _valorAcrescimoMeta,
          valorAcrescimo.isAcceptableOrUnknown(
              data['VALOR_ACRESCIMO']!, _valorAcrescimoMeta));
    }
    if (data.containsKey('VALOR_FINAL')) {
      context.handle(
          _valorFinalMeta,
          valorFinal.isAcceptableOrUnknown(
              data['VALOR_FINAL']!, _valorFinalMeta));
    }
    if (data.containsKey('VALOR_RECEBIDO')) {
      context.handle(
          _valorRecebidoMeta,
          valorRecebido.isAcceptableOrUnknown(
              data['VALOR_RECEBIDO']!, _valorRecebidoMeta));
    }
    if (data.containsKey('VALOR_TROCO')) {
      context.handle(
          _valorTrocoMeta,
          valorTroco.isAcceptableOrUnknown(
              data['VALOR_TROCO']!, _valorTrocoMeta));
    }
    if (data.containsKey('VALOR_CANCELADO')) {
      context.handle(
          _valorCanceladoMeta,
          valorCancelado.isAcceptableOrUnknown(
              data['VALOR_CANCELADO']!, _valorCanceladoMeta));
    }
    if (data.containsKey('VALOR_TOTAL_PRODUTOS')) {
      context.handle(
          _valorTotalProdutosMeta,
          valorTotalProdutos.isAcceptableOrUnknown(
              data['VALOR_TOTAL_PRODUTOS']!, _valorTotalProdutosMeta));
    }
    if (data.containsKey('VALOR_TOTAL_DOCUMENTO')) {
      context.handle(
          _valorTotalDocumentoMeta,
          valorTotalDocumento.isAcceptableOrUnknown(
              data['VALOR_TOTAL_DOCUMENTO']!, _valorTotalDocumentoMeta));
    }
    if (data.containsKey('VALOR_BASE_ICMS')) {
      context.handle(
          _valorBaseIcmsMeta,
          valorBaseIcms.isAcceptableOrUnknown(
              data['VALOR_BASE_ICMS']!, _valorBaseIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS')) {
      context.handle(_valorIcmsMeta,
          valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS']!, _valorIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS_OUTRAS')) {
      context.handle(
          _valorIcmsOutrasMeta,
          valorIcmsOutras.isAcceptableOrUnknown(
              data['VALOR_ICMS_OUTRAS']!, _valorIcmsOutrasMeta));
    }
    if (data.containsKey('VALOR_ISSQN')) {
      context.handle(
          _valorIssqnMeta,
          valorIssqn.isAcceptableOrUnknown(
              data['VALOR_ISSQN']!, _valorIssqnMeta));
    }
    if (data.containsKey('VALOR_PIS')) {
      context.handle(_valorPisMeta,
          valorPis.isAcceptableOrUnknown(data['VALOR_PIS']!, _valorPisMeta));
    }
    if (data.containsKey('VALOR_COFINS')) {
      context.handle(
          _valorCofinsMeta,
          valorCofins.isAcceptableOrUnknown(
              data['VALOR_COFINS']!, _valorCofinsMeta));
    }
    if (data.containsKey('VALOR_ACRESCIMO_ITENS')) {
      context.handle(
          _valorAcrescimoItensMeta,
          valorAcrescimoItens.isAcceptableOrUnknown(
              data['VALOR_ACRESCIMO_ITENS']!, _valorAcrescimoItensMeta));
    }
    if (data.containsKey('VALOR_DESCONTO_ITENS')) {
      context.handle(
          _valorDescontoItensMeta,
          valorDescontoItens.isAcceptableOrUnknown(
              data['VALOR_DESCONTO_ITENS']!, _valorDescontoItensMeta));
    }
    if (data.containsKey('STATUS_VENDA')) {
      context.handle(
          _statusVendaMeta,
          statusVenda.isAcceptableOrUnknown(
              data['STATUS_VENDA']!, _statusVendaMeta));
    }
    if (data.containsKey('NOME_CLIENTE')) {
      context.handle(
          _nomeClienteMeta,
          nomeCliente.isAcceptableOrUnknown(
              data['NOME_CLIENTE']!, _nomeClienteMeta));
    }
    if (data.containsKey('CPF_CNPJ_CLIENTE')) {
      context.handle(
          _cpfCnpjClienteMeta,
          cpfCnpjCliente.isAcceptableOrUnknown(
              data['CPF_CNPJ_CLIENTE']!, _cpfCnpjClienteMeta));
    }
    if (data.containsKey('CUPOM_CANCELADO')) {
      context.handle(
          _cupomCanceladoMeta,
          cupomCancelado.isAcceptableOrUnknown(
              data['CUPOM_CANCELADO']!, _cupomCanceladoMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    if (data.containsKey('TIPO_OPERACAO')) {
      context.handle(
          _tipoOperacaoMeta,
          tipoOperacao.isAcceptableOrUnknown(
              data['TIPO_OPERACAO']!, _tipoOperacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvVendaCabecalho map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvVendaCabecalho.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvVendaCabecalhosTable createAlias(String alias) {
    return $PdvVendaCabecalhosTable(attachedDatabase, alias);
  }
}

class PdvVendaDetalhe extends DataClass implements Insertable<PdvVendaDetalhe> {
  final int? id;
  final int? idProduto;
  final int? idPdvVendaCabecalho;
  final int? cfop;
  final String? gtin;
  final int? ccf;
  final int? coo;
  final String? serieEcf;
  final int? item;
  final double? quantidade;
  final double? valorUnitario;
  final double? valorTotal;
  final double? valorTotalItem;
  final double? valorBaseIcms;
  final double? taxaIcms;
  final double? valorIcms;
  final double? taxaDesconto;
  final double? valorDesconto;
  final double? taxaIssqn;
  final double? valorIssqn;
  final double? taxaPis;
  final double? valorPis;
  final double? taxaCofins;
  final double? valorCofins;
  final double? taxaAcrescimo;
  final double? valorAcrescimo;
  final String? totalizadorParcial;
  final String? cst;
  final String? cancelado;
  final String? movimentaEstoque;
  final String? ecfIcmsSt;
  final double? valorImpostoFederal;
  final double? valorImpostoEstadual;
  final double? valorImpostoMunicipal;
  final String? hashRegistro;
  PdvVendaDetalhe(
      {this.id,
      this.idProduto,
      this.idPdvVendaCabecalho,
      this.cfop,
      this.gtin,
      this.ccf,
      this.coo,
      this.serieEcf,
      this.item,
      this.quantidade,
      this.valorUnitario,
      this.valorTotal,
      this.valorTotalItem,
      this.valorBaseIcms,
      this.taxaIcms,
      this.valorIcms,
      this.taxaDesconto,
      this.valorDesconto,
      this.taxaIssqn,
      this.valorIssqn,
      this.taxaPis,
      this.valorPis,
      this.taxaCofins,
      this.valorCofins,
      this.taxaAcrescimo,
      this.valorAcrescimo,
      this.totalizadorParcial,
      this.cst,
      this.cancelado,
      this.movimentaEstoque,
      this.ecfIcmsSt,
      this.valorImpostoFederal,
      this.valorImpostoEstadual,
      this.valorImpostoMunicipal,
      this.hashRegistro});
  factory PdvVendaDetalhe.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return PdvVendaDetalhe(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idProduto: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO']),
      idPdvVendaCabecalho: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
      cfop: ValueSqlType.intType(data['${effectivePrefix}CFOP']),
      gtin: ValueSqlType.stringType(data['${effectivePrefix}GTIN']),
      ccf: ValueSqlType.intType(data['${effectivePrefix}CCF']),
      coo: ValueSqlType.intType(data['${effectivePrefix}COO']),
      serieEcf: ValueSqlType.stringType(data['${effectivePrefix}SERIE_ECF']),
      item: ValueSqlType.intType(data['${effectivePrefix}ITEM']),
      quantidade: ValueSqlType.doubleType(data['${effectivePrefix}QUANTIDADE']),
      valorUnitario: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_UNITARIO']),
      valorTotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL']),
      valorTotalItem: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL_ITEM']),
      valorBaseIcms: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_BASE_ICMS']),
      taxaIcms: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_ICMS']),
      valorIcms: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ICMS']),
      taxaDesconto: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_DESCONTO']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      taxaIssqn: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_ISSQN']),
      valorIssqn: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ISSQN']),
      taxaPis: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_PIS']),
      valorPis: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PIS']),
      taxaCofins: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_COFINS']),
      valorCofins: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_COFINS']),
      taxaAcrescimo: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_ACRESCIMO']),
      valorAcrescimo: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ACRESCIMO']),
      totalizadorParcial: ValueSqlType.stringType(
          data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
      cst: ValueSqlType.stringType(data['${effectivePrefix}CST']),
      cancelado: ValueSqlType.stringType(data['${effectivePrefix}CANCELADO']),
      movimentaEstoque: ValueSqlType.stringType(data['${effectivePrefix}MOVIMENTA_ESTOQUE']),
      ecfIcmsSt: ValueSqlType.stringType(data['${effectivePrefix}ECF_ICMS_ST']),
      valorImpostoFederal: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_IMPOSTO_FEDERAL']),
      valorImpostoEstadual: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_IMPOSTO_ESTADUAL']),
      valorImpostoMunicipal: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_IMPOSTO_MUNICIPAL']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || idPdvVendaCabecalho != null) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || gtin != null) {
      map['GTIN'] = Variable<String>(gtin);
    }
    if (!nullToAbsent || ccf != null) {
      map['CCF'] = Variable<int>(ccf);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || item != null) {
      map['ITEM'] = Variable<int>(item);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || valorUnitario != null) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || valorTotalItem != null) {
      map['VALOR_TOTAL_ITEM'] = Variable<double>(valorTotalItem);
    }
    if (!nullToAbsent || valorBaseIcms != null) {
      map['VALOR_BASE_ICMS'] = Variable<double>(valorBaseIcms);
    }
    if (!nullToAbsent || taxaIcms != null) {
      map['TAXA_ICMS'] = Variable<double>(taxaIcms);
    }
    if (!nullToAbsent || valorIcms != null) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || taxaIssqn != null) {
      map['TAXA_ISSQN'] = Variable<double>(taxaIssqn);
    }
    if (!nullToAbsent || valorIssqn != null) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn);
    }
    if (!nullToAbsent || taxaPis != null) {
      map['TAXA_PIS'] = Variable<double>(taxaPis);
    }
    if (!nullToAbsent || valorPis != null) {
      map['VALOR_PIS'] = Variable<double>(valorPis);
    }
    if (!nullToAbsent || taxaCofins != null) {
      map['TAXA_COFINS'] = Variable<double>(taxaCofins);
    }
    if (!nullToAbsent || valorCofins != null) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins);
    }
    if (!nullToAbsent || taxaAcrescimo != null) {
      map['TAXA_ACRESCIMO'] = Variable<double>(taxaAcrescimo);
    }
    if (!nullToAbsent || valorAcrescimo != null) {
      map['VALOR_ACRESCIMO'] = Variable<double>(valorAcrescimo);
    }
    if (!nullToAbsent || totalizadorParcial != null) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial);
    }
    if (!nullToAbsent || cst != null) {
      map['CST'] = Variable<String>(cst);
    }
    if (!nullToAbsent || cancelado != null) {
      map['CANCELADO'] = Variable<String>(cancelado);
    }
    if (!nullToAbsent || movimentaEstoque != null) {
      map['MOVIMENTA_ESTOQUE'] = Variable<String>(movimentaEstoque);
    }
    if (!nullToAbsent || ecfIcmsSt != null) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt);
    }
    if (!nullToAbsent || valorImpostoFederal != null) {
      map['VALOR_IMPOSTO_FEDERAL'] = Variable<double>(valorImpostoFederal);
    }
    if (!nullToAbsent || valorImpostoEstadual != null) {
      map['VALOR_IMPOSTO_ESTADUAL'] = Variable<double>(valorImpostoEstadual);
    }
    if (!nullToAbsent || valorImpostoMunicipal != null) {
      map['VALOR_IMPOSTO_MUNICIPAL'] = Variable<double>(valorImpostoMunicipal);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  PdvVendaDetalhesCompanion toCompanion(bool nullToAbsent) {
    return PdvVendaDetalhesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      idPdvVendaCabecalho: idPdvVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvVendaCabecalho),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      gtin: gtin == null && nullToAbsent ? const Value.absent() : Value(gtin),
      ccf: ccf == null && nullToAbsent ? const Value.absent() : Value(ccf),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      item: item == null && nullToAbsent ? const Value.absent() : Value(item),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      valorUnitario: valorUnitario == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnitario),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      valorTotalItem: valorTotalItem == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalItem),
      valorBaseIcms: valorBaseIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBaseIcms),
      taxaIcms: taxaIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIcms),
      valorIcms: valorIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcms),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      taxaIssqn: taxaIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIssqn),
      valorIssqn: valorIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIssqn),
      taxaPis: taxaPis == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaPis),
      valorPis: valorPis == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPis),
      taxaCofins: taxaCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaCofins),
      valorCofins: valorCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCofins),
      taxaAcrescimo: taxaAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaAcrescimo),
      valorAcrescimo: valorAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAcrescimo),
      totalizadorParcial: totalizadorParcial == null && nullToAbsent
          ? const Value.absent()
          : Value(totalizadorParcial),
      cst: cst == null && nullToAbsent ? const Value.absent() : Value(cst),
      cancelado: cancelado == null && nullToAbsent
          ? const Value.absent()
          : Value(cancelado),
      movimentaEstoque: movimentaEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(movimentaEstoque),
      ecfIcmsSt: ecfIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(ecfIcmsSt),
      valorImpostoFederal: valorImpostoFederal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorImpostoFederal),
      valorImpostoEstadual: valorImpostoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(valorImpostoEstadual),
      valorImpostoMunicipal: valorImpostoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorImpostoMunicipal),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory PdvVendaDetalhe.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return PdvVendaDetalhe(
      id: serializer.fromJson<int?>(json['id']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      idPdvVendaCabecalho:
          serializer.fromJson<int?>(json['idPdvVendaCabecalho']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      gtin: serializer.fromJson<String?>(json['gtin']),
      ccf: serializer.fromJson<int?>(json['ccf']),
      coo: serializer.fromJson<int?>(json['coo']),
      serieEcf: serializer.fromJson<String?>(json['serieEcf']),
      item: serializer.fromJson<int?>(json['item']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
      valorUnitario: serializer.fromJson<double?>(json['valorUnitario']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      valorTotalItem: serializer.fromJson<double?>(json['valorTotalItem']),
      valorBaseIcms: serializer.fromJson<double?>(json['valorBaseIcms']),
      taxaIcms: serializer.fromJson<double?>(json['taxaIcms']),
      valorIcms: serializer.fromJson<double?>(json['valorIcms']),
      taxaDesconto: serializer.fromJson<double?>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      taxaIssqn: serializer.fromJson<double?>(json['taxaIssqn']),
      valorIssqn: serializer.fromJson<double?>(json['valorIssqn']),
      taxaPis: serializer.fromJson<double?>(json['taxaPis']),
      valorPis: serializer.fromJson<double?>(json['valorPis']),
      taxaCofins: serializer.fromJson<double?>(json['taxaCofins']),
      valorCofins: serializer.fromJson<double?>(json['valorCofins']),
      taxaAcrescimo: serializer.fromJson<double?>(json['taxaAcrescimo']),
      valorAcrescimo: serializer.fromJson<double?>(json['valorAcrescimo']),
      totalizadorParcial:
          serializer.fromJson<String?>(json['totalizadorParcial']),
      cst: serializer.fromJson<String?>(json['cst']),
      cancelado: serializer.fromJson<String?>(json['cancelado']),
      movimentaEstoque: serializer.fromJson<String?>(json['movimentaEstoque']),
      ecfIcmsSt: serializer.fromJson<String?>(json['ecfIcmsSt']),
      valorImpostoFederal:
          serializer.fromJson<double?>(json['valorImpostoFederal']),
      valorImpostoEstadual:
          serializer.fromJson<double?>(json['valorImpostoEstadual']),
      valorImpostoMunicipal:
          serializer.fromJson<double?>(json['valorImpostoMunicipal']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProduto': serializer.toJson<int?>(idProduto),
      'idPdvVendaCabecalho': serializer.toJson<int?>(idPdvVendaCabecalho),
      'cfop': serializer.toJson<int?>(cfop),
      'gtin': serializer.toJson<String?>(gtin),
      'ccf': serializer.toJson<int?>(ccf),
      'coo': serializer.toJson<int?>(coo),
      'serieEcf': serializer.toJson<String?>(serieEcf),
      'item': serializer.toJson<int?>(item),
      'quantidade': serializer.toJson<double?>(quantidade),
      'valorUnitario': serializer.toJson<double?>(valorUnitario),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'valorTotalItem': serializer.toJson<double?>(valorTotalItem),
      'valorBaseIcms': serializer.toJson<double?>(valorBaseIcms),
      'taxaIcms': serializer.toJson<double?>(taxaIcms),
      'valorIcms': serializer.toJson<double?>(valorIcms),
      'taxaDesconto': serializer.toJson<double?>(taxaDesconto),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'taxaIssqn': serializer.toJson<double?>(taxaIssqn),
      'valorIssqn': serializer.toJson<double?>(valorIssqn),
      'taxaPis': serializer.toJson<double?>(taxaPis),
      'valorPis': serializer.toJson<double?>(valorPis),
      'taxaCofins': serializer.toJson<double?>(taxaCofins),
      'valorCofins': serializer.toJson<double?>(valorCofins),
      'taxaAcrescimo': serializer.toJson<double?>(taxaAcrescimo),
      'valorAcrescimo': serializer.toJson<double?>(valorAcrescimo),
      'totalizadorParcial': serializer.toJson<String?>(totalizadorParcial),
      'cst': serializer.toJson<String?>(cst),
      'cancelado': serializer.toJson<String?>(cancelado),
      'movimentaEstoque': serializer.toJson<String?>(movimentaEstoque),
      'ecfIcmsSt': serializer.toJson<String?>(ecfIcmsSt),
      'valorImpostoFederal': serializer.toJson<double?>(valorImpostoFederal),
      'valorImpostoEstadual': serializer.toJson<double?>(valorImpostoEstadual),
      'valorImpostoMunicipal':
          serializer.toJson<double?>(valorImpostoMunicipal),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  PdvVendaDetalhe copyWith(
          {int? id,
          int? idProduto,
          int? idPdvVendaCabecalho,
          int? cfop,
          String? gtin,
          int? ccf,
          int? coo,
          String? serieEcf,
          int? item,
          double? quantidade,
          double? valorUnitario,
          double? valorTotal,
          double? valorTotalItem,
          double? valorBaseIcms,
          double? taxaIcms,
          double? valorIcms,
          double? taxaDesconto,
          double? valorDesconto,
          double? taxaIssqn,
          double? valorIssqn,
          double? taxaPis,
          double? valorPis,
          double? taxaCofins,
          double? valorCofins,
          double? taxaAcrescimo,
          double? valorAcrescimo,
          String? totalizadorParcial,
          String? cst,
          String? cancelado,
          String? movimentaEstoque,
          String? ecfIcmsSt,
          double? valorImpostoFederal,
          double? valorImpostoEstadual,
          double? valorImpostoMunicipal,
          String? hashRegistro}) =>
      PdvVendaDetalhe(
        id: id ?? this.id,
        idProduto: idProduto ?? this.idProduto,
        idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
        cfop: cfop ?? this.cfop,
        gtin: gtin ?? this.gtin,
        ccf: ccf ?? this.ccf,
        coo: coo ?? this.coo,
        serieEcf: serieEcf ?? this.serieEcf,
        item: item ?? this.item,
        quantidade: quantidade ?? this.quantidade,
        valorUnitario: valorUnitario ?? this.valorUnitario,
        valorTotal: valorTotal ?? this.valorTotal,
        valorTotalItem: valorTotalItem ?? this.valorTotalItem,
        valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
        taxaIcms: taxaIcms ?? this.taxaIcms,
        valorIcms: valorIcms ?? this.valorIcms,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        taxaIssqn: taxaIssqn ?? this.taxaIssqn,
        valorIssqn: valorIssqn ?? this.valorIssqn,
        taxaPis: taxaPis ?? this.taxaPis,
        valorPis: valorPis ?? this.valorPis,
        taxaCofins: taxaCofins ?? this.taxaCofins,
        valorCofins: valorCofins ?? this.valorCofins,
        taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
        valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
        totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
        cst: cst ?? this.cst,
        cancelado: cancelado ?? this.cancelado,
        movimentaEstoque: movimentaEstoque ?? this.movimentaEstoque,
        ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
        valorImpostoFederal: valorImpostoFederal ?? this.valorImpostoFederal,
        valorImpostoEstadual: valorImpostoEstadual ?? this.valorImpostoEstadual,
        valorImpostoMunicipal:
            valorImpostoMunicipal ?? this.valorImpostoMunicipal,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('PdvVendaDetalhe(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('cfop: $cfop, ')
          ..write('gtin: $gtin, ')
          ..write('ccf: $ccf, ')
          ..write('coo: $coo, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('item: $item, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalItem: $valorTotalItem, ')
          ..write('valorBaseIcms: $valorBaseIcms, ')
          ..write('taxaIcms: $taxaIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('taxaIssqn: $taxaIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('taxaPis: $taxaPis, ')
          ..write('valorPis: $valorPis, ')
          ..write('taxaCofins: $taxaCofins, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('taxaAcrescimo: $taxaAcrescimo, ')
          ..write('valorAcrescimo: $valorAcrescimo, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('cst: $cst, ')
          ..write('cancelado: $cancelado, ')
          ..write('movimentaEstoque: $movimentaEstoque, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('valorImpostoFederal: $valorImpostoFederal, ')
          ..write('valorImpostoEstadual: $valorImpostoEstadual, ')
          ..write('valorImpostoMunicipal: $valorImpostoMunicipal, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idProduto,
        idPdvVendaCabecalho,
        cfop,
        gtin,
        ccf,
        coo,
        serieEcf,
        item,
        quantidade,
        valorUnitario,
        valorTotal,
        valorTotalItem,
        valorBaseIcms,
        taxaIcms,
        valorIcms,
        taxaDesconto,
        valorDesconto,
        taxaIssqn,
        valorIssqn,
        taxaPis,
        valorPis,
        taxaCofins,
        valorCofins,
        taxaAcrescimo,
        valorAcrescimo,
        totalizadorParcial,
        cst,
        cancelado,
        movimentaEstoque,
        ecfIcmsSt,
        valorImpostoFederal,
        valorImpostoEstadual,
        valorImpostoMunicipal,
        hashRegistro
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is PdvVendaDetalhe &&
          other.id == this.id &&
          other.idProduto == this.idProduto &&
          other.idPdvVendaCabecalho == this.idPdvVendaCabecalho &&
          other.cfop == this.cfop &&
          other.gtin == this.gtin &&
          other.ccf == this.ccf &&
          other.coo == this.coo &&
          other.serieEcf == this.serieEcf &&
          other.item == this.item &&
          other.quantidade == this.quantidade &&
          other.valorUnitario == this.valorUnitario &&
          other.valorTotal == this.valorTotal &&
          other.valorTotalItem == this.valorTotalItem &&
          other.valorBaseIcms == this.valorBaseIcms &&
          other.taxaIcms == this.taxaIcms &&
          other.valorIcms == this.valorIcms &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.taxaIssqn == this.taxaIssqn &&
          other.valorIssqn == this.valorIssqn &&
          other.taxaPis == this.taxaPis &&
          other.valorPis == this.valorPis &&
          other.taxaCofins == this.taxaCofins &&
          other.valorCofins == this.valorCofins &&
          other.taxaAcrescimo == this.taxaAcrescimo &&
          other.valorAcrescimo == this.valorAcrescimo &&
          other.totalizadorParcial == this.totalizadorParcial &&
          other.cst == this.cst &&
          other.cancelado == this.cancelado &&
          other.movimentaEstoque == this.movimentaEstoque &&
          other.ecfIcmsSt == this.ecfIcmsSt &&
          other.valorImpostoFederal == this.valorImpostoFederal &&
          other.valorImpostoEstadual == this.valorImpostoEstadual &&
          other.valorImpostoMunicipal == this.valorImpostoMunicipal &&
          other.hashRegistro == this.hashRegistro);
}

class PdvVendaDetalhesCompanion extends UpdateCompanion<PdvVendaDetalhe> {
  final Value<int?> id;
  final Value<int?> idProduto;
  final Value<int?> idPdvVendaCabecalho;
  final Value<int?> cfop;
  final Value<String?> gtin;
  final Value<int?> ccf;
  final Value<int?> coo;
  final Value<String?> serieEcf;
  final Value<int?> item;
  final Value<double?> quantidade;
  final Value<double?> valorUnitario;
  final Value<double?> valorTotal;
  final Value<double?> valorTotalItem;
  final Value<double?> valorBaseIcms;
  final Value<double?> taxaIcms;
  final Value<double?> valorIcms;
  final Value<double?> taxaDesconto;
  final Value<double?> valorDesconto;
  final Value<double?> taxaIssqn;
  final Value<double?> valorIssqn;
  final Value<double?> taxaPis;
  final Value<double?> valorPis;
  final Value<double?> taxaCofins;
  final Value<double?> valorCofins;
  final Value<double?> taxaAcrescimo;
  final Value<double?> valorAcrescimo;
  final Value<String?> totalizadorParcial;
  final Value<String?> cst;
  final Value<String?> cancelado;
  final Value<String?> movimentaEstoque;
  final Value<String?> ecfIcmsSt;
  final Value<double?> valorImpostoFederal;
  final Value<double?> valorImpostoEstadual;
  final Value<double?> valorImpostoMunicipal;
  final Value<String?> hashRegistro;
  const PdvVendaDetalhesCompanion({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.cfop = const Value.absent(),
    this.gtin = const Value.absent(),
    this.ccf = const Value.absent(),
    this.coo = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.item = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalItem = const Value.absent(),
    this.valorBaseIcms = const Value.absent(),
    this.taxaIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.taxaIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.taxaPis = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.taxaCofins = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.taxaAcrescimo = const Value.absent(),
    this.valorAcrescimo = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.cst = const Value.absent(),
    this.cancelado = const Value.absent(),
    this.movimentaEstoque = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.valorImpostoFederal = const Value.absent(),
    this.valorImpostoEstadual = const Value.absent(),
    this.valorImpostoMunicipal = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  PdvVendaDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.cfop = const Value.absent(),
    this.gtin = const Value.absent(),
    this.ccf = const Value.absent(),
    this.coo = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.item = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalItem = const Value.absent(),
    this.valorBaseIcms = const Value.absent(),
    this.taxaIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.taxaIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.taxaPis = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.taxaCofins = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.taxaAcrescimo = const Value.absent(),
    this.valorAcrescimo = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.cst = const Value.absent(),
    this.cancelado = const Value.absent(),
    this.movimentaEstoque = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.valorImpostoFederal = const Value.absent(),
    this.valorImpostoEstadual = const Value.absent(),
    this.valorImpostoMunicipal = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<PdvVendaDetalhe> custom({
    Expression<int>? id,
    Expression<int>? idProduto,
    Expression<int>? idPdvVendaCabecalho,
    Expression<int>? cfop,
    Expression<String>? gtin,
    Expression<int>? ccf,
    Expression<int>? coo,
    Expression<String>? serieEcf,
    Expression<int>? item,
    Expression<double>? quantidade,
    Expression<double>? valorUnitario,
    Expression<double>? valorTotal,
    Expression<double>? valorTotalItem,
    Expression<double>? valorBaseIcms,
    Expression<double>? taxaIcms,
    Expression<double>? valorIcms,
    Expression<double>? taxaDesconto,
    Expression<double>? valorDesconto,
    Expression<double>? taxaIssqn,
    Expression<double>? valorIssqn,
    Expression<double>? taxaPis,
    Expression<double>? valorPis,
    Expression<double>? taxaCofins,
    Expression<double>? valorCofins,
    Expression<double>? taxaAcrescimo,
    Expression<double>? valorAcrescimo,
    Expression<String>? totalizadorParcial,
    Expression<String>? cst,
    Expression<String>? cancelado,
    Expression<String>? movimentaEstoque,
    Expression<String>? ecfIcmsSt,
    Expression<double>? valorImpostoFederal,
    Expression<double>? valorImpostoEstadual,
    Expression<double>? valorImpostoMunicipal,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (idPdvVendaCabecalho != null)
        'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
      if (cfop != null) 'CFOP': cfop,
      if (gtin != null) 'GTIN': gtin,
      if (ccf != null) 'CCF': ccf,
      if (coo != null) 'COO': coo,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (item != null) 'ITEM': item,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (valorTotalItem != null) 'VALOR_TOTAL_ITEM': valorTotalItem,
      if (valorBaseIcms != null) 'VALOR_BASE_ICMS': valorBaseIcms,
      if (taxaIcms != null) 'TAXA_ICMS': taxaIcms,
      if (valorIcms != null) 'VALOR_ICMS': valorIcms,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (taxaIssqn != null) 'TAXA_ISSQN': taxaIssqn,
      if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
      if (taxaPis != null) 'TAXA_PIS': taxaPis,
      if (valorPis != null) 'VALOR_PIS': valorPis,
      if (taxaCofins != null) 'TAXA_COFINS': taxaCofins,
      if (valorCofins != null) 'VALOR_COFINS': valorCofins,
      if (taxaAcrescimo != null) 'TAXA_ACRESCIMO': taxaAcrescimo,
      if (valorAcrescimo != null) 'VALOR_ACRESCIMO': valorAcrescimo,
      if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
      if (cst != null) 'CST': cst,
      if (cancelado != null) 'CANCELADO': cancelado,
      if (movimentaEstoque != null) 'MOVIMENTA_ESTOQUE': movimentaEstoque,
      if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
      if (valorImpostoFederal != null)
        'VALOR_IMPOSTO_FEDERAL': valorImpostoFederal,
      if (valorImpostoEstadual != null)
        'VALOR_IMPOSTO_ESTADUAL': valorImpostoEstadual,
      if (valorImpostoMunicipal != null)
        'VALOR_IMPOSTO_MUNICIPAL': valorImpostoMunicipal,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  PdvVendaDetalhesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idProduto,
      Value<int?>? idPdvVendaCabecalho,
      Value<int?>? cfop,
      Value<String?>? gtin,
      Value<int?>? ccf,
      Value<int?>? coo,
      Value<String?>? serieEcf,
      Value<int?>? item,
      Value<double?>? quantidade,
      Value<double?>? valorUnitario,
      Value<double?>? valorTotal,
      Value<double?>? valorTotalItem,
      Value<double?>? valorBaseIcms,
      Value<double?>? taxaIcms,
      Value<double?>? valorIcms,
      Value<double?>? taxaDesconto,
      Value<double?>? valorDesconto,
      Value<double?>? taxaIssqn,
      Value<double?>? valorIssqn,
      Value<double?>? taxaPis,
      Value<double?>? valorPis,
      Value<double?>? taxaCofins,
      Value<double?>? valorCofins,
      Value<double?>? taxaAcrescimo,
      Value<double?>? valorAcrescimo,
      Value<String?>? totalizadorParcial,
      Value<String?>? cst,
      Value<String?>? cancelado,
      Value<String?>? movimentaEstoque,
      Value<String?>? ecfIcmsSt,
      Value<double?>? valorImpostoFederal,
      Value<double?>? valorImpostoEstadual,
      Value<double?>? valorImpostoMunicipal,
      Value<String?>? hashRegistro}) {
    return PdvVendaDetalhesCompanion(
      id: id ?? this.id,
      idProduto: idProduto ?? this.idProduto,
      idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
      cfop: cfop ?? this.cfop,
      gtin: gtin ?? this.gtin,
      ccf: ccf ?? this.ccf,
      coo: coo ?? this.coo,
      serieEcf: serieEcf ?? this.serieEcf,
      item: item ?? this.item,
      quantidade: quantidade ?? this.quantidade,
      valorUnitario: valorUnitario ?? this.valorUnitario,
      valorTotal: valorTotal ?? this.valorTotal,
      valorTotalItem: valorTotalItem ?? this.valorTotalItem,
      valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
      taxaIcms: taxaIcms ?? this.taxaIcms,
      valorIcms: valorIcms ?? this.valorIcms,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      taxaIssqn: taxaIssqn ?? this.taxaIssqn,
      valorIssqn: valorIssqn ?? this.valorIssqn,
      taxaPis: taxaPis ?? this.taxaPis,
      valorPis: valorPis ?? this.valorPis,
      taxaCofins: taxaCofins ?? this.taxaCofins,
      valorCofins: valorCofins ?? this.valorCofins,
      taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
      valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
      totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
      cst: cst ?? this.cst,
      cancelado: cancelado ?? this.cancelado,
      movimentaEstoque: movimentaEstoque ?? this.movimentaEstoque,
      ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
      valorImpostoFederal: valorImpostoFederal ?? this.valorImpostoFederal,
      valorImpostoEstadual: valorImpostoEstadual ?? this.valorImpostoEstadual,
      valorImpostoMunicipal:
          valorImpostoMunicipal ?? this.valorImpostoMunicipal,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (idPdvVendaCabecalho.present) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (gtin.present) {
      map['GTIN'] = Variable<String>(gtin.value);
    }
    if (ccf.present) {
      map['CCF'] = Variable<int>(ccf.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (item.present) {
      map['ITEM'] = Variable<int>(item.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    if (valorUnitario.present) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (valorTotalItem.present) {
      map['VALOR_TOTAL_ITEM'] = Variable<double>(valorTotalItem.value);
    }
    if (valorBaseIcms.present) {
      map['VALOR_BASE_ICMS'] = Variable<double>(valorBaseIcms.value);
    }
    if (taxaIcms.present) {
      map['TAXA_ICMS'] = Variable<double>(taxaIcms.value);
    }
    if (valorIcms.present) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (taxaIssqn.present) {
      map['TAXA_ISSQN'] = Variable<double>(taxaIssqn.value);
    }
    if (valorIssqn.present) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn.value);
    }
    if (taxaPis.present) {
      map['TAXA_PIS'] = Variable<double>(taxaPis.value);
    }
    if (valorPis.present) {
      map['VALOR_PIS'] = Variable<double>(valorPis.value);
    }
    if (taxaCofins.present) {
      map['TAXA_COFINS'] = Variable<double>(taxaCofins.value);
    }
    if (valorCofins.present) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins.value);
    }
    if (taxaAcrescimo.present) {
      map['TAXA_ACRESCIMO'] = Variable<double>(taxaAcrescimo.value);
    }
    if (valorAcrescimo.present) {
      map['VALOR_ACRESCIMO'] = Variable<double>(valorAcrescimo.value);
    }
    if (totalizadorParcial.present) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial.value);
    }
    if (cst.present) {
      map['CST'] = Variable<String>(cst.value);
    }
    if (cancelado.present) {
      map['CANCELADO'] = Variable<String>(cancelado.value);
    }
    if (movimentaEstoque.present) {
      map['MOVIMENTA_ESTOQUE'] = Variable<String>(movimentaEstoque.value);
    }
    if (ecfIcmsSt.present) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt.value);
    }
    if (valorImpostoFederal.present) {
      map['VALOR_IMPOSTO_FEDERAL'] =
          Variable<double>(valorImpostoFederal.value);
    }
    if (valorImpostoEstadual.present) {
      map['VALOR_IMPOSTO_ESTADUAL'] =
          Variable<double>(valorImpostoEstadual.value);
    }
    if (valorImpostoMunicipal.present) {
      map['VALOR_IMPOSTO_MUNICIPAL'] =
          Variable<double>(valorImpostoMunicipal.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvVendaDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('cfop: $cfop, ')
          ..write('gtin: $gtin, ')
          ..write('ccf: $ccf, ')
          ..write('coo: $coo, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('item: $item, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalItem: $valorTotalItem, ')
          ..write('valorBaseIcms: $valorBaseIcms, ')
          ..write('taxaIcms: $taxaIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('taxaIssqn: $taxaIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('taxaPis: $taxaPis, ')
          ..write('valorPis: $valorPis, ')
          ..write('taxaCofins: $taxaCofins, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('taxaAcrescimo: $taxaAcrescimo, ')
          ..write('valorAcrescimo: $valorAcrescimo, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('cst: $cst, ')
          ..write('cancelado: $cancelado, ')
          ..write('movimentaEstoque: $movimentaEstoque, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('valorImpostoFederal: $valorImpostoFederal, ')
          ..write('valorImpostoEstadual: $valorImpostoEstadual, ')
          ..write('valorImpostoMunicipal: $valorImpostoMunicipal, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $PdvVendaDetalhesTable extends PdvVendaDetalhes
    with TableInfo<$PdvVendaDetalhesTable, PdvVendaDetalhe> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $PdvVendaDetalhesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
      'ID_PRODUTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  final VerificationMeta _idPdvVendaCabecalhoMeta =
      const VerificationMeta('idPdvVendaCabecalho');
  @override
  late final GeneratedColumn<int> idPdvVendaCabecalho = GeneratedColumn<int>(
      'ID_PDV_VENDA_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
      'CFOP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _gtinMeta = const VerificationMeta('gtin');
  @override
  late final GeneratedColumn<String> gtin = GeneratedColumn<String>(
      'GTIN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
  @override
  late final GeneratedColumn<int> ccf = GeneratedColumn<int>(
      'CCF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  @override
  late final GeneratedColumn<int> coo = GeneratedColumn<int>(
      'COO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  @override
  late final GeneratedColumn<String> serieEcf = GeneratedColumn<String>(
      'SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _itemMeta = const VerificationMeta('item');
  @override
  late final GeneratedColumn<int> item = GeneratedColumn<int>(
      'ITEM', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
      'QUANTIDADE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorUnitarioMeta =
      const VerificationMeta('valorUnitario');
  @override
  late final GeneratedColumn<double> valorUnitario = GeneratedColumn<double>(
      'VALOR_UNITARIO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
      'VALOR_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalItemMeta =
      const VerificationMeta('valorTotalItem');
  @override
  late final GeneratedColumn<double> valorTotalItem = GeneratedColumn<double>(
      'VALOR_TOTAL_ITEM', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorBaseIcmsMeta =
      const VerificationMeta('valorBaseIcms');
  @override
  late final GeneratedColumn<double> valorBaseIcms = GeneratedColumn<double>(
      'VALOR_BASE_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaIcmsMeta = const VerificationMeta('taxaIcms');
  @override
  late final GeneratedColumn<double> taxaIcms = GeneratedColumn<double>(
      'TAXA_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
  @override
  late final GeneratedColumn<double> valorIcms = GeneratedColumn<double>(
      'VALOR_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  @override
  late final GeneratedColumn<double> taxaDesconto = GeneratedColumn<double>(
      'TAXA_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaIssqnMeta = const VerificationMeta('taxaIssqn');
  @override
  late final GeneratedColumn<double> taxaIssqn = GeneratedColumn<double>(
      'TAXA_ISSQN', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
  @override
  late final GeneratedColumn<double> valorIssqn = GeneratedColumn<double>(
      'VALOR_ISSQN', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaPisMeta = const VerificationMeta('taxaPis');
  @override
  late final GeneratedColumn<double> taxaPis = GeneratedColumn<double>(
      'TAXA_PIS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
  @override
  late final GeneratedColumn<double> valorPis = GeneratedColumn<double>(
      'VALOR_PIS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaCofinsMeta = const VerificationMeta('taxaCofins');
  @override
  late final GeneratedColumn<double> taxaCofins = GeneratedColumn<double>(
      'TAXA_COFINS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCofinsMeta =
      const VerificationMeta('valorCofins');
  @override
  late final GeneratedColumn<double> valorCofins = GeneratedColumn<double>(
      'VALOR_COFINS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaAcrescimoMeta =
      const VerificationMeta('taxaAcrescimo');
  @override
  late final GeneratedColumn<double> taxaAcrescimo = GeneratedColumn<double>(
      'TAXA_ACRESCIMO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorAcrescimoMeta =
      const VerificationMeta('valorAcrescimo');
  @override
  late final GeneratedColumn<double> valorAcrescimo = GeneratedColumn<double>(
      'VALOR_ACRESCIMO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalizadorParcialMeta =
      const VerificationMeta('totalizadorParcial');
  @override
  late final GeneratedColumn<String> totalizadorParcial =
      GeneratedColumn<String>(
          'TOTALIZADOR_PARCIAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 10),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
      'CST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _canceladoMeta = const VerificationMeta('cancelado');
  @override
  late final GeneratedColumn<String> cancelado = GeneratedColumn<String>(
      'CANCELADO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _movimentaEstoqueMeta =
      const VerificationMeta('movimentaEstoque');
  @override
  late final GeneratedColumn<String> movimentaEstoque =
      GeneratedColumn<String>('MOVIMENTA_ESTOQUE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
  @override
  late final GeneratedColumn<String> ecfIcmsSt = GeneratedColumn<String>(
      'ECF_ICMS_ST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorImpostoFederalMeta =
      const VerificationMeta('valorImpostoFederal');
  @override
  late final GeneratedColumn<double> valorImpostoFederal =
      GeneratedColumn<double>('VALOR_IMPOSTO_FEDERAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorImpostoEstadualMeta =
      const VerificationMeta('valorImpostoEstadual');
  @override
  late final GeneratedColumn<double> valorImpostoEstadual =
      GeneratedColumn<double>('VALOR_IMPOSTO_ESTADUAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorImpostoMunicipalMeta =
      const VerificationMeta('valorImpostoMunicipal');
  @override
  late final GeneratedColumn<double> valorImpostoMunicipal =
      GeneratedColumn<double>('VALOR_IMPOSTO_MUNICIPAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idProduto,
        idPdvVendaCabecalho,
        cfop,
        gtin,
        ccf,
        coo,
        serieEcf,
        item,
        quantidade,
        valorUnitario,
        valorTotal,
        valorTotalItem,
        valorBaseIcms,
        taxaIcms,
        valorIcms,
        taxaDesconto,
        valorDesconto,
        taxaIssqn,
        valorIssqn,
        taxaPis,
        valorPis,
        taxaCofins,
        valorCofins,
        taxaAcrescimo,
        valorAcrescimo,
        totalizadorParcial,
        cst,
        cancelado,
        movimentaEstoque,
        ecfIcmsSt,
        valorImpostoFederal,
        valorImpostoEstadual,
        valorImpostoMunicipal,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'PDV_VENDA_DETALHE';
  @override
  String get actualTableName => 'PDV_VENDA_DETALHE';
  @override
  VerificationContext validateIntegrity(Insertable<PdvVendaDetalhe> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
    }
    if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
      context.handle(
          _idPdvVendaCabecalhoMeta,
          idPdvVendaCabecalho.isAcceptableOrUnknown(
              data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
    }
    if (data.containsKey('GTIN')) {
      context.handle(
          _gtinMeta, gtin.isAcceptableOrUnknown(data['GTIN']!, _gtinMeta));
    }
    if (data.containsKey('CCF')) {
      context.handle(
          _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF']!, _ccfMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
    }
    if (data.containsKey('ITEM')) {
      context.handle(
          _itemMeta, item.isAcceptableOrUnknown(data['ITEM']!, _itemMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE']!, _quantidadeMeta));
    }
    if (data.containsKey('VALOR_UNITARIO')) {
      context.handle(
          _valorUnitarioMeta,
          valorUnitario.isAcceptableOrUnknown(
              data['VALOR_UNITARIO']!, _valorUnitarioMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL']!, _valorTotalMeta));
    }
    if (data.containsKey('VALOR_TOTAL_ITEM')) {
      context.handle(
          _valorTotalItemMeta,
          valorTotalItem.isAcceptableOrUnknown(
              data['VALOR_TOTAL_ITEM']!, _valorTotalItemMeta));
    }
    if (data.containsKey('VALOR_BASE_ICMS')) {
      context.handle(
          _valorBaseIcmsMeta,
          valorBaseIcms.isAcceptableOrUnknown(
              data['VALOR_BASE_ICMS']!, _valorBaseIcmsMeta));
    }
    if (data.containsKey('TAXA_ICMS')) {
      context.handle(_taxaIcmsMeta,
          taxaIcms.isAcceptableOrUnknown(data['TAXA_ICMS']!, _taxaIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS')) {
      context.handle(_valorIcmsMeta,
          valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS']!, _valorIcmsMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO']!, _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('TAXA_ISSQN')) {
      context.handle(_taxaIssqnMeta,
          taxaIssqn.isAcceptableOrUnknown(data['TAXA_ISSQN']!, _taxaIssqnMeta));
    }
    if (data.containsKey('VALOR_ISSQN')) {
      context.handle(
          _valorIssqnMeta,
          valorIssqn.isAcceptableOrUnknown(
              data['VALOR_ISSQN']!, _valorIssqnMeta));
    }
    if (data.containsKey('TAXA_PIS')) {
      context.handle(_taxaPisMeta,
          taxaPis.isAcceptableOrUnknown(data['TAXA_PIS']!, _taxaPisMeta));
    }
    if (data.containsKey('VALOR_PIS')) {
      context.handle(_valorPisMeta,
          valorPis.isAcceptableOrUnknown(data['VALOR_PIS']!, _valorPisMeta));
    }
    if (data.containsKey('TAXA_COFINS')) {
      context.handle(
          _taxaCofinsMeta,
          taxaCofins.isAcceptableOrUnknown(
              data['TAXA_COFINS']!, _taxaCofinsMeta));
    }
    if (data.containsKey('VALOR_COFINS')) {
      context.handle(
          _valorCofinsMeta,
          valorCofins.isAcceptableOrUnknown(
              data['VALOR_COFINS']!, _valorCofinsMeta));
    }
    if (data.containsKey('TAXA_ACRESCIMO')) {
      context.handle(
          _taxaAcrescimoMeta,
          taxaAcrescimo.isAcceptableOrUnknown(
              data['TAXA_ACRESCIMO']!, _taxaAcrescimoMeta));
    }
    if (data.containsKey('VALOR_ACRESCIMO')) {
      context.handle(
          _valorAcrescimoMeta,
          valorAcrescimo.isAcceptableOrUnknown(
              data['VALOR_ACRESCIMO']!, _valorAcrescimoMeta));
    }
    if (data.containsKey('TOTALIZADOR_PARCIAL')) {
      context.handle(
          _totalizadorParcialMeta,
          totalizadorParcial.isAcceptableOrUnknown(
              data['TOTALIZADOR_PARCIAL']!, _totalizadorParcialMeta));
    }
    if (data.containsKey('CST')) {
      context.handle(
          _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
    }
    if (data.containsKey('CANCELADO')) {
      context.handle(_canceladoMeta,
          cancelado.isAcceptableOrUnknown(data['CANCELADO']!, _canceladoMeta));
    }
    if (data.containsKey('MOVIMENTA_ESTOQUE')) {
      context.handle(
          _movimentaEstoqueMeta,
          movimentaEstoque.isAcceptableOrUnknown(
              data['MOVIMENTA_ESTOQUE']!, _movimentaEstoqueMeta));
    }
    if (data.containsKey('ECF_ICMS_ST')) {
      context.handle(
          _ecfIcmsStMeta,
          ecfIcmsSt.isAcceptableOrUnknown(
              data['ECF_ICMS_ST']!, _ecfIcmsStMeta));
    }
    if (data.containsKey('VALOR_IMPOSTO_FEDERAL')) {
      context.handle(
          _valorImpostoFederalMeta,
          valorImpostoFederal.isAcceptableOrUnknown(
              data['VALOR_IMPOSTO_FEDERAL']!, _valorImpostoFederalMeta));
    }
    if (data.containsKey('VALOR_IMPOSTO_ESTADUAL')) {
      context.handle(
          _valorImpostoEstadualMeta,
          valorImpostoEstadual.isAcceptableOrUnknown(
              data['VALOR_IMPOSTO_ESTADUAL']!, _valorImpostoEstadualMeta));
    }
    if (data.containsKey('VALOR_IMPOSTO_MUNICIPAL')) {
      context.handle(
          _valorImpostoMunicipalMeta,
          valorImpostoMunicipal.isAcceptableOrUnknown(
              data['VALOR_IMPOSTO_MUNICIPAL']!, _valorImpostoMunicipalMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvVendaDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
    return PdvVendaDetalhe.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $PdvVendaDetalhesTable createAlias(String alias) {
    return $PdvVendaDetalhesTable(attachedDatabase, alias);
  }
}

class Produto extends DataClass implements Insertable<Produto> {
  final int? id;
  final int? idProdutoUnidade;
  final int? idTributGrupoTributario;
  final int? idProdutoTipo;
  final int? idProdutoSubgrupo;
  final String? gtin;
  final String? codigoInterno;
  final String? nome;
  final String? descricao;
  final String? descricaoPdv;
  final double? valorCompra;
  final double? valorVenda;
  final double? quantidadeEstoque;
  final double? estoqueMinimo;
  final double? estoqueMaximo;
  final String? codigoNcm;
  final String? iat;
  final String? ippt;
  final String? tipoItemSped;
  final double? taxaIpi;
  final double? taxaIssqn;
  final double? taxaPis;
  final double? taxaCofins;
  final double? taxaIcms;
  final String? cst;
  final String? csosn;
  final String? totalizadorParcial;
  final String? ecfIcmsSt;
  final int? codigoBalanca;
  final String? pafPSt;
  final String? hashRegistro;
  final double? valorCusto;
  final String? situacao;
  final String? codigoCest;
  Produto(
      {this.id,
      this.idProdutoUnidade,
      this.idTributGrupoTributario,
      this.idProdutoTipo,
      this.idProdutoSubgrupo,
      this.gtin,
      this.codigoInterno,
      this.nome,
      this.descricao,
      this.descricaoPdv,
      this.valorCompra,
      this.valorVenda,
      this.quantidadeEstoque,
      this.estoqueMinimo,
      this.estoqueMaximo,
      this.codigoNcm,
      this.iat,
      this.ippt,
      this.tipoItemSped,
      this.taxaIpi,
      this.taxaIssqn,
      this.taxaPis,
      this.taxaCofins,
      this.taxaIcms,
      this.cst,
      this.csosn,
      this.totalizadorParcial,
      this.ecfIcmsSt,
      this.codigoBalanca,
      this.pafPSt,
      this.hashRegistro,
      this.valorCusto,
      this.situacao,
      this.codigoCest});
  factory Produto.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Produto(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idProdutoUnidade: ValueSqlType.intType(
          data['${effectivePrefix}ID_PRODUTO_UNIDADE']),
      idTributGrupoTributario: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_GRUPO_TRIBUTARIO']),
      idProdutoTipo: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO_TIPO']),
      idProdutoSubgrupo: ValueSqlType.intType(
          data['${effectivePrefix}ID_PRODUTO_SUBGRUPO']),
      gtin: ValueSqlType.stringType(data['${effectivePrefix}GTIN']),
      codigoInterno: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_INTERNO']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      descricaoPdv: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO_PDV']),
      valorCompra: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_COMPRA']),
      valorVenda: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_VENDA']),
      quantidadeEstoque: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_ESTOQUE']),
      estoqueMinimo: ValueSqlType.doubleType(data['${effectivePrefix}ESTOQUE_MINIMO']),
      estoqueMaximo: ValueSqlType.doubleType(data['${effectivePrefix}ESTOQUE_MAXIMO']),
      codigoNcm: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_NCM']),
      iat: ValueSqlType.stringType(data['${effectivePrefix}IAT']),
      ippt: ValueSqlType.stringType(data['${effectivePrefix}IPPT']),
      tipoItemSped: ValueSqlType.stringType(data['${effectivePrefix}TIPO_ITEM_SPED']),
      taxaIpi: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_IPI']),
      taxaIssqn: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_ISSQN']),
      taxaPis: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_PIS']),
      taxaCofins: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_COFINS']),
      taxaIcms: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_ICMS']),
      cst: ValueSqlType.stringType(data['${effectivePrefix}CST']),
      csosn: ValueSqlType.stringType(data['${effectivePrefix}CSOSN']),
      totalizadorParcial: ValueSqlType.stringType(
          data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
      ecfIcmsSt: ValueSqlType.stringType(data['${effectivePrefix}ECF_ICMS_ST']),
      codigoBalanca: ValueSqlType.intType(data['${effectivePrefix}CODIGO_BALANCA']),
      pafPSt: ValueSqlType.stringType(data['${effectivePrefix}PAF_P_ST']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
      valorCusto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_CUSTO']),
      situacao: ValueSqlType.stringType(data['${effectivePrefix}SITUACAO']),
      codigoCest: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_CEST']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProdutoUnidade != null) {
      map['ID_PRODUTO_UNIDADE'] = Variable<int>(idProdutoUnidade);
    }
    if (!nullToAbsent || idTributGrupoTributario != null) {
      map['ID_TRIBUT_GRUPO_TRIBUTARIO'] =
          Variable<int>(idTributGrupoTributario);
    }
    if (!nullToAbsent || idProdutoTipo != null) {
      map['ID_PRODUTO_TIPO'] = Variable<int>(idProdutoTipo);
    }
    if (!nullToAbsent || idProdutoSubgrupo != null) {
      map['ID_PRODUTO_SUBGRUPO'] = Variable<int>(idProdutoSubgrupo);
    }
    if (!nullToAbsent || gtin != null) {
      map['GTIN'] = Variable<String>(gtin);
    }
    if (!nullToAbsent || codigoInterno != null) {
      map['CODIGO_INTERNO'] = Variable<String>(codigoInterno);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || descricaoPdv != null) {
      map['DESCRICAO_PDV'] = Variable<String>(descricaoPdv);
    }
    if (!nullToAbsent || valorCompra != null) {
      map['VALOR_COMPRA'] = Variable<double>(valorCompra);
    }
    if (!nullToAbsent || valorVenda != null) {
      map['VALOR_VENDA'] = Variable<double>(valorVenda);
    }
    if (!nullToAbsent || quantidadeEstoque != null) {
      map['QUANTIDADE_ESTOQUE'] = Variable<double>(quantidadeEstoque);
    }
    if (!nullToAbsent || estoqueMinimo != null) {
      map['ESTOQUE_MINIMO'] = Variable<double>(estoqueMinimo);
    }
    if (!nullToAbsent || estoqueMaximo != null) {
      map['ESTOQUE_MAXIMO'] = Variable<double>(estoqueMaximo);
    }
    if (!nullToAbsent || codigoNcm != null) {
      map['CODIGO_NCM'] = Variable<String>(codigoNcm);
    }
    if (!nullToAbsent || iat != null) {
      map['IAT'] = Variable<String>(iat);
    }
    if (!nullToAbsent || ippt != null) {
      map['IPPT'] = Variable<String>(ippt);
    }
    if (!nullToAbsent || tipoItemSped != null) {
      map['TIPO_ITEM_SPED'] = Variable<String>(tipoItemSped);
    }
    if (!nullToAbsent || taxaIpi != null) {
      map['TAXA_IPI'] = Variable<double>(taxaIpi);
    }
    if (!nullToAbsent || taxaIssqn != null) {
      map['TAXA_ISSQN'] = Variable<double>(taxaIssqn);
    }
    if (!nullToAbsent || taxaPis != null) {
      map['TAXA_PIS'] = Variable<double>(taxaPis);
    }
    if (!nullToAbsent || taxaCofins != null) {
      map['TAXA_COFINS'] = Variable<double>(taxaCofins);
    }
    if (!nullToAbsent || taxaIcms != null) {
      map['TAXA_ICMS'] = Variable<double>(taxaIcms);
    }
    if (!nullToAbsent || cst != null) {
      map['CST'] = Variable<String>(cst);
    }
    if (!nullToAbsent || csosn != null) {
      map['CSOSN'] = Variable<String>(csosn);
    }
    if (!nullToAbsent || totalizadorParcial != null) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial);
    }
    if (!nullToAbsent || ecfIcmsSt != null) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt);
    }
    if (!nullToAbsent || codigoBalanca != null) {
      map['CODIGO_BALANCA'] = Variable<int>(codigoBalanca);
    }
    if (!nullToAbsent || pafPSt != null) {
      map['PAF_P_ST'] = Variable<String>(pafPSt);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    if (!nullToAbsent || valorCusto != null) {
      map['VALOR_CUSTO'] = Variable<double>(valorCusto);
    }
    if (!nullToAbsent || situacao != null) {
      map['SITUACAO'] = Variable<String>(situacao);
    }
    if (!nullToAbsent || codigoCest != null) {
      map['CODIGO_CEST'] = Variable<String>(codigoCest);
    }
    return map;
  }

  ProdutosCompanion toCompanion(bool nullToAbsent) {
    return ProdutosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProdutoUnidade: idProdutoUnidade == null && nullToAbsent
          ? const Value.absent()
          : Value(idProdutoUnidade),
      idTributGrupoTributario: idTributGrupoTributario == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributGrupoTributario),
      idProdutoTipo: idProdutoTipo == null && nullToAbsent
          ? const Value.absent()
          : Value(idProdutoTipo),
      idProdutoSubgrupo: idProdutoSubgrupo == null && nullToAbsent
          ? const Value.absent()
          : Value(idProdutoSubgrupo),
      gtin: gtin == null && nullToAbsent ? const Value.absent() : Value(gtin),
      codigoInterno: codigoInterno == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoInterno),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      descricaoPdv: descricaoPdv == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoPdv),
      valorCompra: valorCompra == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCompra),
      valorVenda: valorVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(valorVenda),
      quantidadeEstoque: quantidadeEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeEstoque),
      estoqueMinimo: estoqueMinimo == null && nullToAbsent
          ? const Value.absent()
          : Value(estoqueMinimo),
      estoqueMaximo: estoqueMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(estoqueMaximo),
      codigoNcm: codigoNcm == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoNcm),
      iat: iat == null && nullToAbsent ? const Value.absent() : Value(iat),
      ippt: ippt == null && nullToAbsent ? const Value.absent() : Value(ippt),
      tipoItemSped: tipoItemSped == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoItemSped),
      taxaIpi: taxaIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIpi),
      taxaIssqn: taxaIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIssqn),
      taxaPis: taxaPis == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaPis),
      taxaCofins: taxaCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaCofins),
      taxaIcms: taxaIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIcms),
      cst: cst == null && nullToAbsent ? const Value.absent() : Value(cst),
      csosn:
          csosn == null && nullToAbsent ? const Value.absent() : Value(csosn),
      totalizadorParcial: totalizadorParcial == null && nullToAbsent
          ? const Value.absent()
          : Value(totalizadorParcial),
      ecfIcmsSt: ecfIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(ecfIcmsSt),
      codigoBalanca: codigoBalanca == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoBalanca),
      pafPSt:
          pafPSt == null && nullToAbsent ? const Value.absent() : Value(pafPSt),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
      valorCusto: valorCusto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCusto),
      situacao: situacao == null && nullToAbsent
          ? const Value.absent()
          : Value(situacao),
      codigoCest: codigoCest == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoCest),
    );
  }

  factory Produto.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Produto(
      id: serializer.fromJson<int?>(json['id']),
      idProdutoUnidade: serializer.fromJson<int?>(json['idProdutoUnidade']),
      idTributGrupoTributario:
          serializer.fromJson<int?>(json['idTributGrupoTributario']),
      idProdutoTipo: serializer.fromJson<int?>(json['idProdutoTipo']),
      idProdutoSubgrupo: serializer.fromJson<int?>(json['idProdutoSubgrupo']),
      gtin: serializer.fromJson<String?>(json['gtin']),
      codigoInterno: serializer.fromJson<String?>(json['codigoInterno']),
      nome: serializer.fromJson<String?>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      descricaoPdv: serializer.fromJson<String?>(json['descricaoPdv']),
      valorCompra: serializer.fromJson<double?>(json['valorCompra']),
      valorVenda: serializer.fromJson<double?>(json['valorVenda']),
      quantidadeEstoque:
          serializer.fromJson<double?>(json['quantidadeEstoque']),
      estoqueMinimo: serializer.fromJson<double?>(json['estoqueMinimo']),
      estoqueMaximo: serializer.fromJson<double?>(json['estoqueMaximo']),
      codigoNcm: serializer.fromJson<String?>(json['codigoNcm']),
      iat: serializer.fromJson<String?>(json['iat']),
      ippt: serializer.fromJson<String?>(json['ippt']),
      tipoItemSped: serializer.fromJson<String?>(json['tipoItemSped']),
      taxaIpi: serializer.fromJson<double?>(json['taxaIpi']),
      taxaIssqn: serializer.fromJson<double?>(json['taxaIssqn']),
      taxaPis: serializer.fromJson<double?>(json['taxaPis']),
      taxaCofins: serializer.fromJson<double?>(json['taxaCofins']),
      taxaIcms: serializer.fromJson<double?>(json['taxaIcms']),
      cst: serializer.fromJson<String?>(json['cst']),
      csosn: serializer.fromJson<String?>(json['csosn']),
      totalizadorParcial:
          serializer.fromJson<String?>(json['totalizadorParcial']),
      ecfIcmsSt: serializer.fromJson<String?>(json['ecfIcmsSt']),
      codigoBalanca: serializer.fromJson<int?>(json['codigoBalanca']),
      pafPSt: serializer.fromJson<String?>(json['pafPSt']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
      valorCusto: serializer.fromJson<double?>(json['valorCusto']),
      situacao: serializer.fromJson<String?>(json['situacao']),
      codigoCest: serializer.fromJson<String?>(json['codigoCest']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProdutoUnidade': serializer.toJson<int?>(idProdutoUnidade),
      'idTributGrupoTributario':
          serializer.toJson<int?>(idTributGrupoTributario),
      'idProdutoTipo': serializer.toJson<int?>(idProdutoTipo),
      'idProdutoSubgrupo': serializer.toJson<int?>(idProdutoSubgrupo),
      'gtin': serializer.toJson<String?>(gtin),
      'codigoInterno': serializer.toJson<String?>(codigoInterno),
      'nome': serializer.toJson<String?>(nome),
      'descricao': serializer.toJson<String?>(descricao),
      'descricaoPdv': serializer.toJson<String?>(descricaoPdv),
      'valorCompra': serializer.toJson<double?>(valorCompra),
      'valorVenda': serializer.toJson<double?>(valorVenda),
      'quantidadeEstoque': serializer.toJson<double?>(quantidadeEstoque),
      'estoqueMinimo': serializer.toJson<double?>(estoqueMinimo),
      'estoqueMaximo': serializer.toJson<double?>(estoqueMaximo),
      'codigoNcm': serializer.toJson<String?>(codigoNcm),
      'iat': serializer.toJson<String?>(iat),
      'ippt': serializer.toJson<String?>(ippt),
      'tipoItemSped': serializer.toJson<String?>(tipoItemSped),
      'taxaIpi': serializer.toJson<double?>(taxaIpi),
      'taxaIssqn': serializer.toJson<double?>(taxaIssqn),
      'taxaPis': serializer.toJson<double?>(taxaPis),
      'taxaCofins': serializer.toJson<double?>(taxaCofins),
      'taxaIcms': serializer.toJson<double?>(taxaIcms),
      'cst': serializer.toJson<String?>(cst),
      'csosn': serializer.toJson<String?>(csosn),
      'totalizadorParcial': serializer.toJson<String?>(totalizadorParcial),
      'ecfIcmsSt': serializer.toJson<String?>(ecfIcmsSt),
      'codigoBalanca': serializer.toJson<int?>(codigoBalanca),
      'pafPSt': serializer.toJson<String?>(pafPSt),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
      'valorCusto': serializer.toJson<double?>(valorCusto),
      'situacao': serializer.toJson<String?>(situacao),
      'codigoCest': serializer.toJson<String?>(codigoCest),
    };
  }

  Produto copyWith(
          {int? id,
          int? idProdutoUnidade,
          int? idTributGrupoTributario,
          int? idProdutoTipo,
          int? idProdutoSubgrupo,
          String? gtin,
          String? codigoInterno,
          String? nome,
          String? descricao,
          String? descricaoPdv,
          double? valorCompra,
          double? valorVenda,
          double? quantidadeEstoque,
          double? estoqueMinimo,
          double? estoqueMaximo,
          String? codigoNcm,
          String? iat,
          String? ippt,
          String? tipoItemSped,
          double? taxaIpi,
          double? taxaIssqn,
          double? taxaPis,
          double? taxaCofins,
          double? taxaIcms,
          String? cst,
          String? csosn,
          String? totalizadorParcial,
          String? ecfIcmsSt,
          int? codigoBalanca,
          String? pafPSt,
          String? hashRegistro,
          double? valorCusto,
          String? situacao,
          String? codigoCest}) =>
      Produto(
        id: id ?? this.id,
        idProdutoUnidade: idProdutoUnidade ?? this.idProdutoUnidade,
        idTributGrupoTributario:
            idTributGrupoTributario ?? this.idTributGrupoTributario,
        idProdutoTipo: idProdutoTipo ?? this.idProdutoTipo,
        idProdutoSubgrupo: idProdutoSubgrupo ?? this.idProdutoSubgrupo,
        gtin: gtin ?? this.gtin,
        codigoInterno: codigoInterno ?? this.codigoInterno,
        nome: nome ?? this.nome,
        descricao: descricao ?? this.descricao,
        descricaoPdv: descricaoPdv ?? this.descricaoPdv,
        valorCompra: valorCompra ?? this.valorCompra,
        valorVenda: valorVenda ?? this.valorVenda,
        quantidadeEstoque: quantidadeEstoque ?? this.quantidadeEstoque,
        estoqueMinimo: estoqueMinimo ?? this.estoqueMinimo,
        estoqueMaximo: estoqueMaximo ?? this.estoqueMaximo,
        codigoNcm: codigoNcm ?? this.codigoNcm,
        iat: iat ?? this.iat,
        ippt: ippt ?? this.ippt,
        tipoItemSped: tipoItemSped ?? this.tipoItemSped,
        taxaIpi: taxaIpi ?? this.taxaIpi,
        taxaIssqn: taxaIssqn ?? this.taxaIssqn,
        taxaPis: taxaPis ?? this.taxaPis,
        taxaCofins: taxaCofins ?? this.taxaCofins,
        taxaIcms: taxaIcms ?? this.taxaIcms,
        cst: cst ?? this.cst,
        csosn: csosn ?? this.csosn,
        totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
        ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
        codigoBalanca: codigoBalanca ?? this.codigoBalanca,
        pafPSt: pafPSt ?? this.pafPSt,
        hashRegistro: hashRegistro ?? this.hashRegistro,
        valorCusto: valorCusto ?? this.valorCusto,
        situacao: situacao ?? this.situacao,
        codigoCest: codigoCest ?? this.codigoCest,
      );
  @override
  String toString() {
    return (StringBuffer('Produto(')
          ..write('id: $id, ')
          ..write('idProdutoUnidade: $idProdutoUnidade, ')
          ..write('idTributGrupoTributario: $idTributGrupoTributario, ')
          ..write('idProdutoTipo: $idProdutoTipo, ')
          ..write('idProdutoSubgrupo: $idProdutoSubgrupo, ')
          ..write('gtin: $gtin, ')
          ..write('codigoInterno: $codigoInterno, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao, ')
          ..write('descricaoPdv: $descricaoPdv, ')
          ..write('valorCompra: $valorCompra, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('quantidadeEstoque: $quantidadeEstoque, ')
          ..write('estoqueMinimo: $estoqueMinimo, ')
          ..write('estoqueMaximo: $estoqueMaximo, ')
          ..write('codigoNcm: $codigoNcm, ')
          ..write('iat: $iat, ')
          ..write('ippt: $ippt, ')
          ..write('tipoItemSped: $tipoItemSped, ')
          ..write('taxaIpi: $taxaIpi, ')
          ..write('taxaIssqn: $taxaIssqn, ')
          ..write('taxaPis: $taxaPis, ')
          ..write('taxaCofins: $taxaCofins, ')
          ..write('taxaIcms: $taxaIcms, ')
          ..write('cst: $cst, ')
          ..write('csosn: $csosn, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('codigoBalanca: $codigoBalanca, ')
          ..write('pafPSt: $pafPSt, ')
          ..write('hashRegistro: $hashRegistro, ')
          ..write('valorCusto: $valorCusto, ')
          ..write('situacao: $situacao, ')
          ..write('codigoCest: $codigoCest')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idProdutoUnidade,
        idTributGrupoTributario,
        idProdutoTipo,
        idProdutoSubgrupo,
        gtin,
        codigoInterno,
        nome,
        descricao,
        descricaoPdv,
        valorCompra,
        valorVenda,
        quantidadeEstoque,
        estoqueMinimo,
        estoqueMaximo,
        codigoNcm,
        iat,
        ippt,
        tipoItemSped,
        taxaIpi,
        taxaIssqn,
        taxaPis,
        taxaCofins,
        taxaIcms,
        cst,
        csosn,
        totalizadorParcial,
        ecfIcmsSt,
        codigoBalanca,
        pafPSt,
        hashRegistro,
        valorCusto,
        situacao,
        codigoCest
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Produto &&
          other.id == this.id &&
          other.idProdutoUnidade == this.idProdutoUnidade &&
          other.idTributGrupoTributario == this.idTributGrupoTributario &&
          other.idProdutoTipo == this.idProdutoTipo &&
          other.idProdutoSubgrupo == this.idProdutoSubgrupo &&
          other.gtin == this.gtin &&
          other.codigoInterno == this.codigoInterno &&
          other.nome == this.nome &&
          other.descricao == this.descricao &&
          other.descricaoPdv == this.descricaoPdv &&
          other.valorCompra == this.valorCompra &&
          other.valorVenda == this.valorVenda &&
          other.quantidadeEstoque == this.quantidadeEstoque &&
          other.estoqueMinimo == this.estoqueMinimo &&
          other.estoqueMaximo == this.estoqueMaximo &&
          other.codigoNcm == this.codigoNcm &&
          other.iat == this.iat &&
          other.ippt == this.ippt &&
          other.tipoItemSped == this.tipoItemSped &&
          other.taxaIpi == this.taxaIpi &&
          other.taxaIssqn == this.taxaIssqn &&
          other.taxaPis == this.taxaPis &&
          other.taxaCofins == this.taxaCofins &&
          other.taxaIcms == this.taxaIcms &&
          other.cst == this.cst &&
          other.csosn == this.csosn &&
          other.totalizadorParcial == this.totalizadorParcial &&
          other.ecfIcmsSt == this.ecfIcmsSt &&
          other.codigoBalanca == this.codigoBalanca &&
          other.pafPSt == this.pafPSt &&
          other.hashRegistro == this.hashRegistro &&
          other.valorCusto == this.valorCusto &&
          other.situacao == this.situacao &&
          other.codigoCest == this.codigoCest);
}

class ProdutosCompanion extends UpdateCompanion<Produto> {
  final Value<int?> id;
  final Value<int?> idProdutoUnidade;
  final Value<int?> idTributGrupoTributario;
  final Value<int?> idProdutoTipo;
  final Value<int?> idProdutoSubgrupo;
  final Value<String?> gtin;
  final Value<String?> codigoInterno;
  final Value<String?> nome;
  final Value<String?> descricao;
  final Value<String?> descricaoPdv;
  final Value<double?> valorCompra;
  final Value<double?> valorVenda;
  final Value<double?> quantidadeEstoque;
  final Value<double?> estoqueMinimo;
  final Value<double?> estoqueMaximo;
  final Value<String?> codigoNcm;
  final Value<String?> iat;
  final Value<String?> ippt;
  final Value<String?> tipoItemSped;
  final Value<double?> taxaIpi;
  final Value<double?> taxaIssqn;
  final Value<double?> taxaPis;
  final Value<double?> taxaCofins;
  final Value<double?> taxaIcms;
  final Value<String?> cst;
  final Value<String?> csosn;
  final Value<String?> totalizadorParcial;
  final Value<String?> ecfIcmsSt;
  final Value<int?> codigoBalanca;
  final Value<String?> pafPSt;
  final Value<String?> hashRegistro;
  final Value<double?> valorCusto;
  final Value<String?> situacao;
  final Value<String?> codigoCest;
  const ProdutosCompanion({
    this.id = const Value.absent(),
    this.idProdutoUnidade = const Value.absent(),
    this.idTributGrupoTributario = const Value.absent(),
    this.idProdutoTipo = const Value.absent(),
    this.idProdutoSubgrupo = const Value.absent(),
    this.gtin = const Value.absent(),
    this.codigoInterno = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
    this.descricaoPdv = const Value.absent(),
    this.valorCompra = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.quantidadeEstoque = const Value.absent(),
    this.estoqueMinimo = const Value.absent(),
    this.estoqueMaximo = const Value.absent(),
    this.codigoNcm = const Value.absent(),
    this.iat = const Value.absent(),
    this.ippt = const Value.absent(),
    this.tipoItemSped = const Value.absent(),
    this.taxaIpi = const Value.absent(),
    this.taxaIssqn = const Value.absent(),
    this.taxaPis = const Value.absent(),
    this.taxaCofins = const Value.absent(),
    this.taxaIcms = const Value.absent(),
    this.cst = const Value.absent(),
    this.csosn = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.codigoBalanca = const Value.absent(),
    this.pafPSt = const Value.absent(),
    this.hashRegistro = const Value.absent(),
    this.valorCusto = const Value.absent(),
    this.situacao = const Value.absent(),
    this.codigoCest = const Value.absent(),
  });
  ProdutosCompanion.insert({
    this.id = const Value.absent(),
    this.idProdutoUnidade = const Value.absent(),
    this.idTributGrupoTributario = const Value.absent(),
    this.idProdutoTipo = const Value.absent(),
    this.idProdutoSubgrupo = const Value.absent(),
    this.gtin = const Value.absent(),
    this.codigoInterno = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
    this.descricaoPdv = const Value.absent(),
    this.valorCompra = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.quantidadeEstoque = const Value.absent(),
    this.estoqueMinimo = const Value.absent(),
    this.estoqueMaximo = const Value.absent(),
    this.codigoNcm = const Value.absent(),
    this.iat = const Value.absent(),
    this.ippt = const Value.absent(),
    this.tipoItemSped = const Value.absent(),
    this.taxaIpi = const Value.absent(),
    this.taxaIssqn = const Value.absent(),
    this.taxaPis = const Value.absent(),
    this.taxaCofins = const Value.absent(),
    this.taxaIcms = const Value.absent(),
    this.cst = const Value.absent(),
    this.csosn = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.codigoBalanca = const Value.absent(),
    this.pafPSt = const Value.absent(),
    this.hashRegistro = const Value.absent(),
    this.valorCusto = const Value.absent(),
    this.situacao = const Value.absent(),
    this.codigoCest = const Value.absent(),
  });
  static Insertable<Produto> custom({
    Expression<int>? id,
    Expression<int>? idProdutoUnidade,
    Expression<int>? idTributGrupoTributario,
    Expression<int>? idProdutoTipo,
    Expression<int>? idProdutoSubgrupo,
    Expression<String>? gtin,
    Expression<String>? codigoInterno,
    Expression<String>? nome,
    Expression<String>? descricao,
    Expression<String>? descricaoPdv,
    Expression<double>? valorCompra,
    Expression<double>? valorVenda,
    Expression<double>? quantidadeEstoque,
    Expression<double>? estoqueMinimo,
    Expression<double>? estoqueMaximo,
    Expression<String>? codigoNcm,
    Expression<String>? iat,
    Expression<String>? ippt,
    Expression<String>? tipoItemSped,
    Expression<double>? taxaIpi,
    Expression<double>? taxaIssqn,
    Expression<double>? taxaPis,
    Expression<double>? taxaCofins,
    Expression<double>? taxaIcms,
    Expression<String>? cst,
    Expression<String>? csosn,
    Expression<String>? totalizadorParcial,
    Expression<String>? ecfIcmsSt,
    Expression<int>? codigoBalanca,
    Expression<String>? pafPSt,
    Expression<String>? hashRegistro,
    Expression<double>? valorCusto,
    Expression<String>? situacao,
    Expression<String>? codigoCest,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProdutoUnidade != null) 'ID_PRODUTO_UNIDADE': idProdutoUnidade,
      if (idTributGrupoTributario != null)
        'ID_TRIBUT_GRUPO_TRIBUTARIO': idTributGrupoTributario,
      if (idProdutoTipo != null) 'ID_PRODUTO_TIPO': idProdutoTipo,
      if (idProdutoSubgrupo != null) 'ID_PRODUTO_SUBGRUPO': idProdutoSubgrupo,
      if (gtin != null) 'GTIN': gtin,
      if (codigoInterno != null) 'CODIGO_INTERNO': codigoInterno,
      if (nome != null) 'NOME': nome,
      if (descricao != null) 'DESCRICAO': descricao,
      if (descricaoPdv != null) 'DESCRICAO_PDV': descricaoPdv,
      if (valorCompra != null) 'VALOR_COMPRA': valorCompra,
      if (valorVenda != null) 'VALOR_VENDA': valorVenda,
      if (quantidadeEstoque != null) 'QUANTIDADE_ESTOQUE': quantidadeEstoque,
      if (estoqueMinimo != null) 'ESTOQUE_MINIMO': estoqueMinimo,
      if (estoqueMaximo != null) 'ESTOQUE_MAXIMO': estoqueMaximo,
      if (codigoNcm != null) 'CODIGO_NCM': codigoNcm,
      if (iat != null) 'IAT': iat,
      if (ippt != null) 'IPPT': ippt,
      if (tipoItemSped != null) 'TIPO_ITEM_SPED': tipoItemSped,
      if (taxaIpi != null) 'TAXA_IPI': taxaIpi,
      if (taxaIssqn != null) 'TAXA_ISSQN': taxaIssqn,
      if (taxaPis != null) 'TAXA_PIS': taxaPis,
      if (taxaCofins != null) 'TAXA_COFINS': taxaCofins,
      if (taxaIcms != null) 'TAXA_ICMS': taxaIcms,
      if (cst != null) 'CST': cst,
      if (csosn != null) 'CSOSN': csosn,
      if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
      if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
      if (codigoBalanca != null) 'CODIGO_BALANCA': codigoBalanca,
      if (pafPSt != null) 'PAF_P_ST': pafPSt,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
      if (valorCusto != null) 'VALOR_CUSTO': valorCusto,
      if (situacao != null) 'SITUACAO': situacao,
      if (codigoCest != null) 'CODIGO_CEST': codigoCest,
    });
  }

  ProdutosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idProdutoUnidade,
      Value<int?>? idTributGrupoTributario,
      Value<int?>? idProdutoTipo,
      Value<int?>? idProdutoSubgrupo,
      Value<String?>? gtin,
      Value<String?>? codigoInterno,
      Value<String?>? nome,
      Value<String?>? descricao,
      Value<String?>? descricaoPdv,
      Value<double?>? valorCompra,
      Value<double?>? valorVenda,
      Value<double?>? quantidadeEstoque,
      Value<double?>? estoqueMinimo,
      Value<double?>? estoqueMaximo,
      Value<String?>? codigoNcm,
      Value<String?>? iat,
      Value<String?>? ippt,
      Value<String?>? tipoItemSped,
      Value<double?>? taxaIpi,
      Value<double?>? taxaIssqn,
      Value<double?>? taxaPis,
      Value<double?>? taxaCofins,
      Value<double?>? taxaIcms,
      Value<String?>? cst,
      Value<String?>? csosn,
      Value<String?>? totalizadorParcial,
      Value<String?>? ecfIcmsSt,
      Value<int?>? codigoBalanca,
      Value<String?>? pafPSt,
      Value<String?>? hashRegistro,
      Value<double?>? valorCusto,
      Value<String?>? situacao,
      Value<String?>? codigoCest}) {
    return ProdutosCompanion(
      id: id ?? this.id,
      idProdutoUnidade: idProdutoUnidade ?? this.idProdutoUnidade,
      idTributGrupoTributario:
          idTributGrupoTributario ?? this.idTributGrupoTributario,
      idProdutoTipo: idProdutoTipo ?? this.idProdutoTipo,
      idProdutoSubgrupo: idProdutoSubgrupo ?? this.idProdutoSubgrupo,
      gtin: gtin ?? this.gtin,
      codigoInterno: codigoInterno ?? this.codigoInterno,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
      descricaoPdv: descricaoPdv ?? this.descricaoPdv,
      valorCompra: valorCompra ?? this.valorCompra,
      valorVenda: valorVenda ?? this.valorVenda,
      quantidadeEstoque: quantidadeEstoque ?? this.quantidadeEstoque,
      estoqueMinimo: estoqueMinimo ?? this.estoqueMinimo,
      estoqueMaximo: estoqueMaximo ?? this.estoqueMaximo,
      codigoNcm: codigoNcm ?? this.codigoNcm,
      iat: iat ?? this.iat,
      ippt: ippt ?? this.ippt,
      tipoItemSped: tipoItemSped ?? this.tipoItemSped,
      taxaIpi: taxaIpi ?? this.taxaIpi,
      taxaIssqn: taxaIssqn ?? this.taxaIssqn,
      taxaPis: taxaPis ?? this.taxaPis,
      taxaCofins: taxaCofins ?? this.taxaCofins,
      taxaIcms: taxaIcms ?? this.taxaIcms,
      cst: cst ?? this.cst,
      csosn: csosn ?? this.csosn,
      totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
      ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
      codigoBalanca: codigoBalanca ?? this.codigoBalanca,
      pafPSt: pafPSt ?? this.pafPSt,
      hashRegistro: hashRegistro ?? this.hashRegistro,
      valorCusto: valorCusto ?? this.valorCusto,
      situacao: situacao ?? this.situacao,
      codigoCest: codigoCest ?? this.codigoCest,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProdutoUnidade.present) {
      map['ID_PRODUTO_UNIDADE'] = Variable<int>(idProdutoUnidade.value);
    }
    if (idTributGrupoTributario.present) {
      map['ID_TRIBUT_GRUPO_TRIBUTARIO'] =
          Variable<int>(idTributGrupoTributario.value);
    }
    if (idProdutoTipo.present) {
      map['ID_PRODUTO_TIPO'] = Variable<int>(idProdutoTipo.value);
    }
    if (idProdutoSubgrupo.present) {
      map['ID_PRODUTO_SUBGRUPO'] = Variable<int>(idProdutoSubgrupo.value);
    }
    if (gtin.present) {
      map['GTIN'] = Variable<String>(gtin.value);
    }
    if (codigoInterno.present) {
      map['CODIGO_INTERNO'] = Variable<String>(codigoInterno.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (descricaoPdv.present) {
      map['DESCRICAO_PDV'] = Variable<String>(descricaoPdv.value);
    }
    if (valorCompra.present) {
      map['VALOR_COMPRA'] = Variable<double>(valorCompra.value);
    }
    if (valorVenda.present) {
      map['VALOR_VENDA'] = Variable<double>(valorVenda.value);
    }
    if (quantidadeEstoque.present) {
      map['QUANTIDADE_ESTOQUE'] = Variable<double>(quantidadeEstoque.value);
    }
    if (estoqueMinimo.present) {
      map['ESTOQUE_MINIMO'] = Variable<double>(estoqueMinimo.value);
    }
    if (estoqueMaximo.present) {
      map['ESTOQUE_MAXIMO'] = Variable<double>(estoqueMaximo.value);
    }
    if (codigoNcm.present) {
      map['CODIGO_NCM'] = Variable<String>(codigoNcm.value);
    }
    if (iat.present) {
      map['IAT'] = Variable<String>(iat.value);
    }
    if (ippt.present) {
      map['IPPT'] = Variable<String>(ippt.value);
    }
    if (tipoItemSped.present) {
      map['TIPO_ITEM_SPED'] = Variable<String>(tipoItemSped.value);
    }
    if (taxaIpi.present) {
      map['TAXA_IPI'] = Variable<double>(taxaIpi.value);
    }
    if (taxaIssqn.present) {
      map['TAXA_ISSQN'] = Variable<double>(taxaIssqn.value);
    }
    if (taxaPis.present) {
      map['TAXA_PIS'] = Variable<double>(taxaPis.value);
    }
    if (taxaCofins.present) {
      map['TAXA_COFINS'] = Variable<double>(taxaCofins.value);
    }
    if (taxaIcms.present) {
      map['TAXA_ICMS'] = Variable<double>(taxaIcms.value);
    }
    if (cst.present) {
      map['CST'] = Variable<String>(cst.value);
    }
    if (csosn.present) {
      map['CSOSN'] = Variable<String>(csosn.value);
    }
    if (totalizadorParcial.present) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial.value);
    }
    if (ecfIcmsSt.present) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt.value);
    }
    if (codigoBalanca.present) {
      map['CODIGO_BALANCA'] = Variable<int>(codigoBalanca.value);
    }
    if (pafPSt.present) {
      map['PAF_P_ST'] = Variable<String>(pafPSt.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    if (valorCusto.present) {
      map['VALOR_CUSTO'] = Variable<double>(valorCusto.value);
    }
    if (situacao.present) {
      map['SITUACAO'] = Variable<String>(situacao.value);
    }
    if (codigoCest.present) {
      map['CODIGO_CEST'] = Variable<String>(codigoCest.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutosCompanion(')
          ..write('id: $id, ')
          ..write('idProdutoUnidade: $idProdutoUnidade, ')
          ..write('idTributGrupoTributario: $idTributGrupoTributario, ')
          ..write('idProdutoTipo: $idProdutoTipo, ')
          ..write('idProdutoSubgrupo: $idProdutoSubgrupo, ')
          ..write('gtin: $gtin, ')
          ..write('codigoInterno: $codigoInterno, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao, ')
          ..write('descricaoPdv: $descricaoPdv, ')
          ..write('valorCompra: $valorCompra, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('quantidadeEstoque: $quantidadeEstoque, ')
          ..write('estoqueMinimo: $estoqueMinimo, ')
          ..write('estoqueMaximo: $estoqueMaximo, ')
          ..write('codigoNcm: $codigoNcm, ')
          ..write('iat: $iat, ')
          ..write('ippt: $ippt, ')
          ..write('tipoItemSped: $tipoItemSped, ')
          ..write('taxaIpi: $taxaIpi, ')
          ..write('taxaIssqn: $taxaIssqn, ')
          ..write('taxaPis: $taxaPis, ')
          ..write('taxaCofins: $taxaCofins, ')
          ..write('taxaIcms: $taxaIcms, ')
          ..write('cst: $cst, ')
          ..write('csosn: $csosn, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('codigoBalanca: $codigoBalanca, ')
          ..write('pafPSt: $pafPSt, ')
          ..write('hashRegistro: $hashRegistro, ')
          ..write('valorCusto: $valorCusto, ')
          ..write('situacao: $situacao, ')
          ..write('codigoCest: $codigoCest')
          ..write(')'))
        .toString();
  }
}

class $ProdutosTable extends Produtos with TableInfo<$ProdutosTable, Produto> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idProdutoUnidadeMeta =
      const VerificationMeta('idProdutoUnidade');
  @override
  late final GeneratedColumn<int> idProdutoUnidade = GeneratedColumn<int>(
      'ID_PRODUTO_UNIDADE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO_UNIDADE(ID)');
  final VerificationMeta _idTributGrupoTributarioMeta =
      const VerificationMeta('idTributGrupoTributario');
  @override
  late final GeneratedColumn<int> idTributGrupoTributario =
      GeneratedColumn<int>('ID_TRIBUT_GRUPO_TRIBUTARIO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES TRIBUT_GRUPO_TRIBUTARIO(ID)');
  final VerificationMeta _idProdutoTipoMeta =
      const VerificationMeta('idProdutoTipo');
  @override
  late final GeneratedColumn<int> idProdutoTipo = GeneratedColumn<int>(
      'ID_PRODUTO_TIPO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO_TIPO(ID)');
  final VerificationMeta _idProdutoSubgrupoMeta =
      const VerificationMeta('idProdutoSubgrupo');
  @override
  late final GeneratedColumn<int> idProdutoSubgrupo = GeneratedColumn<int>(
      'ID_PRODUTO_SUBGRUPO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO_SUBGRUPO(ID)');
  final VerificationMeta _gtinMeta = const VerificationMeta('gtin');
  @override
  late final GeneratedColumn<String> gtin = GeneratedColumn<String>(
      'GTIN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoInternoMeta =
      const VerificationMeta('codigoInterno');
  @override
  late final GeneratedColumn<String> codigoInterno = GeneratedColumn<String>(
      'CODIGO_INTERNO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoPdvMeta =
      const VerificationMeta('descricaoPdv');
  @override
  late final GeneratedColumn<String> descricaoPdv = GeneratedColumn<String>(
      'DESCRICAO_PDV', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorCompraMeta =
      const VerificationMeta('valorCompra');
  @override
  late final GeneratedColumn<double> valorCompra = GeneratedColumn<double>(
      'VALOR_COMPRA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorVendaMeta = const VerificationMeta('valorVenda');
  @override
  late final GeneratedColumn<double> valorVenda = GeneratedColumn<double>(
      'VALOR_VENDA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeEstoqueMeta =
      const VerificationMeta('quantidadeEstoque');
  @override
  late final GeneratedColumn<double> quantidadeEstoque =
      GeneratedColumn<double>('QUANTIDADE_ESTOQUE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _estoqueMinimoMeta =
      const VerificationMeta('estoqueMinimo');
  @override
  late final GeneratedColumn<double> estoqueMinimo = GeneratedColumn<double>(
      'ESTOQUE_MINIMO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _estoqueMaximoMeta =
      const VerificationMeta('estoqueMaximo');
  @override
  late final GeneratedColumn<double> estoqueMaximo = GeneratedColumn<double>(
      'ESTOQUE_MAXIMO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _codigoNcmMeta = const VerificationMeta('codigoNcm');
  @override
  late final GeneratedColumn<String> codigoNcm = GeneratedColumn<String>(
      'CODIGO_NCM', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _iatMeta = const VerificationMeta('iat');
  @override
  late final GeneratedColumn<String> iat = GeneratedColumn<String>(
      'IAT', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ipptMeta = const VerificationMeta('ippt');
  @override
  late final GeneratedColumn<String> ippt = GeneratedColumn<String>(
      'IPPT', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoItemSpedMeta =
      const VerificationMeta('tipoItemSped');
  @override
  late final GeneratedColumn<String> tipoItemSped = GeneratedColumn<String>(
      'TIPO_ITEM_SPED', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _taxaIpiMeta = const VerificationMeta('taxaIpi');
  @override
  late final GeneratedColumn<double> taxaIpi = GeneratedColumn<double>(
      'TAXA_IPI', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaIssqnMeta = const VerificationMeta('taxaIssqn');
  @override
  late final GeneratedColumn<double> taxaIssqn = GeneratedColumn<double>(
      'TAXA_ISSQN', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaPisMeta = const VerificationMeta('taxaPis');
  @override
  late final GeneratedColumn<double> taxaPis = GeneratedColumn<double>(
      'TAXA_PIS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaCofinsMeta = const VerificationMeta('taxaCofins');
  @override
  late final GeneratedColumn<double> taxaCofins = GeneratedColumn<double>(
      'TAXA_COFINS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaIcmsMeta = const VerificationMeta('taxaIcms');
  @override
  late final GeneratedColumn<double> taxaIcms = GeneratedColumn<double>(
      'TAXA_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
      'CST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
  @override
  late final GeneratedColumn<String> csosn = GeneratedColumn<String>(
      'CSOSN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _totalizadorParcialMeta =
      const VerificationMeta('totalizadorParcial');
  @override
  late final GeneratedColumn<String> totalizadorParcial =
      GeneratedColumn<String>(
          'TOTALIZADOR_PARCIAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 10),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
  @override
  late final GeneratedColumn<String> ecfIcmsSt = GeneratedColumn<String>(
      'ECF_ICMS_ST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoBalancaMeta =
      const VerificationMeta('codigoBalanca');
  @override
  late final GeneratedColumn<int> codigoBalanca = GeneratedColumn<int>(
      'CODIGO_BALANCA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _pafPStMeta = const VerificationMeta('pafPSt');
  @override
  late final GeneratedColumn<String> pafPSt = GeneratedColumn<String>(
      'PAF_P_ST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorCustoMeta = const VerificationMeta('valorCusto');
  @override
  late final GeneratedColumn<double> valorCusto = GeneratedColumn<double>(
      'VALOR_CUSTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _situacaoMeta = const VerificationMeta('situacao');
  @override
  late final GeneratedColumn<String> situacao = GeneratedColumn<String>(
      'SITUACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoCestMeta = const VerificationMeta('codigoCest');
  @override
  late final GeneratedColumn<String> codigoCest = GeneratedColumn<String>(
      'CODIGO_CEST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idProdutoUnidade,
        idTributGrupoTributario,
        idProdutoTipo,
        idProdutoSubgrupo,
        gtin,
        codigoInterno,
        nome,
        descricao,
        descricaoPdv,
        valorCompra,
        valorVenda,
        quantidadeEstoque,
        estoqueMinimo,
        estoqueMaximo,
        codigoNcm,
        iat,
        ippt,
        tipoItemSped,
        taxaIpi,
        taxaIssqn,
        taxaPis,
        taxaCofins,
        taxaIcms,
        cst,
        csosn,
        totalizadorParcial,
        ecfIcmsSt,
        codigoBalanca,
        pafPSt,
        hashRegistro,
        valorCusto,
        situacao,
        codigoCest
      ];
  @override
  String get aliasedName => _alias ?? 'PRODUTO';
  @override
  String get actualTableName => 'PRODUTO';
  @override
  VerificationContext validateIntegrity(Insertable<Produto> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PRODUTO_UNIDADE')) {
      context.handle(
          _idProdutoUnidadeMeta,
          idProdutoUnidade.isAcceptableOrUnknown(
              data['ID_PRODUTO_UNIDADE']!, _idProdutoUnidadeMeta));
    }
    if (data.containsKey('ID_TRIBUT_GRUPO_TRIBUTARIO')) {
      context.handle(
          _idTributGrupoTributarioMeta,
          idTributGrupoTributario.isAcceptableOrUnknown(
              data['ID_TRIBUT_GRUPO_TRIBUTARIO']!,
              _idTributGrupoTributarioMeta));
    }
    if (data.containsKey('ID_PRODUTO_TIPO')) {
      context.handle(
          _idProdutoTipoMeta,
          idProdutoTipo.isAcceptableOrUnknown(
              data['ID_PRODUTO_TIPO']!, _idProdutoTipoMeta));
    }
    if (data.containsKey('ID_PRODUTO_SUBGRUPO')) {
      context.handle(
          _idProdutoSubgrupoMeta,
          idProdutoSubgrupo.isAcceptableOrUnknown(
              data['ID_PRODUTO_SUBGRUPO']!, _idProdutoSubgrupoMeta));
    }
    if (data.containsKey('GTIN')) {
      context.handle(
          _gtinMeta, gtin.isAcceptableOrUnknown(data['GTIN']!, _gtinMeta));
    }
    if (data.containsKey('CODIGO_INTERNO')) {
      context.handle(
          _codigoInternoMeta,
          codigoInterno.isAcceptableOrUnknown(
              data['CODIGO_INTERNO']!, _codigoInternoMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('DESCRICAO_PDV')) {
      context.handle(
          _descricaoPdvMeta,
          descricaoPdv.isAcceptableOrUnknown(
              data['DESCRICAO_PDV']!, _descricaoPdvMeta));
    }
    if (data.containsKey('VALOR_COMPRA')) {
      context.handle(
          _valorCompraMeta,
          valorCompra.isAcceptableOrUnknown(
              data['VALOR_COMPRA']!, _valorCompraMeta));
    }
    if (data.containsKey('VALOR_VENDA')) {
      context.handle(
          _valorVendaMeta,
          valorVenda.isAcceptableOrUnknown(
              data['VALOR_VENDA']!, _valorVendaMeta));
    }
    if (data.containsKey('QUANTIDADE_ESTOQUE')) {
      context.handle(
          _quantidadeEstoqueMeta,
          quantidadeEstoque.isAcceptableOrUnknown(
              data['QUANTIDADE_ESTOQUE']!, _quantidadeEstoqueMeta));
    }
    if (data.containsKey('ESTOQUE_MINIMO')) {
      context.handle(
          _estoqueMinimoMeta,
          estoqueMinimo.isAcceptableOrUnknown(
              data['ESTOQUE_MINIMO']!, _estoqueMinimoMeta));
    }
    if (data.containsKey('ESTOQUE_MAXIMO')) {
      context.handle(
          _estoqueMaximoMeta,
          estoqueMaximo.isAcceptableOrUnknown(
              data['ESTOQUE_MAXIMO']!, _estoqueMaximoMeta));
    }
    if (data.containsKey('CODIGO_NCM')) {
      context.handle(_codigoNcmMeta,
          codigoNcm.isAcceptableOrUnknown(data['CODIGO_NCM']!, _codigoNcmMeta));
    }
    if (data.containsKey('IAT')) {
      context.handle(
          _iatMeta, iat.isAcceptableOrUnknown(data['IAT']!, _iatMeta));
    }
    if (data.containsKey('IPPT')) {
      context.handle(
          _ipptMeta, ippt.isAcceptableOrUnknown(data['IPPT']!, _ipptMeta));
    }
    if (data.containsKey('TIPO_ITEM_SPED')) {
      context.handle(
          _tipoItemSpedMeta,
          tipoItemSped.isAcceptableOrUnknown(
              data['TIPO_ITEM_SPED']!, _tipoItemSpedMeta));
    }
    if (data.containsKey('TAXA_IPI')) {
      context.handle(_taxaIpiMeta,
          taxaIpi.isAcceptableOrUnknown(data['TAXA_IPI']!, _taxaIpiMeta));
    }
    if (data.containsKey('TAXA_ISSQN')) {
      context.handle(_taxaIssqnMeta,
          taxaIssqn.isAcceptableOrUnknown(data['TAXA_ISSQN']!, _taxaIssqnMeta));
    }
    if (data.containsKey('TAXA_PIS')) {
      context.handle(_taxaPisMeta,
          taxaPis.isAcceptableOrUnknown(data['TAXA_PIS']!, _taxaPisMeta));
    }
    if (data.containsKey('TAXA_COFINS')) {
      context.handle(
          _taxaCofinsMeta,
          taxaCofins.isAcceptableOrUnknown(
              data['TAXA_COFINS']!, _taxaCofinsMeta));
    }
    if (data.containsKey('TAXA_ICMS')) {
      context.handle(_taxaIcmsMeta,
          taxaIcms.isAcceptableOrUnknown(data['TAXA_ICMS']!, _taxaIcmsMeta));
    }
    if (data.containsKey('CST')) {
      context.handle(
          _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
    }
    if (data.containsKey('CSOSN')) {
      context.handle(
          _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
    }
    if (data.containsKey('TOTALIZADOR_PARCIAL')) {
      context.handle(
          _totalizadorParcialMeta,
          totalizadorParcial.isAcceptableOrUnknown(
              data['TOTALIZADOR_PARCIAL']!, _totalizadorParcialMeta));
    }
    if (data.containsKey('ECF_ICMS_ST')) {
      context.handle(
          _ecfIcmsStMeta,
          ecfIcmsSt.isAcceptableOrUnknown(
              data['ECF_ICMS_ST']!, _ecfIcmsStMeta));
    }
    if (data.containsKey('CODIGO_BALANCA')) {
      context.handle(
          _codigoBalancaMeta,
          codigoBalanca.isAcceptableOrUnknown(
              data['CODIGO_BALANCA']!, _codigoBalancaMeta));
    }
    if (data.containsKey('PAF_P_ST')) {
      context.handle(_pafPStMeta,
          pafPSt.isAcceptableOrUnknown(data['PAF_P_ST']!, _pafPStMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    if (data.containsKey('VALOR_CUSTO')) {
      context.handle(
          _valorCustoMeta,
          valorCusto.isAcceptableOrUnknown(
              data['VALOR_CUSTO']!, _valorCustoMeta));
    }
    if (data.containsKey('SITUACAO')) {
      context.handle(_situacaoMeta,
          situacao.isAcceptableOrUnknown(data['SITUACAO']!, _situacaoMeta));
    }
    if (data.containsKey('CODIGO_CEST')) {
      context.handle(
          _codigoCestMeta,
          codigoCest.isAcceptableOrUnknown(
              data['CODIGO_CEST']!, _codigoCestMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Produto map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Produto.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProdutosTable createAlias(String alias) {
    return $ProdutosTable(attachedDatabase, alias);
  }
}

class ProdutoFichaTecnica extends DataClass
    implements Insertable<ProdutoFichaTecnica> {
  final int? id;
  final int? idProduto;
  final String? descricao;
  final int? idProdutoFilho;
  final double? quantidade;
  final double? valorCusto;
  final double? percentualCusto;
  ProdutoFichaTecnica(
      {this.id,
      this.idProduto,
      this.descricao,
      this.idProdutoFilho,
      this.quantidade,
      this.valorCusto,
      this.percentualCusto});
  factory ProdutoFichaTecnica.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ProdutoFichaTecnica(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idProduto: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      idProdutoFilho: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO_FILHO']),
      quantidade: ValueSqlType.doubleType(data['${effectivePrefix}QUANTIDADE']),
      valorCusto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_CUSTO']),
      percentualCusto: ValueSqlType.doubleType(data['${effectivePrefix}PERCENTUAL_CUSTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || idProdutoFilho != null) {
      map['ID_PRODUTO_FILHO'] = Variable<int>(idProdutoFilho);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || valorCusto != null) {
      map['VALOR_CUSTO'] = Variable<double>(valorCusto);
    }
    if (!nullToAbsent || percentualCusto != null) {
      map['PERCENTUAL_CUSTO'] = Variable<double>(percentualCusto);
    }
    return map;
  }

  ProdutoFichaTecnicasCompanion toCompanion(bool nullToAbsent) {
    return ProdutoFichaTecnicasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      idProdutoFilho: idProdutoFilho == null && nullToAbsent
          ? const Value.absent()
          : Value(idProdutoFilho),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      valorCusto: valorCusto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCusto),
      percentualCusto: percentualCusto == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualCusto),
    );
  }

  factory ProdutoFichaTecnica.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoFichaTecnica(
      id: serializer.fromJson<int?>(json['id']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      idProdutoFilho: serializer.fromJson<int?>(json['idProdutoFilho']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
      valorCusto: serializer.fromJson<double?>(json['valorCusto']),
      percentualCusto: serializer.fromJson<double?>(json['percentualCusto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProduto': serializer.toJson<int?>(idProduto),
      'descricao': serializer.toJson<String?>(descricao),
      'idProdutoFilho': serializer.toJson<int?>(idProdutoFilho),
      'quantidade': serializer.toJson<double?>(quantidade),
      'valorCusto': serializer.toJson<double?>(valorCusto),
      'percentualCusto': serializer.toJson<double?>(percentualCusto),
    };
  }

  ProdutoFichaTecnica copyWith(
          {int? id,
          int? idProduto,
          String? descricao,
          int? idProdutoFilho,
          double? quantidade,
          double? valorCusto,
          double? percentualCusto}) =>
      ProdutoFichaTecnica(
        id: id ?? this.id,
        idProduto: idProduto ?? this.idProduto,
        descricao: descricao ?? this.descricao,
        idProdutoFilho: idProdutoFilho ?? this.idProdutoFilho,
        quantidade: quantidade ?? this.quantidade,
        valorCusto: valorCusto ?? this.valorCusto,
        percentualCusto: percentualCusto ?? this.percentualCusto,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoFichaTecnica(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('descricao: $descricao, ')
          ..write('idProdutoFilho: $idProdutoFilho, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorCusto: $valorCusto, ')
          ..write('percentualCusto: $percentualCusto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idProduto, descricao, idProdutoFilho,
      quantidade, valorCusto, percentualCusto);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoFichaTecnica &&
          other.id == this.id &&
          other.idProduto == this.idProduto &&
          other.descricao == this.descricao &&
          other.idProdutoFilho == this.idProdutoFilho &&
          other.quantidade == this.quantidade &&
          other.valorCusto == this.valorCusto &&
          other.percentualCusto == this.percentualCusto);
}

class ProdutoFichaTecnicasCompanion
    extends UpdateCompanion<ProdutoFichaTecnica> {
  final Value<int?> id;
  final Value<int?> idProduto;
  final Value<String?> descricao;
  final Value<int?> idProdutoFilho;
  final Value<double?> quantidade;
  final Value<double?> valorCusto;
  final Value<double?> percentualCusto;
  const ProdutoFichaTecnicasCompanion({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.descricao = const Value.absent(),
    this.idProdutoFilho = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorCusto = const Value.absent(),
    this.percentualCusto = const Value.absent(),
  });
  ProdutoFichaTecnicasCompanion.insert({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.descricao = const Value.absent(),
    this.idProdutoFilho = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorCusto = const Value.absent(),
    this.percentualCusto = const Value.absent(),
  });
  static Insertable<ProdutoFichaTecnica> custom({
    Expression<int>? id,
    Expression<int>? idProduto,
    Expression<String>? descricao,
    Expression<int>? idProdutoFilho,
    Expression<double>? quantidade,
    Expression<double>? valorCusto,
    Expression<double>? percentualCusto,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (descricao != null) 'DESCRICAO': descricao,
      if (idProdutoFilho != null) 'ID_PRODUTO_FILHO': idProdutoFilho,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (valorCusto != null) 'VALOR_CUSTO': valorCusto,
      if (percentualCusto != null) 'PERCENTUAL_CUSTO': percentualCusto,
    });
  }

  ProdutoFichaTecnicasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idProduto,
      Value<String?>? descricao,
      Value<int?>? idProdutoFilho,
      Value<double?>? quantidade,
      Value<double?>? valorCusto,
      Value<double?>? percentualCusto}) {
    return ProdutoFichaTecnicasCompanion(
      id: id ?? this.id,
      idProduto: idProduto ?? this.idProduto,
      descricao: descricao ?? this.descricao,
      idProdutoFilho: idProdutoFilho ?? this.idProdutoFilho,
      quantidade: quantidade ?? this.quantidade,
      valorCusto: valorCusto ?? this.valorCusto,
      percentualCusto: percentualCusto ?? this.percentualCusto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (idProdutoFilho.present) {
      map['ID_PRODUTO_FILHO'] = Variable<int>(idProdutoFilho.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    if (valorCusto.present) {
      map['VALOR_CUSTO'] = Variable<double>(valorCusto.value);
    }
    if (percentualCusto.present) {
      map['PERCENTUAL_CUSTO'] = Variable<double>(percentualCusto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoFichaTecnicasCompanion(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('descricao: $descricao, ')
          ..write('idProdutoFilho: $idProdutoFilho, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorCusto: $valorCusto, ')
          ..write('percentualCusto: $percentualCusto')
          ..write(')'))
        .toString();
  }
}

class $ProdutoFichaTecnicasTable extends ProdutoFichaTecnicas
    with TableInfo<$ProdutoFichaTecnicasTable, ProdutoFichaTecnica> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoFichaTecnicasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
      'ID_PRODUTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _idProdutoFilhoMeta =
      const VerificationMeta('idProdutoFilho');
  @override
  late final GeneratedColumn<int> idProdutoFilho = GeneratedColumn<int>(
      'ID_PRODUTO_FILHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO_FILHO(ID)');
  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
      'QUANTIDADE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCustoMeta = const VerificationMeta('valorCusto');
  @override
  late final GeneratedColumn<double> valorCusto = GeneratedColumn<double>(
      'VALOR_CUSTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _percentualCustoMeta =
      const VerificationMeta('percentualCusto');
  @override
  late final GeneratedColumn<double> percentualCusto =
      GeneratedColumn<double>('PERCENTUAL_CUSTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idProduto,
        descricao,
        idProdutoFilho,
        quantidade,
        valorCusto,
        percentualCusto
      ];
  @override
  String get aliasedName => _alias ?? 'PRODUTO_FICHA_TECNICA';
  @override
  String get actualTableName => 'PRODUTO_FICHA_TECNICA';
  @override
  VerificationContext validateIntegrity(
      Insertable<ProdutoFichaTecnica> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('ID_PRODUTO_FILHO')) {
      context.handle(
          _idProdutoFilhoMeta,
          idProdutoFilho.isAcceptableOrUnknown(
              data['ID_PRODUTO_FILHO']!, _idProdutoFilhoMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE']!, _quantidadeMeta));
    }
    if (data.containsKey('VALOR_CUSTO')) {
      context.handle(
          _valorCustoMeta,
          valorCusto.isAcceptableOrUnknown(
              data['VALOR_CUSTO']!, _valorCustoMeta));
    }
    if (data.containsKey('PERCENTUAL_CUSTO')) {
      context.handle(
          _percentualCustoMeta,
          percentualCusto.isAcceptableOrUnknown(
              data['PERCENTUAL_CUSTO']!, _percentualCustoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoFichaTecnica map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ProdutoFichaTecnica.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProdutoFichaTecnicasTable createAlias(String alias) {
    return $ProdutoFichaTecnicasTable(attachedDatabase, alias);
  }
}

class ProdutoGrupo extends DataClass implements Insertable<ProdutoGrupo> {
  final int? id;
  final String? nome;
  final String? descricao;
  ProdutoGrupo({this.id, this.nome, this.descricao});
  factory ProdutoGrupo.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ProdutoGrupo(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    return map;
  }

  ProdutoGruposCompanion toCompanion(bool nullToAbsent) {
    return ProdutoGruposCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
    );
  }

  factory ProdutoGrupo.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoGrupo(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  ProdutoGrupo copyWith({int? id, String? nome, String? descricao}) =>
      ProdutoGrupo(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        descricao: descricao ?? this.descricao,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoGrupo(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, nome, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoGrupo &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.descricao == this.descricao);
}

class ProdutoGruposCompanion extends UpdateCompanion<ProdutoGrupo> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> descricao;
  const ProdutoGruposCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  ProdutoGruposCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<ProdutoGrupo> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (descricao != null) 'DESCRICAO': descricao,
    });
  }

  ProdutoGruposCompanion copyWith(
      {Value<int?>? id, Value<String?>? nome, Value<String?>? descricao}) {
    return ProdutoGruposCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoGruposCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $ProdutoGruposTable extends ProdutoGrupos
    with TableInfo<$ProdutoGruposTable, ProdutoGrupo> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoGruposTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, nome, descricao];
  @override
  String get aliasedName => _alias ?? 'PRODUTO_GRUPO';
  @override
  String get actualTableName => 'PRODUTO_GRUPO';
  @override
  VerificationContext validateIntegrity(Insertable<ProdutoGrupo> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoGrupo map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ProdutoGrupo.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProdutoGruposTable createAlias(String alias) {
    return $ProdutoGruposTable(attachedDatabase, alias);
  }
}

class ProdutoImagem extends DataClass implements Insertable<ProdutoImagem> {
  final int? id;
  final int? idProduto;
  final Uint8List? imagem;
  ProdutoImagem({this.id, this.idProduto, this.imagem});
  factory ProdutoImagem.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ProdutoImagem(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idProduto: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO']),
      imagem: ValueSqlType.blobType(data['${effectivePrefix}IMAGEM']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || imagem != null) {
      map['IMAGEM'] = Variable<Uint8List>(imagem);
    }
    return map;
  }

  ProdutoImagemsCompanion toCompanion(bool nullToAbsent) {
    return ProdutoImagemsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      imagem:
          imagem == null && nullToAbsent ? const Value.absent() : Value(imagem),
    );
  }

  factory ProdutoImagem.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoImagem(
      id: serializer.fromJson<int?>(json['id']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      imagem: serializer.fromJson<Uint8List?>(json['imagem']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProduto': serializer.toJson<int?>(idProduto),
      'imagem': serializer.toJson<Uint8List?>(imagem),
    };
  }

  ProdutoImagem copyWith({int? id, int? idProduto, Uint8List? imagem}) =>
      ProdutoImagem(
        id: id ?? this.id,
        idProduto: idProduto ?? this.idProduto,
        imagem: imagem ?? this.imagem,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoImagem(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('imagem: $imagem')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idProduto, imagem);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoImagem &&
          other.id == this.id &&
          other.idProduto == this.idProduto &&
          other.imagem == this.imagem);
}

class ProdutoImagemsCompanion extends UpdateCompanion<ProdutoImagem> {
  final Value<int?> id;
  final Value<int?> idProduto;
  final Value<Uint8List?> imagem;
  const ProdutoImagemsCompanion({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.imagem = const Value.absent(),
  });
  ProdutoImagemsCompanion.insert({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.imagem = const Value.absent(),
  });
  static Insertable<ProdutoImagem> custom({
    Expression<int>? id,
    Expression<int>? idProduto,
    Expression<Uint8List>? imagem,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (imagem != null) 'IMAGEM': imagem,
    });
  }

  ProdutoImagemsCompanion copyWith(
      {Value<int?>? id, Value<int?>? idProduto, Value<Uint8List?>? imagem}) {
    return ProdutoImagemsCompanion(
      id: id ?? this.id,
      idProduto: idProduto ?? this.idProduto,
      imagem: imagem ?? this.imagem,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (imagem.present) {
      map['IMAGEM'] = Variable<Uint8List>(imagem.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoImagemsCompanion(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('imagem: $imagem')
          ..write(')'))
        .toString();
  }
}

class $ProdutoImagemsTable extends ProdutoImagems
    with TableInfo<$ProdutoImagemsTable, ProdutoImagem> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoImagemsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
      'ID_PRODUTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  final VerificationMeta _imagemMeta = const VerificationMeta('imagem');
  @override
  late final GeneratedColumn<Uint8List> imagem = GeneratedColumn<Uint8List>(
      'IMAGEM', aliasedName, true,
      type: DriftSqlType.blob, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, idProduto, imagem];
  @override
  String get aliasedName => _alias ?? 'PRODUTO_IMAGEM';
  @override
  String get actualTableName => 'PRODUTO_IMAGEM';
  @override
  VerificationContext validateIntegrity(Insertable<ProdutoImagem> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
    }
    if (data.containsKey('IMAGEM')) {
      context.handle(_imagemMeta,
          imagem.isAcceptableOrUnknown(data['IMAGEM']!, _imagemMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoImagem map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ProdutoImagem.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProdutoImagemsTable createAlias(String alias) {
    return $ProdutoImagemsTable(attachedDatabase, alias);
  }
}

class ProdutoPromocao extends DataClass implements Insertable<ProdutoPromocao> {
  final int? id;
  final int? idProduto;
  final DateTime? dataInicio;
  final DateTime? dataFim;
  final double? quantidadeEmPromocao;
  final double? quantidadeMaximaCliente;
  final double? valor;
  ProdutoPromocao(
      {this.id,
      this.idProduto,
      this.dataInicio,
      this.dataFim,
      this.quantidadeEmPromocao,
      this.quantidadeMaximaCliente,
      this.valor});
  factory ProdutoPromocao.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ProdutoPromocao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idProduto: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO']),
      dataInicio: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_INICIO']),
      dataFim: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_FIM']),
      quantidadeEmPromocao: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_EM_PROMOCAO']),
      quantidadeMaximaCliente: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_MAXIMA_CLIENTE']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || dataInicio != null) {
      map['DATA_INICIO'] = Variable<DateTime>(dataInicio);
    }
    if (!nullToAbsent || dataFim != null) {
      map['DATA_FIM'] = Variable<DateTime>(dataFim);
    }
    if (!nullToAbsent || quantidadeEmPromocao != null) {
      map['QUANTIDADE_EM_PROMOCAO'] = Variable<double>(quantidadeEmPromocao);
    }
    if (!nullToAbsent || quantidadeMaximaCliente != null) {
      map['QUANTIDADE_MAXIMA_CLIENTE'] =
          Variable<double>(quantidadeMaximaCliente);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  ProdutoPromocaosCompanion toCompanion(bool nullToAbsent) {
    return ProdutoPromocaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      dataInicio: dataInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(dataInicio),
      dataFim: dataFim == null && nullToAbsent
          ? const Value.absent()
          : Value(dataFim),
      quantidadeEmPromocao: quantidadeEmPromocao == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeEmPromocao),
      quantidadeMaximaCliente: quantidadeMaximaCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeMaximaCliente),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory ProdutoPromocao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoPromocao(
      id: serializer.fromJson<int?>(json['id']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      dataInicio: serializer.fromJson<DateTime?>(json['dataInicio']),
      dataFim: serializer.fromJson<DateTime?>(json['dataFim']),
      quantidadeEmPromocao:
          serializer.fromJson<double?>(json['quantidadeEmPromocao']),
      quantidadeMaximaCliente:
          serializer.fromJson<double?>(json['quantidadeMaximaCliente']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProduto': serializer.toJson<int?>(idProduto),
      'dataInicio': serializer.toJson<DateTime?>(dataInicio),
      'dataFim': serializer.toJson<DateTime?>(dataFim),
      'quantidadeEmPromocao': serializer.toJson<double?>(quantidadeEmPromocao),
      'quantidadeMaximaCliente':
          serializer.toJson<double?>(quantidadeMaximaCliente),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  ProdutoPromocao copyWith(
          {int? id,
          int? idProduto,
          DateTime? dataInicio,
          DateTime? dataFim,
          double? quantidadeEmPromocao,
          double? quantidadeMaximaCliente,
          double? valor}) =>
      ProdutoPromocao(
        id: id ?? this.id,
        idProduto: idProduto ?? this.idProduto,
        dataInicio: dataInicio ?? this.dataInicio,
        dataFim: dataFim ?? this.dataFim,
        quantidadeEmPromocao: quantidadeEmPromocao ?? this.quantidadeEmPromocao,
        quantidadeMaximaCliente:
            quantidadeMaximaCliente ?? this.quantidadeMaximaCliente,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoPromocao(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('dataInicio: $dataInicio, ')
          ..write('dataFim: $dataFim, ')
          ..write('quantidadeEmPromocao: $quantidadeEmPromocao, ')
          ..write('quantidadeMaximaCliente: $quantidadeMaximaCliente, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idProduto, dataInicio, dataFim,
      quantidadeEmPromocao, quantidadeMaximaCliente, valor);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoPromocao &&
          other.id == this.id &&
          other.idProduto == this.idProduto &&
          other.dataInicio == this.dataInicio &&
          other.dataFim == this.dataFim &&
          other.quantidadeEmPromocao == this.quantidadeEmPromocao &&
          other.quantidadeMaximaCliente == this.quantidadeMaximaCliente &&
          other.valor == this.valor);
}

class ProdutoPromocaosCompanion extends UpdateCompanion<ProdutoPromocao> {
  final Value<int?> id;
  final Value<int?> idProduto;
  final Value<DateTime?> dataInicio;
  final Value<DateTime?> dataFim;
  final Value<double?> quantidadeEmPromocao;
  final Value<double?> quantidadeMaximaCliente;
  final Value<double?> valor;
  const ProdutoPromocaosCompanion({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.dataInicio = const Value.absent(),
    this.dataFim = const Value.absent(),
    this.quantidadeEmPromocao = const Value.absent(),
    this.quantidadeMaximaCliente = const Value.absent(),
    this.valor = const Value.absent(),
  });
  ProdutoPromocaosCompanion.insert({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.dataInicio = const Value.absent(),
    this.dataFim = const Value.absent(),
    this.quantidadeEmPromocao = const Value.absent(),
    this.quantidadeMaximaCliente = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<ProdutoPromocao> custom({
    Expression<int>? id,
    Expression<int>? idProduto,
    Expression<DateTime>? dataInicio,
    Expression<DateTime>? dataFim,
    Expression<double>? quantidadeEmPromocao,
    Expression<double>? quantidadeMaximaCliente,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (dataInicio != null) 'DATA_INICIO': dataInicio,
      if (dataFim != null) 'DATA_FIM': dataFim,
      if (quantidadeEmPromocao != null)
        'QUANTIDADE_EM_PROMOCAO': quantidadeEmPromocao,
      if (quantidadeMaximaCliente != null)
        'QUANTIDADE_MAXIMA_CLIENTE': quantidadeMaximaCliente,
      if (valor != null) 'VALOR': valor,
    });
  }

  ProdutoPromocaosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idProduto,
      Value<DateTime?>? dataInicio,
      Value<DateTime?>? dataFim,
      Value<double?>? quantidadeEmPromocao,
      Value<double?>? quantidadeMaximaCliente,
      Value<double?>? valor}) {
    return ProdutoPromocaosCompanion(
      id: id ?? this.id,
      idProduto: idProduto ?? this.idProduto,
      dataInicio: dataInicio ?? this.dataInicio,
      dataFim: dataFim ?? this.dataFim,
      quantidadeEmPromocao: quantidadeEmPromocao ?? this.quantidadeEmPromocao,
      quantidadeMaximaCliente:
          quantidadeMaximaCliente ?? this.quantidadeMaximaCliente,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (dataInicio.present) {
      map['DATA_INICIO'] = Variable<DateTime>(dataInicio.value);
    }
    if (dataFim.present) {
      map['DATA_FIM'] = Variable<DateTime>(dataFim.value);
    }
    if (quantidadeEmPromocao.present) {
      map['QUANTIDADE_EM_PROMOCAO'] =
          Variable<double>(quantidadeEmPromocao.value);
    }
    if (quantidadeMaximaCliente.present) {
      map['QUANTIDADE_MAXIMA_CLIENTE'] =
          Variable<double>(quantidadeMaximaCliente.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoPromocaosCompanion(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('dataInicio: $dataInicio, ')
          ..write('dataFim: $dataFim, ')
          ..write('quantidadeEmPromocao: $quantidadeEmPromocao, ')
          ..write('quantidadeMaximaCliente: $quantidadeMaximaCliente, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $ProdutoPromocaosTable extends ProdutoPromocaos
    with TableInfo<$ProdutoPromocaosTable, ProdutoPromocao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoPromocaosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
      'ID_PRODUTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  final VerificationMeta _dataInicioMeta = const VerificationMeta('dataInicio');
  @override
  late final GeneratedColumn<DateTime> dataInicio = GeneratedColumn<DateTime>(
      'DATA_INICIO', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataFimMeta = const VerificationMeta('dataFim');
  @override
  late final GeneratedColumn<DateTime> dataFim = GeneratedColumn<DateTime>(
      'DATA_FIM', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _quantidadeEmPromocaoMeta =
      const VerificationMeta('quantidadeEmPromocao');
  @override
  late final GeneratedColumn<double> quantidadeEmPromocao =
      GeneratedColumn<double>('QUANTIDADE_EM_PROMOCAO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeMaximaClienteMeta =
      const VerificationMeta('quantidadeMaximaCliente');
  @override
  late final GeneratedColumn<double> quantidadeMaximaCliente =
      GeneratedColumn<double>('QUANTIDADE_MAXIMA_CLIENTE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idProduto,
        dataInicio,
        dataFim,
        quantidadeEmPromocao,
        quantidadeMaximaCliente,
        valor
      ];
  @override
  String get aliasedName => _alias ?? 'PRODUTO_PROMOCAO';
  @override
  String get actualTableName => 'PRODUTO_PROMOCAO';
  @override
  VerificationContext validateIntegrity(Insertable<ProdutoPromocao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
    }
    if (data.containsKey('DATA_INICIO')) {
      context.handle(
          _dataInicioMeta,
          dataInicio.isAcceptableOrUnknown(
              data['DATA_INICIO']!, _dataInicioMeta));
    }
    if (data.containsKey('DATA_FIM')) {
      context.handle(_dataFimMeta,
          dataFim.isAcceptableOrUnknown(data['DATA_FIM']!, _dataFimMeta));
    }
    if (data.containsKey('QUANTIDADE_EM_PROMOCAO')) {
      context.handle(
          _quantidadeEmPromocaoMeta,
          quantidadeEmPromocao.isAcceptableOrUnknown(
              data['QUANTIDADE_EM_PROMOCAO']!, _quantidadeEmPromocaoMeta));
    }
    if (data.containsKey('QUANTIDADE_MAXIMA_CLIENTE')) {
      context.handle(
          _quantidadeMaximaClienteMeta,
          quantidadeMaximaCliente.isAcceptableOrUnknown(
              data['QUANTIDADE_MAXIMA_CLIENTE']!,
              _quantidadeMaximaClienteMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoPromocao map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ProdutoPromocao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProdutoPromocaosTable createAlias(String alias) {
    return $ProdutoPromocaosTable(attachedDatabase, alias);
  }
}

class ProdutoSubgrupo extends DataClass implements Insertable<ProdutoSubgrupo> {
  final int? id;
  final int? idProdutoGrupo;
  final String? nome;
  final String? descricao;
  ProdutoSubgrupo({this.id, this.idProdutoGrupo, this.nome, this.descricao});
  factory ProdutoSubgrupo.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ProdutoSubgrupo(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idProdutoGrupo: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO_GRUPO']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProdutoGrupo != null) {
      map['ID_PRODUTO_GRUPO'] = Variable<int>(idProdutoGrupo);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    return map;
  }

  ProdutoSubgruposCompanion toCompanion(bool nullToAbsent) {
    return ProdutoSubgruposCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProdutoGrupo: idProdutoGrupo == null && nullToAbsent
          ? const Value.absent()
          : Value(idProdutoGrupo),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
    );
  }

  factory ProdutoSubgrupo.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoSubgrupo(
      id: serializer.fromJson<int?>(json['id']),
      idProdutoGrupo: serializer.fromJson<int?>(json['idProdutoGrupo']),
      nome: serializer.fromJson<String?>(json['nome']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProdutoGrupo': serializer.toJson<int?>(idProdutoGrupo),
      'nome': serializer.toJson<String?>(nome),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  ProdutoSubgrupo copyWith(
          {int? id, int? idProdutoGrupo, String? nome, String? descricao}) =>
      ProdutoSubgrupo(
        id: id ?? this.id,
        idProdutoGrupo: idProdutoGrupo ?? this.idProdutoGrupo,
        nome: nome ?? this.nome,
        descricao: descricao ?? this.descricao,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoSubgrupo(')
          ..write('id: $id, ')
          ..write('idProdutoGrupo: $idProdutoGrupo, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idProdutoGrupo, nome, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoSubgrupo &&
          other.id == this.id &&
          other.idProdutoGrupo == this.idProdutoGrupo &&
          other.nome == this.nome &&
          other.descricao == this.descricao);
}

class ProdutoSubgruposCompanion extends UpdateCompanion<ProdutoSubgrupo> {
  final Value<int?> id;
  final Value<int?> idProdutoGrupo;
  final Value<String?> nome;
  final Value<String?> descricao;
  const ProdutoSubgruposCompanion({
    this.id = const Value.absent(),
    this.idProdutoGrupo = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  ProdutoSubgruposCompanion.insert({
    this.id = const Value.absent(),
    this.idProdutoGrupo = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<ProdutoSubgrupo> custom({
    Expression<int>? id,
    Expression<int>? idProdutoGrupo,
    Expression<String>? nome,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProdutoGrupo != null) 'ID_PRODUTO_GRUPO': idProdutoGrupo,
      if (nome != null) 'NOME': nome,
      if (descricao != null) 'DESCRICAO': descricao,
    });
  }

  ProdutoSubgruposCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idProdutoGrupo,
      Value<String?>? nome,
      Value<String?>? descricao}) {
    return ProdutoSubgruposCompanion(
      id: id ?? this.id,
      idProdutoGrupo: idProdutoGrupo ?? this.idProdutoGrupo,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProdutoGrupo.present) {
      map['ID_PRODUTO_GRUPO'] = Variable<int>(idProdutoGrupo.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoSubgruposCompanion(')
          ..write('id: $id, ')
          ..write('idProdutoGrupo: $idProdutoGrupo, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $ProdutoSubgruposTable extends ProdutoSubgrupos
    with TableInfo<$ProdutoSubgruposTable, ProdutoSubgrupo> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoSubgruposTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idProdutoGrupoMeta =
      const VerificationMeta('idProdutoGrupo');
  @override
  late final GeneratedColumn<int> idProdutoGrupo = GeneratedColumn<int>(
      'ID_PRODUTO_GRUPO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO_GRUPO(ID)');
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, idProdutoGrupo, nome, descricao];
  @override
  String get aliasedName => _alias ?? 'PRODUTO_SUBGRUPO';
  @override
  String get actualTableName => 'PRODUTO_SUBGRUPO';
  @override
  VerificationContext validateIntegrity(Insertable<ProdutoSubgrupo> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PRODUTO_GRUPO')) {
      context.handle(
          _idProdutoGrupoMeta,
          idProdutoGrupo.isAcceptableOrUnknown(
              data['ID_PRODUTO_GRUPO']!, _idProdutoGrupoMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoSubgrupo map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ProdutoSubgrupo.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProdutoSubgruposTable createAlias(String alias) {
    return $ProdutoSubgruposTable(attachedDatabase, alias);
  }
}

class ProdutoTipo extends DataClass implements Insertable<ProdutoTipo> {
  final int? id;
  final String? codigo;
  final String? descricao;
  ProdutoTipo({this.id, this.codigo, this.descricao});
  factory ProdutoTipo.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ProdutoTipo(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      codigo: ValueSqlType.stringType(data['${effectivePrefix}CODIGO']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<String>(codigo);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    return map;
  }

  ProdutoTiposCompanion toCompanion(bool nullToAbsent) {
    return ProdutoTiposCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
    );
  }

  factory ProdutoTipo.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoTipo(
      id: serializer.fromJson<int?>(json['id']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'codigo': serializer.toJson<String?>(codigo),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  ProdutoTipo copyWith({int? id, String? codigo, String? descricao}) =>
      ProdutoTipo(
        id: id ?? this.id,
        codigo: codigo ?? this.codigo,
        descricao: descricao ?? this.descricao,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoTipo(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, codigo, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoTipo &&
          other.id == this.id &&
          other.codigo == this.codigo &&
          other.descricao == this.descricao);
}

class ProdutoTiposCompanion extends UpdateCompanion<ProdutoTipo> {
  final Value<int?> id;
  final Value<String?> codigo;
  final Value<String?> descricao;
  const ProdutoTiposCompanion({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  ProdutoTiposCompanion.insert({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<ProdutoTipo> custom({
    Expression<int>? id,
    Expression<String>? codigo,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigo != null) 'CODIGO': codigo,
      if (descricao != null) 'DESCRICAO': descricao,
    });
  }

  ProdutoTiposCompanion copyWith(
      {Value<int?>? id, Value<String?>? codigo, Value<String?>? descricao}) {
    return ProdutoTiposCompanion(
      id: id ?? this.id,
      codigo: codigo ?? this.codigo,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<String>(codigo.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoTiposCompanion(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $ProdutoTiposTable extends ProdutoTipos
    with TableInfo<$ProdutoTiposTable, ProdutoTipo> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoTiposTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  @override
  late final GeneratedColumn<String> codigo = GeneratedColumn<String>(
      'CODIGO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, codigo, descricao];
  @override
  String get aliasedName => _alias ?? 'PRODUTO_TIPO';
  @override
  String get actualTableName => 'PRODUTO_TIPO';
  @override
  VerificationContext validateIntegrity(Insertable<ProdutoTipo> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoTipo map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ProdutoTipo.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProdutoTiposTable createAlias(String alias) {
    return $ProdutoTiposTable(attachedDatabase, alias);
  }
}

class ProdutoUnidade extends DataClass implements Insertable<ProdutoUnidade> {
  final int? id;
  final String? sigla;
  final String? descricao;
  final String? podeFracionar;
  ProdutoUnidade({this.id, this.sigla, this.descricao, this.podeFracionar});
  factory ProdutoUnidade.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ProdutoUnidade(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      sigla: ValueSqlType.stringType(data['${effectivePrefix}SIGLA']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      podeFracionar: ValueSqlType.stringType(data['${effectivePrefix}PODE_FRACIONAR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || sigla != null) {
      map['SIGLA'] = Variable<String>(sigla);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || podeFracionar != null) {
      map['PODE_FRACIONAR'] = Variable<String>(podeFracionar);
    }
    return map;
  }

  ProdutoUnidadesCompanion toCompanion(bool nullToAbsent) {
    return ProdutoUnidadesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      sigla:
          sigla == null && nullToAbsent ? const Value.absent() : Value(sigla),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      podeFracionar: podeFracionar == null && nullToAbsent
          ? const Value.absent()
          : Value(podeFracionar),
    );
  }

  factory ProdutoUnidade.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ProdutoUnidade(
      id: serializer.fromJson<int?>(json['id']),
      sigla: serializer.fromJson<String?>(json['sigla']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      podeFracionar: serializer.fromJson<String?>(json['podeFracionar']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'sigla': serializer.toJson<String?>(sigla),
      'descricao': serializer.toJson<String?>(descricao),
      'podeFracionar': serializer.toJson<String?>(podeFracionar),
    };
  }

  ProdutoUnidade copyWith(
          {int? id, String? sigla, String? descricao, String? podeFracionar}) =>
      ProdutoUnidade(
        id: id ?? this.id,
        sigla: sigla ?? this.sigla,
        descricao: descricao ?? this.descricao,
        podeFracionar: podeFracionar ?? this.podeFracionar,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoUnidade(')
          ..write('id: $id, ')
          ..write('sigla: $sigla, ')
          ..write('descricao: $descricao, ')
          ..write('podeFracionar: $podeFracionar')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, sigla, descricao, podeFracionar);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ProdutoUnidade &&
          other.id == this.id &&
          other.sigla == this.sigla &&
          other.descricao == this.descricao &&
          other.podeFracionar == this.podeFracionar);
}

class ProdutoUnidadesCompanion extends UpdateCompanion<ProdutoUnidade> {
  final Value<int?> id;
  final Value<String?> sigla;
  final Value<String?> descricao;
  final Value<String?> podeFracionar;
  const ProdutoUnidadesCompanion({
    this.id = const Value.absent(),
    this.sigla = const Value.absent(),
    this.descricao = const Value.absent(),
    this.podeFracionar = const Value.absent(),
  });
  ProdutoUnidadesCompanion.insert({
    this.id = const Value.absent(),
    this.sigla = const Value.absent(),
    this.descricao = const Value.absent(),
    this.podeFracionar = const Value.absent(),
  });
  static Insertable<ProdutoUnidade> custom({
    Expression<int>? id,
    Expression<String>? sigla,
    Expression<String>? descricao,
    Expression<String>? podeFracionar,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (sigla != null) 'SIGLA': sigla,
      if (descricao != null) 'DESCRICAO': descricao,
      if (podeFracionar != null) 'PODE_FRACIONAR': podeFracionar,
    });
  }

  ProdutoUnidadesCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? sigla,
      Value<String?>? descricao,
      Value<String?>? podeFracionar}) {
    return ProdutoUnidadesCompanion(
      id: id ?? this.id,
      sigla: sigla ?? this.sigla,
      descricao: descricao ?? this.descricao,
      podeFracionar: podeFracionar ?? this.podeFracionar,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (sigla.present) {
      map['SIGLA'] = Variable<String>(sigla.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (podeFracionar.present) {
      map['PODE_FRACIONAR'] = Variable<String>(podeFracionar.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoUnidadesCompanion(')
          ..write('id: $id, ')
          ..write('sigla: $sigla, ')
          ..write('descricao: $descricao, ')
          ..write('podeFracionar: $podeFracionar')
          ..write(')'))
        .toString();
  }
}

class $ProdutoUnidadesTable extends ProdutoUnidades
    with TableInfo<$ProdutoUnidadesTable, ProdutoUnidade> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ProdutoUnidadesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _siglaMeta = const VerificationMeta('sigla');
  @override
  late final GeneratedColumn<String> sigla = GeneratedColumn<String>(
      'SIGLA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _podeFracionarMeta =
      const VerificationMeta('podeFracionar');
  @override
  late final GeneratedColumn<String> podeFracionar = GeneratedColumn<String>(
      'PODE_FRACIONAR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, sigla, descricao, podeFracionar];
  @override
  String get aliasedName => _alias ?? 'PRODUTO_UNIDADE';
  @override
  String get actualTableName => 'PRODUTO_UNIDADE';
  @override
  VerificationContext validateIntegrity(Insertable<ProdutoUnidade> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('SIGLA')) {
      context.handle(
          _siglaMeta, sigla.isAcceptableOrUnknown(data['SIGLA']!, _siglaMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('PODE_FRACIONAR')) {
      context.handle(
          _podeFracionarMeta,
          podeFracionar.isAcceptableOrUnknown(
              data['PODE_FRACIONAR']!, _podeFracionarMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoUnidade map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ProdutoUnidade.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ProdutoUnidadesTable createAlias(String alias) {
    return $ProdutoUnidadesTable(attachedDatabase, alias);
  }
}

class Reserva extends DataClass implements Insertable<Reserva> {
  final int? id;
  final int? idCliente;
  final String? nomeContato;
  final String? telefoneContato;
  final DateTime? dataReserva;
  final String? horaReserva;
  final int? quantidadePessoas;
  final String? situacao;
  Reserva(
      {this.id,
      this.idCliente,
      this.nomeContato,
      this.telefoneContato,
      this.dataReserva,
      this.horaReserva,
      this.quantidadePessoas,
      this.situacao});
  factory Reserva.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Reserva(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idCliente: ValueSqlType.intType(data['${effectivePrefix}ID_CLIENTE']),
      nomeContato: ValueSqlType.stringType(data['${effectivePrefix}NOME_CONTATO']),
      telefoneContato: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE_CONTATO']),
      dataReserva: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_RESERVA']),
      horaReserva: ValueSqlType.stringType(data['${effectivePrefix}HORA_RESERVA']),
      quantidadePessoas: ValueSqlType.intType(
          data['${effectivePrefix}QUANTIDADE_PESSOAS']),
      situacao: ValueSqlType.stringType(data['${effectivePrefix}SITUACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCliente != null) {
      map['ID_CLIENTE'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || nomeContato != null) {
      map['NOME_CONTATO'] = Variable<String>(nomeContato);
    }
    if (!nullToAbsent || telefoneContato != null) {
      map['TELEFONE_CONTATO'] = Variable<String>(telefoneContato);
    }
    if (!nullToAbsent || dataReserva != null) {
      map['DATA_RESERVA'] = Variable<DateTime>(dataReserva);
    }
    if (!nullToAbsent || horaReserva != null) {
      map['HORA_RESERVA'] = Variable<String>(horaReserva);
    }
    if (!nullToAbsent || quantidadePessoas != null) {
      map['QUANTIDADE_PESSOAS'] = Variable<int>(quantidadePessoas);
    }
    if (!nullToAbsent || situacao != null) {
      map['SITUACAO'] = Variable<String>(situacao);
    }
    return map;
  }

  ReservasCompanion toCompanion(bool nullToAbsent) {
    return ReservasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCliente: idCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(idCliente),
      nomeContato: nomeContato == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeContato),
      telefoneContato: telefoneContato == null && nullToAbsent
          ? const Value.absent()
          : Value(telefoneContato),
      dataReserva: dataReserva == null && nullToAbsent
          ? const Value.absent()
          : Value(dataReserva),
      horaReserva: horaReserva == null && nullToAbsent
          ? const Value.absent()
          : Value(horaReserva),
      quantidadePessoas: quantidadePessoas == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadePessoas),
      situacao: situacao == null && nullToAbsent
          ? const Value.absent()
          : Value(situacao),
    );
  }

  factory Reserva.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Reserva(
      id: serializer.fromJson<int?>(json['id']),
      idCliente: serializer.fromJson<int?>(json['idCliente']),
      nomeContato: serializer.fromJson<String?>(json['nomeContato']),
      telefoneContato: serializer.fromJson<String?>(json['telefoneContato']),
      dataReserva: serializer.fromJson<DateTime?>(json['dataReserva']),
      horaReserva: serializer.fromJson<String?>(json['horaReserva']),
      quantidadePessoas: serializer.fromJson<int?>(json['quantidadePessoas']),
      situacao: serializer.fromJson<String?>(json['situacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idCliente': serializer.toJson<int?>(idCliente),
      'nomeContato': serializer.toJson<String?>(nomeContato),
      'telefoneContato': serializer.toJson<String?>(telefoneContato),
      'dataReserva': serializer.toJson<DateTime?>(dataReserva),
      'horaReserva': serializer.toJson<String?>(horaReserva),
      'quantidadePessoas': serializer.toJson<int?>(quantidadePessoas),
      'situacao': serializer.toJson<String?>(situacao),
    };
  }

  Reserva copyWith(
          {int? id,
          int? idCliente,
          String? nomeContato,
          String? telefoneContato,
          DateTime? dataReserva,
          String? horaReserva,
          int? quantidadePessoas,
          String? situacao}) =>
      Reserva(
        id: id ?? this.id,
        idCliente: idCliente ?? this.idCliente,
        nomeContato: nomeContato ?? this.nomeContato,
        telefoneContato: telefoneContato ?? this.telefoneContato,
        dataReserva: dataReserva ?? this.dataReserva,
        horaReserva: horaReserva ?? this.horaReserva,
        quantidadePessoas: quantidadePessoas ?? this.quantidadePessoas,
        situacao: situacao ?? this.situacao,
      );
  @override
  String toString() {
    return (StringBuffer('Reserva(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('nomeContato: $nomeContato, ')
          ..write('telefoneContato: $telefoneContato, ')
          ..write('dataReserva: $dataReserva, ')
          ..write('horaReserva: $horaReserva, ')
          ..write('quantidadePessoas: $quantidadePessoas, ')
          ..write('situacao: $situacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idCliente, nomeContato, telefoneContato,
      dataReserva, horaReserva, quantidadePessoas, situacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Reserva &&
          other.id == this.id &&
          other.idCliente == this.idCliente &&
          other.nomeContato == this.nomeContato &&
          other.telefoneContato == this.telefoneContato &&
          other.dataReserva == this.dataReserva &&
          other.horaReserva == this.horaReserva &&
          other.quantidadePessoas == this.quantidadePessoas &&
          other.situacao == this.situacao);
}

class ReservasCompanion extends UpdateCompanion<Reserva> {
  final Value<int?> id;
  final Value<int?> idCliente;
  final Value<String?> nomeContato;
  final Value<String?> telefoneContato;
  final Value<DateTime?> dataReserva;
  final Value<String?> horaReserva;
  final Value<int?> quantidadePessoas;
  final Value<String?> situacao;
  const ReservasCompanion({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.nomeContato = const Value.absent(),
    this.telefoneContato = const Value.absent(),
    this.dataReserva = const Value.absent(),
    this.horaReserva = const Value.absent(),
    this.quantidadePessoas = const Value.absent(),
    this.situacao = const Value.absent(),
  });
  ReservasCompanion.insert({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.nomeContato = const Value.absent(),
    this.telefoneContato = const Value.absent(),
    this.dataReserva = const Value.absent(),
    this.horaReserva = const Value.absent(),
    this.quantidadePessoas = const Value.absent(),
    this.situacao = const Value.absent(),
  });
  static Insertable<Reserva> custom({
    Expression<int>? id,
    Expression<int>? idCliente,
    Expression<String>? nomeContato,
    Expression<String>? telefoneContato,
    Expression<DateTime>? dataReserva,
    Expression<String>? horaReserva,
    Expression<int>? quantidadePessoas,
    Expression<String>? situacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCliente != null) 'ID_CLIENTE': idCliente,
      if (nomeContato != null) 'NOME_CONTATO': nomeContato,
      if (telefoneContato != null) 'TELEFONE_CONTATO': telefoneContato,
      if (dataReserva != null) 'DATA_RESERVA': dataReserva,
      if (horaReserva != null) 'HORA_RESERVA': horaReserva,
      if (quantidadePessoas != null) 'QUANTIDADE_PESSOAS': quantidadePessoas,
      if (situacao != null) 'SITUACAO': situacao,
    });
  }

  ReservasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idCliente,
      Value<String?>? nomeContato,
      Value<String?>? telefoneContato,
      Value<DateTime?>? dataReserva,
      Value<String?>? horaReserva,
      Value<int?>? quantidadePessoas,
      Value<String?>? situacao}) {
    return ReservasCompanion(
      id: id ?? this.id,
      idCliente: idCliente ?? this.idCliente,
      nomeContato: nomeContato ?? this.nomeContato,
      telefoneContato: telefoneContato ?? this.telefoneContato,
      dataReserva: dataReserva ?? this.dataReserva,
      horaReserva: horaReserva ?? this.horaReserva,
      quantidadePessoas: quantidadePessoas ?? this.quantidadePessoas,
      situacao: situacao ?? this.situacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCliente.present) {
      map['ID_CLIENTE'] = Variable<int>(idCliente.value);
    }
    if (nomeContato.present) {
      map['NOME_CONTATO'] = Variable<String>(nomeContato.value);
    }
    if (telefoneContato.present) {
      map['TELEFONE_CONTATO'] = Variable<String>(telefoneContato.value);
    }
    if (dataReserva.present) {
      map['DATA_RESERVA'] = Variable<DateTime>(dataReserva.value);
    }
    if (horaReserva.present) {
      map['HORA_RESERVA'] = Variable<String>(horaReserva.value);
    }
    if (quantidadePessoas.present) {
      map['QUANTIDADE_PESSOAS'] = Variable<int>(quantidadePessoas.value);
    }
    if (situacao.present) {
      map['SITUACAO'] = Variable<String>(situacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ReservasCompanion(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('nomeContato: $nomeContato, ')
          ..write('telefoneContato: $telefoneContato, ')
          ..write('dataReserva: $dataReserva, ')
          ..write('horaReserva: $horaReserva, ')
          ..write('quantidadePessoas: $quantidadePessoas, ')
          ..write('situacao: $situacao')
          ..write(')'))
        .toString();
  }
}

class $ReservasTable extends Reservas with TableInfo<$ReservasTable, Reserva> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ReservasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
  @override
  late final GeneratedColumn<int> idCliente = GeneratedColumn<int>(
      'ID_CLIENTE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
  final VerificationMeta _nomeContatoMeta =
      const VerificationMeta('nomeContato');
  @override
  late final GeneratedColumn<String> nomeContato = GeneratedColumn<String>(
      'NOME_CONTATO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneContatoMeta =
      const VerificationMeta('telefoneContato');
  @override
  late final GeneratedColumn<String> telefoneContato =
      GeneratedColumn<String>('TELEFONE_CONTATO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 15),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _dataReservaMeta =
      const VerificationMeta('dataReserva');
  @override
  late final GeneratedColumn<DateTime> dataReserva =
      GeneratedColumn<DateTime>('DATA_RESERVA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaReservaMeta =
      const VerificationMeta('horaReserva');
  @override
  late final GeneratedColumn<String> horaReserva = GeneratedColumn<String>(
      'HORA_RESERVA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadePessoasMeta =
      const VerificationMeta('quantidadePessoas');
  @override
  late final GeneratedColumn<int> quantidadePessoas = GeneratedColumn<int>(
      'QUANTIDADE_PESSOAS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _situacaoMeta = const VerificationMeta('situacao');
  @override
  late final GeneratedColumn<String> situacao = GeneratedColumn<String>(
      'SITUACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCliente,
        nomeContato,
        telefoneContato,
        dataReserva,
        horaReserva,
        quantidadePessoas,
        situacao
      ];
  @override
  String get aliasedName => _alias ?? 'RESERVA';
  @override
  String get actualTableName => 'RESERVA';
  @override
  VerificationContext validateIntegrity(Insertable<Reserva> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_CLIENTE')) {
      context.handle(_idClienteMeta,
          idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
    }
    if (data.containsKey('NOME_CONTATO')) {
      context.handle(
          _nomeContatoMeta,
          nomeContato.isAcceptableOrUnknown(
              data['NOME_CONTATO']!, _nomeContatoMeta));
    }
    if (data.containsKey('TELEFONE_CONTATO')) {
      context.handle(
          _telefoneContatoMeta,
          telefoneContato.isAcceptableOrUnknown(
              data['TELEFONE_CONTATO']!, _telefoneContatoMeta));
    }
    if (data.containsKey('DATA_RESERVA')) {
      context.handle(
          _dataReservaMeta,
          dataReserva.isAcceptableOrUnknown(
              data['DATA_RESERVA']!, _dataReservaMeta));
    }
    if (data.containsKey('HORA_RESERVA')) {
      context.handle(
          _horaReservaMeta,
          horaReserva.isAcceptableOrUnknown(
              data['HORA_RESERVA']!, _horaReservaMeta));
    }
    if (data.containsKey('QUANTIDADE_PESSOAS')) {
      context.handle(
          _quantidadePessoasMeta,
          quantidadePessoas.isAcceptableOrUnknown(
              data['QUANTIDADE_PESSOAS']!, _quantidadePessoasMeta));
    }
    if (data.containsKey('SITUACAO')) {
      context.handle(_situacaoMeta,
          situacao.isAcceptableOrUnknown(data['SITUACAO']!, _situacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Reserva map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Reserva.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ReservasTable createAlias(String alias) {
    return $ReservasTable(attachedDatabase, alias);
  }
}

class ReservaMesa extends DataClass implements Insertable<ReservaMesa> {
  final int? id;
  final int? idMesa;
  final int? idReserva;
  ReservaMesa({this.id, this.idMesa, this.idReserva});
  factory ReservaMesa.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ReservaMesa(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idMesa: ValueSqlType.intType(data['${effectivePrefix}ID_MESA']),
      idReserva: ValueSqlType.intType(data['${effectivePrefix}ID_RESERVA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idMesa != null) {
      map['ID_MESA'] = Variable<int>(idMesa);
    }
    if (!nullToAbsent || idReserva != null) {
      map['ID_RESERVA'] = Variable<int>(idReserva);
    }
    return map;
  }

  ReservaMesasCompanion toCompanion(bool nullToAbsent) {
    return ReservaMesasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idMesa:
          idMesa == null && nullToAbsent ? const Value.absent() : Value(idMesa),
      idReserva: idReserva == null && nullToAbsent
          ? const Value.absent()
          : Value(idReserva),
    );
  }

  factory ReservaMesa.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ReservaMesa(
      id: serializer.fromJson<int?>(json['id']),
      idMesa: serializer.fromJson<int?>(json['idMesa']),
      idReserva: serializer.fromJson<int?>(json['idReserva']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idMesa': serializer.toJson<int?>(idMesa),
      'idReserva': serializer.toJson<int?>(idReserva),
    };
  }

  ReservaMesa copyWith({int? id, int? idMesa, int? idReserva}) => ReservaMesa(
        id: id ?? this.id,
        idMesa: idMesa ?? this.idMesa,
        idReserva: idReserva ?? this.idReserva,
      );
  @override
  String toString() {
    return (StringBuffer('ReservaMesa(')
          ..write('id: $id, ')
          ..write('idMesa: $idMesa, ')
          ..write('idReserva: $idReserva')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idMesa, idReserva);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ReservaMesa &&
          other.id == this.id &&
          other.idMesa == this.idMesa &&
          other.idReserva == this.idReserva);
}

class ReservaMesasCompanion extends UpdateCompanion<ReservaMesa> {
  final Value<int?> id;
  final Value<int?> idMesa;
  final Value<int?> idReserva;
  const ReservaMesasCompanion({
    this.id = const Value.absent(),
    this.idMesa = const Value.absent(),
    this.idReserva = const Value.absent(),
  });
  ReservaMesasCompanion.insert({
    this.id = const Value.absent(),
    this.idMesa = const Value.absent(),
    this.idReserva = const Value.absent(),
  });
  static Insertable<ReservaMesa> custom({
    Expression<int>? id,
    Expression<int>? idMesa,
    Expression<int>? idReserva,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idMesa != null) 'ID_MESA': idMesa,
      if (idReserva != null) 'ID_RESERVA': idReserva,
    });
  }

  ReservaMesasCompanion copyWith(
      {Value<int?>? id, Value<int?>? idMesa, Value<int?>? idReserva}) {
    return ReservaMesasCompanion(
      id: id ?? this.id,
      idMesa: idMesa ?? this.idMesa,
      idReserva: idReserva ?? this.idReserva,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idMesa.present) {
      map['ID_MESA'] = Variable<int>(idMesa.value);
    }
    if (idReserva.present) {
      map['ID_RESERVA'] = Variable<int>(idReserva.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ReservaMesasCompanion(')
          ..write('id: $id, ')
          ..write('idMesa: $idMesa, ')
          ..write('idReserva: $idReserva')
          ..write(')'))
        .toString();
  }
}

class $ReservaMesasTable extends ReservaMesas
    with TableInfo<$ReservaMesasTable, ReservaMesa> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ReservaMesasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idMesaMeta = const VerificationMeta('idMesa');
  @override
  late final GeneratedColumn<int> idMesa = GeneratedColumn<int>(
      'ID_MESA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES MESA(ID)');
  final VerificationMeta _idReservaMeta = const VerificationMeta('idReserva');
  @override
  late final GeneratedColumn<int> idReserva = GeneratedColumn<int>(
      'ID_RESERVA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES RESERVA(ID)');
  @override
  List<GeneratedColumn> get $columns => [id, idMesa, idReserva];
  @override
  String get aliasedName => _alias ?? 'RESERVA_MESA';
  @override
  String get actualTableName => 'RESERVA_MESA';
  @override
  VerificationContext validateIntegrity(Insertable<ReservaMesa> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_MESA')) {
      context.handle(_idMesaMeta,
          idMesa.isAcceptableOrUnknown(data['ID_MESA']!, _idMesaMeta));
    }
    if (data.containsKey('ID_RESERVA')) {
      context.handle(_idReservaMeta,
          idReserva.isAcceptableOrUnknown(data['ID_RESERVA']!, _idReservaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ReservaMesa map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ReservaMesa.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ReservaMesasTable createAlias(String alias) {
    return $ReservaMesasTable(attachedDatabase, alias);
  }
}

class TaxaEntrega extends DataClass implements Insertable<TaxaEntrega> {
  final int? id;
  final String? nome;
  final double? valor;
  final int? estimativaMinutos;
  TaxaEntrega({this.id, this.nome, this.valor, this.estimativaMinutos});
  factory TaxaEntrega.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TaxaEntrega(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
      estimativaMinutos: ValueSqlType.intType(
          data['${effectivePrefix}ESTIMATIVA_MINUTOS']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || estimativaMinutos != null) {
      map['ESTIMATIVA_MINUTOS'] = Variable<int>(estimativaMinutos);
    }
    return map;
  }

  TaxaEntregasCompanion toCompanion(bool nullToAbsent) {
    return TaxaEntregasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      estimativaMinutos: estimativaMinutos == null && nullToAbsent
          ? const Value.absent()
          : Value(estimativaMinutos),
    );
  }

  factory TaxaEntrega.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TaxaEntrega(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      valor: serializer.fromJson<double?>(json['valor']),
      estimativaMinutos: serializer.fromJson<int?>(json['estimativaMinutos']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'valor': serializer.toJson<double?>(valor),
      'estimativaMinutos': serializer.toJson<int?>(estimativaMinutos),
    };
  }

  TaxaEntrega copyWith(
          {int? id, String? nome, double? valor, int? estimativaMinutos}) =>
      TaxaEntrega(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        valor: valor ?? this.valor,
        estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
      );
  @override
  String toString() {
    return (StringBuffer('TaxaEntrega(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('valor: $valor, ')
          ..write('estimativaMinutos: $estimativaMinutos')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, nome, valor, estimativaMinutos);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TaxaEntrega &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.valor == this.valor &&
          other.estimativaMinutos == this.estimativaMinutos);
}

class TaxaEntregasCompanion extends UpdateCompanion<TaxaEntrega> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<double?> valor;
  final Value<int?> estimativaMinutos;
  const TaxaEntregasCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.valor = const Value.absent(),
    this.estimativaMinutos = const Value.absent(),
  });
  TaxaEntregasCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.valor = const Value.absent(),
    this.estimativaMinutos = const Value.absent(),
  });
  static Insertable<TaxaEntrega> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<double>? valor,
    Expression<int>? estimativaMinutos,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (valor != null) 'VALOR': valor,
      if (estimativaMinutos != null) 'ESTIMATIVA_MINUTOS': estimativaMinutos,
    });
  }

  TaxaEntregasCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? nome,
      Value<double?>? valor,
      Value<int?>? estimativaMinutos}) {
    return TaxaEntregasCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      valor: valor ?? this.valor,
      estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (estimativaMinutos.present) {
      map['ESTIMATIVA_MINUTOS'] = Variable<int>(estimativaMinutos.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TaxaEntregasCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('valor: $valor, ')
          ..write('estimativaMinutos: $estimativaMinutos')
          ..write(')'))
        .toString();
  }
}

class $TaxaEntregasTable extends TaxaEntregas
    with TableInfo<$TaxaEntregasTable, TaxaEntrega> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TaxaEntregasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _estimativaMinutosMeta =
      const VerificationMeta('estimativaMinutos');
  @override
  late final GeneratedColumn<int> estimativaMinutos = GeneratedColumn<int>(
      'ESTIMATIVA_MINUTOS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, nome, valor, estimativaMinutos];
  @override
  String get aliasedName => _alias ?? 'TAXA_ENTREGA';
  @override
  String get actualTableName => 'TAXA_ENTREGA';
  @override
  VerificationContext validateIntegrity(Insertable<TaxaEntrega> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    if (data.containsKey('ESTIMATIVA_MINUTOS')) {
      context.handle(
          _estimativaMinutosMeta,
          estimativaMinutos.isAcceptableOrUnknown(
              data['ESTIMATIVA_MINUTOS']!, _estimativaMinutosMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TaxaEntrega map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TaxaEntrega.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TaxaEntregasTable createAlias(String alias) {
    return $TaxaEntregasTable(attachedDatabase, alias);
  }
}

class TributCofins extends DataClass implements Insertable<TributCofins> {
  final int? id;
  final int? idTributConfiguraOfGt;
  final String? cstCofins;
  final String? efdTabela435;
  final String? modalidadeBaseCalculo;
  final double? porcentoBaseCalculo;
  final double? aliquotaPorcento;
  final double? aliquotaUnidade;
  final double? valorPrecoMaximo;
  final double? valorPautaFiscal;
  TributCofins(
      {this.id,
      this.idTributConfiguraOfGt,
      this.cstCofins,
      this.efdTabela435,
      this.modalidadeBaseCalculo,
      this.porcentoBaseCalculo,
      this.aliquotaPorcento,
      this.aliquotaUnidade,
      this.valorPrecoMaximo,
      this.valorPautaFiscal});
  factory TributCofins.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributCofins(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idTributConfiguraOfGt: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_CONFIGURA_OF_GT']),
      cstCofins: ValueSqlType.stringType(data['${effectivePrefix}CST_COFINS']),
      efdTabela435: ValueSqlType.stringType(data['${effectivePrefix}EFD_TABELA_435']),
      modalidadeBaseCalculo: ValueSqlType.stringType(
          data['${effectivePrefix}MODALIDADE_BASE_CALCULO']),
      porcentoBaseCalculo: ValueSqlType.doubleType(
          data['${effectivePrefix}PORCENTO_BASE_CALCULO']),
      aliquotaPorcento: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_PORCENTO']),
      aliquotaUnidade: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_UNIDADE']),
      valorPrecoMaximo: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
      valorPautaFiscal: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PAUTA_FISCAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idTributConfiguraOfGt != null) {
      map['ID_TRIBUT_CONFIGURA_OF_GT'] = Variable<int>(idTributConfiguraOfGt);
    }
    if (!nullToAbsent || cstCofins != null) {
      map['CST_COFINS'] = Variable<String>(cstCofins);
    }
    if (!nullToAbsent || efdTabela435 != null) {
      map['EFD_TABELA_435'] = Variable<String>(efdTabela435);
    }
    if (!nullToAbsent || modalidadeBaseCalculo != null) {
      map['MODALIDADE_BASE_CALCULO'] = Variable<String>(modalidadeBaseCalculo);
    }
    if (!nullToAbsent || porcentoBaseCalculo != null) {
      map['PORCENTO_BASE_CALCULO'] = Variable<double>(porcentoBaseCalculo);
    }
    if (!nullToAbsent || aliquotaPorcento != null) {
      map['ALIQUOTA_PORCENTO'] = Variable<double>(aliquotaPorcento);
    }
    if (!nullToAbsent || aliquotaUnidade != null) {
      map['ALIQUOTA_UNIDADE'] = Variable<double>(aliquotaUnidade);
    }
    if (!nullToAbsent || valorPrecoMaximo != null) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo);
    }
    if (!nullToAbsent || valorPautaFiscal != null) {
      map['VALOR_PAUTA_FISCAL'] = Variable<double>(valorPautaFiscal);
    }
    return map;
  }

  TributCofinssCompanion toCompanion(bool nullToAbsent) {
    return TributCofinssCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idTributConfiguraOfGt: idTributConfiguraOfGt == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributConfiguraOfGt),
      cstCofins: cstCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(cstCofins),
      efdTabela435: efdTabela435 == null && nullToAbsent
          ? const Value.absent()
          : Value(efdTabela435),
      modalidadeBaseCalculo: modalidadeBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBaseCalculo),
      porcentoBaseCalculo: porcentoBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(porcentoBaseCalculo),
      aliquotaPorcento: aliquotaPorcento == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPorcento),
      aliquotaUnidade: aliquotaUnidade == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaUnidade),
      valorPrecoMaximo: valorPrecoMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPrecoMaximo),
      valorPautaFiscal: valorPautaFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPautaFiscal),
    );
  }

  factory TributCofins.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributCofins(
      id: serializer.fromJson<int?>(json['id']),
      idTributConfiguraOfGt:
          serializer.fromJson<int?>(json['idTributConfiguraOfGt']),
      cstCofins: serializer.fromJson<String?>(json['cstCofins']),
      efdTabela435: serializer.fromJson<String?>(json['efdTabela435']),
      modalidadeBaseCalculo:
          serializer.fromJson<String?>(json['modalidadeBaseCalculo']),
      porcentoBaseCalculo:
          serializer.fromJson<double?>(json['porcentoBaseCalculo']),
      aliquotaPorcento: serializer.fromJson<double?>(json['aliquotaPorcento']),
      aliquotaUnidade: serializer.fromJson<double?>(json['aliquotaUnidade']),
      valorPrecoMaximo: serializer.fromJson<double?>(json['valorPrecoMaximo']),
      valorPautaFiscal: serializer.fromJson<double?>(json['valorPautaFiscal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idTributConfiguraOfGt': serializer.toJson<int?>(idTributConfiguraOfGt),
      'cstCofins': serializer.toJson<String?>(cstCofins),
      'efdTabela435': serializer.toJson<String?>(efdTabela435),
      'modalidadeBaseCalculo':
          serializer.toJson<String?>(modalidadeBaseCalculo),
      'porcentoBaseCalculo': serializer.toJson<double?>(porcentoBaseCalculo),
      'aliquotaPorcento': serializer.toJson<double?>(aliquotaPorcento),
      'aliquotaUnidade': serializer.toJson<double?>(aliquotaUnidade),
      'valorPrecoMaximo': serializer.toJson<double?>(valorPrecoMaximo),
      'valorPautaFiscal': serializer.toJson<double?>(valorPautaFiscal),
    };
  }

  TributCofins copyWith(
          {int? id,
          int? idTributConfiguraOfGt,
          String? cstCofins,
          String? efdTabela435,
          String? modalidadeBaseCalculo,
          double? porcentoBaseCalculo,
          double? aliquotaPorcento,
          double? aliquotaUnidade,
          double? valorPrecoMaximo,
          double? valorPautaFiscal}) =>
      TributCofins(
        id: id ?? this.id,
        idTributConfiguraOfGt:
            idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
        cstCofins: cstCofins ?? this.cstCofins,
        efdTabela435: efdTabela435 ?? this.efdTabela435,
        modalidadeBaseCalculo:
            modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
        porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
        aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
        aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
        valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
        valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
      );
  @override
  String toString() {
    return (StringBuffer('TributCofins(')
          ..write('id: $id, ')
          ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
          ..write('cstCofins: $cstCofins, ')
          ..write('efdTabela435: $efdTabela435, ')
          ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
          ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
          ..write('aliquotaPorcento: $aliquotaPorcento, ')
          ..write('aliquotaUnidade: $aliquotaUnidade, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('valorPautaFiscal: $valorPautaFiscal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idTributConfiguraOfGt,
      cstCofins,
      efdTabela435,
      modalidadeBaseCalculo,
      porcentoBaseCalculo,
      aliquotaPorcento,
      aliquotaUnidade,
      valorPrecoMaximo,
      valorPautaFiscal);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributCofins &&
          other.id == this.id &&
          other.idTributConfiguraOfGt == this.idTributConfiguraOfGt &&
          other.cstCofins == this.cstCofins &&
          other.efdTabela435 == this.efdTabela435 &&
          other.modalidadeBaseCalculo == this.modalidadeBaseCalculo &&
          other.porcentoBaseCalculo == this.porcentoBaseCalculo &&
          other.aliquotaPorcento == this.aliquotaPorcento &&
          other.aliquotaUnidade == this.aliquotaUnidade &&
          other.valorPrecoMaximo == this.valorPrecoMaximo &&
          other.valorPautaFiscal == this.valorPautaFiscal);
}

class TributCofinssCompanion extends UpdateCompanion<TributCofins> {
  final Value<int?> id;
  final Value<int?> idTributConfiguraOfGt;
  final Value<String?> cstCofins;
  final Value<String?> efdTabela435;
  final Value<String?> modalidadeBaseCalculo;
  final Value<double?> porcentoBaseCalculo;
  final Value<double?> aliquotaPorcento;
  final Value<double?> aliquotaUnidade;
  final Value<double?> valorPrecoMaximo;
  final Value<double?> valorPautaFiscal;
  const TributCofinssCompanion({
    this.id = const Value.absent(),
    this.idTributConfiguraOfGt = const Value.absent(),
    this.cstCofins = const Value.absent(),
    this.efdTabela435 = const Value.absent(),
    this.modalidadeBaseCalculo = const Value.absent(),
    this.porcentoBaseCalculo = const Value.absent(),
    this.aliquotaPorcento = const Value.absent(),
    this.aliquotaUnidade = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.valorPautaFiscal = const Value.absent(),
  });
  TributCofinssCompanion.insert({
    this.id = const Value.absent(),
    this.idTributConfiguraOfGt = const Value.absent(),
    this.cstCofins = const Value.absent(),
    this.efdTabela435 = const Value.absent(),
    this.modalidadeBaseCalculo = const Value.absent(),
    this.porcentoBaseCalculo = const Value.absent(),
    this.aliquotaPorcento = const Value.absent(),
    this.aliquotaUnidade = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.valorPautaFiscal = const Value.absent(),
  });
  static Insertable<TributCofins> custom({
    Expression<int>? id,
    Expression<int>? idTributConfiguraOfGt,
    Expression<String>? cstCofins,
    Expression<String>? efdTabela435,
    Expression<String>? modalidadeBaseCalculo,
    Expression<double>? porcentoBaseCalculo,
    Expression<double>? aliquotaPorcento,
    Expression<double>? aliquotaUnidade,
    Expression<double>? valorPrecoMaximo,
    Expression<double>? valorPautaFiscal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idTributConfiguraOfGt != null)
        'ID_TRIBUT_CONFIGURA_OF_GT': idTributConfiguraOfGt,
      if (cstCofins != null) 'CST_COFINS': cstCofins,
      if (efdTabela435 != null) 'EFD_TABELA_435': efdTabela435,
      if (modalidadeBaseCalculo != null)
        'MODALIDADE_BASE_CALCULO': modalidadeBaseCalculo,
      if (porcentoBaseCalculo != null)
        'PORCENTO_BASE_CALCULO': porcentoBaseCalculo,
      if (aliquotaPorcento != null) 'ALIQUOTA_PORCENTO': aliquotaPorcento,
      if (aliquotaUnidade != null) 'ALIQUOTA_UNIDADE': aliquotaUnidade,
      if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
      if (valorPautaFiscal != null) 'VALOR_PAUTA_FISCAL': valorPautaFiscal,
    });
  }

  TributCofinssCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idTributConfiguraOfGt,
      Value<String?>? cstCofins,
      Value<String?>? efdTabela435,
      Value<String?>? modalidadeBaseCalculo,
      Value<double?>? porcentoBaseCalculo,
      Value<double?>? aliquotaPorcento,
      Value<double?>? aliquotaUnidade,
      Value<double?>? valorPrecoMaximo,
      Value<double?>? valorPautaFiscal}) {
    return TributCofinssCompanion(
      id: id ?? this.id,
      idTributConfiguraOfGt:
          idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
      cstCofins: cstCofins ?? this.cstCofins,
      efdTabela435: efdTabela435 ?? this.efdTabela435,
      modalidadeBaseCalculo:
          modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
      porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
      aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
      aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
      valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
      valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idTributConfiguraOfGt.present) {
      map['ID_TRIBUT_CONFIGURA_OF_GT'] =
          Variable<int>(idTributConfiguraOfGt.value);
    }
    if (cstCofins.present) {
      map['CST_COFINS'] = Variable<String>(cstCofins.value);
    }
    if (efdTabela435.present) {
      map['EFD_TABELA_435'] = Variable<String>(efdTabela435.value);
    }
    if (modalidadeBaseCalculo.present) {
      map['MODALIDADE_BASE_CALCULO'] =
          Variable<String>(modalidadeBaseCalculo.value);
    }
    if (porcentoBaseCalculo.present) {
      map['PORCENTO_BASE_CALCULO'] =
          Variable<double>(porcentoBaseCalculo.value);
    }
    if (aliquotaPorcento.present) {
      map['ALIQUOTA_PORCENTO'] = Variable<double>(aliquotaPorcento.value);
    }
    if (aliquotaUnidade.present) {
      map['ALIQUOTA_UNIDADE'] = Variable<double>(aliquotaUnidade.value);
    }
    if (valorPrecoMaximo.present) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo.value);
    }
    if (valorPautaFiscal.present) {
      map['VALOR_PAUTA_FISCAL'] = Variable<double>(valorPautaFiscal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributCofinssCompanion(')
          ..write('id: $id, ')
          ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
          ..write('cstCofins: $cstCofins, ')
          ..write('efdTabela435: $efdTabela435, ')
          ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
          ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
          ..write('aliquotaPorcento: $aliquotaPorcento, ')
          ..write('aliquotaUnidade: $aliquotaUnidade, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('valorPautaFiscal: $valorPautaFiscal')
          ..write(')'))
        .toString();
  }
}

class $TributCofinssTable extends TributCofinss
    with TableInfo<$TributCofinssTable, TributCofins> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributCofinssTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idTributConfiguraOfGtMeta =
      const VerificationMeta('idTributConfiguraOfGt');
  @override
  late final GeneratedColumn<int> idTributConfiguraOfGt =
      GeneratedColumn<int>('ID_TRIBUT_CONFIGURA_OF_GT', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES TRIBUT_CONFIGURA_OF_GT(ID)');
  final VerificationMeta _cstCofinsMeta = const VerificationMeta('cstCofins');
  @override
  late final GeneratedColumn<String> cstCofins = GeneratedColumn<String>(
      'CST_COFINS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _efdTabela435Meta =
      const VerificationMeta('efdTabela435');
  @override
  late final GeneratedColumn<String> efdTabela435 = GeneratedColumn<String>(
      'EFD_TABELA_435', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modalidadeBaseCalculoMeta =
      const VerificationMeta('modalidadeBaseCalculo');
  @override
  late final GeneratedColumn<String> modalidadeBaseCalculo =
      GeneratedColumn<String>('MODALIDADE_BASE_CALCULO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _porcentoBaseCalculoMeta =
      const VerificationMeta('porcentoBaseCalculo');
  @override
  late final GeneratedColumn<double> porcentoBaseCalculo =
      GeneratedColumn<double>('PORCENTO_BASE_CALCULO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaPorcentoMeta =
      const VerificationMeta('aliquotaPorcento');
  @override
  late final GeneratedColumn<double> aliquotaPorcento =
      GeneratedColumn<double>('ALIQUOTA_PORCENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaUnidadeMeta =
      const VerificationMeta('aliquotaUnidade');
  @override
  late final GeneratedColumn<double> aliquotaUnidade =
      GeneratedColumn<double>('ALIQUOTA_UNIDADE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPrecoMaximoMeta =
      const VerificationMeta('valorPrecoMaximo');
  @override
  late final GeneratedColumn<double> valorPrecoMaximo =
      GeneratedColumn<double>('VALOR_PRECO_MAXIMO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPautaFiscalMeta =
      const VerificationMeta('valorPautaFiscal');
  @override
  late final GeneratedColumn<double> valorPautaFiscal =
      GeneratedColumn<double>('VALOR_PAUTA_FISCAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idTributConfiguraOfGt,
        cstCofins,
        efdTabela435,
        modalidadeBaseCalculo,
        porcentoBaseCalculo,
        aliquotaPorcento,
        aliquotaUnidade,
        valorPrecoMaximo,
        valorPautaFiscal
      ];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_COFINS';
  @override
  String get actualTableName => 'TRIBUT_COFINS';
  @override
  VerificationContext validateIntegrity(Insertable<TributCofins> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_TRIBUT_CONFIGURA_OF_GT')) {
      context.handle(
          _idTributConfiguraOfGtMeta,
          idTributConfiguraOfGt.isAcceptableOrUnknown(
              data['ID_TRIBUT_CONFIGURA_OF_GT']!, _idTributConfiguraOfGtMeta));
    }
    if (data.containsKey('CST_COFINS')) {
      context.handle(_cstCofinsMeta,
          cstCofins.isAcceptableOrUnknown(data['CST_COFINS']!, _cstCofinsMeta));
    }
    if (data.containsKey('EFD_TABELA_435')) {
      context.handle(
          _efdTabela435Meta,
          efdTabela435.isAcceptableOrUnknown(
              data['EFD_TABELA_435']!, _efdTabela435Meta));
    }
    if (data.containsKey('MODALIDADE_BASE_CALCULO')) {
      context.handle(
          _modalidadeBaseCalculoMeta,
          modalidadeBaseCalculo.isAcceptableOrUnknown(
              data['MODALIDADE_BASE_CALCULO']!, _modalidadeBaseCalculoMeta));
    }
    if (data.containsKey('PORCENTO_BASE_CALCULO')) {
      context.handle(
          _porcentoBaseCalculoMeta,
          porcentoBaseCalculo.isAcceptableOrUnknown(
              data['PORCENTO_BASE_CALCULO']!, _porcentoBaseCalculoMeta));
    }
    if (data.containsKey('ALIQUOTA_PORCENTO')) {
      context.handle(
          _aliquotaPorcentoMeta,
          aliquotaPorcento.isAcceptableOrUnknown(
              data['ALIQUOTA_PORCENTO']!, _aliquotaPorcentoMeta));
    }
    if (data.containsKey('ALIQUOTA_UNIDADE')) {
      context.handle(
          _aliquotaUnidadeMeta,
          aliquotaUnidade.isAcceptableOrUnknown(
              data['ALIQUOTA_UNIDADE']!, _aliquotaUnidadeMeta));
    }
    if (data.containsKey('VALOR_PRECO_MAXIMO')) {
      context.handle(
          _valorPrecoMaximoMeta,
          valorPrecoMaximo.isAcceptableOrUnknown(
              data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
    }
    if (data.containsKey('VALOR_PAUTA_FISCAL')) {
      context.handle(
          _valorPautaFiscalMeta,
          valorPautaFiscal.isAcceptableOrUnknown(
              data['VALOR_PAUTA_FISCAL']!, _valorPautaFiscalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributCofins map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributCofins.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributCofinssTable createAlias(String alias) {
    return $TributCofinssTable(attachedDatabase, alias);
  }
}

class TributConfiguraOfGt extends DataClass
    implements Insertable<TributConfiguraOfGt> {
  final int? id;
  final int? idTributGrupoTributario;
  final int? idTributOperacaoFiscal;
  TributConfiguraOfGt(
      {this.id, this.idTributGrupoTributario, this.idTributOperacaoFiscal});
  factory TributConfiguraOfGt.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributConfiguraOfGt(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idTributGrupoTributario: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_GRUPO_TRIBUTARIO']),
      idTributOperacaoFiscal: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_OPERACAO_FISCAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idTributGrupoTributario != null) {
      map['ID_TRIBUT_GRUPO_TRIBUTARIO'] =
          Variable<int>(idTributGrupoTributario);
    }
    if (!nullToAbsent || idTributOperacaoFiscal != null) {
      map['ID_TRIBUT_OPERACAO_FISCAL'] = Variable<int>(idTributOperacaoFiscal);
    }
    return map;
  }

  TributConfiguraOfGtsCompanion toCompanion(bool nullToAbsent) {
    return TributConfiguraOfGtsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idTributGrupoTributario: idTributGrupoTributario == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributGrupoTributario),
      idTributOperacaoFiscal: idTributOperacaoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributOperacaoFiscal),
    );
  }

  factory TributConfiguraOfGt.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributConfiguraOfGt(
      id: serializer.fromJson<int?>(json['id']),
      idTributGrupoTributario:
          serializer.fromJson<int?>(json['idTributGrupoTributario']),
      idTributOperacaoFiscal:
          serializer.fromJson<int?>(json['idTributOperacaoFiscal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idTributGrupoTributario':
          serializer.toJson<int?>(idTributGrupoTributario),
      'idTributOperacaoFiscal': serializer.toJson<int?>(idTributOperacaoFiscal),
    };
  }

  TributConfiguraOfGt copyWith(
          {int? id,
          int? idTributGrupoTributario,
          int? idTributOperacaoFiscal}) =>
      TributConfiguraOfGt(
        id: id ?? this.id,
        idTributGrupoTributario:
            idTributGrupoTributario ?? this.idTributGrupoTributario,
        idTributOperacaoFiscal:
            idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
      );
  @override
  String toString() {
    return (StringBuffer('TributConfiguraOfGt(')
          ..write('id: $id, ')
          ..write('idTributGrupoTributario: $idTributGrupoTributario, ')
          ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idTributGrupoTributario, idTributOperacaoFiscal);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributConfiguraOfGt &&
          other.id == this.id &&
          other.idTributGrupoTributario == this.idTributGrupoTributario &&
          other.idTributOperacaoFiscal == this.idTributOperacaoFiscal);
}

class TributConfiguraOfGtsCompanion
    extends UpdateCompanion<TributConfiguraOfGt> {
  final Value<int?> id;
  final Value<int?> idTributGrupoTributario;
  final Value<int?> idTributOperacaoFiscal;
  const TributConfiguraOfGtsCompanion({
    this.id = const Value.absent(),
    this.idTributGrupoTributario = const Value.absent(),
    this.idTributOperacaoFiscal = const Value.absent(),
  });
  TributConfiguraOfGtsCompanion.insert({
    this.id = const Value.absent(),
    this.idTributGrupoTributario = const Value.absent(),
    this.idTributOperacaoFiscal = const Value.absent(),
  });
  static Insertable<TributConfiguraOfGt> custom({
    Expression<int>? id,
    Expression<int>? idTributGrupoTributario,
    Expression<int>? idTributOperacaoFiscal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idTributGrupoTributario != null)
        'ID_TRIBUT_GRUPO_TRIBUTARIO': idTributGrupoTributario,
      if (idTributOperacaoFiscal != null)
        'ID_TRIBUT_OPERACAO_FISCAL': idTributOperacaoFiscal,
    });
  }

  TributConfiguraOfGtsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idTributGrupoTributario,
      Value<int?>? idTributOperacaoFiscal}) {
    return TributConfiguraOfGtsCompanion(
      id: id ?? this.id,
      idTributGrupoTributario:
          idTributGrupoTributario ?? this.idTributGrupoTributario,
      idTributOperacaoFiscal:
          idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idTributGrupoTributario.present) {
      map['ID_TRIBUT_GRUPO_TRIBUTARIO'] =
          Variable<int>(idTributGrupoTributario.value);
    }
    if (idTributOperacaoFiscal.present) {
      map['ID_TRIBUT_OPERACAO_FISCAL'] =
          Variable<int>(idTributOperacaoFiscal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributConfiguraOfGtsCompanion(')
          ..write('id: $id, ')
          ..write('idTributGrupoTributario: $idTributGrupoTributario, ')
          ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal')
          ..write(')'))
        .toString();
  }
}

class $TributConfiguraOfGtsTable extends TributConfiguraOfGts
    with TableInfo<$TributConfiguraOfGtsTable, TributConfiguraOfGt> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributConfiguraOfGtsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idTributGrupoTributarioMeta =
      const VerificationMeta('idTributGrupoTributario');
  @override
  late final GeneratedColumn<int> idTributGrupoTributario =
      GeneratedColumn<int>('ID_TRIBUT_GRUPO_TRIBUTARIO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES TRIBUT_GRUPO_TRIBUTARIO(ID)');
  final VerificationMeta _idTributOperacaoFiscalMeta =
      const VerificationMeta('idTributOperacaoFiscal');
  @override
  late final GeneratedColumn<int> idTributOperacaoFiscal =
      GeneratedColumn<int>('ID_TRIBUT_OPERACAO_FISCAL', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES TRIBUT_OPERACAO_FISCAL(ID)');
  @override
  List<GeneratedColumn> get $columns =>
      [id, idTributGrupoTributario, idTributOperacaoFiscal];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_CONFIGURA_OF_GT';
  @override
  String get actualTableName => 'TRIBUT_CONFIGURA_OF_GT';
  @override
  VerificationContext validateIntegrity(
      Insertable<TributConfiguraOfGt> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_TRIBUT_GRUPO_TRIBUTARIO')) {
      context.handle(
          _idTributGrupoTributarioMeta,
          idTributGrupoTributario.isAcceptableOrUnknown(
              data['ID_TRIBUT_GRUPO_TRIBUTARIO']!,
              _idTributGrupoTributarioMeta));
    }
    if (data.containsKey('ID_TRIBUT_OPERACAO_FISCAL')) {
      context.handle(
          _idTributOperacaoFiscalMeta,
          idTributOperacaoFiscal.isAcceptableOrUnknown(
              data['ID_TRIBUT_OPERACAO_FISCAL']!, _idTributOperacaoFiscalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributConfiguraOfGt map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributConfiguraOfGt.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributConfiguraOfGtsTable createAlias(String alias) {
    return $TributConfiguraOfGtsTable(attachedDatabase, alias);
  }
}

class TributGrupoTributario extends DataClass
    implements Insertable<TributGrupoTributario> {
  final int? id;
  final String? descricao;
  final String? origemMercadoria;
  final String? observacao;
  TributGrupoTributario(
      {this.id, this.descricao, this.origemMercadoria, this.observacao});
  factory TributGrupoTributario.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributGrupoTributario(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      origemMercadoria: ValueSqlType.stringType(data['${effectivePrefix}ORIGEM_MERCADORIA']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || origemMercadoria != null) {
      map['ORIGEM_MERCADORIA'] = Variable<String>(origemMercadoria);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  TributGrupoTributariosCompanion toCompanion(bool nullToAbsent) {
    return TributGrupoTributariosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      origemMercadoria: origemMercadoria == null && nullToAbsent
          ? const Value.absent()
          : Value(origemMercadoria),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory TributGrupoTributario.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributGrupoTributario(
      id: serializer.fromJson<int?>(json['id']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      origemMercadoria: serializer.fromJson<String?>(json['origemMercadoria']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'descricao': serializer.toJson<String?>(descricao),
      'origemMercadoria': serializer.toJson<String?>(origemMercadoria),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  TributGrupoTributario copyWith(
          {int? id,
          String? descricao,
          String? origemMercadoria,
          String? observacao}) =>
      TributGrupoTributario(
        id: id ?? this.id,
        descricao: descricao ?? this.descricao,
        origemMercadoria: origemMercadoria ?? this.origemMercadoria,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('TributGrupoTributario(')
          ..write('id: $id, ')
          ..write('descricao: $descricao, ')
          ..write('origemMercadoria: $origemMercadoria, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, descricao, origemMercadoria, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributGrupoTributario &&
          other.id == this.id &&
          other.descricao == this.descricao &&
          other.origemMercadoria == this.origemMercadoria &&
          other.observacao == this.observacao);
}

class TributGrupoTributariosCompanion
    extends UpdateCompanion<TributGrupoTributario> {
  final Value<int?> id;
  final Value<String?> descricao;
  final Value<String?> origemMercadoria;
  final Value<String?> observacao;
  const TributGrupoTributariosCompanion({
    this.id = const Value.absent(),
    this.descricao = const Value.absent(),
    this.origemMercadoria = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  TributGrupoTributariosCompanion.insert({
    this.id = const Value.absent(),
    this.descricao = const Value.absent(),
    this.origemMercadoria = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<TributGrupoTributario> custom({
    Expression<int>? id,
    Expression<String>? descricao,
    Expression<String>? origemMercadoria,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (descricao != null) 'DESCRICAO': descricao,
      if (origemMercadoria != null) 'ORIGEM_MERCADORIA': origemMercadoria,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  TributGrupoTributariosCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? descricao,
      Value<String?>? origemMercadoria,
      Value<String?>? observacao}) {
    return TributGrupoTributariosCompanion(
      id: id ?? this.id,
      descricao: descricao ?? this.descricao,
      origemMercadoria: origemMercadoria ?? this.origemMercadoria,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (origemMercadoria.present) {
      map['ORIGEM_MERCADORIA'] = Variable<String>(origemMercadoria.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributGrupoTributariosCompanion(')
          ..write('id: $id, ')
          ..write('descricao: $descricao, ')
          ..write('origemMercadoria: $origemMercadoria, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $TributGrupoTributariosTable extends TributGrupoTributarios
    with TableInfo<$TributGrupoTributariosTable, TributGrupoTributario> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributGrupoTributariosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _origemMercadoriaMeta =
      const VerificationMeta('origemMercadoria');
  @override
  late final GeneratedColumn<String> origemMercadoria =
      GeneratedColumn<String>('ORIGEM_MERCADORIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, descricao, origemMercadoria, observacao];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_GRUPO_TRIBUTARIO';
  @override
  String get actualTableName => 'TRIBUT_GRUPO_TRIBUTARIO';
  @override
  VerificationContext validateIntegrity(
      Insertable<TributGrupoTributario> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('ORIGEM_MERCADORIA')) {
      context.handle(
          _origemMercadoriaMeta,
          origemMercadoria.isAcceptableOrUnknown(
              data['ORIGEM_MERCADORIA']!, _origemMercadoriaMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributGrupoTributario map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributGrupoTributario.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributGrupoTributariosTable createAlias(String alias) {
    return $TributGrupoTributariosTable(attachedDatabase, alias);
  }
}

class TributIcmsCustomCab extends DataClass
    implements Insertable<TributIcmsCustomCab> {
  final int? id;
  final String? descricao;
  final String? origemMercadoria;
  TributIcmsCustomCab({this.id, this.descricao, this.origemMercadoria});
  factory TributIcmsCustomCab.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributIcmsCustomCab(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      origemMercadoria: ValueSqlType.stringType(data['${effectivePrefix}ORIGEM_MERCADORIA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || origemMercadoria != null) {
      map['ORIGEM_MERCADORIA'] = Variable<String>(origemMercadoria);
    }
    return map;
  }

  TributIcmsCustomCabsCompanion toCompanion(bool nullToAbsent) {
    return TributIcmsCustomCabsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      origemMercadoria: origemMercadoria == null && nullToAbsent
          ? const Value.absent()
          : Value(origemMercadoria),
    );
  }

  factory TributIcmsCustomCab.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributIcmsCustomCab(
      id: serializer.fromJson<int?>(json['id']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      origemMercadoria: serializer.fromJson<String?>(json['origemMercadoria']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'descricao': serializer.toJson<String?>(descricao),
      'origemMercadoria': serializer.toJson<String?>(origemMercadoria),
    };
  }

  TributIcmsCustomCab copyWith(
          {int? id, String? descricao, String? origemMercadoria}) =>
      TributIcmsCustomCab(
        id: id ?? this.id,
        descricao: descricao ?? this.descricao,
        origemMercadoria: origemMercadoria ?? this.origemMercadoria,
      );
  @override
  String toString() {
    return (StringBuffer('TributIcmsCustomCab(')
          ..write('id: $id, ')
          ..write('descricao: $descricao, ')
          ..write('origemMercadoria: $origemMercadoria')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, descricao, origemMercadoria);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributIcmsCustomCab &&
          other.id == this.id &&
          other.descricao == this.descricao &&
          other.origemMercadoria == this.origemMercadoria);
}

class TributIcmsCustomCabsCompanion
    extends UpdateCompanion<TributIcmsCustomCab> {
  final Value<int?> id;
  final Value<String?> descricao;
  final Value<String?> origemMercadoria;
  const TributIcmsCustomCabsCompanion({
    this.id = const Value.absent(),
    this.descricao = const Value.absent(),
    this.origemMercadoria = const Value.absent(),
  });
  TributIcmsCustomCabsCompanion.insert({
    this.id = const Value.absent(),
    this.descricao = const Value.absent(),
    this.origemMercadoria = const Value.absent(),
  });
  static Insertable<TributIcmsCustomCab> custom({
    Expression<int>? id,
    Expression<String>? descricao,
    Expression<String>? origemMercadoria,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (descricao != null) 'DESCRICAO': descricao,
      if (origemMercadoria != null) 'ORIGEM_MERCADORIA': origemMercadoria,
    });
  }

  TributIcmsCustomCabsCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? descricao,
      Value<String?>? origemMercadoria}) {
    return TributIcmsCustomCabsCompanion(
      id: id ?? this.id,
      descricao: descricao ?? this.descricao,
      origemMercadoria: origemMercadoria ?? this.origemMercadoria,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (origemMercadoria.present) {
      map['ORIGEM_MERCADORIA'] = Variable<String>(origemMercadoria.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributIcmsCustomCabsCompanion(')
          ..write('id: $id, ')
          ..write('descricao: $descricao, ')
          ..write('origemMercadoria: $origemMercadoria')
          ..write(')'))
        .toString();
  }
}

class $TributIcmsCustomCabsTable extends TributIcmsCustomCabs
    with TableInfo<$TributIcmsCustomCabsTable, TributIcmsCustomCab> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributIcmsCustomCabsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _origemMercadoriaMeta =
      const VerificationMeta('origemMercadoria');
  @override
  late final GeneratedColumn<String> origemMercadoria =
      GeneratedColumn<String>('ORIGEM_MERCADORIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, descricao, origemMercadoria];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_ICMS_CUSTOM_CAB';
  @override
  String get actualTableName => 'TRIBUT_ICMS_CUSTOM_CAB';
  @override
  VerificationContext validateIntegrity(
      Insertable<TributIcmsCustomCab> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('ORIGEM_MERCADORIA')) {
      context.handle(
          _origemMercadoriaMeta,
          origemMercadoria.isAcceptableOrUnknown(
              data['ORIGEM_MERCADORIA']!, _origemMercadoriaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributIcmsCustomCab map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributIcmsCustomCab.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributIcmsCustomCabsTable createAlias(String alias) {
    return $TributIcmsCustomCabsTable(attachedDatabase, alias);
  }
}

class TributIcmsCustomDet extends DataClass
    implements Insertable<TributIcmsCustomDet> {
  final int? id;
  final int? idTributIcmsCustomCab;
  final String? ufDestino;
  final int? cfop;
  final String? csosn;
  final String? cst;
  final String? modalidadeBc;
  final double? aliquota;
  final double? valorPauta;
  final double? valorPrecoMaximo;
  final double? mva;
  final double? porcentoBc;
  final String? modalidadeBcSt;
  final double? aliquotaInternaSt;
  final double? aliquotaInterestadualSt;
  final double? porcentoBcSt;
  final double? aliquotaIcmsSt;
  final double? valorPautaSt;
  final double? valorPrecoMaximoSt;
  TributIcmsCustomDet(
      {this.id,
      this.idTributIcmsCustomCab,
      this.ufDestino,
      this.cfop,
      this.csosn,
      this.cst,
      this.modalidadeBc,
      this.aliquota,
      this.valorPauta,
      this.valorPrecoMaximo,
      this.mva,
      this.porcentoBc,
      this.modalidadeBcSt,
      this.aliquotaInternaSt,
      this.aliquotaInterestadualSt,
      this.porcentoBcSt,
      this.aliquotaIcmsSt,
      this.valorPautaSt,
      this.valorPrecoMaximoSt});
  factory TributIcmsCustomDet.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributIcmsCustomDet(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idTributIcmsCustomCab: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_ICMS_CUSTOM_CAB']),
      ufDestino: ValueSqlType.stringType(data['${effectivePrefix}UF_DESTINO']),
      cfop: ValueSqlType.intType(data['${effectivePrefix}CFOP']),
      csosn: ValueSqlType.stringType(data['${effectivePrefix}CSOSN']),
      cst: ValueSqlType.stringType(data['${effectivePrefix}CST']),
      modalidadeBc: ValueSqlType.stringType(data['${effectivePrefix}MODALIDADE_BC']),
      aliquota: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA']),
      valorPauta: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PAUTA']),
      valorPrecoMaximo: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
      mva: ValueSqlType.doubleType(data['${effectivePrefix}MVA']),
      porcentoBc: ValueSqlType.doubleType(data['${effectivePrefix}PORCENTO_BC']),
      modalidadeBcSt: ValueSqlType.stringType(data['${effectivePrefix}MODALIDADE_BC_ST']),
      aliquotaInternaSt: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_INTERNA_ST']),
      aliquotaInterestadualSt: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_INTERESTADUAL_ST']),
      porcentoBcSt: ValueSqlType.doubleType(data['${effectivePrefix}PORCENTO_BC_ST']),
      aliquotaIcmsSt: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_ICMS_ST']),
      valorPautaSt: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PAUTA_ST']),
      valorPrecoMaximoSt: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PRECO_MAXIMO_ST']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idTributIcmsCustomCab != null) {
      map['ID_TRIBUT_ICMS_CUSTOM_CAB'] = Variable<int>(idTributIcmsCustomCab);
    }
    if (!nullToAbsent || ufDestino != null) {
      map['UF_DESTINO'] = Variable<String>(ufDestino);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || csosn != null) {
      map['CSOSN'] = Variable<String>(csosn);
    }
    if (!nullToAbsent || cst != null) {
      map['CST'] = Variable<String>(cst);
    }
    if (!nullToAbsent || modalidadeBc != null) {
      map['MODALIDADE_BC'] = Variable<String>(modalidadeBc);
    }
    if (!nullToAbsent || aliquota != null) {
      map['ALIQUOTA'] = Variable<double>(aliquota);
    }
    if (!nullToAbsent || valorPauta != null) {
      map['VALOR_PAUTA'] = Variable<double>(valorPauta);
    }
    if (!nullToAbsent || valorPrecoMaximo != null) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo);
    }
    if (!nullToAbsent || mva != null) {
      map['MVA'] = Variable<double>(mva);
    }
    if (!nullToAbsent || porcentoBc != null) {
      map['PORCENTO_BC'] = Variable<double>(porcentoBc);
    }
    if (!nullToAbsent || modalidadeBcSt != null) {
      map['MODALIDADE_BC_ST'] = Variable<String>(modalidadeBcSt);
    }
    if (!nullToAbsent || aliquotaInternaSt != null) {
      map['ALIQUOTA_INTERNA_ST'] = Variable<double>(aliquotaInternaSt);
    }
    if (!nullToAbsent || aliquotaInterestadualSt != null) {
      map['ALIQUOTA_INTERESTADUAL_ST'] =
          Variable<double>(aliquotaInterestadualSt);
    }
    if (!nullToAbsent || porcentoBcSt != null) {
      map['PORCENTO_BC_ST'] = Variable<double>(porcentoBcSt);
    }
    if (!nullToAbsent || aliquotaIcmsSt != null) {
      map['ALIQUOTA_ICMS_ST'] = Variable<double>(aliquotaIcmsSt);
    }
    if (!nullToAbsent || valorPautaSt != null) {
      map['VALOR_PAUTA_ST'] = Variable<double>(valorPautaSt);
    }
    if (!nullToAbsent || valorPrecoMaximoSt != null) {
      map['VALOR_PRECO_MAXIMO_ST'] = Variable<double>(valorPrecoMaximoSt);
    }
    return map;
  }

  TributIcmsCustomDetsCompanion toCompanion(bool nullToAbsent) {
    return TributIcmsCustomDetsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idTributIcmsCustomCab: idTributIcmsCustomCab == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributIcmsCustomCab),
      ufDestino: ufDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(ufDestino),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      csosn:
          csosn == null && nullToAbsent ? const Value.absent() : Value(csosn),
      cst: cst == null && nullToAbsent ? const Value.absent() : Value(cst),
      modalidadeBc: modalidadeBc == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBc),
      aliquota: aliquota == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquota),
      valorPauta: valorPauta == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPauta),
      valorPrecoMaximo: valorPrecoMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPrecoMaximo),
      mva: mva == null && nullToAbsent ? const Value.absent() : Value(mva),
      porcentoBc: porcentoBc == null && nullToAbsent
          ? const Value.absent()
          : Value(porcentoBc),
      modalidadeBcSt: modalidadeBcSt == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBcSt),
      aliquotaInternaSt: aliquotaInternaSt == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaInternaSt),
      aliquotaInterestadualSt: aliquotaInterestadualSt == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaInterestadualSt),
      porcentoBcSt: porcentoBcSt == null && nullToAbsent
          ? const Value.absent()
          : Value(porcentoBcSt),
      aliquotaIcmsSt: aliquotaIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaIcmsSt),
      valorPautaSt: valorPautaSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPautaSt),
      valorPrecoMaximoSt: valorPrecoMaximoSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPrecoMaximoSt),
    );
  }

  factory TributIcmsCustomDet.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributIcmsCustomDet(
      id: serializer.fromJson<int?>(json['id']),
      idTributIcmsCustomCab:
          serializer.fromJson<int?>(json['idTributIcmsCustomCab']),
      ufDestino: serializer.fromJson<String?>(json['ufDestino']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      csosn: serializer.fromJson<String?>(json['csosn']),
      cst: serializer.fromJson<String?>(json['cst']),
      modalidadeBc: serializer.fromJson<String?>(json['modalidadeBc']),
      aliquota: serializer.fromJson<double?>(json['aliquota']),
      valorPauta: serializer.fromJson<double?>(json['valorPauta']),
      valorPrecoMaximo: serializer.fromJson<double?>(json['valorPrecoMaximo']),
      mva: serializer.fromJson<double?>(json['mva']),
      porcentoBc: serializer.fromJson<double?>(json['porcentoBc']),
      modalidadeBcSt: serializer.fromJson<String?>(json['modalidadeBcSt']),
      aliquotaInternaSt:
          serializer.fromJson<double?>(json['aliquotaInternaSt']),
      aliquotaInterestadualSt:
          serializer.fromJson<double?>(json['aliquotaInterestadualSt']),
      porcentoBcSt: serializer.fromJson<double?>(json['porcentoBcSt']),
      aliquotaIcmsSt: serializer.fromJson<double?>(json['aliquotaIcmsSt']),
      valorPautaSt: serializer.fromJson<double?>(json['valorPautaSt']),
      valorPrecoMaximoSt:
          serializer.fromJson<double?>(json['valorPrecoMaximoSt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idTributIcmsCustomCab': serializer.toJson<int?>(idTributIcmsCustomCab),
      'ufDestino': serializer.toJson<String?>(ufDestino),
      'cfop': serializer.toJson<int?>(cfop),
      'csosn': serializer.toJson<String?>(csosn),
      'cst': serializer.toJson<String?>(cst),
      'modalidadeBc': serializer.toJson<String?>(modalidadeBc),
      'aliquota': serializer.toJson<double?>(aliquota),
      'valorPauta': serializer.toJson<double?>(valorPauta),
      'valorPrecoMaximo': serializer.toJson<double?>(valorPrecoMaximo),
      'mva': serializer.toJson<double?>(mva),
      'porcentoBc': serializer.toJson<double?>(porcentoBc),
      'modalidadeBcSt': serializer.toJson<String?>(modalidadeBcSt),
      'aliquotaInternaSt': serializer.toJson<double?>(aliquotaInternaSt),
      'aliquotaInterestadualSt':
          serializer.toJson<double?>(aliquotaInterestadualSt),
      'porcentoBcSt': serializer.toJson<double?>(porcentoBcSt),
      'aliquotaIcmsSt': serializer.toJson<double?>(aliquotaIcmsSt),
      'valorPautaSt': serializer.toJson<double?>(valorPautaSt),
      'valorPrecoMaximoSt': serializer.toJson<double?>(valorPrecoMaximoSt),
    };
  }

  TributIcmsCustomDet copyWith(
          {int? id,
          int? idTributIcmsCustomCab,
          String? ufDestino,
          int? cfop,
          String? csosn,
          String? cst,
          String? modalidadeBc,
          double? aliquota,
          double? valorPauta,
          double? valorPrecoMaximo,
          double? mva,
          double? porcentoBc,
          String? modalidadeBcSt,
          double? aliquotaInternaSt,
          double? aliquotaInterestadualSt,
          double? porcentoBcSt,
          double? aliquotaIcmsSt,
          double? valorPautaSt,
          double? valorPrecoMaximoSt}) =>
      TributIcmsCustomDet(
        id: id ?? this.id,
        idTributIcmsCustomCab:
            idTributIcmsCustomCab ?? this.idTributIcmsCustomCab,
        ufDestino: ufDestino ?? this.ufDestino,
        cfop: cfop ?? this.cfop,
        csosn: csosn ?? this.csosn,
        cst: cst ?? this.cst,
        modalidadeBc: modalidadeBc ?? this.modalidadeBc,
        aliquota: aliquota ?? this.aliquota,
        valorPauta: valorPauta ?? this.valorPauta,
        valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
        mva: mva ?? this.mva,
        porcentoBc: porcentoBc ?? this.porcentoBc,
        modalidadeBcSt: modalidadeBcSt ?? this.modalidadeBcSt,
        aliquotaInternaSt: aliquotaInternaSt ?? this.aliquotaInternaSt,
        aliquotaInterestadualSt:
            aliquotaInterestadualSt ?? this.aliquotaInterestadualSt,
        porcentoBcSt: porcentoBcSt ?? this.porcentoBcSt,
        aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
        valorPautaSt: valorPautaSt ?? this.valorPautaSt,
        valorPrecoMaximoSt: valorPrecoMaximoSt ?? this.valorPrecoMaximoSt,
      );
  @override
  String toString() {
    return (StringBuffer('TributIcmsCustomDet(')
          ..write('id: $id, ')
          ..write('idTributIcmsCustomCab: $idTributIcmsCustomCab, ')
          ..write('ufDestino: $ufDestino, ')
          ..write('cfop: $cfop, ')
          ..write('csosn: $csosn, ')
          ..write('cst: $cst, ')
          ..write('modalidadeBc: $modalidadeBc, ')
          ..write('aliquota: $aliquota, ')
          ..write('valorPauta: $valorPauta, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('mva: $mva, ')
          ..write('porcentoBc: $porcentoBc, ')
          ..write('modalidadeBcSt: $modalidadeBcSt, ')
          ..write('aliquotaInternaSt: $aliquotaInternaSt, ')
          ..write('aliquotaInterestadualSt: $aliquotaInterestadualSt, ')
          ..write('porcentoBcSt: $porcentoBcSt, ')
          ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
          ..write('valorPautaSt: $valorPautaSt, ')
          ..write('valorPrecoMaximoSt: $valorPrecoMaximoSt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idTributIcmsCustomCab,
      ufDestino,
      cfop,
      csosn,
      cst,
      modalidadeBc,
      aliquota,
      valorPauta,
      valorPrecoMaximo,
      mva,
      porcentoBc,
      modalidadeBcSt,
      aliquotaInternaSt,
      aliquotaInterestadualSt,
      porcentoBcSt,
      aliquotaIcmsSt,
      valorPautaSt,
      valorPrecoMaximoSt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributIcmsCustomDet &&
          other.id == this.id &&
          other.idTributIcmsCustomCab == this.idTributIcmsCustomCab &&
          other.ufDestino == this.ufDestino &&
          other.cfop == this.cfop &&
          other.csosn == this.csosn &&
          other.cst == this.cst &&
          other.modalidadeBc == this.modalidadeBc &&
          other.aliquota == this.aliquota &&
          other.valorPauta == this.valorPauta &&
          other.valorPrecoMaximo == this.valorPrecoMaximo &&
          other.mva == this.mva &&
          other.porcentoBc == this.porcentoBc &&
          other.modalidadeBcSt == this.modalidadeBcSt &&
          other.aliquotaInternaSt == this.aliquotaInternaSt &&
          other.aliquotaInterestadualSt == this.aliquotaInterestadualSt &&
          other.porcentoBcSt == this.porcentoBcSt &&
          other.aliquotaIcmsSt == this.aliquotaIcmsSt &&
          other.valorPautaSt == this.valorPautaSt &&
          other.valorPrecoMaximoSt == this.valorPrecoMaximoSt);
}

class TributIcmsCustomDetsCompanion
    extends UpdateCompanion<TributIcmsCustomDet> {
  final Value<int?> id;
  final Value<int?> idTributIcmsCustomCab;
  final Value<String?> ufDestino;
  final Value<int?> cfop;
  final Value<String?> csosn;
  final Value<String?> cst;
  final Value<String?> modalidadeBc;
  final Value<double?> aliquota;
  final Value<double?> valorPauta;
  final Value<double?> valorPrecoMaximo;
  final Value<double?> mva;
  final Value<double?> porcentoBc;
  final Value<String?> modalidadeBcSt;
  final Value<double?> aliquotaInternaSt;
  final Value<double?> aliquotaInterestadualSt;
  final Value<double?> porcentoBcSt;
  final Value<double?> aliquotaIcmsSt;
  final Value<double?> valorPautaSt;
  final Value<double?> valorPrecoMaximoSt;
  const TributIcmsCustomDetsCompanion({
    this.id = const Value.absent(),
    this.idTributIcmsCustomCab = const Value.absent(),
    this.ufDestino = const Value.absent(),
    this.cfop = const Value.absent(),
    this.csosn = const Value.absent(),
    this.cst = const Value.absent(),
    this.modalidadeBc = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.valorPauta = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.mva = const Value.absent(),
    this.porcentoBc = const Value.absent(),
    this.modalidadeBcSt = const Value.absent(),
    this.aliquotaInternaSt = const Value.absent(),
    this.aliquotaInterestadualSt = const Value.absent(),
    this.porcentoBcSt = const Value.absent(),
    this.aliquotaIcmsSt = const Value.absent(),
    this.valorPautaSt = const Value.absent(),
    this.valorPrecoMaximoSt = const Value.absent(),
  });
  TributIcmsCustomDetsCompanion.insert({
    this.id = const Value.absent(),
    this.idTributIcmsCustomCab = const Value.absent(),
    this.ufDestino = const Value.absent(),
    this.cfop = const Value.absent(),
    this.csosn = const Value.absent(),
    this.cst = const Value.absent(),
    this.modalidadeBc = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.valorPauta = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.mva = const Value.absent(),
    this.porcentoBc = const Value.absent(),
    this.modalidadeBcSt = const Value.absent(),
    this.aliquotaInternaSt = const Value.absent(),
    this.aliquotaInterestadualSt = const Value.absent(),
    this.porcentoBcSt = const Value.absent(),
    this.aliquotaIcmsSt = const Value.absent(),
    this.valorPautaSt = const Value.absent(),
    this.valorPrecoMaximoSt = const Value.absent(),
  });
  static Insertable<TributIcmsCustomDet> custom({
    Expression<int>? id,
    Expression<int>? idTributIcmsCustomCab,
    Expression<String>? ufDestino,
    Expression<int>? cfop,
    Expression<String>? csosn,
    Expression<String>? cst,
    Expression<String>? modalidadeBc,
    Expression<double>? aliquota,
    Expression<double>? valorPauta,
    Expression<double>? valorPrecoMaximo,
    Expression<double>? mva,
    Expression<double>? porcentoBc,
    Expression<String>? modalidadeBcSt,
    Expression<double>? aliquotaInternaSt,
    Expression<double>? aliquotaInterestadualSt,
    Expression<double>? porcentoBcSt,
    Expression<double>? aliquotaIcmsSt,
    Expression<double>? valorPautaSt,
    Expression<double>? valorPrecoMaximoSt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idTributIcmsCustomCab != null)
        'ID_TRIBUT_ICMS_CUSTOM_CAB': idTributIcmsCustomCab,
      if (ufDestino != null) 'UF_DESTINO': ufDestino,
      if (cfop != null) 'CFOP': cfop,
      if (csosn != null) 'CSOSN': csosn,
      if (cst != null) 'CST': cst,
      if (modalidadeBc != null) 'MODALIDADE_BC': modalidadeBc,
      if (aliquota != null) 'ALIQUOTA': aliquota,
      if (valorPauta != null) 'VALOR_PAUTA': valorPauta,
      if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
      if (mva != null) 'MVA': mva,
      if (porcentoBc != null) 'PORCENTO_BC': porcentoBc,
      if (modalidadeBcSt != null) 'MODALIDADE_BC_ST': modalidadeBcSt,
      if (aliquotaInternaSt != null) 'ALIQUOTA_INTERNA_ST': aliquotaInternaSt,
      if (aliquotaInterestadualSt != null)
        'ALIQUOTA_INTERESTADUAL_ST': aliquotaInterestadualSt,
      if (porcentoBcSt != null) 'PORCENTO_BC_ST': porcentoBcSt,
      if (aliquotaIcmsSt != null) 'ALIQUOTA_ICMS_ST': aliquotaIcmsSt,
      if (valorPautaSt != null) 'VALOR_PAUTA_ST': valorPautaSt,
      if (valorPrecoMaximoSt != null)
        'VALOR_PRECO_MAXIMO_ST': valorPrecoMaximoSt,
    });
  }

  TributIcmsCustomDetsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idTributIcmsCustomCab,
      Value<String?>? ufDestino,
      Value<int?>? cfop,
      Value<String?>? csosn,
      Value<String?>? cst,
      Value<String?>? modalidadeBc,
      Value<double?>? aliquota,
      Value<double?>? valorPauta,
      Value<double?>? valorPrecoMaximo,
      Value<double?>? mva,
      Value<double?>? porcentoBc,
      Value<String?>? modalidadeBcSt,
      Value<double?>? aliquotaInternaSt,
      Value<double?>? aliquotaInterestadualSt,
      Value<double?>? porcentoBcSt,
      Value<double?>? aliquotaIcmsSt,
      Value<double?>? valorPautaSt,
      Value<double?>? valorPrecoMaximoSt}) {
    return TributIcmsCustomDetsCompanion(
      id: id ?? this.id,
      idTributIcmsCustomCab:
          idTributIcmsCustomCab ?? this.idTributIcmsCustomCab,
      ufDestino: ufDestino ?? this.ufDestino,
      cfop: cfop ?? this.cfop,
      csosn: csosn ?? this.csosn,
      cst: cst ?? this.cst,
      modalidadeBc: modalidadeBc ?? this.modalidadeBc,
      aliquota: aliquota ?? this.aliquota,
      valorPauta: valorPauta ?? this.valorPauta,
      valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
      mva: mva ?? this.mva,
      porcentoBc: porcentoBc ?? this.porcentoBc,
      modalidadeBcSt: modalidadeBcSt ?? this.modalidadeBcSt,
      aliquotaInternaSt: aliquotaInternaSt ?? this.aliquotaInternaSt,
      aliquotaInterestadualSt:
          aliquotaInterestadualSt ?? this.aliquotaInterestadualSt,
      porcentoBcSt: porcentoBcSt ?? this.porcentoBcSt,
      aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
      valorPautaSt: valorPautaSt ?? this.valorPautaSt,
      valorPrecoMaximoSt: valorPrecoMaximoSt ?? this.valorPrecoMaximoSt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idTributIcmsCustomCab.present) {
      map['ID_TRIBUT_ICMS_CUSTOM_CAB'] =
          Variable<int>(idTributIcmsCustomCab.value);
    }
    if (ufDestino.present) {
      map['UF_DESTINO'] = Variable<String>(ufDestino.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (csosn.present) {
      map['CSOSN'] = Variable<String>(csosn.value);
    }
    if (cst.present) {
      map['CST'] = Variable<String>(cst.value);
    }
    if (modalidadeBc.present) {
      map['MODALIDADE_BC'] = Variable<String>(modalidadeBc.value);
    }
    if (aliquota.present) {
      map['ALIQUOTA'] = Variable<double>(aliquota.value);
    }
    if (valorPauta.present) {
      map['VALOR_PAUTA'] = Variable<double>(valorPauta.value);
    }
    if (valorPrecoMaximo.present) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo.value);
    }
    if (mva.present) {
      map['MVA'] = Variable<double>(mva.value);
    }
    if (porcentoBc.present) {
      map['PORCENTO_BC'] = Variable<double>(porcentoBc.value);
    }
    if (modalidadeBcSt.present) {
      map['MODALIDADE_BC_ST'] = Variable<String>(modalidadeBcSt.value);
    }
    if (aliquotaInternaSt.present) {
      map['ALIQUOTA_INTERNA_ST'] = Variable<double>(aliquotaInternaSt.value);
    }
    if (aliquotaInterestadualSt.present) {
      map['ALIQUOTA_INTERESTADUAL_ST'] =
          Variable<double>(aliquotaInterestadualSt.value);
    }
    if (porcentoBcSt.present) {
      map['PORCENTO_BC_ST'] = Variable<double>(porcentoBcSt.value);
    }
    if (aliquotaIcmsSt.present) {
      map['ALIQUOTA_ICMS_ST'] = Variable<double>(aliquotaIcmsSt.value);
    }
    if (valorPautaSt.present) {
      map['VALOR_PAUTA_ST'] = Variable<double>(valorPautaSt.value);
    }
    if (valorPrecoMaximoSt.present) {
      map['VALOR_PRECO_MAXIMO_ST'] =
          Variable<double>(valorPrecoMaximoSt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributIcmsCustomDetsCompanion(')
          ..write('id: $id, ')
          ..write('idTributIcmsCustomCab: $idTributIcmsCustomCab, ')
          ..write('ufDestino: $ufDestino, ')
          ..write('cfop: $cfop, ')
          ..write('csosn: $csosn, ')
          ..write('cst: $cst, ')
          ..write('modalidadeBc: $modalidadeBc, ')
          ..write('aliquota: $aliquota, ')
          ..write('valorPauta: $valorPauta, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('mva: $mva, ')
          ..write('porcentoBc: $porcentoBc, ')
          ..write('modalidadeBcSt: $modalidadeBcSt, ')
          ..write('aliquotaInternaSt: $aliquotaInternaSt, ')
          ..write('aliquotaInterestadualSt: $aliquotaInterestadualSt, ')
          ..write('porcentoBcSt: $porcentoBcSt, ')
          ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
          ..write('valorPautaSt: $valorPautaSt, ')
          ..write('valorPrecoMaximoSt: $valorPrecoMaximoSt')
          ..write(')'))
        .toString();
  }
}

class $TributIcmsCustomDetsTable extends TributIcmsCustomDets
    with TableInfo<$TributIcmsCustomDetsTable, TributIcmsCustomDet> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributIcmsCustomDetsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idTributIcmsCustomCabMeta =
      const VerificationMeta('idTributIcmsCustomCab');
  @override
  late final GeneratedColumn<int> idTributIcmsCustomCab =
      GeneratedColumn<int>('ID_TRIBUT_ICMS_CUSTOM_CAB', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES TRIBUT_ICMS_CUSTOM_CAB(ID)');
  final VerificationMeta _ufDestinoMeta = const VerificationMeta('ufDestino');
  @override
  late final GeneratedColumn<String> ufDestino = GeneratedColumn<String>(
      'UF_DESTINO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
      'CFOP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
  @override
  late final GeneratedColumn<String> csosn = GeneratedColumn<String>(
      'CSOSN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
      'CST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modalidadeBcMeta =
      const VerificationMeta('modalidadeBc');
  @override
  late final GeneratedColumn<String> modalidadeBc = GeneratedColumn<String>(
      'MODALIDADE_BC', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _aliquotaMeta = const VerificationMeta('aliquota');
  @override
  late final GeneratedColumn<double> aliquota = GeneratedColumn<double>(
      'ALIQUOTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPautaMeta = const VerificationMeta('valorPauta');
  @override
  late final GeneratedColumn<double> valorPauta = GeneratedColumn<double>(
      'VALOR_PAUTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPrecoMaximoMeta =
      const VerificationMeta('valorPrecoMaximo');
  @override
  late final GeneratedColumn<double> valorPrecoMaximo =
      GeneratedColumn<double>('VALOR_PRECO_MAXIMO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _mvaMeta = const VerificationMeta('mva');
  @override
  late final GeneratedColumn<double> mva = GeneratedColumn<double>(
      'MVA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _porcentoBcMeta = const VerificationMeta('porcentoBc');
  @override
  late final GeneratedColumn<double> porcentoBc = GeneratedColumn<double>(
      'PORCENTO_BC', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _modalidadeBcStMeta =
      const VerificationMeta('modalidadeBcSt');
  @override
  late final GeneratedColumn<String> modalidadeBcSt = GeneratedColumn<String>(
      'MODALIDADE_BC_ST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _aliquotaInternaStMeta =
      const VerificationMeta('aliquotaInternaSt');
  @override
  late final GeneratedColumn<double> aliquotaInternaSt =
      GeneratedColumn<double>('ALIQUOTA_INTERNA_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaInterestadualStMeta =
      const VerificationMeta('aliquotaInterestadualSt');
  @override
  late final GeneratedColumn<double> aliquotaInterestadualSt =
      GeneratedColumn<double>('ALIQUOTA_INTERESTADUAL_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _porcentoBcStMeta =
      const VerificationMeta('porcentoBcSt');
  @override
  late final GeneratedColumn<double> porcentoBcSt = GeneratedColumn<double>(
      'PORCENTO_BC_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaIcmsStMeta =
      const VerificationMeta('aliquotaIcmsSt');
  @override
  late final GeneratedColumn<double> aliquotaIcmsSt = GeneratedColumn<double>(
      'ALIQUOTA_ICMS_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPautaStMeta =
      const VerificationMeta('valorPautaSt');
  @override
  late final GeneratedColumn<double> valorPautaSt = GeneratedColumn<double>(
      'VALOR_PAUTA_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPrecoMaximoStMeta =
      const VerificationMeta('valorPrecoMaximoSt');
  @override
  late final GeneratedColumn<double> valorPrecoMaximoSt =
      GeneratedColumn<double>('VALOR_PRECO_MAXIMO_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idTributIcmsCustomCab,
        ufDestino,
        cfop,
        csosn,
        cst,
        modalidadeBc,
        aliquota,
        valorPauta,
        valorPrecoMaximo,
        mva,
        porcentoBc,
        modalidadeBcSt,
        aliquotaInternaSt,
        aliquotaInterestadualSt,
        porcentoBcSt,
        aliquotaIcmsSt,
        valorPautaSt,
        valorPrecoMaximoSt
      ];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_ICMS_CUSTOM_DET';
  @override
  String get actualTableName => 'TRIBUT_ICMS_CUSTOM_DET';
  @override
  VerificationContext validateIntegrity(
      Insertable<TributIcmsCustomDet> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_TRIBUT_ICMS_CUSTOM_CAB')) {
      context.handle(
          _idTributIcmsCustomCabMeta,
          idTributIcmsCustomCab.isAcceptableOrUnknown(
              data['ID_TRIBUT_ICMS_CUSTOM_CAB']!, _idTributIcmsCustomCabMeta));
    }
    if (data.containsKey('UF_DESTINO')) {
      context.handle(_ufDestinoMeta,
          ufDestino.isAcceptableOrUnknown(data['UF_DESTINO']!, _ufDestinoMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
    }
    if (data.containsKey('CSOSN')) {
      context.handle(
          _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
    }
    if (data.containsKey('CST')) {
      context.handle(
          _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
    }
    if (data.containsKey('MODALIDADE_BC')) {
      context.handle(
          _modalidadeBcMeta,
          modalidadeBc.isAcceptableOrUnknown(
              data['MODALIDADE_BC']!, _modalidadeBcMeta));
    }
    if (data.containsKey('ALIQUOTA')) {
      context.handle(_aliquotaMeta,
          aliquota.isAcceptableOrUnknown(data['ALIQUOTA']!, _aliquotaMeta));
    }
    if (data.containsKey('VALOR_PAUTA')) {
      context.handle(
          _valorPautaMeta,
          valorPauta.isAcceptableOrUnknown(
              data['VALOR_PAUTA']!, _valorPautaMeta));
    }
    if (data.containsKey('VALOR_PRECO_MAXIMO')) {
      context.handle(
          _valorPrecoMaximoMeta,
          valorPrecoMaximo.isAcceptableOrUnknown(
              data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
    }
    if (data.containsKey('MVA')) {
      context.handle(
          _mvaMeta, mva.isAcceptableOrUnknown(data['MVA']!, _mvaMeta));
    }
    if (data.containsKey('PORCENTO_BC')) {
      context.handle(
          _porcentoBcMeta,
          porcentoBc.isAcceptableOrUnknown(
              data['PORCENTO_BC']!, _porcentoBcMeta));
    }
    if (data.containsKey('MODALIDADE_BC_ST')) {
      context.handle(
          _modalidadeBcStMeta,
          modalidadeBcSt.isAcceptableOrUnknown(
              data['MODALIDADE_BC_ST']!, _modalidadeBcStMeta));
    }
    if (data.containsKey('ALIQUOTA_INTERNA_ST')) {
      context.handle(
          _aliquotaInternaStMeta,
          aliquotaInternaSt.isAcceptableOrUnknown(
              data['ALIQUOTA_INTERNA_ST']!, _aliquotaInternaStMeta));
    }
    if (data.containsKey('ALIQUOTA_INTERESTADUAL_ST')) {
      context.handle(
          _aliquotaInterestadualStMeta,
          aliquotaInterestadualSt.isAcceptableOrUnknown(
              data['ALIQUOTA_INTERESTADUAL_ST']!,
              _aliquotaInterestadualStMeta));
    }
    if (data.containsKey('PORCENTO_BC_ST')) {
      context.handle(
          _porcentoBcStMeta,
          porcentoBcSt.isAcceptableOrUnknown(
              data['PORCENTO_BC_ST']!, _porcentoBcStMeta));
    }
    if (data.containsKey('ALIQUOTA_ICMS_ST')) {
      context.handle(
          _aliquotaIcmsStMeta,
          aliquotaIcmsSt.isAcceptableOrUnknown(
              data['ALIQUOTA_ICMS_ST']!, _aliquotaIcmsStMeta));
    }
    if (data.containsKey('VALOR_PAUTA_ST')) {
      context.handle(
          _valorPautaStMeta,
          valorPautaSt.isAcceptableOrUnknown(
              data['VALOR_PAUTA_ST']!, _valorPautaStMeta));
    }
    if (data.containsKey('VALOR_PRECO_MAXIMO_ST')) {
      context.handle(
          _valorPrecoMaximoStMeta,
          valorPrecoMaximoSt.isAcceptableOrUnknown(
              data['VALOR_PRECO_MAXIMO_ST']!, _valorPrecoMaximoStMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributIcmsCustomDet map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributIcmsCustomDet.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributIcmsCustomDetsTable createAlias(String alias) {
    return $TributIcmsCustomDetsTable(attachedDatabase, alias);
  }
}

class TributIcmsUf extends DataClass implements Insertable<TributIcmsUf> {
  final int? id;
  final int? idTributConfiguraOfGt;
  final String? ufDestino;
  final int? cfop;
  final String? csosn;
  final String? cst;
  final String? modalidadeBc;
  final double? aliquota;
  final double? valorPauta;
  final double? valorPrecoMaximo;
  final double? mva;
  final double? porcentoBc;
  final String? modalidadeBcSt;
  final double? aliquotaInternaSt;
  final double? aliquotaInterestadualSt;
  final double? porcentoBcSt;
  final double? aliquotaIcmsSt;
  final double? valorPautaSt;
  final double? valorPrecoMaximoSt;
  TributIcmsUf(
      {this.id,
      this.idTributConfiguraOfGt,
      this.ufDestino,
      this.cfop,
      this.csosn,
      this.cst,
      this.modalidadeBc,
      this.aliquota,
      this.valorPauta,
      this.valorPrecoMaximo,
      this.mva,
      this.porcentoBc,
      this.modalidadeBcSt,
      this.aliquotaInternaSt,
      this.aliquotaInterestadualSt,
      this.porcentoBcSt,
      this.aliquotaIcmsSt,
      this.valorPautaSt,
      this.valorPrecoMaximoSt});
  factory TributIcmsUf.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributIcmsUf(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idTributConfiguraOfGt: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_CONFIGURA_OF_GT']),
      ufDestino: ValueSqlType.stringType(data['${effectivePrefix}UF_DESTINO']),
      cfop: ValueSqlType.intType(data['${effectivePrefix}CFOP']),
      csosn: ValueSqlType.stringType(data['${effectivePrefix}CSOSN']),
      cst: ValueSqlType.stringType(data['${effectivePrefix}CST']),
      modalidadeBc: ValueSqlType.stringType(data['${effectivePrefix}MODALIDADE_BC']),
      aliquota: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA']),
      valorPauta: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PAUTA']),
      valorPrecoMaximo: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
      mva: ValueSqlType.doubleType(data['${effectivePrefix}MVA']),
      porcentoBc: ValueSqlType.doubleType(data['${effectivePrefix}PORCENTO_BC']),
      modalidadeBcSt: ValueSqlType.stringType(data['${effectivePrefix}MODALIDADE_BC_ST']),
      aliquotaInternaSt: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_INTERNA_ST']),
      aliquotaInterestadualSt: ValueSqlType.doubleType(
          data['${effectivePrefix}ALIQUOTA_INTERESTADUAL_ST']),
      porcentoBcSt: ValueSqlType.doubleType(data['${effectivePrefix}PORCENTO_BC_ST']),
      aliquotaIcmsSt: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_ICMS_ST']),
      valorPautaSt: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PAUTA_ST']),
      valorPrecoMaximoSt: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PRECO_MAXIMO_ST']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idTributConfiguraOfGt != null) {
      map['ID_TRIBUT_CONFIGURA_OF_GT'] = Variable<int>(idTributConfiguraOfGt);
    }
    if (!nullToAbsent || ufDestino != null) {
      map['UF_DESTINO'] = Variable<String>(ufDestino);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || csosn != null) {
      map['CSOSN'] = Variable<String>(csosn);
    }
    if (!nullToAbsent || cst != null) {
      map['CST'] = Variable<String>(cst);
    }
    if (!nullToAbsent || modalidadeBc != null) {
      map['MODALIDADE_BC'] = Variable<String>(modalidadeBc);
    }
    if (!nullToAbsent || aliquota != null) {
      map['ALIQUOTA'] = Variable<double>(aliquota);
    }
    if (!nullToAbsent || valorPauta != null) {
      map['VALOR_PAUTA'] = Variable<double>(valorPauta);
    }
    if (!nullToAbsent || valorPrecoMaximo != null) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo);
    }
    if (!nullToAbsent || mva != null) {
      map['MVA'] = Variable<double>(mva);
    }
    if (!nullToAbsent || porcentoBc != null) {
      map['PORCENTO_BC'] = Variable<double>(porcentoBc);
    }
    if (!nullToAbsent || modalidadeBcSt != null) {
      map['MODALIDADE_BC_ST'] = Variable<String>(modalidadeBcSt);
    }
    if (!nullToAbsent || aliquotaInternaSt != null) {
      map['ALIQUOTA_INTERNA_ST'] = Variable<double>(aliquotaInternaSt);
    }
    if (!nullToAbsent || aliquotaInterestadualSt != null) {
      map['ALIQUOTA_INTERESTADUAL_ST'] =
          Variable<double>(aliquotaInterestadualSt);
    }
    if (!nullToAbsent || porcentoBcSt != null) {
      map['PORCENTO_BC_ST'] = Variable<double>(porcentoBcSt);
    }
    if (!nullToAbsent || aliquotaIcmsSt != null) {
      map['ALIQUOTA_ICMS_ST'] = Variable<double>(aliquotaIcmsSt);
    }
    if (!nullToAbsent || valorPautaSt != null) {
      map['VALOR_PAUTA_ST'] = Variable<double>(valorPautaSt);
    }
    if (!nullToAbsent || valorPrecoMaximoSt != null) {
      map['VALOR_PRECO_MAXIMO_ST'] = Variable<double>(valorPrecoMaximoSt);
    }
    return map;
  }

  TributIcmsUfsCompanion toCompanion(bool nullToAbsent) {
    return TributIcmsUfsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idTributConfiguraOfGt: idTributConfiguraOfGt == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributConfiguraOfGt),
      ufDestino: ufDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(ufDestino),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      csosn:
          csosn == null && nullToAbsent ? const Value.absent() : Value(csosn),
      cst: cst == null && nullToAbsent ? const Value.absent() : Value(cst),
      modalidadeBc: modalidadeBc == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBc),
      aliquota: aliquota == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquota),
      valorPauta: valorPauta == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPauta),
      valorPrecoMaximo: valorPrecoMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPrecoMaximo),
      mva: mva == null && nullToAbsent ? const Value.absent() : Value(mva),
      porcentoBc: porcentoBc == null && nullToAbsent
          ? const Value.absent()
          : Value(porcentoBc),
      modalidadeBcSt: modalidadeBcSt == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBcSt),
      aliquotaInternaSt: aliquotaInternaSt == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaInternaSt),
      aliquotaInterestadualSt: aliquotaInterestadualSt == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaInterestadualSt),
      porcentoBcSt: porcentoBcSt == null && nullToAbsent
          ? const Value.absent()
          : Value(porcentoBcSt),
      aliquotaIcmsSt: aliquotaIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaIcmsSt),
      valorPautaSt: valorPautaSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPautaSt),
      valorPrecoMaximoSt: valorPrecoMaximoSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPrecoMaximoSt),
    );
  }

  factory TributIcmsUf.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributIcmsUf(
      id: serializer.fromJson<int?>(json['id']),
      idTributConfiguraOfGt:
          serializer.fromJson<int?>(json['idTributConfiguraOfGt']),
      ufDestino: serializer.fromJson<String?>(json['ufDestino']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      csosn: serializer.fromJson<String?>(json['csosn']),
      cst: serializer.fromJson<String?>(json['cst']),
      modalidadeBc: serializer.fromJson<String?>(json['modalidadeBc']),
      aliquota: serializer.fromJson<double?>(json['aliquota']),
      valorPauta: serializer.fromJson<double?>(json['valorPauta']),
      valorPrecoMaximo: serializer.fromJson<double?>(json['valorPrecoMaximo']),
      mva: serializer.fromJson<double?>(json['mva']),
      porcentoBc: serializer.fromJson<double?>(json['porcentoBc']),
      modalidadeBcSt: serializer.fromJson<String?>(json['modalidadeBcSt']),
      aliquotaInternaSt:
          serializer.fromJson<double?>(json['aliquotaInternaSt']),
      aliquotaInterestadualSt:
          serializer.fromJson<double?>(json['aliquotaInterestadualSt']),
      porcentoBcSt: serializer.fromJson<double?>(json['porcentoBcSt']),
      aliquotaIcmsSt: serializer.fromJson<double?>(json['aliquotaIcmsSt']),
      valorPautaSt: serializer.fromJson<double?>(json['valorPautaSt']),
      valorPrecoMaximoSt:
          serializer.fromJson<double?>(json['valorPrecoMaximoSt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idTributConfiguraOfGt': serializer.toJson<int?>(idTributConfiguraOfGt),
      'ufDestino': serializer.toJson<String?>(ufDestino),
      'cfop': serializer.toJson<int?>(cfop),
      'csosn': serializer.toJson<String?>(csosn),
      'cst': serializer.toJson<String?>(cst),
      'modalidadeBc': serializer.toJson<String?>(modalidadeBc),
      'aliquota': serializer.toJson<double?>(aliquota),
      'valorPauta': serializer.toJson<double?>(valorPauta),
      'valorPrecoMaximo': serializer.toJson<double?>(valorPrecoMaximo),
      'mva': serializer.toJson<double?>(mva),
      'porcentoBc': serializer.toJson<double?>(porcentoBc),
      'modalidadeBcSt': serializer.toJson<String?>(modalidadeBcSt),
      'aliquotaInternaSt': serializer.toJson<double?>(aliquotaInternaSt),
      'aliquotaInterestadualSt':
          serializer.toJson<double?>(aliquotaInterestadualSt),
      'porcentoBcSt': serializer.toJson<double?>(porcentoBcSt),
      'aliquotaIcmsSt': serializer.toJson<double?>(aliquotaIcmsSt),
      'valorPautaSt': serializer.toJson<double?>(valorPautaSt),
      'valorPrecoMaximoSt': serializer.toJson<double?>(valorPrecoMaximoSt),
    };
  }

  TributIcmsUf copyWith(
          {int? id,
          int? idTributConfiguraOfGt,
          String? ufDestino,
          int? cfop,
          String? csosn,
          String? cst,
          String? modalidadeBc,
          double? aliquota,
          double? valorPauta,
          double? valorPrecoMaximo,
          double? mva,
          double? porcentoBc,
          String? modalidadeBcSt,
          double? aliquotaInternaSt,
          double? aliquotaInterestadualSt,
          double? porcentoBcSt,
          double? aliquotaIcmsSt,
          double? valorPautaSt,
          double? valorPrecoMaximoSt}) =>
      TributIcmsUf(
        id: id ?? this.id,
        idTributConfiguraOfGt:
            idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
        ufDestino: ufDestino ?? this.ufDestino,
        cfop: cfop ?? this.cfop,
        csosn: csosn ?? this.csosn,
        cst: cst ?? this.cst,
        modalidadeBc: modalidadeBc ?? this.modalidadeBc,
        aliquota: aliquota ?? this.aliquota,
        valorPauta: valorPauta ?? this.valorPauta,
        valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
        mva: mva ?? this.mva,
        porcentoBc: porcentoBc ?? this.porcentoBc,
        modalidadeBcSt: modalidadeBcSt ?? this.modalidadeBcSt,
        aliquotaInternaSt: aliquotaInternaSt ?? this.aliquotaInternaSt,
        aliquotaInterestadualSt:
            aliquotaInterestadualSt ?? this.aliquotaInterestadualSt,
        porcentoBcSt: porcentoBcSt ?? this.porcentoBcSt,
        aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
        valorPautaSt: valorPautaSt ?? this.valorPautaSt,
        valorPrecoMaximoSt: valorPrecoMaximoSt ?? this.valorPrecoMaximoSt,
      );
  @override
  String toString() {
    return (StringBuffer('TributIcmsUf(')
          ..write('id: $id, ')
          ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
          ..write('ufDestino: $ufDestino, ')
          ..write('cfop: $cfop, ')
          ..write('csosn: $csosn, ')
          ..write('cst: $cst, ')
          ..write('modalidadeBc: $modalidadeBc, ')
          ..write('aliquota: $aliquota, ')
          ..write('valorPauta: $valorPauta, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('mva: $mva, ')
          ..write('porcentoBc: $porcentoBc, ')
          ..write('modalidadeBcSt: $modalidadeBcSt, ')
          ..write('aliquotaInternaSt: $aliquotaInternaSt, ')
          ..write('aliquotaInterestadualSt: $aliquotaInterestadualSt, ')
          ..write('porcentoBcSt: $porcentoBcSt, ')
          ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
          ..write('valorPautaSt: $valorPautaSt, ')
          ..write('valorPrecoMaximoSt: $valorPrecoMaximoSt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idTributConfiguraOfGt,
      ufDestino,
      cfop,
      csosn,
      cst,
      modalidadeBc,
      aliquota,
      valorPauta,
      valorPrecoMaximo,
      mva,
      porcentoBc,
      modalidadeBcSt,
      aliquotaInternaSt,
      aliquotaInterestadualSt,
      porcentoBcSt,
      aliquotaIcmsSt,
      valorPautaSt,
      valorPrecoMaximoSt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributIcmsUf &&
          other.id == this.id &&
          other.idTributConfiguraOfGt == this.idTributConfiguraOfGt &&
          other.ufDestino == this.ufDestino &&
          other.cfop == this.cfop &&
          other.csosn == this.csosn &&
          other.cst == this.cst &&
          other.modalidadeBc == this.modalidadeBc &&
          other.aliquota == this.aliquota &&
          other.valorPauta == this.valorPauta &&
          other.valorPrecoMaximo == this.valorPrecoMaximo &&
          other.mva == this.mva &&
          other.porcentoBc == this.porcentoBc &&
          other.modalidadeBcSt == this.modalidadeBcSt &&
          other.aliquotaInternaSt == this.aliquotaInternaSt &&
          other.aliquotaInterestadualSt == this.aliquotaInterestadualSt &&
          other.porcentoBcSt == this.porcentoBcSt &&
          other.aliquotaIcmsSt == this.aliquotaIcmsSt &&
          other.valorPautaSt == this.valorPautaSt &&
          other.valorPrecoMaximoSt == this.valorPrecoMaximoSt);
}

class TributIcmsUfsCompanion extends UpdateCompanion<TributIcmsUf> {
  final Value<int?> id;
  final Value<int?> idTributConfiguraOfGt;
  final Value<String?> ufDestino;
  final Value<int?> cfop;
  final Value<String?> csosn;
  final Value<String?> cst;
  final Value<String?> modalidadeBc;
  final Value<double?> aliquota;
  final Value<double?> valorPauta;
  final Value<double?> valorPrecoMaximo;
  final Value<double?> mva;
  final Value<double?> porcentoBc;
  final Value<String?> modalidadeBcSt;
  final Value<double?> aliquotaInternaSt;
  final Value<double?> aliquotaInterestadualSt;
  final Value<double?> porcentoBcSt;
  final Value<double?> aliquotaIcmsSt;
  final Value<double?> valorPautaSt;
  final Value<double?> valorPrecoMaximoSt;
  const TributIcmsUfsCompanion({
    this.id = const Value.absent(),
    this.idTributConfiguraOfGt = const Value.absent(),
    this.ufDestino = const Value.absent(),
    this.cfop = const Value.absent(),
    this.csosn = const Value.absent(),
    this.cst = const Value.absent(),
    this.modalidadeBc = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.valorPauta = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.mva = const Value.absent(),
    this.porcentoBc = const Value.absent(),
    this.modalidadeBcSt = const Value.absent(),
    this.aliquotaInternaSt = const Value.absent(),
    this.aliquotaInterestadualSt = const Value.absent(),
    this.porcentoBcSt = const Value.absent(),
    this.aliquotaIcmsSt = const Value.absent(),
    this.valorPautaSt = const Value.absent(),
    this.valorPrecoMaximoSt = const Value.absent(),
  });
  TributIcmsUfsCompanion.insert({
    this.id = const Value.absent(),
    this.idTributConfiguraOfGt = const Value.absent(),
    this.ufDestino = const Value.absent(),
    this.cfop = const Value.absent(),
    this.csosn = const Value.absent(),
    this.cst = const Value.absent(),
    this.modalidadeBc = const Value.absent(),
    this.aliquota = const Value.absent(),
    this.valorPauta = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.mva = const Value.absent(),
    this.porcentoBc = const Value.absent(),
    this.modalidadeBcSt = const Value.absent(),
    this.aliquotaInternaSt = const Value.absent(),
    this.aliquotaInterestadualSt = const Value.absent(),
    this.porcentoBcSt = const Value.absent(),
    this.aliquotaIcmsSt = const Value.absent(),
    this.valorPautaSt = const Value.absent(),
    this.valorPrecoMaximoSt = const Value.absent(),
  });
  static Insertable<TributIcmsUf> custom({
    Expression<int>? id,
    Expression<int>? idTributConfiguraOfGt,
    Expression<String>? ufDestino,
    Expression<int>? cfop,
    Expression<String>? csosn,
    Expression<String>? cst,
    Expression<String>? modalidadeBc,
    Expression<double>? aliquota,
    Expression<double>? valorPauta,
    Expression<double>? valorPrecoMaximo,
    Expression<double>? mva,
    Expression<double>? porcentoBc,
    Expression<String>? modalidadeBcSt,
    Expression<double>? aliquotaInternaSt,
    Expression<double>? aliquotaInterestadualSt,
    Expression<double>? porcentoBcSt,
    Expression<double>? aliquotaIcmsSt,
    Expression<double>? valorPautaSt,
    Expression<double>? valorPrecoMaximoSt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idTributConfiguraOfGt != null)
        'ID_TRIBUT_CONFIGURA_OF_GT': idTributConfiguraOfGt,
      if (ufDestino != null) 'UF_DESTINO': ufDestino,
      if (cfop != null) 'CFOP': cfop,
      if (csosn != null) 'CSOSN': csosn,
      if (cst != null) 'CST': cst,
      if (modalidadeBc != null) 'MODALIDADE_BC': modalidadeBc,
      if (aliquota != null) 'ALIQUOTA': aliquota,
      if (valorPauta != null) 'VALOR_PAUTA': valorPauta,
      if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
      if (mva != null) 'MVA': mva,
      if (porcentoBc != null) 'PORCENTO_BC': porcentoBc,
      if (modalidadeBcSt != null) 'MODALIDADE_BC_ST': modalidadeBcSt,
      if (aliquotaInternaSt != null) 'ALIQUOTA_INTERNA_ST': aliquotaInternaSt,
      if (aliquotaInterestadualSt != null)
        'ALIQUOTA_INTERESTADUAL_ST': aliquotaInterestadualSt,
      if (porcentoBcSt != null) 'PORCENTO_BC_ST': porcentoBcSt,
      if (aliquotaIcmsSt != null) 'ALIQUOTA_ICMS_ST': aliquotaIcmsSt,
      if (valorPautaSt != null) 'VALOR_PAUTA_ST': valorPautaSt,
      if (valorPrecoMaximoSt != null)
        'VALOR_PRECO_MAXIMO_ST': valorPrecoMaximoSt,
    });
  }

  TributIcmsUfsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idTributConfiguraOfGt,
      Value<String?>? ufDestino,
      Value<int?>? cfop,
      Value<String?>? csosn,
      Value<String?>? cst,
      Value<String?>? modalidadeBc,
      Value<double?>? aliquota,
      Value<double?>? valorPauta,
      Value<double?>? valorPrecoMaximo,
      Value<double?>? mva,
      Value<double?>? porcentoBc,
      Value<String?>? modalidadeBcSt,
      Value<double?>? aliquotaInternaSt,
      Value<double?>? aliquotaInterestadualSt,
      Value<double?>? porcentoBcSt,
      Value<double?>? aliquotaIcmsSt,
      Value<double?>? valorPautaSt,
      Value<double?>? valorPrecoMaximoSt}) {
    return TributIcmsUfsCompanion(
      id: id ?? this.id,
      idTributConfiguraOfGt:
          idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
      ufDestino: ufDestino ?? this.ufDestino,
      cfop: cfop ?? this.cfop,
      csosn: csosn ?? this.csosn,
      cst: cst ?? this.cst,
      modalidadeBc: modalidadeBc ?? this.modalidadeBc,
      aliquota: aliquota ?? this.aliquota,
      valorPauta: valorPauta ?? this.valorPauta,
      valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
      mva: mva ?? this.mva,
      porcentoBc: porcentoBc ?? this.porcentoBc,
      modalidadeBcSt: modalidadeBcSt ?? this.modalidadeBcSt,
      aliquotaInternaSt: aliquotaInternaSt ?? this.aliquotaInternaSt,
      aliquotaInterestadualSt:
          aliquotaInterestadualSt ?? this.aliquotaInterestadualSt,
      porcentoBcSt: porcentoBcSt ?? this.porcentoBcSt,
      aliquotaIcmsSt: aliquotaIcmsSt ?? this.aliquotaIcmsSt,
      valorPautaSt: valorPautaSt ?? this.valorPautaSt,
      valorPrecoMaximoSt: valorPrecoMaximoSt ?? this.valorPrecoMaximoSt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idTributConfiguraOfGt.present) {
      map['ID_TRIBUT_CONFIGURA_OF_GT'] =
          Variable<int>(idTributConfiguraOfGt.value);
    }
    if (ufDestino.present) {
      map['UF_DESTINO'] = Variable<String>(ufDestino.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (csosn.present) {
      map['CSOSN'] = Variable<String>(csosn.value);
    }
    if (cst.present) {
      map['CST'] = Variable<String>(cst.value);
    }
    if (modalidadeBc.present) {
      map['MODALIDADE_BC'] = Variable<String>(modalidadeBc.value);
    }
    if (aliquota.present) {
      map['ALIQUOTA'] = Variable<double>(aliquota.value);
    }
    if (valorPauta.present) {
      map['VALOR_PAUTA'] = Variable<double>(valorPauta.value);
    }
    if (valorPrecoMaximo.present) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo.value);
    }
    if (mva.present) {
      map['MVA'] = Variable<double>(mva.value);
    }
    if (porcentoBc.present) {
      map['PORCENTO_BC'] = Variable<double>(porcentoBc.value);
    }
    if (modalidadeBcSt.present) {
      map['MODALIDADE_BC_ST'] = Variable<String>(modalidadeBcSt.value);
    }
    if (aliquotaInternaSt.present) {
      map['ALIQUOTA_INTERNA_ST'] = Variable<double>(aliquotaInternaSt.value);
    }
    if (aliquotaInterestadualSt.present) {
      map['ALIQUOTA_INTERESTADUAL_ST'] =
          Variable<double>(aliquotaInterestadualSt.value);
    }
    if (porcentoBcSt.present) {
      map['PORCENTO_BC_ST'] = Variable<double>(porcentoBcSt.value);
    }
    if (aliquotaIcmsSt.present) {
      map['ALIQUOTA_ICMS_ST'] = Variable<double>(aliquotaIcmsSt.value);
    }
    if (valorPautaSt.present) {
      map['VALOR_PAUTA_ST'] = Variable<double>(valorPautaSt.value);
    }
    if (valorPrecoMaximoSt.present) {
      map['VALOR_PRECO_MAXIMO_ST'] =
          Variable<double>(valorPrecoMaximoSt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributIcmsUfsCompanion(')
          ..write('id: $id, ')
          ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
          ..write('ufDestino: $ufDestino, ')
          ..write('cfop: $cfop, ')
          ..write('csosn: $csosn, ')
          ..write('cst: $cst, ')
          ..write('modalidadeBc: $modalidadeBc, ')
          ..write('aliquota: $aliquota, ')
          ..write('valorPauta: $valorPauta, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('mva: $mva, ')
          ..write('porcentoBc: $porcentoBc, ')
          ..write('modalidadeBcSt: $modalidadeBcSt, ')
          ..write('aliquotaInternaSt: $aliquotaInternaSt, ')
          ..write('aliquotaInterestadualSt: $aliquotaInterestadualSt, ')
          ..write('porcentoBcSt: $porcentoBcSt, ')
          ..write('aliquotaIcmsSt: $aliquotaIcmsSt, ')
          ..write('valorPautaSt: $valorPautaSt, ')
          ..write('valorPrecoMaximoSt: $valorPrecoMaximoSt')
          ..write(')'))
        .toString();
  }
}

class $TributIcmsUfsTable extends TributIcmsUfs
    with TableInfo<$TributIcmsUfsTable, TributIcmsUf> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributIcmsUfsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idTributConfiguraOfGtMeta =
      const VerificationMeta('idTributConfiguraOfGt');
  @override
  late final GeneratedColumn<int> idTributConfiguraOfGt =
      GeneratedColumn<int>('ID_TRIBUT_CONFIGURA_OF_GT', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES TRIBUT_CONFIGURA_OF_GT(ID)');
  final VerificationMeta _ufDestinoMeta = const VerificationMeta('ufDestino');
  @override
  late final GeneratedColumn<String> ufDestino = GeneratedColumn<String>(
      'UF_DESTINO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
      'CFOP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
  @override
  late final GeneratedColumn<String> csosn = GeneratedColumn<String>(
      'CSOSN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
      'CST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modalidadeBcMeta =
      const VerificationMeta('modalidadeBc');
  @override
  late final GeneratedColumn<String> modalidadeBc = GeneratedColumn<String>(
      'MODALIDADE_BC', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _aliquotaMeta = const VerificationMeta('aliquota');
  @override
  late final GeneratedColumn<double> aliquota = GeneratedColumn<double>(
      'ALIQUOTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPautaMeta = const VerificationMeta('valorPauta');
  @override
  late final GeneratedColumn<double> valorPauta = GeneratedColumn<double>(
      'VALOR_PAUTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPrecoMaximoMeta =
      const VerificationMeta('valorPrecoMaximo');
  @override
  late final GeneratedColumn<double> valorPrecoMaximo =
      GeneratedColumn<double>('VALOR_PRECO_MAXIMO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _mvaMeta = const VerificationMeta('mva');
  @override
  late final GeneratedColumn<double> mva = GeneratedColumn<double>(
      'MVA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _porcentoBcMeta = const VerificationMeta('porcentoBc');
  @override
  late final GeneratedColumn<double> porcentoBc = GeneratedColumn<double>(
      'PORCENTO_BC', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _modalidadeBcStMeta =
      const VerificationMeta('modalidadeBcSt');
  @override
  late final GeneratedColumn<String> modalidadeBcSt = GeneratedColumn<String>(
      'MODALIDADE_BC_ST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _aliquotaInternaStMeta =
      const VerificationMeta('aliquotaInternaSt');
  @override
  late final GeneratedColumn<double> aliquotaInternaSt =
      GeneratedColumn<double>('ALIQUOTA_INTERNA_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaInterestadualStMeta =
      const VerificationMeta('aliquotaInterestadualSt');
  @override
  late final GeneratedColumn<double> aliquotaInterestadualSt =
      GeneratedColumn<double>('ALIQUOTA_INTERESTADUAL_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _porcentoBcStMeta =
      const VerificationMeta('porcentoBcSt');
  @override
  late final GeneratedColumn<double> porcentoBcSt = GeneratedColumn<double>(
      'PORCENTO_BC_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaIcmsStMeta =
      const VerificationMeta('aliquotaIcmsSt');
  @override
  late final GeneratedColumn<double> aliquotaIcmsSt = GeneratedColumn<double>(
      'ALIQUOTA_ICMS_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPautaStMeta =
      const VerificationMeta('valorPautaSt');
  @override
  late final GeneratedColumn<double> valorPautaSt = GeneratedColumn<double>(
      'VALOR_PAUTA_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPrecoMaximoStMeta =
      const VerificationMeta('valorPrecoMaximoSt');
  @override
  late final GeneratedColumn<double> valorPrecoMaximoSt =
      GeneratedColumn<double>('VALOR_PRECO_MAXIMO_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idTributConfiguraOfGt,
        ufDestino,
        cfop,
        csosn,
        cst,
        modalidadeBc,
        aliquota,
        valorPauta,
        valorPrecoMaximo,
        mva,
        porcentoBc,
        modalidadeBcSt,
        aliquotaInternaSt,
        aliquotaInterestadualSt,
        porcentoBcSt,
        aliquotaIcmsSt,
        valorPautaSt,
        valorPrecoMaximoSt
      ];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_ICMS_UF';
  @override
  String get actualTableName => 'TRIBUT_ICMS_UF';
  @override
  VerificationContext validateIntegrity(Insertable<TributIcmsUf> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_TRIBUT_CONFIGURA_OF_GT')) {
      context.handle(
          _idTributConfiguraOfGtMeta,
          idTributConfiguraOfGt.isAcceptableOrUnknown(
              data['ID_TRIBUT_CONFIGURA_OF_GT']!, _idTributConfiguraOfGtMeta));
    }
    if (data.containsKey('UF_DESTINO')) {
      context.handle(_ufDestinoMeta,
          ufDestino.isAcceptableOrUnknown(data['UF_DESTINO']!, _ufDestinoMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
    }
    if (data.containsKey('CSOSN')) {
      context.handle(
          _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
    }
    if (data.containsKey('CST')) {
      context.handle(
          _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
    }
    if (data.containsKey('MODALIDADE_BC')) {
      context.handle(
          _modalidadeBcMeta,
          modalidadeBc.isAcceptableOrUnknown(
              data['MODALIDADE_BC']!, _modalidadeBcMeta));
    }
    if (data.containsKey('ALIQUOTA')) {
      context.handle(_aliquotaMeta,
          aliquota.isAcceptableOrUnknown(data['ALIQUOTA']!, _aliquotaMeta));
    }
    if (data.containsKey('VALOR_PAUTA')) {
      context.handle(
          _valorPautaMeta,
          valorPauta.isAcceptableOrUnknown(
              data['VALOR_PAUTA']!, _valorPautaMeta));
    }
    if (data.containsKey('VALOR_PRECO_MAXIMO')) {
      context.handle(
          _valorPrecoMaximoMeta,
          valorPrecoMaximo.isAcceptableOrUnknown(
              data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
    }
    if (data.containsKey('MVA')) {
      context.handle(
          _mvaMeta, mva.isAcceptableOrUnknown(data['MVA']!, _mvaMeta));
    }
    if (data.containsKey('PORCENTO_BC')) {
      context.handle(
          _porcentoBcMeta,
          porcentoBc.isAcceptableOrUnknown(
              data['PORCENTO_BC']!, _porcentoBcMeta));
    }
    if (data.containsKey('MODALIDADE_BC_ST')) {
      context.handle(
          _modalidadeBcStMeta,
          modalidadeBcSt.isAcceptableOrUnknown(
              data['MODALIDADE_BC_ST']!, _modalidadeBcStMeta));
    }
    if (data.containsKey('ALIQUOTA_INTERNA_ST')) {
      context.handle(
          _aliquotaInternaStMeta,
          aliquotaInternaSt.isAcceptableOrUnknown(
              data['ALIQUOTA_INTERNA_ST']!, _aliquotaInternaStMeta));
    }
    if (data.containsKey('ALIQUOTA_INTERESTADUAL_ST')) {
      context.handle(
          _aliquotaInterestadualStMeta,
          aliquotaInterestadualSt.isAcceptableOrUnknown(
              data['ALIQUOTA_INTERESTADUAL_ST']!,
              _aliquotaInterestadualStMeta));
    }
    if (data.containsKey('PORCENTO_BC_ST')) {
      context.handle(
          _porcentoBcStMeta,
          porcentoBcSt.isAcceptableOrUnknown(
              data['PORCENTO_BC_ST']!, _porcentoBcStMeta));
    }
    if (data.containsKey('ALIQUOTA_ICMS_ST')) {
      context.handle(
          _aliquotaIcmsStMeta,
          aliquotaIcmsSt.isAcceptableOrUnknown(
              data['ALIQUOTA_ICMS_ST']!, _aliquotaIcmsStMeta));
    }
    if (data.containsKey('VALOR_PAUTA_ST')) {
      context.handle(
          _valorPautaStMeta,
          valorPautaSt.isAcceptableOrUnknown(
              data['VALOR_PAUTA_ST']!, _valorPautaStMeta));
    }
    if (data.containsKey('VALOR_PRECO_MAXIMO_ST')) {
      context.handle(
          _valorPrecoMaximoStMeta,
          valorPrecoMaximoSt.isAcceptableOrUnknown(
              data['VALOR_PRECO_MAXIMO_ST']!, _valorPrecoMaximoStMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributIcmsUf map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributIcmsUf.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributIcmsUfsTable createAlias(String alias) {
    return $TributIcmsUfsTable(attachedDatabase, alias);
  }
}

class TributIpi extends DataClass implements Insertable<TributIpi> {
  final int? id;
  final int? idTributConfiguraOfGt;
  final String? cstIpi;
  final String? modalidadeBaseCalculo;
  final double? porcentoBaseCalculo;
  final double? aliquotaPorcento;
  final double? aliquotaUnidade;
  final double? valorPrecoMaximo;
  final double? valorPautaFiscal;
  TributIpi(
      {this.id,
      this.idTributConfiguraOfGt,
      this.cstIpi,
      this.modalidadeBaseCalculo,
      this.porcentoBaseCalculo,
      this.aliquotaPorcento,
      this.aliquotaUnidade,
      this.valorPrecoMaximo,
      this.valorPautaFiscal});
  factory TributIpi.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributIpi(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idTributConfiguraOfGt: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_CONFIGURA_OF_GT']),
      cstIpi: ValueSqlType.stringType(data['${effectivePrefix}CST_IPI']),
      modalidadeBaseCalculo: ValueSqlType.stringType(
          data['${effectivePrefix}MODALIDADE_BASE_CALCULO']),
      porcentoBaseCalculo: ValueSqlType.doubleType(
          data['${effectivePrefix}PORCENTO_BASE_CALCULO']),
      aliquotaPorcento: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_PORCENTO']),
      aliquotaUnidade: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_UNIDADE']),
      valorPrecoMaximo: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
      valorPautaFiscal: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PAUTA_FISCAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idTributConfiguraOfGt != null) {
      map['ID_TRIBUT_CONFIGURA_OF_GT'] = Variable<int>(idTributConfiguraOfGt);
    }
    if (!nullToAbsent || cstIpi != null) {
      map['CST_IPI'] = Variable<String>(cstIpi);
    }
    if (!nullToAbsent || modalidadeBaseCalculo != null) {
      map['MODALIDADE_BASE_CALCULO'] = Variable<String>(modalidadeBaseCalculo);
    }
    if (!nullToAbsent || porcentoBaseCalculo != null) {
      map['PORCENTO_BASE_CALCULO'] = Variable<double>(porcentoBaseCalculo);
    }
    if (!nullToAbsent || aliquotaPorcento != null) {
      map['ALIQUOTA_PORCENTO'] = Variable<double>(aliquotaPorcento);
    }
    if (!nullToAbsent || aliquotaUnidade != null) {
      map['ALIQUOTA_UNIDADE'] = Variable<double>(aliquotaUnidade);
    }
    if (!nullToAbsent || valorPrecoMaximo != null) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo);
    }
    if (!nullToAbsent || valorPautaFiscal != null) {
      map['VALOR_PAUTA_FISCAL'] = Variable<double>(valorPautaFiscal);
    }
    return map;
  }

  TributIpisCompanion toCompanion(bool nullToAbsent) {
    return TributIpisCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idTributConfiguraOfGt: idTributConfiguraOfGt == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributConfiguraOfGt),
      cstIpi:
          cstIpi == null && nullToAbsent ? const Value.absent() : Value(cstIpi),
      modalidadeBaseCalculo: modalidadeBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBaseCalculo),
      porcentoBaseCalculo: porcentoBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(porcentoBaseCalculo),
      aliquotaPorcento: aliquotaPorcento == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPorcento),
      aliquotaUnidade: aliquotaUnidade == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaUnidade),
      valorPrecoMaximo: valorPrecoMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPrecoMaximo),
      valorPautaFiscal: valorPautaFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPautaFiscal),
    );
  }

  factory TributIpi.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributIpi(
      id: serializer.fromJson<int?>(json['id']),
      idTributConfiguraOfGt:
          serializer.fromJson<int?>(json['idTributConfiguraOfGt']),
      cstIpi: serializer.fromJson<String?>(json['cstIpi']),
      modalidadeBaseCalculo:
          serializer.fromJson<String?>(json['modalidadeBaseCalculo']),
      porcentoBaseCalculo:
          serializer.fromJson<double?>(json['porcentoBaseCalculo']),
      aliquotaPorcento: serializer.fromJson<double?>(json['aliquotaPorcento']),
      aliquotaUnidade: serializer.fromJson<double?>(json['aliquotaUnidade']),
      valorPrecoMaximo: serializer.fromJson<double?>(json['valorPrecoMaximo']),
      valorPautaFiscal: serializer.fromJson<double?>(json['valorPautaFiscal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idTributConfiguraOfGt': serializer.toJson<int?>(idTributConfiguraOfGt),
      'cstIpi': serializer.toJson<String?>(cstIpi),
      'modalidadeBaseCalculo':
          serializer.toJson<String?>(modalidadeBaseCalculo),
      'porcentoBaseCalculo': serializer.toJson<double?>(porcentoBaseCalculo),
      'aliquotaPorcento': serializer.toJson<double?>(aliquotaPorcento),
      'aliquotaUnidade': serializer.toJson<double?>(aliquotaUnidade),
      'valorPrecoMaximo': serializer.toJson<double?>(valorPrecoMaximo),
      'valorPautaFiscal': serializer.toJson<double?>(valorPautaFiscal),
    };
  }

  TributIpi copyWith(
          {int? id,
          int? idTributConfiguraOfGt,
          String? cstIpi,
          String? modalidadeBaseCalculo,
          double? porcentoBaseCalculo,
          double? aliquotaPorcento,
          double? aliquotaUnidade,
          double? valorPrecoMaximo,
          double? valorPautaFiscal}) =>
      TributIpi(
        id: id ?? this.id,
        idTributConfiguraOfGt:
            idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
        cstIpi: cstIpi ?? this.cstIpi,
        modalidadeBaseCalculo:
            modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
        porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
        aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
        aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
        valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
        valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
      );
  @override
  String toString() {
    return (StringBuffer('TributIpi(')
          ..write('id: $id, ')
          ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
          ..write('cstIpi: $cstIpi, ')
          ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
          ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
          ..write('aliquotaPorcento: $aliquotaPorcento, ')
          ..write('aliquotaUnidade: $aliquotaUnidade, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('valorPautaFiscal: $valorPautaFiscal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idTributConfiguraOfGt,
      cstIpi,
      modalidadeBaseCalculo,
      porcentoBaseCalculo,
      aliquotaPorcento,
      aliquotaUnidade,
      valorPrecoMaximo,
      valorPautaFiscal);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributIpi &&
          other.id == this.id &&
          other.idTributConfiguraOfGt == this.idTributConfiguraOfGt &&
          other.cstIpi == this.cstIpi &&
          other.modalidadeBaseCalculo == this.modalidadeBaseCalculo &&
          other.porcentoBaseCalculo == this.porcentoBaseCalculo &&
          other.aliquotaPorcento == this.aliquotaPorcento &&
          other.aliquotaUnidade == this.aliquotaUnidade &&
          other.valorPrecoMaximo == this.valorPrecoMaximo &&
          other.valorPautaFiscal == this.valorPautaFiscal);
}

class TributIpisCompanion extends UpdateCompanion<TributIpi> {
  final Value<int?> id;
  final Value<int?> idTributConfiguraOfGt;
  final Value<String?> cstIpi;
  final Value<String?> modalidadeBaseCalculo;
  final Value<double?> porcentoBaseCalculo;
  final Value<double?> aliquotaPorcento;
  final Value<double?> aliquotaUnidade;
  final Value<double?> valorPrecoMaximo;
  final Value<double?> valorPautaFiscal;
  const TributIpisCompanion({
    this.id = const Value.absent(),
    this.idTributConfiguraOfGt = const Value.absent(),
    this.cstIpi = const Value.absent(),
    this.modalidadeBaseCalculo = const Value.absent(),
    this.porcentoBaseCalculo = const Value.absent(),
    this.aliquotaPorcento = const Value.absent(),
    this.aliquotaUnidade = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.valorPautaFiscal = const Value.absent(),
  });
  TributIpisCompanion.insert({
    this.id = const Value.absent(),
    this.idTributConfiguraOfGt = const Value.absent(),
    this.cstIpi = const Value.absent(),
    this.modalidadeBaseCalculo = const Value.absent(),
    this.porcentoBaseCalculo = const Value.absent(),
    this.aliquotaPorcento = const Value.absent(),
    this.aliquotaUnidade = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.valorPautaFiscal = const Value.absent(),
  });
  static Insertable<TributIpi> custom({
    Expression<int>? id,
    Expression<int>? idTributConfiguraOfGt,
    Expression<String>? cstIpi,
    Expression<String>? modalidadeBaseCalculo,
    Expression<double>? porcentoBaseCalculo,
    Expression<double>? aliquotaPorcento,
    Expression<double>? aliquotaUnidade,
    Expression<double>? valorPrecoMaximo,
    Expression<double>? valorPautaFiscal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idTributConfiguraOfGt != null)
        'ID_TRIBUT_CONFIGURA_OF_GT': idTributConfiguraOfGt,
      if (cstIpi != null) 'CST_IPI': cstIpi,
      if (modalidadeBaseCalculo != null)
        'MODALIDADE_BASE_CALCULO': modalidadeBaseCalculo,
      if (porcentoBaseCalculo != null)
        'PORCENTO_BASE_CALCULO': porcentoBaseCalculo,
      if (aliquotaPorcento != null) 'ALIQUOTA_PORCENTO': aliquotaPorcento,
      if (aliquotaUnidade != null) 'ALIQUOTA_UNIDADE': aliquotaUnidade,
      if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
      if (valorPautaFiscal != null) 'VALOR_PAUTA_FISCAL': valorPautaFiscal,
    });
  }

  TributIpisCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idTributConfiguraOfGt,
      Value<String?>? cstIpi,
      Value<String?>? modalidadeBaseCalculo,
      Value<double?>? porcentoBaseCalculo,
      Value<double?>? aliquotaPorcento,
      Value<double?>? aliquotaUnidade,
      Value<double?>? valorPrecoMaximo,
      Value<double?>? valorPautaFiscal}) {
    return TributIpisCompanion(
      id: id ?? this.id,
      idTributConfiguraOfGt:
          idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
      cstIpi: cstIpi ?? this.cstIpi,
      modalidadeBaseCalculo:
          modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
      porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
      aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
      aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
      valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
      valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idTributConfiguraOfGt.present) {
      map['ID_TRIBUT_CONFIGURA_OF_GT'] =
          Variable<int>(idTributConfiguraOfGt.value);
    }
    if (cstIpi.present) {
      map['CST_IPI'] = Variable<String>(cstIpi.value);
    }
    if (modalidadeBaseCalculo.present) {
      map['MODALIDADE_BASE_CALCULO'] =
          Variable<String>(modalidadeBaseCalculo.value);
    }
    if (porcentoBaseCalculo.present) {
      map['PORCENTO_BASE_CALCULO'] =
          Variable<double>(porcentoBaseCalculo.value);
    }
    if (aliquotaPorcento.present) {
      map['ALIQUOTA_PORCENTO'] = Variable<double>(aliquotaPorcento.value);
    }
    if (aliquotaUnidade.present) {
      map['ALIQUOTA_UNIDADE'] = Variable<double>(aliquotaUnidade.value);
    }
    if (valorPrecoMaximo.present) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo.value);
    }
    if (valorPautaFiscal.present) {
      map['VALOR_PAUTA_FISCAL'] = Variable<double>(valorPautaFiscal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributIpisCompanion(')
          ..write('id: $id, ')
          ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
          ..write('cstIpi: $cstIpi, ')
          ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
          ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
          ..write('aliquotaPorcento: $aliquotaPorcento, ')
          ..write('aliquotaUnidade: $aliquotaUnidade, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('valorPautaFiscal: $valorPautaFiscal')
          ..write(')'))
        .toString();
  }
}

class $TributIpisTable extends TributIpis
    with TableInfo<$TributIpisTable, TributIpi> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributIpisTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idTributConfiguraOfGtMeta =
      const VerificationMeta('idTributConfiguraOfGt');
  @override
  late final GeneratedColumn<int> idTributConfiguraOfGt =
      GeneratedColumn<int>('ID_TRIBUT_CONFIGURA_OF_GT', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES TRIBUT_CONFIGURA_OF_GT(ID)');
  final VerificationMeta _cstIpiMeta = const VerificationMeta('cstIpi');
  @override
  late final GeneratedColumn<String> cstIpi = GeneratedColumn<String>(
      'CST_IPI', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modalidadeBaseCalculoMeta =
      const VerificationMeta('modalidadeBaseCalculo');
  @override
  late final GeneratedColumn<String> modalidadeBaseCalculo =
      GeneratedColumn<String>('MODALIDADE_BASE_CALCULO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _porcentoBaseCalculoMeta =
      const VerificationMeta('porcentoBaseCalculo');
  @override
  late final GeneratedColumn<double> porcentoBaseCalculo =
      GeneratedColumn<double>('PORCENTO_BASE_CALCULO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaPorcentoMeta =
      const VerificationMeta('aliquotaPorcento');
  @override
  late final GeneratedColumn<double> aliquotaPorcento =
      GeneratedColumn<double>('ALIQUOTA_PORCENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaUnidadeMeta =
      const VerificationMeta('aliquotaUnidade');
  @override
  late final GeneratedColumn<double> aliquotaUnidade =
      GeneratedColumn<double>('ALIQUOTA_UNIDADE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPrecoMaximoMeta =
      const VerificationMeta('valorPrecoMaximo');
  @override
  late final GeneratedColumn<double> valorPrecoMaximo =
      GeneratedColumn<double>('VALOR_PRECO_MAXIMO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPautaFiscalMeta =
      const VerificationMeta('valorPautaFiscal');
  @override
  late final GeneratedColumn<double> valorPautaFiscal =
      GeneratedColumn<double>('VALOR_PAUTA_FISCAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idTributConfiguraOfGt,
        cstIpi,
        modalidadeBaseCalculo,
        porcentoBaseCalculo,
        aliquotaPorcento,
        aliquotaUnidade,
        valorPrecoMaximo,
        valorPautaFiscal
      ];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_IPI';
  @override
  String get actualTableName => 'TRIBUT_IPI';
  @override
  VerificationContext validateIntegrity(Insertable<TributIpi> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_TRIBUT_CONFIGURA_OF_GT')) {
      context.handle(
          _idTributConfiguraOfGtMeta,
          idTributConfiguraOfGt.isAcceptableOrUnknown(
              data['ID_TRIBUT_CONFIGURA_OF_GT']!, _idTributConfiguraOfGtMeta));
    }
    if (data.containsKey('CST_IPI')) {
      context.handle(_cstIpiMeta,
          cstIpi.isAcceptableOrUnknown(data['CST_IPI']!, _cstIpiMeta));
    }
    if (data.containsKey('MODALIDADE_BASE_CALCULO')) {
      context.handle(
          _modalidadeBaseCalculoMeta,
          modalidadeBaseCalculo.isAcceptableOrUnknown(
              data['MODALIDADE_BASE_CALCULO']!, _modalidadeBaseCalculoMeta));
    }
    if (data.containsKey('PORCENTO_BASE_CALCULO')) {
      context.handle(
          _porcentoBaseCalculoMeta,
          porcentoBaseCalculo.isAcceptableOrUnknown(
              data['PORCENTO_BASE_CALCULO']!, _porcentoBaseCalculoMeta));
    }
    if (data.containsKey('ALIQUOTA_PORCENTO')) {
      context.handle(
          _aliquotaPorcentoMeta,
          aliquotaPorcento.isAcceptableOrUnknown(
              data['ALIQUOTA_PORCENTO']!, _aliquotaPorcentoMeta));
    }
    if (data.containsKey('ALIQUOTA_UNIDADE')) {
      context.handle(
          _aliquotaUnidadeMeta,
          aliquotaUnidade.isAcceptableOrUnknown(
              data['ALIQUOTA_UNIDADE']!, _aliquotaUnidadeMeta));
    }
    if (data.containsKey('VALOR_PRECO_MAXIMO')) {
      context.handle(
          _valorPrecoMaximoMeta,
          valorPrecoMaximo.isAcceptableOrUnknown(
              data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
    }
    if (data.containsKey('VALOR_PAUTA_FISCAL')) {
      context.handle(
          _valorPautaFiscalMeta,
          valorPautaFiscal.isAcceptableOrUnknown(
              data['VALOR_PAUTA_FISCAL']!, _valorPautaFiscalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributIpi map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributIpi.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributIpisTable createAlias(String alias) {
    return $TributIpisTable(attachedDatabase, alias);
  }
}

class TributIss extends DataClass implements Insertable<TributIss> {
  final int? id;
  final int? idTributOperacaoFiscal;
  final String? modalidadeBaseCalculo;
  final double? porcentoBaseCalculo;
  final double? aliquotaPorcento;
  final double? aliquotaUnidade;
  final double? valorPrecoMaximo;
  final double? valorPautaFiscal;
  final int? itemListaServico;
  final String? codigoTributacao;
  TributIss(
      {this.id,
      this.idTributOperacaoFiscal,
      this.modalidadeBaseCalculo,
      this.porcentoBaseCalculo,
      this.aliquotaPorcento,
      this.aliquotaUnidade,
      this.valorPrecoMaximo,
      this.valorPautaFiscal,
      this.itemListaServico,
      this.codigoTributacao});
  factory TributIss.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributIss(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idTributOperacaoFiscal: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_OPERACAO_FISCAL']),
      modalidadeBaseCalculo: ValueSqlType.stringType(
          data['${effectivePrefix}MODALIDADE_BASE_CALCULO']),
      porcentoBaseCalculo: ValueSqlType.doubleType(
          data['${effectivePrefix}PORCENTO_BASE_CALCULO']),
      aliquotaPorcento: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_PORCENTO']),
      aliquotaUnidade: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_UNIDADE']),
      valorPrecoMaximo: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
      valorPautaFiscal: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PAUTA_FISCAL']),
      itemListaServico: ValueSqlType.intType(
          data['${effectivePrefix}ITEM_LISTA_SERVICO']),
      codigoTributacao: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_TRIBUTACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idTributOperacaoFiscal != null) {
      map['ID_TRIBUT_OPERACAO_FISCAL'] = Variable<int>(idTributOperacaoFiscal);
    }
    if (!nullToAbsent || modalidadeBaseCalculo != null) {
      map['MODALIDADE_BASE_CALCULO'] = Variable<String>(modalidadeBaseCalculo);
    }
    if (!nullToAbsent || porcentoBaseCalculo != null) {
      map['PORCENTO_BASE_CALCULO'] = Variable<double>(porcentoBaseCalculo);
    }
    if (!nullToAbsent || aliquotaPorcento != null) {
      map['ALIQUOTA_PORCENTO'] = Variable<double>(aliquotaPorcento);
    }
    if (!nullToAbsent || aliquotaUnidade != null) {
      map['ALIQUOTA_UNIDADE'] = Variable<double>(aliquotaUnidade);
    }
    if (!nullToAbsent || valorPrecoMaximo != null) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo);
    }
    if (!nullToAbsent || valorPautaFiscal != null) {
      map['VALOR_PAUTA_FISCAL'] = Variable<double>(valorPautaFiscal);
    }
    if (!nullToAbsent || itemListaServico != null) {
      map['ITEM_LISTA_SERVICO'] = Variable<int>(itemListaServico);
    }
    if (!nullToAbsent || codigoTributacao != null) {
      map['CODIGO_TRIBUTACAO'] = Variable<String>(codigoTributacao);
    }
    return map;
  }

  TributIsssCompanion toCompanion(bool nullToAbsent) {
    return TributIsssCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idTributOperacaoFiscal: idTributOperacaoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributOperacaoFiscal),
      modalidadeBaseCalculo: modalidadeBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBaseCalculo),
      porcentoBaseCalculo: porcentoBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(porcentoBaseCalculo),
      aliquotaPorcento: aliquotaPorcento == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPorcento),
      aliquotaUnidade: aliquotaUnidade == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaUnidade),
      valorPrecoMaximo: valorPrecoMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPrecoMaximo),
      valorPautaFiscal: valorPautaFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPautaFiscal),
      itemListaServico: itemListaServico == null && nullToAbsent
          ? const Value.absent()
          : Value(itemListaServico),
      codigoTributacao: codigoTributacao == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoTributacao),
    );
  }

  factory TributIss.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributIss(
      id: serializer.fromJson<int?>(json['id']),
      idTributOperacaoFiscal:
          serializer.fromJson<int?>(json['idTributOperacaoFiscal']),
      modalidadeBaseCalculo:
          serializer.fromJson<String?>(json['modalidadeBaseCalculo']),
      porcentoBaseCalculo:
          serializer.fromJson<double?>(json['porcentoBaseCalculo']),
      aliquotaPorcento: serializer.fromJson<double?>(json['aliquotaPorcento']),
      aliquotaUnidade: serializer.fromJson<double?>(json['aliquotaUnidade']),
      valorPrecoMaximo: serializer.fromJson<double?>(json['valorPrecoMaximo']),
      valorPautaFiscal: serializer.fromJson<double?>(json['valorPautaFiscal']),
      itemListaServico: serializer.fromJson<int?>(json['itemListaServico']),
      codigoTributacao: serializer.fromJson<String?>(json['codigoTributacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idTributOperacaoFiscal': serializer.toJson<int?>(idTributOperacaoFiscal),
      'modalidadeBaseCalculo':
          serializer.toJson<String?>(modalidadeBaseCalculo),
      'porcentoBaseCalculo': serializer.toJson<double?>(porcentoBaseCalculo),
      'aliquotaPorcento': serializer.toJson<double?>(aliquotaPorcento),
      'aliquotaUnidade': serializer.toJson<double?>(aliquotaUnidade),
      'valorPrecoMaximo': serializer.toJson<double?>(valorPrecoMaximo),
      'valorPautaFiscal': serializer.toJson<double?>(valorPautaFiscal),
      'itemListaServico': serializer.toJson<int?>(itemListaServico),
      'codigoTributacao': serializer.toJson<String?>(codigoTributacao),
    };
  }

  TributIss copyWith(
          {int? id,
          int? idTributOperacaoFiscal,
          String? modalidadeBaseCalculo,
          double? porcentoBaseCalculo,
          double? aliquotaPorcento,
          double? aliquotaUnidade,
          double? valorPrecoMaximo,
          double? valorPautaFiscal,
          int? itemListaServico,
          String? codigoTributacao}) =>
      TributIss(
        id: id ?? this.id,
        idTributOperacaoFiscal:
            idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
        modalidadeBaseCalculo:
            modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
        porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
        aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
        aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
        valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
        valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
        itemListaServico: itemListaServico ?? this.itemListaServico,
        codigoTributacao: codigoTributacao ?? this.codigoTributacao,
      );
  @override
  String toString() {
    return (StringBuffer('TributIss(')
          ..write('id: $id, ')
          ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal, ')
          ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
          ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
          ..write('aliquotaPorcento: $aliquotaPorcento, ')
          ..write('aliquotaUnidade: $aliquotaUnidade, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('valorPautaFiscal: $valorPautaFiscal, ')
          ..write('itemListaServico: $itemListaServico, ')
          ..write('codigoTributacao: $codigoTributacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idTributOperacaoFiscal,
      modalidadeBaseCalculo,
      porcentoBaseCalculo,
      aliquotaPorcento,
      aliquotaUnidade,
      valorPrecoMaximo,
      valorPautaFiscal,
      itemListaServico,
      codigoTributacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributIss &&
          other.id == this.id &&
          other.idTributOperacaoFiscal == this.idTributOperacaoFiscal &&
          other.modalidadeBaseCalculo == this.modalidadeBaseCalculo &&
          other.porcentoBaseCalculo == this.porcentoBaseCalculo &&
          other.aliquotaPorcento == this.aliquotaPorcento &&
          other.aliquotaUnidade == this.aliquotaUnidade &&
          other.valorPrecoMaximo == this.valorPrecoMaximo &&
          other.valorPautaFiscal == this.valorPautaFiscal &&
          other.itemListaServico == this.itemListaServico &&
          other.codigoTributacao == this.codigoTributacao);
}

class TributIsssCompanion extends UpdateCompanion<TributIss> {
  final Value<int?> id;
  final Value<int?> idTributOperacaoFiscal;
  final Value<String?> modalidadeBaseCalculo;
  final Value<double?> porcentoBaseCalculo;
  final Value<double?> aliquotaPorcento;
  final Value<double?> aliquotaUnidade;
  final Value<double?> valorPrecoMaximo;
  final Value<double?> valorPautaFiscal;
  final Value<int?> itemListaServico;
  final Value<String?> codigoTributacao;
  const TributIsssCompanion({
    this.id = const Value.absent(),
    this.idTributOperacaoFiscal = const Value.absent(),
    this.modalidadeBaseCalculo = const Value.absent(),
    this.porcentoBaseCalculo = const Value.absent(),
    this.aliquotaPorcento = const Value.absent(),
    this.aliquotaUnidade = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.valorPautaFiscal = const Value.absent(),
    this.itemListaServico = const Value.absent(),
    this.codigoTributacao = const Value.absent(),
  });
  TributIsssCompanion.insert({
    this.id = const Value.absent(),
    this.idTributOperacaoFiscal = const Value.absent(),
    this.modalidadeBaseCalculo = const Value.absent(),
    this.porcentoBaseCalculo = const Value.absent(),
    this.aliquotaPorcento = const Value.absent(),
    this.aliquotaUnidade = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.valorPautaFiscal = const Value.absent(),
    this.itemListaServico = const Value.absent(),
    this.codigoTributacao = const Value.absent(),
  });
  static Insertable<TributIss> custom({
    Expression<int>? id,
    Expression<int>? idTributOperacaoFiscal,
    Expression<String>? modalidadeBaseCalculo,
    Expression<double>? porcentoBaseCalculo,
    Expression<double>? aliquotaPorcento,
    Expression<double>? aliquotaUnidade,
    Expression<double>? valorPrecoMaximo,
    Expression<double>? valorPautaFiscal,
    Expression<int>? itemListaServico,
    Expression<String>? codigoTributacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idTributOperacaoFiscal != null)
        'ID_TRIBUT_OPERACAO_FISCAL': idTributOperacaoFiscal,
      if (modalidadeBaseCalculo != null)
        'MODALIDADE_BASE_CALCULO': modalidadeBaseCalculo,
      if (porcentoBaseCalculo != null)
        'PORCENTO_BASE_CALCULO': porcentoBaseCalculo,
      if (aliquotaPorcento != null) 'ALIQUOTA_PORCENTO': aliquotaPorcento,
      if (aliquotaUnidade != null) 'ALIQUOTA_UNIDADE': aliquotaUnidade,
      if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
      if (valorPautaFiscal != null) 'VALOR_PAUTA_FISCAL': valorPautaFiscal,
      if (itemListaServico != null) 'ITEM_LISTA_SERVICO': itemListaServico,
      if (codigoTributacao != null) 'CODIGO_TRIBUTACAO': codigoTributacao,
    });
  }

  TributIsssCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idTributOperacaoFiscal,
      Value<String?>? modalidadeBaseCalculo,
      Value<double?>? porcentoBaseCalculo,
      Value<double?>? aliquotaPorcento,
      Value<double?>? aliquotaUnidade,
      Value<double?>? valorPrecoMaximo,
      Value<double?>? valorPautaFiscal,
      Value<int?>? itemListaServico,
      Value<String?>? codigoTributacao}) {
    return TributIsssCompanion(
      id: id ?? this.id,
      idTributOperacaoFiscal:
          idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
      modalidadeBaseCalculo:
          modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
      porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
      aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
      aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
      valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
      valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
      itemListaServico: itemListaServico ?? this.itemListaServico,
      codigoTributacao: codigoTributacao ?? this.codigoTributacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idTributOperacaoFiscal.present) {
      map['ID_TRIBUT_OPERACAO_FISCAL'] =
          Variable<int>(idTributOperacaoFiscal.value);
    }
    if (modalidadeBaseCalculo.present) {
      map['MODALIDADE_BASE_CALCULO'] =
          Variable<String>(modalidadeBaseCalculo.value);
    }
    if (porcentoBaseCalculo.present) {
      map['PORCENTO_BASE_CALCULO'] =
          Variable<double>(porcentoBaseCalculo.value);
    }
    if (aliquotaPorcento.present) {
      map['ALIQUOTA_PORCENTO'] = Variable<double>(aliquotaPorcento.value);
    }
    if (aliquotaUnidade.present) {
      map['ALIQUOTA_UNIDADE'] = Variable<double>(aliquotaUnidade.value);
    }
    if (valorPrecoMaximo.present) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo.value);
    }
    if (valorPautaFiscal.present) {
      map['VALOR_PAUTA_FISCAL'] = Variable<double>(valorPautaFiscal.value);
    }
    if (itemListaServico.present) {
      map['ITEM_LISTA_SERVICO'] = Variable<int>(itemListaServico.value);
    }
    if (codigoTributacao.present) {
      map['CODIGO_TRIBUTACAO'] = Variable<String>(codigoTributacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributIsssCompanion(')
          ..write('id: $id, ')
          ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal, ')
          ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
          ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
          ..write('aliquotaPorcento: $aliquotaPorcento, ')
          ..write('aliquotaUnidade: $aliquotaUnidade, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('valorPautaFiscal: $valorPautaFiscal, ')
          ..write('itemListaServico: $itemListaServico, ')
          ..write('codigoTributacao: $codigoTributacao')
          ..write(')'))
        .toString();
  }
}

class $TributIsssTable extends TributIsss
    with TableInfo<$TributIsssTable, TributIss> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributIsssTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idTributOperacaoFiscalMeta =
      const VerificationMeta('idTributOperacaoFiscal');
  @override
  late final GeneratedColumn<int> idTributOperacaoFiscal =
      GeneratedColumn<int>('ID_TRIBUT_OPERACAO_FISCAL', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES TRIBUT_OPERACAO_FISCAL(ID)');
  final VerificationMeta _modalidadeBaseCalculoMeta =
      const VerificationMeta('modalidadeBaseCalculo');
  @override
  late final GeneratedColumn<String> modalidadeBaseCalculo =
      GeneratedColumn<String>('MODALIDADE_BASE_CALCULO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _porcentoBaseCalculoMeta =
      const VerificationMeta('porcentoBaseCalculo');
  @override
  late final GeneratedColumn<double> porcentoBaseCalculo =
      GeneratedColumn<double>('PORCENTO_BASE_CALCULO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaPorcentoMeta =
      const VerificationMeta('aliquotaPorcento');
  @override
  late final GeneratedColumn<double> aliquotaPorcento =
      GeneratedColumn<double>('ALIQUOTA_PORCENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaUnidadeMeta =
      const VerificationMeta('aliquotaUnidade');
  @override
  late final GeneratedColumn<double> aliquotaUnidade =
      GeneratedColumn<double>('ALIQUOTA_UNIDADE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPrecoMaximoMeta =
      const VerificationMeta('valorPrecoMaximo');
  @override
  late final GeneratedColumn<double> valorPrecoMaximo =
      GeneratedColumn<double>('VALOR_PRECO_MAXIMO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPautaFiscalMeta =
      const VerificationMeta('valorPautaFiscal');
  @override
  late final GeneratedColumn<double> valorPautaFiscal =
      GeneratedColumn<double>('VALOR_PAUTA_FISCAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _itemListaServicoMeta =
      const VerificationMeta('itemListaServico');
  @override
  late final GeneratedColumn<int> itemListaServico = GeneratedColumn<int>(
      'ITEM_LISTA_SERVICO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoTributacaoMeta =
      const VerificationMeta('codigoTributacao');
  @override
  late final GeneratedColumn<String> codigoTributacao =
      GeneratedColumn<String>('CODIGO_TRIBUTACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idTributOperacaoFiscal,
        modalidadeBaseCalculo,
        porcentoBaseCalculo,
        aliquotaPorcento,
        aliquotaUnidade,
        valorPrecoMaximo,
        valorPautaFiscal,
        itemListaServico,
        codigoTributacao
      ];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_ISS';
  @override
  String get actualTableName => 'TRIBUT_ISS';
  @override
  VerificationContext validateIntegrity(Insertable<TributIss> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_TRIBUT_OPERACAO_FISCAL')) {
      context.handle(
          _idTributOperacaoFiscalMeta,
          idTributOperacaoFiscal.isAcceptableOrUnknown(
              data['ID_TRIBUT_OPERACAO_FISCAL']!, _idTributOperacaoFiscalMeta));
    }
    if (data.containsKey('MODALIDADE_BASE_CALCULO')) {
      context.handle(
          _modalidadeBaseCalculoMeta,
          modalidadeBaseCalculo.isAcceptableOrUnknown(
              data['MODALIDADE_BASE_CALCULO']!, _modalidadeBaseCalculoMeta));
    }
    if (data.containsKey('PORCENTO_BASE_CALCULO')) {
      context.handle(
          _porcentoBaseCalculoMeta,
          porcentoBaseCalculo.isAcceptableOrUnknown(
              data['PORCENTO_BASE_CALCULO']!, _porcentoBaseCalculoMeta));
    }
    if (data.containsKey('ALIQUOTA_PORCENTO')) {
      context.handle(
          _aliquotaPorcentoMeta,
          aliquotaPorcento.isAcceptableOrUnknown(
              data['ALIQUOTA_PORCENTO']!, _aliquotaPorcentoMeta));
    }
    if (data.containsKey('ALIQUOTA_UNIDADE')) {
      context.handle(
          _aliquotaUnidadeMeta,
          aliquotaUnidade.isAcceptableOrUnknown(
              data['ALIQUOTA_UNIDADE']!, _aliquotaUnidadeMeta));
    }
    if (data.containsKey('VALOR_PRECO_MAXIMO')) {
      context.handle(
          _valorPrecoMaximoMeta,
          valorPrecoMaximo.isAcceptableOrUnknown(
              data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
    }
    if (data.containsKey('VALOR_PAUTA_FISCAL')) {
      context.handle(
          _valorPautaFiscalMeta,
          valorPautaFiscal.isAcceptableOrUnknown(
              data['VALOR_PAUTA_FISCAL']!, _valorPautaFiscalMeta));
    }
    if (data.containsKey('ITEM_LISTA_SERVICO')) {
      context.handle(
          _itemListaServicoMeta,
          itemListaServico.isAcceptableOrUnknown(
              data['ITEM_LISTA_SERVICO']!, _itemListaServicoMeta));
    }
    if (data.containsKey('CODIGO_TRIBUTACAO')) {
      context.handle(
          _codigoTributacaoMeta,
          codigoTributacao.isAcceptableOrUnknown(
              data['CODIGO_TRIBUTACAO']!, _codigoTributacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributIss map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributIss.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributIsssTable createAlias(String alias) {
    return $TributIsssTable(attachedDatabase, alias);
  }
}

class TributOperacaoFiscal extends DataClass
    implements Insertable<TributOperacaoFiscal> {
  final int? id;
  final String? descricao;
  final String? descricaoNaNf;
  final int? cfop;
  final String? observacao;
  TributOperacaoFiscal(
      {this.id,
      this.descricao,
      this.descricaoNaNf,
      this.cfop,
      this.observacao});
  factory TributOperacaoFiscal.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributOperacaoFiscal(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      descricaoNaNf: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO_NA_NF']),
      cfop: ValueSqlType.intType(data['${effectivePrefix}CFOP']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || descricaoNaNf != null) {
      map['DESCRICAO_NA_NF'] = Variable<String>(descricaoNaNf);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  TributOperacaoFiscalsCompanion toCompanion(bool nullToAbsent) {
    return TributOperacaoFiscalsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      descricaoNaNf: descricaoNaNf == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoNaNf),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory TributOperacaoFiscal.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributOperacaoFiscal(
      id: serializer.fromJson<int?>(json['id']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      descricaoNaNf: serializer.fromJson<String?>(json['descricaoNaNf']),
      cfop: serializer.fromJson<int?>(json['cfop']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'descricao': serializer.toJson<String?>(descricao),
      'descricaoNaNf': serializer.toJson<String?>(descricaoNaNf),
      'cfop': serializer.toJson<int?>(cfop),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  TributOperacaoFiscal copyWith(
          {int? id,
          String? descricao,
          String? descricaoNaNf,
          int? cfop,
          String? observacao}) =>
      TributOperacaoFiscal(
        id: id ?? this.id,
        descricao: descricao ?? this.descricao,
        descricaoNaNf: descricaoNaNf ?? this.descricaoNaNf,
        cfop: cfop ?? this.cfop,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('TributOperacaoFiscal(')
          ..write('id: $id, ')
          ..write('descricao: $descricao, ')
          ..write('descricaoNaNf: $descricaoNaNf, ')
          ..write('cfop: $cfop, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, descricao, descricaoNaNf, cfop, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributOperacaoFiscal &&
          other.id == this.id &&
          other.descricao == this.descricao &&
          other.descricaoNaNf == this.descricaoNaNf &&
          other.cfop == this.cfop &&
          other.observacao == this.observacao);
}

class TributOperacaoFiscalsCompanion
    extends UpdateCompanion<TributOperacaoFiscal> {
  final Value<int?> id;
  final Value<String?> descricao;
  final Value<String?> descricaoNaNf;
  final Value<int?> cfop;
  final Value<String?> observacao;
  const TributOperacaoFiscalsCompanion({
    this.id = const Value.absent(),
    this.descricao = const Value.absent(),
    this.descricaoNaNf = const Value.absent(),
    this.cfop = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  TributOperacaoFiscalsCompanion.insert({
    this.id = const Value.absent(),
    this.descricao = const Value.absent(),
    this.descricaoNaNf = const Value.absent(),
    this.cfop = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<TributOperacaoFiscal> custom({
    Expression<int>? id,
    Expression<String>? descricao,
    Expression<String>? descricaoNaNf,
    Expression<int>? cfop,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (descricao != null) 'DESCRICAO': descricao,
      if (descricaoNaNf != null) 'DESCRICAO_NA_NF': descricaoNaNf,
      if (cfop != null) 'CFOP': cfop,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  TributOperacaoFiscalsCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? descricao,
      Value<String?>? descricaoNaNf,
      Value<int?>? cfop,
      Value<String?>? observacao}) {
    return TributOperacaoFiscalsCompanion(
      id: id ?? this.id,
      descricao: descricao ?? this.descricao,
      descricaoNaNf: descricaoNaNf ?? this.descricaoNaNf,
      cfop: cfop ?? this.cfop,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (descricaoNaNf.present) {
      map['DESCRICAO_NA_NF'] = Variable<String>(descricaoNaNf.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributOperacaoFiscalsCompanion(')
          ..write('id: $id, ')
          ..write('descricao: $descricao, ')
          ..write('descricaoNaNf: $descricaoNaNf, ')
          ..write('cfop: $cfop, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $TributOperacaoFiscalsTable extends TributOperacaoFiscals
    with TableInfo<$TributOperacaoFiscalsTable, TributOperacaoFiscal> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributOperacaoFiscalsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoNaNfMeta =
      const VerificationMeta('descricaoNaNf');
  @override
  late final GeneratedColumn<String> descricaoNaNf = GeneratedColumn<String>(
      'DESCRICAO_NA_NF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
      'CFOP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, descricao, descricaoNaNf, cfop, observacao];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_OPERACAO_FISCAL';
  @override
  String get actualTableName => 'TRIBUT_OPERACAO_FISCAL';
  @override
  VerificationContext validateIntegrity(
      Insertable<TributOperacaoFiscal> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('DESCRICAO_NA_NF')) {
      context.handle(
          _descricaoNaNfMeta,
          descricaoNaNf.isAcceptableOrUnknown(
              data['DESCRICAO_NA_NF']!, _descricaoNaNfMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributOperacaoFiscal map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributOperacaoFiscal.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributOperacaoFiscalsTable createAlias(String alias) {
    return $TributOperacaoFiscalsTable(attachedDatabase, alias);
  }
}

class TributPis extends DataClass implements Insertable<TributPis> {
  final int? id;
  final int? idTributConfiguraOfGt;
  final String? cstPis;
  final String? efdTabela435;
  final String? modalidadeBaseCalculo;
  final double? porcentoBaseCalculo;
  final double? aliquotaPorcento;
  final double? aliquotaUnidade;
  final double? valorPrecoMaximo;
  final double? valorPautaFiscal;
  TributPis(
      {this.id,
      this.idTributConfiguraOfGt,
      this.cstPis,
      this.efdTabela435,
      this.modalidadeBaseCalculo,
      this.porcentoBaseCalculo,
      this.aliquotaPorcento,
      this.aliquotaUnidade,
      this.valorPrecoMaximo,
      this.valorPautaFiscal});
  factory TributPis.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return TributPis(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idTributConfiguraOfGt: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_CONFIGURA_OF_GT']),
      cstPis: ValueSqlType.stringType(data['${effectivePrefix}CST_PIS']),
      efdTabela435: ValueSqlType.stringType(data['${effectivePrefix}EFD_TABELA_435']),
      modalidadeBaseCalculo: ValueSqlType.stringType(
          data['${effectivePrefix}MODALIDADE_BASE_CALCULO']),
      porcentoBaseCalculo: ValueSqlType.doubleType(
          data['${effectivePrefix}PORCENTO_BASE_CALCULO']),
      aliquotaPorcento: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_PORCENTO']),
      aliquotaUnidade: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_UNIDADE']),
      valorPrecoMaximo: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PRECO_MAXIMO']),
      valorPautaFiscal: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PAUTA_FISCAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idTributConfiguraOfGt != null) {
      map['ID_TRIBUT_CONFIGURA_OF_GT'] = Variable<int>(idTributConfiguraOfGt);
    }
    if (!nullToAbsent || cstPis != null) {
      map['CST_PIS'] = Variable<String>(cstPis);
    }
    if (!nullToAbsent || efdTabela435 != null) {
      map['EFD_TABELA_435'] = Variable<String>(efdTabela435);
    }
    if (!nullToAbsent || modalidadeBaseCalculo != null) {
      map['MODALIDADE_BASE_CALCULO'] = Variable<String>(modalidadeBaseCalculo);
    }
    if (!nullToAbsent || porcentoBaseCalculo != null) {
      map['PORCENTO_BASE_CALCULO'] = Variable<double>(porcentoBaseCalculo);
    }
    if (!nullToAbsent || aliquotaPorcento != null) {
      map['ALIQUOTA_PORCENTO'] = Variable<double>(aliquotaPorcento);
    }
    if (!nullToAbsent || aliquotaUnidade != null) {
      map['ALIQUOTA_UNIDADE'] = Variable<double>(aliquotaUnidade);
    }
    if (!nullToAbsent || valorPrecoMaximo != null) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo);
    }
    if (!nullToAbsent || valorPautaFiscal != null) {
      map['VALOR_PAUTA_FISCAL'] = Variable<double>(valorPautaFiscal);
    }
    return map;
  }

  TributPissCompanion toCompanion(bool nullToAbsent) {
    return TributPissCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idTributConfiguraOfGt: idTributConfiguraOfGt == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributConfiguraOfGt),
      cstPis:
          cstPis == null && nullToAbsent ? const Value.absent() : Value(cstPis),
      efdTabela435: efdTabela435 == null && nullToAbsent
          ? const Value.absent()
          : Value(efdTabela435),
      modalidadeBaseCalculo: modalidadeBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(modalidadeBaseCalculo),
      porcentoBaseCalculo: porcentoBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(porcentoBaseCalculo),
      aliquotaPorcento: aliquotaPorcento == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPorcento),
      aliquotaUnidade: aliquotaUnidade == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaUnidade),
      valorPrecoMaximo: valorPrecoMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPrecoMaximo),
      valorPautaFiscal: valorPautaFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPautaFiscal),
    );
  }

  factory TributPis.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return TributPis(
      id: serializer.fromJson<int?>(json['id']),
      idTributConfiguraOfGt:
          serializer.fromJson<int?>(json['idTributConfiguraOfGt']),
      cstPis: serializer.fromJson<String?>(json['cstPis']),
      efdTabela435: serializer.fromJson<String?>(json['efdTabela435']),
      modalidadeBaseCalculo:
          serializer.fromJson<String?>(json['modalidadeBaseCalculo']),
      porcentoBaseCalculo:
          serializer.fromJson<double?>(json['porcentoBaseCalculo']),
      aliquotaPorcento: serializer.fromJson<double?>(json['aliquotaPorcento']),
      aliquotaUnidade: serializer.fromJson<double?>(json['aliquotaUnidade']),
      valorPrecoMaximo: serializer.fromJson<double?>(json['valorPrecoMaximo']),
      valorPautaFiscal: serializer.fromJson<double?>(json['valorPautaFiscal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idTributConfiguraOfGt': serializer.toJson<int?>(idTributConfiguraOfGt),
      'cstPis': serializer.toJson<String?>(cstPis),
      'efdTabela435': serializer.toJson<String?>(efdTabela435),
      'modalidadeBaseCalculo':
          serializer.toJson<String?>(modalidadeBaseCalculo),
      'porcentoBaseCalculo': serializer.toJson<double?>(porcentoBaseCalculo),
      'aliquotaPorcento': serializer.toJson<double?>(aliquotaPorcento),
      'aliquotaUnidade': serializer.toJson<double?>(aliquotaUnidade),
      'valorPrecoMaximo': serializer.toJson<double?>(valorPrecoMaximo),
      'valorPautaFiscal': serializer.toJson<double?>(valorPautaFiscal),
    };
  }

  TributPis copyWith(
          {int? id,
          int? idTributConfiguraOfGt,
          String? cstPis,
          String? efdTabela435,
          String? modalidadeBaseCalculo,
          double? porcentoBaseCalculo,
          double? aliquotaPorcento,
          double? aliquotaUnidade,
          double? valorPrecoMaximo,
          double? valorPautaFiscal}) =>
      TributPis(
        id: id ?? this.id,
        idTributConfiguraOfGt:
            idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
        cstPis: cstPis ?? this.cstPis,
        efdTabela435: efdTabela435 ?? this.efdTabela435,
        modalidadeBaseCalculo:
            modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
        porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
        aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
        aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
        valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
        valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
      );
  @override
  String toString() {
    return (StringBuffer('TributPis(')
          ..write('id: $id, ')
          ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
          ..write('cstPis: $cstPis, ')
          ..write('efdTabela435: $efdTabela435, ')
          ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
          ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
          ..write('aliquotaPorcento: $aliquotaPorcento, ')
          ..write('aliquotaUnidade: $aliquotaUnidade, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('valorPautaFiscal: $valorPautaFiscal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idTributConfiguraOfGt,
      cstPis,
      efdTabela435,
      modalidadeBaseCalculo,
      porcentoBaseCalculo,
      aliquotaPorcento,
      aliquotaUnidade,
      valorPrecoMaximo,
      valorPautaFiscal);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is TributPis &&
          other.id == this.id &&
          other.idTributConfiguraOfGt == this.idTributConfiguraOfGt &&
          other.cstPis == this.cstPis &&
          other.efdTabela435 == this.efdTabela435 &&
          other.modalidadeBaseCalculo == this.modalidadeBaseCalculo &&
          other.porcentoBaseCalculo == this.porcentoBaseCalculo &&
          other.aliquotaPorcento == this.aliquotaPorcento &&
          other.aliquotaUnidade == this.aliquotaUnidade &&
          other.valorPrecoMaximo == this.valorPrecoMaximo &&
          other.valorPautaFiscal == this.valorPautaFiscal);
}

class TributPissCompanion extends UpdateCompanion<TributPis> {
  final Value<int?> id;
  final Value<int?> idTributConfiguraOfGt;
  final Value<String?> cstPis;
  final Value<String?> efdTabela435;
  final Value<String?> modalidadeBaseCalculo;
  final Value<double?> porcentoBaseCalculo;
  final Value<double?> aliquotaPorcento;
  final Value<double?> aliquotaUnidade;
  final Value<double?> valorPrecoMaximo;
  final Value<double?> valorPautaFiscal;
  const TributPissCompanion({
    this.id = const Value.absent(),
    this.idTributConfiguraOfGt = const Value.absent(),
    this.cstPis = const Value.absent(),
    this.efdTabela435 = const Value.absent(),
    this.modalidadeBaseCalculo = const Value.absent(),
    this.porcentoBaseCalculo = const Value.absent(),
    this.aliquotaPorcento = const Value.absent(),
    this.aliquotaUnidade = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.valorPautaFiscal = const Value.absent(),
  });
  TributPissCompanion.insert({
    this.id = const Value.absent(),
    this.idTributConfiguraOfGt = const Value.absent(),
    this.cstPis = const Value.absent(),
    this.efdTabela435 = const Value.absent(),
    this.modalidadeBaseCalculo = const Value.absent(),
    this.porcentoBaseCalculo = const Value.absent(),
    this.aliquotaPorcento = const Value.absent(),
    this.aliquotaUnidade = const Value.absent(),
    this.valorPrecoMaximo = const Value.absent(),
    this.valorPautaFiscal = const Value.absent(),
  });
  static Insertable<TributPis> custom({
    Expression<int>? id,
    Expression<int>? idTributConfiguraOfGt,
    Expression<String>? cstPis,
    Expression<String>? efdTabela435,
    Expression<String>? modalidadeBaseCalculo,
    Expression<double>? porcentoBaseCalculo,
    Expression<double>? aliquotaPorcento,
    Expression<double>? aliquotaUnidade,
    Expression<double>? valorPrecoMaximo,
    Expression<double>? valorPautaFiscal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idTributConfiguraOfGt != null)
        'ID_TRIBUT_CONFIGURA_OF_GT': idTributConfiguraOfGt,
      if (cstPis != null) 'CST_PIS': cstPis,
      if (efdTabela435 != null) 'EFD_TABELA_435': efdTabela435,
      if (modalidadeBaseCalculo != null)
        'MODALIDADE_BASE_CALCULO': modalidadeBaseCalculo,
      if (porcentoBaseCalculo != null)
        'PORCENTO_BASE_CALCULO': porcentoBaseCalculo,
      if (aliquotaPorcento != null) 'ALIQUOTA_PORCENTO': aliquotaPorcento,
      if (aliquotaUnidade != null) 'ALIQUOTA_UNIDADE': aliquotaUnidade,
      if (valorPrecoMaximo != null) 'VALOR_PRECO_MAXIMO': valorPrecoMaximo,
      if (valorPautaFiscal != null) 'VALOR_PAUTA_FISCAL': valorPautaFiscal,
    });
  }

  TributPissCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idTributConfiguraOfGt,
      Value<String?>? cstPis,
      Value<String?>? efdTabela435,
      Value<String?>? modalidadeBaseCalculo,
      Value<double?>? porcentoBaseCalculo,
      Value<double?>? aliquotaPorcento,
      Value<double?>? aliquotaUnidade,
      Value<double?>? valorPrecoMaximo,
      Value<double?>? valorPautaFiscal}) {
    return TributPissCompanion(
      id: id ?? this.id,
      idTributConfiguraOfGt:
          idTributConfiguraOfGt ?? this.idTributConfiguraOfGt,
      cstPis: cstPis ?? this.cstPis,
      efdTabela435: efdTabela435 ?? this.efdTabela435,
      modalidadeBaseCalculo:
          modalidadeBaseCalculo ?? this.modalidadeBaseCalculo,
      porcentoBaseCalculo: porcentoBaseCalculo ?? this.porcentoBaseCalculo,
      aliquotaPorcento: aliquotaPorcento ?? this.aliquotaPorcento,
      aliquotaUnidade: aliquotaUnidade ?? this.aliquotaUnidade,
      valorPrecoMaximo: valorPrecoMaximo ?? this.valorPrecoMaximo,
      valorPautaFiscal: valorPautaFiscal ?? this.valorPautaFiscal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idTributConfiguraOfGt.present) {
      map['ID_TRIBUT_CONFIGURA_OF_GT'] =
          Variable<int>(idTributConfiguraOfGt.value);
    }
    if (cstPis.present) {
      map['CST_PIS'] = Variable<String>(cstPis.value);
    }
    if (efdTabela435.present) {
      map['EFD_TABELA_435'] = Variable<String>(efdTabela435.value);
    }
    if (modalidadeBaseCalculo.present) {
      map['MODALIDADE_BASE_CALCULO'] =
          Variable<String>(modalidadeBaseCalculo.value);
    }
    if (porcentoBaseCalculo.present) {
      map['PORCENTO_BASE_CALCULO'] =
          Variable<double>(porcentoBaseCalculo.value);
    }
    if (aliquotaPorcento.present) {
      map['ALIQUOTA_PORCENTO'] = Variable<double>(aliquotaPorcento.value);
    }
    if (aliquotaUnidade.present) {
      map['ALIQUOTA_UNIDADE'] = Variable<double>(aliquotaUnidade.value);
    }
    if (valorPrecoMaximo.present) {
      map['VALOR_PRECO_MAXIMO'] = Variable<double>(valorPrecoMaximo.value);
    }
    if (valorPautaFiscal.present) {
      map['VALOR_PAUTA_FISCAL'] = Variable<double>(valorPautaFiscal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('TributPissCompanion(')
          ..write('id: $id, ')
          ..write('idTributConfiguraOfGt: $idTributConfiguraOfGt, ')
          ..write('cstPis: $cstPis, ')
          ..write('efdTabela435: $efdTabela435, ')
          ..write('modalidadeBaseCalculo: $modalidadeBaseCalculo, ')
          ..write('porcentoBaseCalculo: $porcentoBaseCalculo, ')
          ..write('aliquotaPorcento: $aliquotaPorcento, ')
          ..write('aliquotaUnidade: $aliquotaUnidade, ')
          ..write('valorPrecoMaximo: $valorPrecoMaximo, ')
          ..write('valorPautaFiscal: $valorPautaFiscal')
          ..write(')'))
        .toString();
  }
}

class $TributPissTable extends TributPiss
    with TableInfo<$TributPissTable, TributPis> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $TributPissTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idTributConfiguraOfGtMeta =
      const VerificationMeta('idTributConfiguraOfGt');
  @override
  late final GeneratedColumn<int> idTributConfiguraOfGt =
      GeneratedColumn<int>('ID_TRIBUT_CONFIGURA_OF_GT', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES TRIBUT_CONFIGURA_OF_GT(ID)');
  final VerificationMeta _cstPisMeta = const VerificationMeta('cstPis');
  @override
  late final GeneratedColumn<String> cstPis = GeneratedColumn<String>(
      'CST_PIS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _efdTabela435Meta =
      const VerificationMeta('efdTabela435');
  @override
  late final GeneratedColumn<String> efdTabela435 = GeneratedColumn<String>(
      'EFD_TABELA_435', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modalidadeBaseCalculoMeta =
      const VerificationMeta('modalidadeBaseCalculo');
  @override
  late final GeneratedColumn<String> modalidadeBaseCalculo =
      GeneratedColumn<String>('MODALIDADE_BASE_CALCULO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _porcentoBaseCalculoMeta =
      const VerificationMeta('porcentoBaseCalculo');
  @override
  late final GeneratedColumn<double> porcentoBaseCalculo =
      GeneratedColumn<double>('PORCENTO_BASE_CALCULO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaPorcentoMeta =
      const VerificationMeta('aliquotaPorcento');
  @override
  late final GeneratedColumn<double> aliquotaPorcento =
      GeneratedColumn<double>('ALIQUOTA_PORCENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaUnidadeMeta =
      const VerificationMeta('aliquotaUnidade');
  @override
  late final GeneratedColumn<double> aliquotaUnidade =
      GeneratedColumn<double>('ALIQUOTA_UNIDADE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPrecoMaximoMeta =
      const VerificationMeta('valorPrecoMaximo');
  @override
  late final GeneratedColumn<double> valorPrecoMaximo =
      GeneratedColumn<double>('VALOR_PRECO_MAXIMO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPautaFiscalMeta =
      const VerificationMeta('valorPautaFiscal');
  @override
  late final GeneratedColumn<double> valorPautaFiscal =
      GeneratedColumn<double>('VALOR_PAUTA_FISCAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idTributConfiguraOfGt,
        cstPis,
        efdTabela435,
        modalidadeBaseCalculo,
        porcentoBaseCalculo,
        aliquotaPorcento,
        aliquotaUnidade,
        valorPrecoMaximo,
        valorPautaFiscal
      ];
  @override
  String get aliasedName => _alias ?? 'TRIBUT_PIS';
  @override
  String get actualTableName => 'TRIBUT_PIS';
  @override
  VerificationContext validateIntegrity(Insertable<TributPis> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_TRIBUT_CONFIGURA_OF_GT')) {
      context.handle(
          _idTributConfiguraOfGtMeta,
          idTributConfiguraOfGt.isAcceptableOrUnknown(
              data['ID_TRIBUT_CONFIGURA_OF_GT']!, _idTributConfiguraOfGtMeta));
    }
    if (data.containsKey('CST_PIS')) {
      context.handle(_cstPisMeta,
          cstPis.isAcceptableOrUnknown(data['CST_PIS']!, _cstPisMeta));
    }
    if (data.containsKey('EFD_TABELA_435')) {
      context.handle(
          _efdTabela435Meta,
          efdTabela435.isAcceptableOrUnknown(
              data['EFD_TABELA_435']!, _efdTabela435Meta));
    }
    if (data.containsKey('MODALIDADE_BASE_CALCULO')) {
      context.handle(
          _modalidadeBaseCalculoMeta,
          modalidadeBaseCalculo.isAcceptableOrUnknown(
              data['MODALIDADE_BASE_CALCULO']!, _modalidadeBaseCalculoMeta));
    }
    if (data.containsKey('PORCENTO_BASE_CALCULO')) {
      context.handle(
          _porcentoBaseCalculoMeta,
          porcentoBaseCalculo.isAcceptableOrUnknown(
              data['PORCENTO_BASE_CALCULO']!, _porcentoBaseCalculoMeta));
    }
    if (data.containsKey('ALIQUOTA_PORCENTO')) {
      context.handle(
          _aliquotaPorcentoMeta,
          aliquotaPorcento.isAcceptableOrUnknown(
              data['ALIQUOTA_PORCENTO']!, _aliquotaPorcentoMeta));
    }
    if (data.containsKey('ALIQUOTA_UNIDADE')) {
      context.handle(
          _aliquotaUnidadeMeta,
          aliquotaUnidade.isAcceptableOrUnknown(
              data['ALIQUOTA_UNIDADE']!, _aliquotaUnidadeMeta));
    }
    if (data.containsKey('VALOR_PRECO_MAXIMO')) {
      context.handle(
          _valorPrecoMaximoMeta,
          valorPrecoMaximo.isAcceptableOrUnknown(
              data['VALOR_PRECO_MAXIMO']!, _valorPrecoMaximoMeta));
    }
    if (data.containsKey('VALOR_PAUTA_FISCAL')) {
      context.handle(
          _valorPautaFiscalMeta,
          valorPautaFiscal.isAcceptableOrUnknown(
              data['VALOR_PAUTA_FISCAL']!, _valorPautaFiscalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  TributPis map(Map<String, dynamic> data, {String? tablePrefix}) {
    return TributPis.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $TributPissTable createAlias(String alias) {
    return $TributPissTable(attachedDatabase, alias);
  }
}

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(super.e) /*: super(e, SqlTypeSystem.defaultInstance)*/;
  late final cardapios = $CardapiosTable(this);
  late final cardapioPerguntaPadraos = $CardapioPerguntaPadraosTable(this);
  late final cardapioRespostaPadraos = $CardapioRespostaPadraosTable(this);
  late final cfops = $CfopsTable(this);
  late final clientes = $ClientesTable(this);
  late final clienteFiados = $ClienteFiadosTable(this);
  late final colaboradors = $ColaboradorsTable(this);
  late final comandas = $ComandasTable(this);
  late final comandaDetalhes = $ComandaDetalhesTable(this);
  late final comandaDetalheComplementos = $ComandaDetalheComplementosTable(this);
  late final comandaObservacaoPadraos = $ComandaObservacaoPadraosTable(this);
  late final comandaPedidos = $ComandaPedidosTable(this);
  late final compraPedidoCabecalhos =
      $CompraPedidoCabecalhosTable(this);
  late final compraPedidoDetalhes =
      $CompraPedidoDetalhesTable(this);
  late final $ContadorsTable contadors = $ContadorsTable(this);
  late final $ContasPagarsTable contasPagars = $ContasPagarsTable(this);
  late final $ContasRecebersTable contasRecebers = $ContasRecebersTable(this);
  late final $CozinhasTable cozinhas = $CozinhasTable(this);
  late final $DeliverysTable deliverys = $DeliverysTable(this);
  late final $DeliveryAcertosTable deliveryAcertos =
      $DeliveryAcertosTable(this);
  late final $DeliveryAcertoComandasTable deliveryAcertoComandas =
      $DeliveryAcertoComandasTable(this);
  late final $EcfAliquotassTable ecfAliquotass = $EcfAliquotassTable(this);
  late final $EcfDocumentosEmitidossTable ecfDocumentosEmitidoss =
      $EcfDocumentosEmitidossTable(this);
  late final $EcfE3sTable ecfE3s = $EcfE3sTable(this);
  late final $EcfImpressorasTable ecfImpressoras = $EcfImpressorasTable(this);
  late final $EcfLogTotaissTable ecfLogTotaiss = $EcfLogTotaissTable(this);
  late final $EcfR01sTable ecfR01s = $EcfR01sTable(this);
  late final $EcfR02sTable ecfR02s = $EcfR02sTable(this);
  late final $EcfR03sTable ecfR03s = $EcfR03sTable(this);
  late final $EcfR06sTable ecfR06s = $EcfR06sTable(this);
  late final $EcfR07sTable ecfR07s = $EcfR07sTable(this);
  late final $EcfRecebimentoNaoFiscalsTable ecfRecebimentoNaoFiscals =
      $EcfRecebimentoNaoFiscalsTable(this);
  late final $EcfRelatorioGerencialsTable ecfRelatorioGerencials =
      $EcfRelatorioGerencialsTable(this);
  late final $EcfSintegra60AsTable ecfSintegra60As =
      $EcfSintegra60AsTable(this);
  late final $EcfSintegra60MsTable ecfSintegra60Ms =
      $EcfSintegra60MsTable(this);
  late final $EmpresasTable empresas = $EmpresasTable(this);
  late final $EmpresaCnaesTable empresaCnaes = $EmpresaCnaesTable(this);
  late final $EmpresaDeliveryPedidosTable empresaDeliveryPedidos =
      $EmpresaDeliveryPedidosTable(this);
  late final $EmpresaSegmentosTable empresaSegmentos =
      $EmpresaSegmentosTable(this);
  late final $EntregadorRotasTable entregadorRotas =
      $EntregadorRotasTable(this);
  late final $EntregadorRotaDetalhesTable entregadorRotaDetalhes =
      $EntregadorRotaDetalhesTable(this);
  late final $FidelidadeHistoricosTable fidelidadeHistoricos =
      $FidelidadeHistoricosTable(this);
  late final $FidelidadeUtilizadosTable fidelidadeUtilizados =
      $FidelidadeUtilizadosTable(this);
  late final $FornecedorsTable fornecedors = $FornecedorsTable(this);
  late final $IbptsTable ibpts = $IbptsTable(this);
  late final $LogImportacaosTable logImportacaos = $LogImportacaosTable(this);
  late final $MesasTable mesas = $MesasTable(this);
  late final $NfcePlanoPagamentosTable nfcePlanoPagamentos =
      $NfcePlanoPagamentosTable(this);
  late final $NfeAcessoXmlsTable nfeAcessoXmls = $NfeAcessoXmlsTable(this);
  late final $NfeCabecalhosTable nfeCabecalhos = $NfeCabecalhosTable(this);
  late final $NfeCanasTable nfeCanas = $NfeCanasTable(this);
  late final $NfeCanaDeducoesSafrasTable nfeCanaDeducoesSafras =
      $NfeCanaDeducoesSafrasTable(this);
  late final $NfeCanaFornecimentoDiariosTable nfeCanaFornecimentoDiarios =
      $NfeCanaFornecimentoDiariosTable(this);
  late final $NfeConfiguracaosTable nfeConfiguracaos =
      $NfeConfiguracaosTable(this);
  late final $NfeCteReferenciadosTable nfeCteReferenciados =
      $NfeCteReferenciadosTable(this);
  late final $NfeCupomFiscalReferenciadosTable nfeCupomFiscalReferenciados =
      $NfeCupomFiscalReferenciadosTable(this);
  late final $NfeDeclaracaoImportacaosTable nfeDeclaracaoImportacaos =
      $NfeDeclaracaoImportacaosTable(this);
  late final $NfeDestinatariosTable nfeDestinatarios =
      $NfeDestinatariosTable(this);
  late final $NfeDetEspecificoArmamentosTable nfeDetEspecificoArmamentos =
      $NfeDetEspecificoArmamentosTable(this);
  late final $NfeDetEspecificoCombustivelsTable nfeDetEspecificoCombustivels =
      $NfeDetEspecificoCombustivelsTable(this);
  late final $NfeDetEspecificoMedicamentosTable nfeDetEspecificoMedicamentos =
      $NfeDetEspecificoMedicamentosTable(this);
  late final $NfeDetEspecificoVeiculosTable nfeDetEspecificoVeiculos =
      $NfeDetEspecificoVeiculosTable(this);
  late final $NfeDetalhesTable nfeDetalhes = $NfeDetalhesTable(this);
  late final $NfeDetalheImpostoCofinssTable nfeDetalheImpostoCofinss =
      $NfeDetalheImpostoCofinssTable(this);
  late final $NfeDetalheImpostoCofinsStsTable nfeDetalheImpostoCofinsSts =
      $NfeDetalheImpostoCofinsStsTable(this);
  late final $NfeDetalheImpostoIcmssTable nfeDetalheImpostoIcmss =
      $NfeDetalheImpostoIcmssTable(this);
  late final $NfeDetalheImpostoIcmsUfdestsTable nfeDetalheImpostoIcmsUfdests =
      $NfeDetalheImpostoIcmsUfdestsTable(this);
  late final $NfeDetalheImpostoIisTable nfeDetalheImpostoIis =
      $NfeDetalheImpostoIisTable(this);
  late final $NfeDetalheImpostoIpisTable nfeDetalheImpostoIpis =
      $NfeDetalheImpostoIpisTable(this);
  late final $NfeDetalheImpostoIssqnsTable nfeDetalheImpostoIssqns =
      $NfeDetalheImpostoIssqnsTable(this);
  late final $NfeDetalheImpostoPissTable nfeDetalheImpostoPiss =
      $NfeDetalheImpostoPissTable(this);
  late final $NfeDetalheImpostoPisStsTable nfeDetalheImpostoPisSts =
      $NfeDetalheImpostoPisStsTable(this);
  late final $NfeDuplicatasTable nfeDuplicatas = $NfeDuplicatasTable(this);
  late final $NfeEmitentesTable nfeEmitentes = $NfeEmitentesTable(this);
  late final $NfeExportacaosTable nfeExportacaos = $NfeExportacaosTable(this);
  late final $NfeFaturasTable nfeFaturas = $NfeFaturasTable(this);
  late final $NfeImportacaoDetalhesTable nfeImportacaoDetalhes =
      $NfeImportacaoDetalhesTable(this);
  late final $NfeInformacaoPagamentosTable nfeInformacaoPagamentos =
      $NfeInformacaoPagamentosTable(this);
  late final $NfeItemRastreadosTable nfeItemRastreados =
      $NfeItemRastreadosTable(this);
  late final $NfeLocalEntregasTable nfeLocalEntregas =
      $NfeLocalEntregasTable(this);
  late final $NfeLocalRetiradasTable nfeLocalRetiradas =
      $NfeLocalRetiradasTable(this);
  late final $NfeNfReferenciadasTable nfeNfReferenciadas =
      $NfeNfReferenciadasTable(this);
  late final $NfeNumerosTable nfeNumeros = $NfeNumerosTable(this);
  late final $NfeNumeroInutilizadosTable nfeNumeroInutilizados =
      $NfeNumeroInutilizadosTable(this);
  late final $NfeProcessoReferenciadosTable nfeProcessoReferenciados =
      $NfeProcessoReferenciadosTable(this);
  late final $NfeProdRuralReferenciadasTable nfeProdRuralReferenciadas =
      $NfeProdRuralReferenciadasTable(this);
  late final $NfeReferenciadasTable nfeReferenciadas =
      $NfeReferenciadasTable(this);
  late final $NfeResponsavelTecnicosTable nfeResponsavelTecnicos =
      $NfeResponsavelTecnicosTable(this);
  late final $NfeTransportesTable nfeTransportes = $NfeTransportesTable(this);
  late final $NfeTransporteReboquesTable nfeTransporteReboques =
      $NfeTransporteReboquesTable(this);
  late final $NfeTransporteVolumesTable nfeTransporteVolumes =
      $NfeTransporteVolumesTable(this);
  late final $NfeTransporteVolumeLacresTable nfeTransporteVolumeLacres =
      $NfeTransporteVolumeLacresTable(this);
  late final $PdvCaixasTable pdvCaixas = $PdvCaixasTable(this);
  late final $PdvConfiguracaosTable pdvConfiguracaos =
      $PdvConfiguracaosTable(this);
  late final $PdvConfiguracaoBalancasTable pdvConfiguracaoBalancas =
      $PdvConfiguracaoBalancasTable(this);
  late final $PdvConfiguracaoLeitorSerialsTable pdvConfiguracaoLeitorSerials =
      $PdvConfiguracaoLeitorSerialsTable(this);
  late final $PdvFechamentosTable pdvFechamentos = $PdvFechamentosTable(this);
  late final $PdvMovimentosTable pdvMovimentos = $PdvMovimentosTable(this);
  late final $PdvOperadorsTable pdvOperadors = $PdvOperadorsTable(this);
  late final $PdvSangriasTable pdvSangrias = $PdvSangriasTable(this);
  late final $PdvSuprimentosTable pdvSuprimentos = $PdvSuprimentosTable(this);
  late final $PdvTipoPagamentosTable pdvTipoPagamentos =
      $PdvTipoPagamentosTable(this);
  late final $PdvTotalTipoPagamentosTable pdvTotalTipoPagamentos =
      $PdvTotalTipoPagamentosTable(this);
  late final $PdvVendaCabecalhosTable pdvVendaCabecalhos =
      $PdvVendaCabecalhosTable(this);
  late final $PdvVendaDetalhesTable pdvVendaDetalhes =
      $PdvVendaDetalhesTable(this);
  late final $ProdutosTable produtos = $ProdutosTable(this);
  late final $ProdutoFichaTecnicasTable produtoFichaTecnicas =
      $ProdutoFichaTecnicasTable(this);
  late final $ProdutoGruposTable produtoGrupos = $ProdutoGruposTable(this);
  late final $ProdutoImagemsTable produtoImagems = $ProdutoImagemsTable(this);
  late final $ProdutoPromocaosTable produtoPromocaos =
      $ProdutoPromocaosTable(this);
  late final $ProdutoSubgruposTable produtoSubgrupos =
      $ProdutoSubgruposTable(this);
  late final $ProdutoTiposTable produtoTipos = $ProdutoTiposTable(this);
  late final $ProdutoUnidadesTable produtoUnidades =
      $ProdutoUnidadesTable(this);
  late final $ReservasTable reservas = $ReservasTable(this);
  late final $ReservaMesasTable reservaMesas = $ReservaMesasTable(this);
  late final $TaxaEntregasTable taxaEntregas = $TaxaEntregasTable(this);
  late final $TributCofinssTable tributCofinss = $TributCofinssTable(this);
  late final $TributConfiguraOfGtsTable tributConfiguraOfGts =
      $TributConfiguraOfGtsTable(this);
  late final $TributGrupoTributariosTable tributGrupoTributarios =
      $TributGrupoTributariosTable(this);
  late final $TributIcmsCustomCabsTable tributIcmsCustomCabs =
      $TributIcmsCustomCabsTable(this);
  late final $TributIcmsCustomDetsTable tributIcmsCustomDets =
      $TributIcmsCustomDetsTable(this);
  late final $TributIcmsUfsTable tributIcmsUfs = $TributIcmsUfsTable(this);
  late final $TributIpisTable tributIpis = $TributIpisTable(this);
  late final $TributIsssTable tributIsss = $TributIsssTable(this);
  late final $TributOperacaoFiscalsTable tributOperacaoFiscals =
      $TributOperacaoFiscalsTable(this);
  late final $TributPissTable tributPiss = $TributPissTable(this);
  late final CardapioDao cardapioDao = CardapioDao(this as AppDatabase);
  late final CardapioPerguntaPadraoDao cardapioPerguntaPadraoDao =
      CardapioPerguntaPadraoDao(this as AppDatabase);
  late final CardapioRespostaPadraoDao cardapioRespostaPadraoDao =
      CardapioRespostaPadraoDao(this as AppDatabase);
  late final CfopDao cfopDao = CfopDao(this as AppDatabase);
  late final ClienteDao clienteDao = ClienteDao(this as AppDatabase);
  late final ClienteFiadoDao clienteFiadoDao =
      ClienteFiadoDao(this as AppDatabase);
  late final ColaboradorDao colaboradorDao =
      ColaboradorDao(this as AppDatabase);
  late final ComandaDao comandaDao = ComandaDao(this as AppDatabase);
  late final ComandaDetalheDao comandaDetalheDao =
      ComandaDetalheDao(this as AppDatabase);
  late final ComandaDetalheComplementoDao comandaDetalheComplementoDao =
      ComandaDetalheComplementoDao(this as AppDatabase);
  late final ComandaObservacaoPadraoDao comandaObservacaoPadraoDao =
      ComandaObservacaoPadraoDao(this as AppDatabase);
  late final ComandaPedidoDao comandaPedidoDao =
      ComandaPedidoDao(this as AppDatabase);
  late final CompraPedidoCabecalhoDao compraPedidoCabecalhoDao =
      CompraPedidoCabecalhoDao(this as AppDatabase);
  late final CompraPedidoDetalheDao compraPedidoDetalheDao =
      CompraPedidoDetalheDao(this as AppDatabase);
  late final ContadorDao contadorDao = ContadorDao(this as AppDatabase);
  late final ContasPagarDao contasPagarDao =
      ContasPagarDao(this as AppDatabase);
  late final ContasReceberDao contasReceberDao =
      ContasReceberDao(this as AppDatabase);
  late final CozinhaDao cozinhaDao = CozinhaDao(this as AppDatabase);
  late final DeliveryDao deliveryDao = DeliveryDao(this as AppDatabase);
  late final DeliveryAcertoDao deliveryAcertoDao =
      DeliveryAcertoDao(this as AppDatabase);
  late final DeliveryAcertoComandaDao deliveryAcertoComandaDao =
      DeliveryAcertoComandaDao(this as AppDatabase);
  late final EcfAliquotasDao ecfAliquotasDao =
      EcfAliquotasDao(this as AppDatabase);
  late final EcfDocumentosEmitidosDao ecfDocumentosEmitidosDao =
      EcfDocumentosEmitidosDao(this as AppDatabase);
  late final EcfE3Dao ecfE3Dao = EcfE3Dao(this as AppDatabase);
  late final EcfImpressoraDao ecfImpressoraDao =
      EcfImpressoraDao(this as AppDatabase);
  late final EcfLogTotaisDao ecfLogTotaisDao =
      EcfLogTotaisDao(this as AppDatabase);
  late final EcfR01Dao ecfR01Dao = EcfR01Dao(this as AppDatabase);
  late final EcfR02Dao ecfR02Dao = EcfR02Dao(this as AppDatabase);
  late final EcfR03Dao ecfR03Dao = EcfR03Dao(this as AppDatabase);
  late final EcfR06Dao ecfR06Dao = EcfR06Dao(this as AppDatabase);
  late final EcfR07Dao ecfR07Dao = EcfR07Dao(this as AppDatabase);
  late final EcfRecebimentoNaoFiscalDao ecfRecebimentoNaoFiscalDao =
      EcfRecebimentoNaoFiscalDao(this as AppDatabase);
  late final EcfRelatorioGerencialDao ecfRelatorioGerencialDao =
      EcfRelatorioGerencialDao(this as AppDatabase);
  late final EcfSintegra60ADao ecfSintegra60ADao =
      EcfSintegra60ADao(this as AppDatabase);
  late final EcfSintegra60MDao ecfSintegra60MDao =
      EcfSintegra60MDao(this as AppDatabase);
  late final EmpresaDao empresaDao = EmpresaDao(this as AppDatabase);
  late final EmpresaCnaeDao empresaCnaeDao =
      EmpresaCnaeDao(this as AppDatabase);
  late final EmpresaDeliveryPedidoDao empresaDeliveryPedidoDao =
      EmpresaDeliveryPedidoDao(this as AppDatabase);
  late final EmpresaSegmentoDao empresaSegmentoDao =
      EmpresaSegmentoDao(this as AppDatabase);
  late final EntregadorRotaDao entregadorRotaDao =
      EntregadorRotaDao(this as AppDatabase);
  late final EntregadorRotaDetalheDao entregadorRotaDetalheDao =
      EntregadorRotaDetalheDao(this as AppDatabase);
  late final FidelidadeHistoricoDao fidelidadeHistoricoDao =
      FidelidadeHistoricoDao(this as AppDatabase);
  late final FidelidadeUtilizadoDao fidelidadeUtilizadoDao =
      FidelidadeUtilizadoDao(this as AppDatabase);
  late final FornecedorDao fornecedorDao = FornecedorDao(this as AppDatabase);
  late final IbptDao ibptDao = IbptDao(this as AppDatabase);
  late final LogImportacaoDao logImportacaoDao =
      LogImportacaoDao(this as AppDatabase);
  late final MesaDao mesaDao = MesaDao(this as AppDatabase);
  late final NfcePlanoPagamentoDao nfcePlanoPagamentoDao =
      NfcePlanoPagamentoDao(this as AppDatabase);
  late final NfeCabecalhoDao nfeCabecalhoDao =
      NfeCabecalhoDao(this as AppDatabase);
  late final NfeConfiguracaoDao nfeConfiguracaoDao =
      NfeConfiguracaoDao(this as AppDatabase);
  late final NfeNumeroDao nfeNumeroDao = NfeNumeroDao(this as AppDatabase);
  late final NfeNumeroInutilizadoDao nfeNumeroInutilizadoDao =
      NfeNumeroInutilizadoDao(this as AppDatabase);
  late final PdvCaixaDao pdvCaixaDao = PdvCaixaDao(this as AppDatabase);
  late final PdvConfiguracaoDao pdvConfiguracaoDao =
      PdvConfiguracaoDao(this as AppDatabase);
  late final PdvConfiguracaoBalancaDao pdvConfiguracaoBalancaDao =
      PdvConfiguracaoBalancaDao(this as AppDatabase);
  late final PdvConfiguracaoLeitorSerialDao pdvConfiguracaoLeitorSerialDao =
      PdvConfiguracaoLeitorSerialDao(this as AppDatabase);
  late final PdvFechamentoDao pdvFechamentoDao =
      PdvFechamentoDao(this as AppDatabase);
  late final PdvMovimentoDao pdvMovimentoDao =
      PdvMovimentoDao(this as AppDatabase);
  late final PdvOperadorDao pdvOperadorDao =
      PdvOperadorDao(this as AppDatabase);
  late final PdvSangriaDao pdvSangriaDao = PdvSangriaDao(this as AppDatabase);
  late final PdvSuprimentoDao pdvSuprimentoDao =
      PdvSuprimentoDao(this as AppDatabase);
  late final PdvTipoPagamentoDao pdvTipoPagamentoDao =
      PdvTipoPagamentoDao(this as AppDatabase);
  late final PdvTotalTipoPagamentoDao pdvTotalTipoPagamentoDao =
      PdvTotalTipoPagamentoDao(this as AppDatabase);
  late final PdvVendaCabecalhoDao pdvVendaCabecalhoDao =
      PdvVendaCabecalhoDao(this as AppDatabase);
  late final PdvVendaDetalheDao pdvVendaDetalheDao =
      PdvVendaDetalheDao(this as AppDatabase);
  late final ProdutoDao produtoDao = ProdutoDao(this as AppDatabase);
  late final ProdutoFichaTecnicaDao produtoFichaTecnicaDao =
      ProdutoFichaTecnicaDao(this as AppDatabase);
  late final ProdutoGrupoDao produtoGrupoDao =
      ProdutoGrupoDao(this as AppDatabase);
  late final ProdutoImagemDao produtoImagemDao =
      ProdutoImagemDao(this as AppDatabase);
  late final ProdutoPromocaoDao produtoPromocaoDao =
      ProdutoPromocaoDao(this as AppDatabase);
  late final ProdutoSubgrupoDao produtoSubgrupoDao =
      ProdutoSubgrupoDao(this as AppDatabase);
  late final ProdutoTipoDao produtoTipoDao =
      ProdutoTipoDao(this as AppDatabase);
  late final ProdutoUnidadeDao produtoUnidadeDao =
      ProdutoUnidadeDao(this as AppDatabase);
  late final ReservaDao reservaDao = ReservaDao(this as AppDatabase);
  late final ReservaMesaDao reservaMesaDao =
      ReservaMesaDao(this as AppDatabase);
  late final TaxaEntregaDao taxaEntregaDao =
      TaxaEntregaDao(this as AppDatabase);
  late final TributConfiguraOfGtDao tributConfiguraOfGtDao =
      TributConfiguraOfGtDao(this as AppDatabase);
  late final TributGrupoTributarioDao tributGrupoTributarioDao =
      TributGrupoTributarioDao(this as AppDatabase);
  late final TributIcmsCustomCabDao tributIcmsCustomCabDao =
      TributIcmsCustomCabDao(this as AppDatabase);
  late final TributOperacaoFiscalDao tributOperacaoFiscalDao =
      TributOperacaoFiscalDao(this as AppDatabase);
  late final TributIcmsUfDao tributIcmsUfDao =
      TributIcmsUfDao(this as AppDatabase);
  late final TributIpiDao tributIpiDao = TributIpiDao(this as AppDatabase);
  late final TributIssDao tributIssDao = TributIssDao(this as AppDatabase);
  late final TributPisDao tributPisDao = TributPisDao(this as AppDatabase);
  late final TributCofinsDao tributCofinsDao =
      TributCofinsDao(this as AppDatabase);
  @override
  Iterable<TableInfo> get allTables => allSchemaEntities.whereType<TableInfo>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
        cardapios,
        cardapioPerguntaPadraos,
        cardapioRespostaPadraos,
        cfops,
        clientes,
        clienteFiados,
        colaboradors,
        comandas,
        comandaDetalhes,
        comandaDetalheComplementos,
        comandaObservacaoPadraos,
        comandaPedidos,
        compraPedidoCabecalhos,
        compraPedidoDetalhes,
        contadors,
        contasPagars,
        contasRecebers,
        cozinhas,
        deliverys,
        deliveryAcertos,
        deliveryAcertoComandas,
        ecfAliquotass,
        ecfDocumentosEmitidoss,
        ecfE3s,
        ecfImpressoras,
        ecfLogTotaiss,
        ecfR01s,
        ecfR02s,
        ecfR03s,
        ecfR06s,
        ecfR07s,
        ecfRecebimentoNaoFiscals,
        ecfRelatorioGerencials,
        ecfSintegra60As,
        ecfSintegra60Ms,
        empresas,
        empresaCnaes,
        empresaDeliveryPedidos,
        empresaSegmentos,
        entregadorRotas,
        entregadorRotaDetalhes,
        fidelidadeHistoricos,
        fidelidadeUtilizados,
        fornecedors,
        ibpts,
        logImportacaos,
        mesas,
        nfcePlanoPagamentos,
        nfeAcessoXmls,
        nfeCabecalhos,
        nfeCanas,
        nfeCanaDeducoesSafras,
        nfeCanaFornecimentoDiarios,
        nfeConfiguracaos,
        nfeCteReferenciados,
        nfeCupomFiscalReferenciados,
        nfeDeclaracaoImportacaos,
        nfeDestinatarios,
        nfeDetEspecificoArmamentos,
        nfeDetEspecificoCombustivels,
        nfeDetEspecificoMedicamentos,
        nfeDetEspecificoVeiculos,
        nfeDetalhes,
        nfeDetalheImpostoCofinss,
        nfeDetalheImpostoCofinsSts,
        nfeDetalheImpostoIcmss,
        nfeDetalheImpostoIcmsUfdests,
        nfeDetalheImpostoIis,
        nfeDetalheImpostoIpis,
        nfeDetalheImpostoIssqns,
        nfeDetalheImpostoPiss,
        nfeDetalheImpostoPisSts,
        nfeDuplicatas,
        nfeEmitentes,
        nfeExportacaos,
        nfeFaturas,
        nfeImportacaoDetalhes,
        nfeInformacaoPagamentos,
        nfeItemRastreados,
        nfeLocalEntregas,
        nfeLocalRetiradas,
        nfeNfReferenciadas,
        nfeNumeros,
        nfeNumeroInutilizados,
        nfeProcessoReferenciados,
        nfeProdRuralReferenciadas,
        nfeReferenciadas,
        nfeResponsavelTecnicos,
        nfeTransportes,
        nfeTransporteReboques,
        nfeTransporteVolumes,
        nfeTransporteVolumeLacres,
        pdvCaixas,
        pdvConfiguracaos,
        pdvConfiguracaoBalancas,
        pdvConfiguracaoLeitorSerials,
        pdvFechamentos,
        pdvMovimentos,
        pdvOperadors,
        pdvSangrias,
        pdvSuprimentos,
        pdvTipoPagamentos,
        pdvTotalTipoPagamentos,
        pdvVendaCabecalhos,
        pdvVendaDetalhes,
        produtos,
        produtoFichaTecnicas,
        produtoGrupos,
        produtoImagems,
        produtoPromocaos,
        produtoSubgrupos,
        produtoTipos,
        produtoUnidades,
        reservas,
        reservaMesas,
        taxaEntregas,
        tributCofinss,
        tributConfiguraOfGts,
        tributGrupoTributarios,
        tributIcmsCustomCabs,
        tributIcmsCustomDets,
        tributIcmsUfs,
        tributIpis,
        tributIsss,
        tributOperacaoFiscals,
        tributPiss
      ];
}
