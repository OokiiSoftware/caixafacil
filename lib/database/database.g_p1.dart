// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// **************************************************************************
// MoorGenerator
// **************************************************************************

// ignore_for_file: type=lint
class Cardapio extends DataClass implements Insertable<Cardapio> {
  final int? id;
  final int? idProduto;
  final String? modoPreparo;
  final String? infoAlergico;
  final String? ingredientes;
  Cardapio(
      {this.id,
      this.idProduto,
      this.modoPreparo,
      this.infoAlergico,
      this.ingredientes});
  factory Cardapio.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Cardapio(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idProduto: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO']),
      modoPreparo: ValueSqlType.stringType(data['${effectivePrefix}MODO_PREPARO']),
      infoAlergico: ValueSqlType.stringType(data['${effectivePrefix}INFO_ALERGICO']),
      ingredientes: ValueSqlType.stringType(data['${effectivePrefix}INGREDIENTES']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || modoPreparo != null) {
      map['MODO_PREPARO'] = Variable<String>(modoPreparo);
    }
    if (!nullToAbsent || infoAlergico != null) {
      map['INFO_ALERGICO'] = Variable<String>(infoAlergico);
    }
    if (!nullToAbsent || ingredientes != null) {
      map['INGREDIENTES'] = Variable<String>(ingredientes);
    }
    return map;
  }

  CardapiosCompanion toCompanion(bool nullToAbsent) {
    return CardapiosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      modoPreparo: modoPreparo == null && nullToAbsent
          ? const Value.absent()
          : Value(modoPreparo),
      infoAlergico: infoAlergico == null && nullToAbsent
          ? const Value.absent()
          : Value(infoAlergico),
      ingredientes: ingredientes == null && nullToAbsent
          ? const Value.absent()
          : Value(ingredientes),
    );
  }

  factory Cardapio.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Cardapio(
      id: serializer.fromJson<int?>(json['id']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      modoPreparo: serializer.fromJson<String?>(json['modoPreparo']),
      infoAlergico: serializer.fromJson<String?>(json['infoAlergico']),
      ingredientes: serializer.fromJson<String?>(json['ingredientes']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idProduto': serializer.toJson<int?>(idProduto),
      'modoPreparo': serializer.toJson<String?>(modoPreparo),
      'infoAlergico': serializer.toJson<String?>(infoAlergico),
      'ingredientes': serializer.toJson<String?>(ingredientes),
    };
  }

  Cardapio copyWith(
          {int? id,
          int? idProduto,
          String? modoPreparo,
          String? infoAlergico,
          String? ingredientes}) =>
      Cardapio(
        id: id ?? this.id,
        idProduto: idProduto ?? this.idProduto,
        modoPreparo: modoPreparo ?? this.modoPreparo,
        infoAlergico: infoAlergico ?? this.infoAlergico,
        ingredientes: ingredientes ?? this.ingredientes,
      );
  @override
  String toString() {
    return (StringBuffer('Cardapio(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('modoPreparo: $modoPreparo, ')
          ..write('infoAlergico: $infoAlergico, ')
          ..write('ingredientes: $ingredientes')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idProduto, modoPreparo, infoAlergico, ingredientes);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Cardapio &&
          other.id == this.id &&
          other.idProduto == this.idProduto &&
          other.modoPreparo == this.modoPreparo &&
          other.infoAlergico == this.infoAlergico &&
          other.ingredientes == this.ingredientes);
}

class CardapiosCompanion extends UpdateCompanion<Cardapio> {
  final Value<int?> id;
  final Value<int?> idProduto;
  final Value<String?> modoPreparo;
  final Value<String?> infoAlergico;
  final Value<String?> ingredientes;
  const CardapiosCompanion({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.modoPreparo = const Value.absent(),
    this.infoAlergico = const Value.absent(),
    this.ingredientes = const Value.absent(),
  });
  CardapiosCompanion.insert({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.modoPreparo = const Value.absent(),
    this.infoAlergico = const Value.absent(),
    this.ingredientes = const Value.absent(),
  });
  static Insertable<Cardapio> custom({
    Expression<int>? id,
    Expression<int>? idProduto,
    Expression<String>? modoPreparo,
    Expression<String>? infoAlergico,
    Expression<String>? ingredientes,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (modoPreparo != null) 'MODO_PREPARO': modoPreparo,
      if (infoAlergico != null) 'INFO_ALERGICO': infoAlergico,
      if (ingredientes != null) 'INGREDIENTES': ingredientes,
    });
  }

  CardapiosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idProduto,
      Value<String?>? modoPreparo,
      Value<String?>? infoAlergico,
      Value<String?>? ingredientes}) {
    return CardapiosCompanion(
      id: id ?? this.id,
      idProduto: idProduto ?? this.idProduto,
      modoPreparo: modoPreparo ?? this.modoPreparo,
      infoAlergico: infoAlergico ?? this.infoAlergico,
      ingredientes: ingredientes ?? this.ingredientes,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (modoPreparo.present) {
      map['MODO_PREPARO'] = Variable<String>(modoPreparo.value);
    }
    if (infoAlergico.present) {
      map['INFO_ALERGICO'] = Variable<String>(infoAlergico.value);
    }
    if (ingredientes.present) {
      map['INGREDIENTES'] = Variable<String>(ingredientes.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CardapiosCompanion(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('modoPreparo: $modoPreparo, ')
          ..write('infoAlergico: $infoAlergico, ')
          ..write('ingredientes: $ingredientes')
          ..write(')'))
        .toString();
  }
}

class $CardapiosTable extends Cardapios
    with TableInfo<$CardapiosTable, Cardapio> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $CardapiosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
      'ID_PRODUTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  final VerificationMeta _modoPreparoMeta =
      const VerificationMeta('modoPreparo');
  @override
  late final GeneratedColumn<String> modoPreparo = GeneratedColumn<String>(
      'MODO_PREPARO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _infoAlergicoMeta =
      const VerificationMeta('infoAlergico');
  @override
  late final GeneratedColumn<String> infoAlergico = GeneratedColumn<String>(
      'INFO_ALERGICO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ingredientesMeta =
      const VerificationMeta('ingredientes');
  @override
  late final GeneratedColumn<String> ingredientes = GeneratedColumn<String>(
      'INGREDIENTES', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idProduto, modoPreparo, infoAlergico, ingredientes];
  @override
  String get aliasedName => _alias ?? 'CARDAPIO';
  @override
  String get actualTableName => 'CARDAPIO';
  @override
  VerificationContext validateIntegrity(Insertable<Cardapio> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
    }
    if (data.containsKey('MODO_PREPARO')) {
      context.handle(
          _modoPreparoMeta,
          modoPreparo.isAcceptableOrUnknown(
              data['MODO_PREPARO']!, _modoPreparoMeta));
    }
    if (data.containsKey('INFO_ALERGICO')) {
      context.handle(
          _infoAlergicoMeta,
          infoAlergico.isAcceptableOrUnknown(
              data['INFO_ALERGICO']!, _infoAlergicoMeta));
    }
    if (data.containsKey('INGREDIENTES')) {
      context.handle(
          _ingredientesMeta,
          ingredientes.isAcceptableOrUnknown(
              data['INGREDIENTES']!, _ingredientesMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Cardapio map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Cardapio.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CardapiosTable createAlias(String alias) {
    return $CardapiosTable(attachedDatabase, alias);
  }
}

class CardapioPerguntaPadrao extends DataClass
    implements Insertable<CardapioPerguntaPadrao> {
  final int? id;
  final int? idCardapio;
  final String? pergunta;
  CardapioPerguntaPadrao({this.id, this.idCardapio, this.pergunta});
  factory CardapioPerguntaPadrao.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CardapioPerguntaPadrao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idCardapio: ValueSqlType.intType(data['${effectivePrefix}ID_CARDAPIO']),
      pergunta: ValueSqlType.stringType(data['${effectivePrefix}PERGUNTA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCardapio != null) {
      map['ID_CARDAPIO'] = Variable<int>(idCardapio);
    }
    if (!nullToAbsent || pergunta != null) {
      map['PERGUNTA'] = Variable<String>(pergunta);
    }
    return map;
  }

  CardapioPerguntaPadraosCompanion toCompanion(bool nullToAbsent) {
    return CardapioPerguntaPadraosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCardapio: idCardapio == null && nullToAbsent
          ? const Value.absent()
          : Value(idCardapio),
      pergunta: pergunta == null && nullToAbsent
          ? const Value.absent()
          : Value(pergunta),
    );
  }

  factory CardapioPerguntaPadrao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CardapioPerguntaPadrao(
      id: serializer.fromJson<int?>(json['id']),
      idCardapio: serializer.fromJson<int?>(json['idCardapio']),
      pergunta: serializer.fromJson<String?>(json['pergunta']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idCardapio': serializer.toJson<int?>(idCardapio),
      'pergunta': serializer.toJson<String?>(pergunta),
    };
  }

  CardapioPerguntaPadrao copyWith(
          {int? id, int? idCardapio, String? pergunta}) =>
      CardapioPerguntaPadrao(
        id: id ?? this.id,
        idCardapio: idCardapio ?? this.idCardapio,
        pergunta: pergunta ?? this.pergunta,
      );
  @override
  String toString() {
    return (StringBuffer('CardapioPerguntaPadrao(')
          ..write('id: $id, ')
          ..write('idCardapio: $idCardapio, ')
          ..write('pergunta: $pergunta')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idCardapio, pergunta);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CardapioPerguntaPadrao &&
          other.id == this.id &&
          other.idCardapio == this.idCardapio &&
          other.pergunta == this.pergunta);
}

class CardapioPerguntaPadraosCompanion
    extends UpdateCompanion<CardapioPerguntaPadrao> {
  final Value<int?> id;
  final Value<int?> idCardapio;
  final Value<String?> pergunta;
  const CardapioPerguntaPadraosCompanion({
    this.id = const Value.absent(),
    this.idCardapio = const Value.absent(),
    this.pergunta = const Value.absent(),
  });
  CardapioPerguntaPadraosCompanion.insert({
    this.id = const Value.absent(),
    this.idCardapio = const Value.absent(),
    this.pergunta = const Value.absent(),
  });
  static Insertable<CardapioPerguntaPadrao> custom({
    Expression<int>? id,
    Expression<int>? idCardapio,
    Expression<String>? pergunta,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCardapio != null) 'ID_CARDAPIO': idCardapio,
      if (pergunta != null) 'PERGUNTA': pergunta,
    });
  }

  CardapioPerguntaPadraosCompanion copyWith(
      {Value<int?>? id, Value<int?>? idCardapio, Value<String?>? pergunta}) {
    return CardapioPerguntaPadraosCompanion(
      id: id ?? this.id,
      idCardapio: idCardapio ?? this.idCardapio,
      pergunta: pergunta ?? this.pergunta,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCardapio.present) {
      map['ID_CARDAPIO'] = Variable<int>(idCardapio.value);
    }
    if (pergunta.present) {
      map['PERGUNTA'] = Variable<String>(pergunta.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CardapioPerguntaPadraosCompanion(')
          ..write('id: $id, ')
          ..write('idCardapio: $idCardapio, ')
          ..write('pergunta: $pergunta')
          ..write(')'))
        .toString();
  }
}

class $CardapioPerguntaPadraosTable extends CardapioPerguntaPadraos
    with TableInfo<$CardapioPerguntaPadraosTable, CardapioPerguntaPadrao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $CardapioPerguntaPadraosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idCardapioMeta = const VerificationMeta('idCardapio');
  @override
  late final GeneratedColumn<int> idCardapio = GeneratedColumn<int>(
      'ID_CARDAPIO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES CARDAPIO(ID)');
  final VerificationMeta _perguntaMeta = const VerificationMeta('pergunta');
  @override
  late final GeneratedColumn<String> pergunta = GeneratedColumn<String>(
      'PERGUNTA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, idCardapio, pergunta];
  @override
  String get aliasedName => _alias ?? 'CARDAPIO_PERGUNTA_PADRAO';
  @override
  String get actualTableName => 'CARDAPIO_PERGUNTA_PADRAO';
  @override
  VerificationContext validateIntegrity(
      Insertable<CardapioPerguntaPadrao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_CARDAPIO')) {
      context.handle(
          _idCardapioMeta,
          idCardapio.isAcceptableOrUnknown(
              data['ID_CARDAPIO']!, _idCardapioMeta));
    }
    if (data.containsKey('PERGUNTA')) {
      context.handle(_perguntaMeta,
          pergunta.isAcceptableOrUnknown(data['PERGUNTA']!, _perguntaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CardapioPerguntaPadrao map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CardapioPerguntaPadrao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CardapioPerguntaPadraosTable createAlias(String alias) {
    return $CardapioPerguntaPadraosTable(attachedDatabase, alias);
  }
}

class CardapioRespostaPadrao extends DataClass
    implements Insertable<CardapioRespostaPadrao> {
  final int? id;
  final int? idCardapioPerguntaPadrao;
  final String? resposta;
  CardapioRespostaPadrao(
      {this.id, this.idCardapioPerguntaPadrao, this.resposta});
  factory CardapioRespostaPadrao.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CardapioRespostaPadrao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idCardapioPerguntaPadrao: ValueSqlType.intType(
          data['${effectivePrefix}ID_CARDAPIO_PERGUNTA_PADRAO']),
      resposta: ValueSqlType.stringType(data['${effectivePrefix}RESPOSTA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCardapioPerguntaPadrao != null) {
      map['ID_CARDAPIO_PERGUNTA_PADRAO'] =
          Variable<int>(idCardapioPerguntaPadrao);
    }
    if (!nullToAbsent || resposta != null) {
      map['RESPOSTA'] = Variable<String>(resposta);
    }
    return map;
  }

  CardapioRespostaPadraosCompanion toCompanion(bool nullToAbsent) {
    return CardapioRespostaPadraosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCardapioPerguntaPadrao: idCardapioPerguntaPadrao == null && nullToAbsent
          ? const Value.absent()
          : Value(idCardapioPerguntaPadrao),
      resposta: resposta == null && nullToAbsent
          ? const Value.absent()
          : Value(resposta),
    );
  }

  factory CardapioRespostaPadrao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CardapioRespostaPadrao(
      id: serializer.fromJson<int?>(json['id']),
      idCardapioPerguntaPadrao:
          serializer.fromJson<int?>(json['idCardapioPerguntaPadrao']),
      resposta: serializer.fromJson<String?>(json['resposta']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idCardapioPerguntaPadrao':
          serializer.toJson<int?>(idCardapioPerguntaPadrao),
      'resposta': serializer.toJson<String?>(resposta),
    };
  }

  CardapioRespostaPadrao copyWith(
          {int? id, int? idCardapioPerguntaPadrao, String? resposta}) =>
      CardapioRespostaPadrao(
        id: id ?? this.id,
        idCardapioPerguntaPadrao:
            idCardapioPerguntaPadrao ?? this.idCardapioPerguntaPadrao,
        resposta: resposta ?? this.resposta,
      );
  @override
  String toString() {
    return (StringBuffer('CardapioRespostaPadrao(')
          ..write('id: $id, ')
          ..write('idCardapioPerguntaPadrao: $idCardapioPerguntaPadrao, ')
          ..write('resposta: $resposta')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idCardapioPerguntaPadrao, resposta);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CardapioRespostaPadrao &&
          other.id == this.id &&
          other.idCardapioPerguntaPadrao == this.idCardapioPerguntaPadrao &&
          other.resposta == this.resposta);
}

class CardapioRespostaPadraosCompanion
    extends UpdateCompanion<CardapioRespostaPadrao> {
  final Value<int?> id;
  final Value<int?> idCardapioPerguntaPadrao;
  final Value<String?> resposta;
  const CardapioRespostaPadraosCompanion({
    this.id = const Value.absent(),
    this.idCardapioPerguntaPadrao = const Value.absent(),
    this.resposta = const Value.absent(),
  });
  CardapioRespostaPadraosCompanion.insert({
    this.id = const Value.absent(),
    this.idCardapioPerguntaPadrao = const Value.absent(),
    this.resposta = const Value.absent(),
  });
  static Insertable<CardapioRespostaPadrao> custom({
    Expression<int>? id,
    Expression<int>? idCardapioPerguntaPadrao,
    Expression<String>? resposta,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCardapioPerguntaPadrao != null)
        'ID_CARDAPIO_PERGUNTA_PADRAO': idCardapioPerguntaPadrao,
      if (resposta != null) 'RESPOSTA': resposta,
    });
  }

  CardapioRespostaPadraosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idCardapioPerguntaPadrao,
      Value<String?>? resposta}) {
    return CardapioRespostaPadraosCompanion(
      id: id ?? this.id,
      idCardapioPerguntaPadrao:
          idCardapioPerguntaPadrao ?? this.idCardapioPerguntaPadrao,
      resposta: resposta ?? this.resposta,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCardapioPerguntaPadrao.present) {
      map['ID_CARDAPIO_PERGUNTA_PADRAO'] =
          Variable<int>(idCardapioPerguntaPadrao.value);
    }
    if (resposta.present) {
      map['RESPOSTA'] = Variable<String>(resposta.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CardapioRespostaPadraosCompanion(')
          ..write('id: $id, ')
          ..write('idCardapioPerguntaPadrao: $idCardapioPerguntaPadrao, ')
          ..write('resposta: $resposta')
          ..write(')'))
        .toString();
  }
}

class $CardapioRespostaPadraosTable extends CardapioRespostaPadraos
    with TableInfo<$CardapioRespostaPadraosTable, CardapioRespostaPadrao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $CardapioRespostaPadraosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idCardapioPerguntaPadraoMeta =
      const VerificationMeta('idCardapioPerguntaPadrao');
  @override
  late final GeneratedColumn<int> idCardapioPerguntaPadrao =
      GeneratedColumn<int>('ID_CARDAPIO_PERGUNTA_PADRAO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES CARDAPIO_PERGUNTA_PADRAO(ID)');
  final VerificationMeta _respostaMeta = const VerificationMeta('resposta');
  @override
  late final GeneratedColumn<String> resposta = GeneratedColumn<String>(
      'RESPOSTA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idCardapioPerguntaPadrao, resposta];
  @override
  String get aliasedName => _alias ?? 'CARDAPIO_RESPOSTA_PADRAO';
  @override
  String get actualTableName => 'CARDAPIO_RESPOSTA_PADRAO';
  @override
  VerificationContext validateIntegrity(
      Insertable<CardapioRespostaPadrao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_CARDAPIO_PERGUNTA_PADRAO')) {
      context.handle(
          _idCardapioPerguntaPadraoMeta,
          idCardapioPerguntaPadrao.isAcceptableOrUnknown(
              data['ID_CARDAPIO_PERGUNTA_PADRAO']!,
              _idCardapioPerguntaPadraoMeta));
    }
    if (data.containsKey('RESPOSTA')) {
      context.handle(_respostaMeta,
          resposta.isAcceptableOrUnknown(data['RESPOSTA']!, _respostaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CardapioRespostaPadrao map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CardapioRespostaPadrao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CardapioRespostaPadraosTable createAlias(String alias) {
    return $CardapioRespostaPadraosTable(attachedDatabase, alias);
  }
}

class Cfop extends DataClass implements Insertable<Cfop> {
  final int? id;
  final int? codigo;
  final String? descricao;
  final String? aplicacao;
  Cfop({this.id, this.codigo, this.descricao, this.aplicacao});
  factory Cfop.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Cfop(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      codigo: ValueSqlType.intType(data['${effectivePrefix}CODIGO']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      aplicacao: ValueSqlType.stringType(data['${effectivePrefix}APLICACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<int>(codigo);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || aplicacao != null) {
      map['APLICACAO'] = Variable<String>(aplicacao);
    }
    return map;
  }

  CfopsCompanion toCompanion(bool nullToAbsent) {
    return CfopsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      aplicacao: aplicacao == null && nullToAbsent
          ? const Value.absent()
          : Value(aplicacao),
    );
  }

  factory Cfop.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Cfop(
      id: serializer.fromJson<int?>(json['id']),
      codigo: serializer.fromJson<int?>(json['codigo']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      aplicacao: serializer.fromJson<String?>(json['aplicacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'codigo': serializer.toJson<int?>(codigo),
      'descricao': serializer.toJson<String?>(descricao),
      'aplicacao': serializer.toJson<String?>(aplicacao),
    };
  }

  Cfop copyWith({int? id, int? codigo, String? descricao, String? aplicacao}) =>
      Cfop(
        id: id ?? this.id,
        codigo: codigo ?? this.codigo,
        descricao: descricao ?? this.descricao,
        aplicacao: aplicacao ?? this.aplicacao,
      );
  @override
  String toString() {
    return (StringBuffer('Cfop(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao, ')
          ..write('aplicacao: $aplicacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, codigo, descricao, aplicacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Cfop &&
          other.id == this.id &&
          other.codigo == this.codigo &&
          other.descricao == this.descricao &&
          other.aplicacao == this.aplicacao);
}

class CfopsCompanion extends UpdateCompanion<Cfop> {
  final Value<int?> id;
  final Value<int?> codigo;
  final Value<String?> descricao;
  final Value<String?> aplicacao;
  const CfopsCompanion({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.aplicacao = const Value.absent(),
  });
  CfopsCompanion.insert({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.aplicacao = const Value.absent(),
  });
  static Insertable<Cfop> custom({
    Expression<int>? id,
    Expression<int>? codigo,
    Expression<String>? descricao,
    Expression<String>? aplicacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigo != null) 'CODIGO': codigo,
      if (descricao != null) 'DESCRICAO': descricao,
      if (aplicacao != null) 'APLICACAO': aplicacao,
    });
  }

  CfopsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? codigo,
      Value<String?>? descricao,
      Value<String?>? aplicacao}) {
    return CfopsCompanion(
      id: id ?? this.id,
      codigo: codigo ?? this.codigo,
      descricao: descricao ?? this.descricao,
      aplicacao: aplicacao ?? this.aplicacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<int>(codigo.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (aplicacao.present) {
      map['APLICACAO'] = Variable<String>(aplicacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CfopsCompanion(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao, ')
          ..write('aplicacao: $aplicacao')
          ..write(')'))
        .toString();
  }
}

class $CfopsTable extends Cfops with TableInfo<$CfopsTable, Cfop> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $CfopsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  @override
  late final GeneratedColumn<int> codigo = GeneratedColumn<int>(
      'CODIGO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _aplicacaoMeta = const VerificationMeta('aplicacao');
  @override
  late final GeneratedColumn<String> aplicacao = GeneratedColumn<String>(
      'APLICACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, codigo, descricao, aplicacao];
  @override
  String get aliasedName => _alias ?? 'CFOP';
  @override
  String get actualTableName => 'CFOP';
  @override
  VerificationContext validateIntegrity(Insertable<Cfop> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('APLICACAO')) {
      context.handle(_aplicacaoMeta,
          aplicacao.isAcceptableOrUnknown(data['APLICACAO']!, _aplicacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Cfop map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Cfop.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CfopsTable createAlias(String alias) {
    return $CfopsTable(attachedDatabase, alias);
  }
}

class Cliente extends DataClass implements Insertable<Cliente> {
  final int? id;
  final String? nome;
  final String? fantasia;
  final String? email;
  final String? url;
  final String? cpfCnpj;
  final String? rg;
  final String? orgaoRg;
  final DateTime? dataEmissaoRg;
  final String? sexo;
  final String? inscricaoEstadual;
  final String? inscricaoMunicipal;
  final String? tipoPessoa;
  final DateTime? dataCadastro;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? cep;
  final String? bairro;
  final String? cidade;
  final String? uf;
  final String? telefone;
  final String? celular;
  final String? contato;
  final int? codigoIbgeCidade;
  final int? codigoIbgeUf;
  final String? fidelidadeAviso;
  final int? fidelidadeQuantidade;
  final double? fidelidadeValor;
  final double? fiadoValorTeto;
  Cliente(
      {this.id,
      this.nome,
      this.fantasia,
      this.email,
      this.url,
      this.cpfCnpj,
      this.rg,
      this.orgaoRg,
      this.dataEmissaoRg,
      this.sexo,
      this.inscricaoEstadual,
      this.inscricaoMunicipal,
      this.tipoPessoa,
      this.dataCadastro,
      this.logradouro,
      this.numero,
      this.complemento,
      this.cep,
      this.bairro,
      this.cidade,
      this.uf,
      this.telefone,
      this.celular,
      this.contato,
      this.codigoIbgeCidade,
      this.codigoIbgeUf,
      this.fidelidadeAviso,
      this.fidelidadeQuantidade,
      this.fidelidadeValor,
      this.fiadoValorTeto});
  factory Cliente.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Cliente(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      fantasia: ValueSqlType.stringType(data['${effectivePrefix}FANTASIA']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
      url: ValueSqlType.stringType(data['${effectivePrefix}URL']),
      cpfCnpj: ValueSqlType.stringType(data['${effectivePrefix}CPF_CNPJ']),
      rg: ValueSqlType.stringType(data['${effectivePrefix}RG']),
      orgaoRg: ValueSqlType.stringType(data['${effectivePrefix}ORGAO_RG']),
      dataEmissaoRg: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_EMISSAO_RG']),
      sexo: ValueSqlType.stringType(data['${effectivePrefix}SEXO']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      inscricaoMunicipal: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
      tipoPessoa: ValueSqlType.stringType(data['${effectivePrefix}TIPO_PESSOA']),
      dataCadastro: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_CADASTRO']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      cidade: ValueSqlType.stringType(data['${effectivePrefix}CIDADE']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      celular: ValueSqlType.stringType(data['${effectivePrefix}CELULAR']),
      contato: ValueSqlType.stringType(data['${effectivePrefix}CONTATO']),
      codigoIbgeCidade: ValueSqlType.intType(
          data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
      codigoIbgeUf: ValueSqlType.intType(data['${effectivePrefix}CODIGO_IBGE_UF']),
      fidelidadeAviso: ValueSqlType.stringType(data['${effectivePrefix}FIDELIDADE_AVISO']),
      fidelidadeQuantidade: ValueSqlType.intType(
          data['${effectivePrefix}FIDELIDADE_QUANTIDADE']),
      fidelidadeValor: ValueSqlType.doubleType(data['${effectivePrefix}FIDELIDADE_VALOR']),
      fiadoValorTeto: ValueSqlType.doubleType(data['${effectivePrefix}FIADO_VALOR_TETO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || fantasia != null) {
      map['FANTASIA'] = Variable<String>(fantasia);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || url != null) {
      map['URL'] = Variable<String>(url);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['CPF_CNPJ'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rg != null) {
      map['RG'] = Variable<String>(rg);
    }
    if (!nullToAbsent || orgaoRg != null) {
      map['ORGAO_RG'] = Variable<String>(orgaoRg);
    }
    if (!nullToAbsent || dataEmissaoRg != null) {
      map['DATA_EMISSAO_RG'] = Variable<DateTime>(dataEmissaoRg);
    }
    if (!nullToAbsent || sexo != null) {
      map['SEXO'] = Variable<String>(sexo);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || tipoPessoa != null) {
      map['TIPO_PESSOA'] = Variable<String>(tipoPessoa);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || codigoIbgeCidade != null) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade);
    }
    if (!nullToAbsent || codigoIbgeUf != null) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf);
    }
    if (!nullToAbsent || fidelidadeAviso != null) {
      map['FIDELIDADE_AVISO'] = Variable<String>(fidelidadeAviso);
    }
    if (!nullToAbsent || fidelidadeQuantidade != null) {
      map['FIDELIDADE_QUANTIDADE'] = Variable<int>(fidelidadeQuantidade);
    }
    if (!nullToAbsent || fidelidadeValor != null) {
      map['FIDELIDADE_VALOR'] = Variable<double>(fidelidadeValor);
    }
    if (!nullToAbsent || fiadoValorTeto != null) {
      map['FIADO_VALOR_TETO'] = Variable<double>(fiadoValorTeto);
    }
    return map;
  }

  ClientesCompanion toCompanion(bool nullToAbsent) {
    return ClientesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      fantasia: fantasia == null && nullToAbsent
          ? const Value.absent()
          : Value(fantasia),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      url: url == null && nullToAbsent ? const Value.absent() : Value(url),
      cpfCnpj: cpfCnpj == null && nullToAbsent
          ? const Value.absent()
          : Value(cpfCnpj),
      rg: rg == null && nullToAbsent ? const Value.absent() : Value(rg),
      orgaoRg: orgaoRg == null && nullToAbsent
          ? const Value.absent()
          : Value(orgaoRg),
      dataEmissaoRg: dataEmissaoRg == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissaoRg),
      sexo: sexo == null && nullToAbsent ? const Value.absent() : Value(sexo),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      inscricaoMunicipal: inscricaoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipal),
      tipoPessoa: tipoPessoa == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoPessoa),
      dataCadastro: dataCadastro == null && nullToAbsent
          ? const Value.absent()
          : Value(dataCadastro),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      codigoIbgeCidade: codigoIbgeCidade == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeCidade),
      codigoIbgeUf: codigoIbgeUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeUf),
      fidelidadeAviso: fidelidadeAviso == null && nullToAbsent
          ? const Value.absent()
          : Value(fidelidadeAviso),
      fidelidadeQuantidade: fidelidadeQuantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(fidelidadeQuantidade),
      fidelidadeValor: fidelidadeValor == null && nullToAbsent
          ? const Value.absent()
          : Value(fidelidadeValor),
      fiadoValorTeto: fiadoValorTeto == null && nullToAbsent
          ? const Value.absent()
          : Value(fiadoValorTeto),
    );
  }

  factory Cliente.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Cliente(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      fantasia: serializer.fromJson<String?>(json['fantasia']),
      email: serializer.fromJson<String?>(json['email']),
      url: serializer.fromJson<String?>(json['url']),
      cpfCnpj: serializer.fromJson<String?>(json['cpfCnpj']),
      rg: serializer.fromJson<String?>(json['rg']),
      orgaoRg: serializer.fromJson<String?>(json['orgaoRg']),
      dataEmissaoRg: serializer.fromJson<DateTime?>(json['dataEmissaoRg']),
      sexo: serializer.fromJson<String?>(json['sexo']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
      inscricaoMunicipal:
          serializer.fromJson<String?>(json['inscricaoMunicipal']),
      tipoPessoa: serializer.fromJson<String?>(json['tipoPessoa']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      cep: serializer.fromJson<String?>(json['cep']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      cidade: serializer.fromJson<String?>(json['cidade']),
      uf: serializer.fromJson<String?>(json['uf']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      celular: serializer.fromJson<String?>(json['celular']),
      contato: serializer.fromJson<String?>(json['contato']),
      codigoIbgeCidade: serializer.fromJson<int?>(json['codigoIbgeCidade']),
      codigoIbgeUf: serializer.fromJson<int?>(json['codigoIbgeUf']),
      fidelidadeAviso: serializer.fromJson<String?>(json['fidelidadeAviso']),
      fidelidadeQuantidade:
          serializer.fromJson<int?>(json['fidelidadeQuantidade']),
      fidelidadeValor: serializer.fromJson<double?>(json['fidelidadeValor']),
      fiadoValorTeto: serializer.fromJson<double?>(json['fiadoValorTeto']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'fantasia': serializer.toJson<String?>(fantasia),
      'email': serializer.toJson<String?>(email),
      'url': serializer.toJson<String?>(url),
      'cpfCnpj': serializer.toJson<String?>(cpfCnpj),
      'rg': serializer.toJson<String?>(rg),
      'orgaoRg': serializer.toJson<String?>(orgaoRg),
      'dataEmissaoRg': serializer.toJson<DateTime?>(dataEmissaoRg),
      'sexo': serializer.toJson<String?>(sexo),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'inscricaoMunicipal': serializer.toJson<String?>(inscricaoMunicipal),
      'tipoPessoa': serializer.toJson<String?>(tipoPessoa),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'cep': serializer.toJson<String?>(cep),
      'bairro': serializer.toJson<String?>(bairro),
      'cidade': serializer.toJson<String?>(cidade),
      'uf': serializer.toJson<String?>(uf),
      'telefone': serializer.toJson<String?>(telefone),
      'celular': serializer.toJson<String?>(celular),
      'contato': serializer.toJson<String?>(contato),
      'codigoIbgeCidade': serializer.toJson<int?>(codigoIbgeCidade),
      'codigoIbgeUf': serializer.toJson<int?>(codigoIbgeUf),
      'fidelidadeAviso': serializer.toJson<String?>(fidelidadeAviso),
      'fidelidadeQuantidade': serializer.toJson<int?>(fidelidadeQuantidade),
      'fidelidadeValor': serializer.toJson<double?>(fidelidadeValor),
      'fiadoValorTeto': serializer.toJson<double?>(fiadoValorTeto),
    };
  }

  Cliente copyWith(
          {int? id,
          String? nome,
          String? fantasia,
          String? email,
          String? url,
          String? cpfCnpj,
          String? rg,
          String? orgaoRg,
          DateTime? dataEmissaoRg,
          String? sexo,
          String? inscricaoEstadual,
          String? inscricaoMunicipal,
          String? tipoPessoa,
          DateTime? dataCadastro,
          String? logradouro,
          String? numero,
          String? complemento,
          String? cep,
          String? bairro,
          String? cidade,
          String? uf,
          String? telefone,
          String? celular,
          String? contato,
          int? codigoIbgeCidade,
          int? codigoIbgeUf,
          String? fidelidadeAviso,
          int? fidelidadeQuantidade,
          double? fidelidadeValor,
          double? fiadoValorTeto}) =>
      Cliente(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        fantasia: fantasia ?? this.fantasia,
        email: email ?? this.email,
        url: url ?? this.url,
        cpfCnpj: cpfCnpj ?? this.cpfCnpj,
        rg: rg ?? this.rg,
        orgaoRg: orgaoRg ?? this.orgaoRg,
        dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
        sexo: sexo ?? this.sexo,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
        tipoPessoa: tipoPessoa ?? this.tipoPessoa,
        dataCadastro: dataCadastro ?? this.dataCadastro,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        cep: cep ?? this.cep,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        telefone: telefone ?? this.telefone,
        celular: celular ?? this.celular,
        contato: contato ?? this.contato,
        codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
        codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
        fidelidadeAviso: fidelidadeAviso ?? this.fidelidadeAviso,
        fidelidadeQuantidade: fidelidadeQuantidade ?? this.fidelidadeQuantidade,
        fidelidadeValor: fidelidadeValor ?? this.fidelidadeValor,
        fiadoValorTeto: fiadoValorTeto ?? this.fiadoValorTeto,
      );
  @override
  String toString() {
    return (StringBuffer('Cliente(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('email: $email, ')
          ..write('url: $url, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rg: $rg, ')
          ..write('orgaoRg: $orgaoRg, ')
          ..write('dataEmissaoRg: $dataEmissaoRg, ')
          ..write('sexo: $sexo, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoPessoa: $tipoPessoa, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf, ')
          ..write('fidelidadeAviso: $fidelidadeAviso, ')
          ..write('fidelidadeQuantidade: $fidelidadeQuantidade, ')
          ..write('fidelidadeValor: $fidelidadeValor, ')
          ..write('fiadoValorTeto: $fiadoValorTeto')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        nome,
        fantasia,
        email,
        url,
        cpfCnpj,
        rg,
        orgaoRg,
        dataEmissaoRg,
        sexo,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoPessoa,
        dataCadastro,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        telefone,
        celular,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf,
        fidelidadeAviso,
        fidelidadeQuantidade,
        fidelidadeValor,
        fiadoValorTeto
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Cliente &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.fantasia == this.fantasia &&
          other.email == this.email &&
          other.url == this.url &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rg == this.rg &&
          other.orgaoRg == this.orgaoRg &&
          other.dataEmissaoRg == this.dataEmissaoRg &&
          other.sexo == this.sexo &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.tipoPessoa == this.tipoPessoa &&
          other.dataCadastro == this.dataCadastro &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.cep == this.cep &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.telefone == this.telefone &&
          other.celular == this.celular &&
          other.contato == this.contato &&
          other.codigoIbgeCidade == this.codigoIbgeCidade &&
          other.codigoIbgeUf == this.codigoIbgeUf &&
          other.fidelidadeAviso == this.fidelidadeAviso &&
          other.fidelidadeQuantidade == this.fidelidadeQuantidade &&
          other.fidelidadeValor == this.fidelidadeValor &&
          other.fiadoValorTeto == this.fiadoValorTeto);
}

class ClientesCompanion extends UpdateCompanion<Cliente> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> fantasia;
  final Value<String?> email;
  final Value<String?> url;
  final Value<String?> cpfCnpj;
  final Value<String?> rg;
  final Value<String?> orgaoRg;
  final Value<DateTime?> dataEmissaoRg;
  final Value<String?> sexo;
  final Value<String?> inscricaoEstadual;
  final Value<String?> inscricaoMunicipal;
  final Value<String?> tipoPessoa;
  final Value<DateTime?> dataCadastro;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> cep;
  final Value<String?> bairro;
  final Value<String?> cidade;
  final Value<String?> uf;
  final Value<String?> telefone;
  final Value<String?> celular;
  final Value<String?> contato;
  final Value<int?> codigoIbgeCidade;
  final Value<int?> codigoIbgeUf;
  final Value<String?> fidelidadeAviso;
  final Value<int?> fidelidadeQuantidade;
  final Value<double?> fidelidadeValor;
  final Value<double?> fiadoValorTeto;
  const ClientesCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.email = const Value.absent(),
    this.url = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rg = const Value.absent(),
    this.orgaoRg = const Value.absent(),
    this.dataEmissaoRg = const Value.absent(),
    this.sexo = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoPessoa = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
    this.fidelidadeAviso = const Value.absent(),
    this.fidelidadeQuantidade = const Value.absent(),
    this.fidelidadeValor = const Value.absent(),
    this.fiadoValorTeto = const Value.absent(),
  });
  ClientesCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.email = const Value.absent(),
    this.url = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rg = const Value.absent(),
    this.orgaoRg = const Value.absent(),
    this.dataEmissaoRg = const Value.absent(),
    this.sexo = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoPessoa = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
    this.fidelidadeAviso = const Value.absent(),
    this.fidelidadeQuantidade = const Value.absent(),
    this.fidelidadeValor = const Value.absent(),
    this.fiadoValorTeto = const Value.absent(),
  });
  static Insertable<Cliente> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? fantasia,
    Expression<String>? email,
    Expression<String>? url,
    Expression<String>? cpfCnpj,
    Expression<String>? rg,
    Expression<String>? orgaoRg,
    Expression<DateTime>? dataEmissaoRg,
    Expression<String>? sexo,
    Expression<String>? inscricaoEstadual,
    Expression<String>? inscricaoMunicipal,
    Expression<String>? tipoPessoa,
    Expression<DateTime>? dataCadastro,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? cep,
    Expression<String>? bairro,
    Expression<String>? cidade,
    Expression<String>? uf,
    Expression<String>? telefone,
    Expression<String>? celular,
    Expression<String>? contato,
    Expression<int>? codigoIbgeCidade,
    Expression<int>? codigoIbgeUf,
    Expression<String>? fidelidadeAviso,
    Expression<int>? fidelidadeQuantidade,
    Expression<double>? fidelidadeValor,
    Expression<double>? fiadoValorTeto,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (fantasia != null) 'FANTASIA': fantasia,
      if (email != null) 'EMAIL': email,
      if (url != null) 'URL': url,
      if (cpfCnpj != null) 'CPF_CNPJ': cpfCnpj,
      if (rg != null) 'RG': rg,
      if (orgaoRg != null) 'ORGAO_RG': orgaoRg,
      if (dataEmissaoRg != null) 'DATA_EMISSAO_RG': dataEmissaoRg,
      if (sexo != null) 'SEXO': sexo,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
      if (tipoPessoa != null) 'TIPO_PESSOA': tipoPessoa,
      if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (cep != null) 'CEP': cep,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (telefone != null) 'TELEFONE': telefone,
      if (celular != null) 'CELULAR': celular,
      if (contato != null) 'CONTATO': contato,
      if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
      if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
      if (fidelidadeAviso != null) 'FIDELIDADE_AVISO': fidelidadeAviso,
      if (fidelidadeQuantidade != null)
        'FIDELIDADE_QUANTIDADE': fidelidadeQuantidade,
      if (fidelidadeValor != null) 'FIDELIDADE_VALOR': fidelidadeValor,
      if (fiadoValorTeto != null) 'FIADO_VALOR_TETO': fiadoValorTeto,
    });
  }

  ClientesCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? nome,
      Value<String?>? fantasia,
      Value<String?>? email,
      Value<String?>? url,
      Value<String?>? cpfCnpj,
      Value<String?>? rg,
      Value<String?>? orgaoRg,
      Value<DateTime?>? dataEmissaoRg,
      Value<String?>? sexo,
      Value<String?>? inscricaoEstadual,
      Value<String?>? inscricaoMunicipal,
      Value<String?>? tipoPessoa,
      Value<DateTime?>? dataCadastro,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? cep,
      Value<String?>? bairro,
      Value<String?>? cidade,
      Value<String?>? uf,
      Value<String?>? telefone,
      Value<String?>? celular,
      Value<String?>? contato,
      Value<int?>? codigoIbgeCidade,
      Value<int?>? codigoIbgeUf,
      Value<String?>? fidelidadeAviso,
      Value<int?>? fidelidadeQuantidade,
      Value<double?>? fidelidadeValor,
      Value<double?>? fiadoValorTeto}) {
    return ClientesCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      fantasia: fantasia ?? this.fantasia,
      email: email ?? this.email,
      url: url ?? this.url,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rg: rg ?? this.rg,
      orgaoRg: orgaoRg ?? this.orgaoRg,
      dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
      sexo: sexo ?? this.sexo,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      tipoPessoa: tipoPessoa ?? this.tipoPessoa,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      cep: cep ?? this.cep,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      telefone: telefone ?? this.telefone,
      celular: celular ?? this.celular,
      contato: contato ?? this.contato,
      codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
      codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
      fidelidadeAviso: fidelidadeAviso ?? this.fidelidadeAviso,
      fidelidadeQuantidade: fidelidadeQuantidade ?? this.fidelidadeQuantidade,
      fidelidadeValor: fidelidadeValor ?? this.fidelidadeValor,
      fiadoValorTeto: fiadoValorTeto ?? this.fiadoValorTeto,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (fantasia.present) {
      map['FANTASIA'] = Variable<String>(fantasia.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (url.present) {
      map['URL'] = Variable<String>(url.value);
    }
    if (cpfCnpj.present) {
      map['CPF_CNPJ'] = Variable<String>(cpfCnpj.value);
    }
    if (rg.present) {
      map['RG'] = Variable<String>(rg.value);
    }
    if (orgaoRg.present) {
      map['ORGAO_RG'] = Variable<String>(orgaoRg.value);
    }
    if (dataEmissaoRg.present) {
      map['DATA_EMISSAO_RG'] = Variable<DateTime>(dataEmissaoRg.value);
    }
    if (sexo.present) {
      map['SEXO'] = Variable<String>(sexo.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (inscricaoMunicipal.present) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (tipoPessoa.present) {
      map['TIPO_PESSOA'] = Variable<String>(tipoPessoa.value);
    }
    if (dataCadastro.present) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (codigoIbgeCidade.present) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade.value);
    }
    if (codigoIbgeUf.present) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf.value);
    }
    if (fidelidadeAviso.present) {
      map['FIDELIDADE_AVISO'] = Variable<String>(fidelidadeAviso.value);
    }
    if (fidelidadeQuantidade.present) {
      map['FIDELIDADE_QUANTIDADE'] = Variable<int>(fidelidadeQuantidade.value);
    }
    if (fidelidadeValor.present) {
      map['FIDELIDADE_VALOR'] = Variable<double>(fidelidadeValor.value);
    }
    if (fiadoValorTeto.present) {
      map['FIADO_VALOR_TETO'] = Variable<double>(fiadoValorTeto.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ClientesCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('email: $email, ')
          ..write('url: $url, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rg: $rg, ')
          ..write('orgaoRg: $orgaoRg, ')
          ..write('dataEmissaoRg: $dataEmissaoRg, ')
          ..write('sexo: $sexo, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoPessoa: $tipoPessoa, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf, ')
          ..write('fidelidadeAviso: $fidelidadeAviso, ')
          ..write('fidelidadeQuantidade: $fidelidadeQuantidade, ')
          ..write('fidelidadeValor: $fidelidadeValor, ')
          ..write('fiadoValorTeto: $fiadoValorTeto')
          ..write(')'))
        .toString();
  }
}

class $ClientesTable extends Clientes with TableInfo<$ClientesTable, Cliente> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ClientesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _fantasiaMeta = const VerificationMeta('fantasia');
  @override
  late final GeneratedColumn<String> fantasia = GeneratedColumn<String>(
      'FANTASIA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _urlMeta = const VerificationMeta('url');
  @override
  late final GeneratedColumn<String> url = GeneratedColumn<String>(
      'URL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfCnpjMeta = const VerificationMeta('cpfCnpj');
  @override
  late final GeneratedColumn<String> cpfCnpj = GeneratedColumn<String>(
      'CPF_CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _rgMeta = const VerificationMeta('rg');
  @override
  late final GeneratedColumn<String> rg = GeneratedColumn<String>(
      'RG', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _orgaoRgMeta = const VerificationMeta('orgaoRg');
  @override
  late final GeneratedColumn<String> orgaoRg = GeneratedColumn<String>(
      'ORGAO_RG', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataEmissaoRgMeta =
      const VerificationMeta('dataEmissaoRg');
  @override
  late final GeneratedColumn<DateTime> dataEmissaoRg =
      GeneratedColumn<DateTime>('DATA_EMISSAO_RG', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _sexoMeta = const VerificationMeta('sexo');
  @override
  late final GeneratedColumn<String> sexo = GeneratedColumn<String>(
      'SEXO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 30),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  @override
  late final GeneratedColumn<String> inscricaoMunicipal =
      GeneratedColumn<String>(
          'INSCRICAO_MUNICIPAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 30),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _tipoPessoaMeta = const VerificationMeta('tipoPessoa');
  @override
  late final GeneratedColumn<String> tipoPessoa = GeneratedColumn<String>(
      'TIPO_PESSOA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataCadastroMeta =
      const VerificationMeta('dataCadastro');
  @override
  late final GeneratedColumn<DateTime> dataCadastro =
      GeneratedColumn<DateTime>('DATA_CADASTRO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  @override
  late final GeneratedColumn<String> cidade = GeneratedColumn<String>(
      'CIDADE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  @override
  late final GeneratedColumn<String> celular = GeneratedColumn<String>(
      'CELULAR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  @override
  late final GeneratedColumn<String> contato = GeneratedColumn<String>(
      'CONTATO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoIbgeCidadeMeta =
      const VerificationMeta('codigoIbgeCidade');
  @override
  late final GeneratedColumn<int> codigoIbgeCidade = GeneratedColumn<int>(
      'CODIGO_IBGE_CIDADE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoIbgeUfMeta =
      const VerificationMeta('codigoIbgeUf');
  @override
  late final GeneratedColumn<int> codigoIbgeUf = GeneratedColumn<int>(
      'CODIGO_IBGE_UF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _fidelidadeAvisoMeta =
      const VerificationMeta('fidelidadeAviso');
  @override
  late final GeneratedColumn<String> fidelidadeAviso =
      GeneratedColumn<String>('FIDELIDADE_AVISO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _fidelidadeQuantidadeMeta =
      const VerificationMeta('fidelidadeQuantidade');
  @override
  late final GeneratedColumn<int> fidelidadeQuantidade = GeneratedColumn<int>(
      'FIDELIDADE_QUANTIDADE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _fidelidadeValorMeta =
      const VerificationMeta('fidelidadeValor');
  @override
  late final GeneratedColumn<double> fidelidadeValor =
      GeneratedColumn<double>('FIDELIDADE_VALOR', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _fiadoValorTetoMeta =
      const VerificationMeta('fiadoValorTeto');
  @override
  late final GeneratedColumn<double> fiadoValorTeto = GeneratedColumn<double>(
      'FIADO_VALOR_TETO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        nome,
        fantasia,
        email,
        url,
        cpfCnpj,
        rg,
        orgaoRg,
        dataEmissaoRg,
        sexo,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoPessoa,
        dataCadastro,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        telefone,
        celular,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf,
        fidelidadeAviso,
        fidelidadeQuantidade,
        fidelidadeValor,
        fiadoValorTeto
      ];
  @override
  String get aliasedName => _alias ?? 'CLIENTE';
  @override
  String get actualTableName => 'CLIENTE';
  @override
  VerificationContext validateIntegrity(Insertable<Cliente> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('FANTASIA')) {
      context.handle(_fantasiaMeta,
          fantasia.isAcceptableOrUnknown(data['FANTASIA']!, _fantasiaMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    if (data.containsKey('URL')) {
      context.handle(
          _urlMeta, url.isAcceptableOrUnknown(data['URL']!, _urlMeta));
    }
    if (data.containsKey('CPF_CNPJ')) {
      context.handle(_cpfCnpjMeta,
          cpfCnpj.isAcceptableOrUnknown(data['CPF_CNPJ']!, _cpfCnpjMeta));
    }
    if (data.containsKey('RG')) {
      context.handle(_rgMeta, rg.isAcceptableOrUnknown(data['RG']!, _rgMeta));
    }
    if (data.containsKey('ORGAO_RG')) {
      context.handle(_orgaoRgMeta,
          orgaoRg.isAcceptableOrUnknown(data['ORGAO_RG']!, _orgaoRgMeta));
    }
    if (data.containsKey('DATA_EMISSAO_RG')) {
      context.handle(
          _dataEmissaoRgMeta,
          dataEmissaoRg.isAcceptableOrUnknown(
              data['DATA_EMISSAO_RG']!, _dataEmissaoRgMeta));
    }
    if (data.containsKey('SEXO')) {
      context.handle(
          _sexoMeta, sexo.isAcceptableOrUnknown(data['SEXO']!, _sexoMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL')) {
      context.handle(
          _inscricaoMunicipalMeta,
          inscricaoMunicipal.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
    }
    if (data.containsKey('TIPO_PESSOA')) {
      context.handle(
          _tipoPessoaMeta,
          tipoPessoa.isAcceptableOrUnknown(
              data['TIPO_PESSOA']!, _tipoPessoaMeta));
    }
    if (data.containsKey('DATA_CADASTRO')) {
      context.handle(
          _dataCadastroMeta,
          dataCadastro.isAcceptableOrUnknown(
              data['DATA_CADASTRO']!, _dataCadastroMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
    }
    if (data.containsKey('CODIGO_IBGE_CIDADE')) {
      context.handle(
          _codigoIbgeCidadeMeta,
          codigoIbgeCidade.isAcceptableOrUnknown(
              data['CODIGO_IBGE_CIDADE']!, _codigoIbgeCidadeMeta));
    }
    if (data.containsKey('CODIGO_IBGE_UF')) {
      context.handle(
          _codigoIbgeUfMeta,
          codigoIbgeUf.isAcceptableOrUnknown(
              data['CODIGO_IBGE_UF']!, _codigoIbgeUfMeta));
    }
    if (data.containsKey('FIDELIDADE_AVISO')) {
      context.handle(
          _fidelidadeAvisoMeta,
          fidelidadeAviso.isAcceptableOrUnknown(
              data['FIDELIDADE_AVISO']!, _fidelidadeAvisoMeta));
    }
    if (data.containsKey('FIDELIDADE_QUANTIDADE')) {
      context.handle(
          _fidelidadeQuantidadeMeta,
          fidelidadeQuantidade.isAcceptableOrUnknown(
              data['FIDELIDADE_QUANTIDADE']!, _fidelidadeQuantidadeMeta));
    }
    if (data.containsKey('FIDELIDADE_VALOR')) {
      context.handle(
          _fidelidadeValorMeta,
          fidelidadeValor.isAcceptableOrUnknown(
              data['FIDELIDADE_VALOR']!, _fidelidadeValorMeta));
    }
    if (data.containsKey('FIADO_VALOR_TETO')) {
      context.handle(
          _fiadoValorTetoMeta,
          fiadoValorTeto.isAcceptableOrUnknown(
              data['FIADO_VALOR_TETO']!, _fiadoValorTetoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Cliente map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Cliente.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ClientesTable createAlias(String alias) {
    return $ClientesTable(attachedDatabase, alias);
  }
}

class ClienteFiado extends DataClass implements Insertable<ClienteFiado> {
  final int? id;
  final int? idCliente;
  final int? idPdvVendaCabecalho;
  final double? valorPendente;
  final DateTime? dataPagamento;
  final DateTime? dataLancamento;
  ClienteFiado(
      {this.id,
      this.idCliente,
      this.idPdvVendaCabecalho,
      this.valorPendente,
      this.dataPagamento,
      this.dataLancamento});
  factory ClienteFiado.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ClienteFiado(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idCliente: ValueSqlType.intType(data['${effectivePrefix}ID_CLIENTE']),
      idPdvVendaCabecalho: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
      valorPendente: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PENDENTE']),
      dataPagamento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_PAGAMENTO']),
      dataLancamento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_LANCAMENTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCliente != null) {
      map['ID_CLIENTE'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || idPdvVendaCabecalho != null) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho);
    }
    if (!nullToAbsent || valorPendente != null) {
      map['VALOR_PENDENTE'] = Variable<double>(valorPendente);
    }
    if (!nullToAbsent || dataPagamento != null) {
      map['DATA_PAGAMENTO'] = Variable<DateTime>(dataPagamento);
    }
    if (!nullToAbsent || dataLancamento != null) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento);
    }
    return map;
  }

  ClienteFiadosCompanion toCompanion(bool nullToAbsent) {
    return ClienteFiadosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCliente: idCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(idCliente),
      idPdvVendaCabecalho: idPdvVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvVendaCabecalho),
      valorPendente: valorPendente == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPendente),
      dataPagamento: dataPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPagamento),
      dataLancamento: dataLancamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataLancamento),
    );
  }

  factory ClienteFiado.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ClienteFiado(
      id: serializer.fromJson<int?>(json['id']),
      idCliente: serializer.fromJson<int?>(json['idCliente']),
      idPdvVendaCabecalho:
          serializer.fromJson<int?>(json['idPdvVendaCabecalho']),
      valorPendente: serializer.fromJson<double?>(json['valorPendente']),
      dataPagamento: serializer.fromJson<DateTime?>(json['dataPagamento']),
      dataLancamento: serializer.fromJson<DateTime?>(json['dataLancamento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idCliente': serializer.toJson<int?>(idCliente),
      'idPdvVendaCabecalho': serializer.toJson<int?>(idPdvVendaCabecalho),
      'valorPendente': serializer.toJson<double?>(valorPendente),
      'dataPagamento': serializer.toJson<DateTime?>(dataPagamento),
      'dataLancamento': serializer.toJson<DateTime?>(dataLancamento),
    };
  }

  ClienteFiado copyWith(
          {int? id,
          int? idCliente,
          int? idPdvVendaCabecalho,
          double? valorPendente,
          DateTime? dataPagamento,
          DateTime? dataLancamento}) =>
      ClienteFiado(
        id: id ?? this.id,
        idCliente: idCliente ?? this.idCliente,
        idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
        valorPendente: valorPendente ?? this.valorPendente,
        dataPagamento: dataPagamento ?? this.dataPagamento,
        dataLancamento: dataLancamento ?? this.dataLancamento,
      );
  @override
  String toString() {
    return (StringBuffer('ClienteFiado(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('valorPendente: $valorPendente, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('dataLancamento: $dataLancamento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idCliente, idPdvVendaCabecalho,
      valorPendente, dataPagamento, dataLancamento);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ClienteFiado &&
          other.id == this.id &&
          other.idCliente == this.idCliente &&
          other.idPdvVendaCabecalho == this.idPdvVendaCabecalho &&
          other.valorPendente == this.valorPendente &&
          other.dataPagamento == this.dataPagamento &&
          other.dataLancamento == this.dataLancamento);
}

class ClienteFiadosCompanion extends UpdateCompanion<ClienteFiado> {
  final Value<int?> id;
  final Value<int?> idCliente;
  final Value<int?> idPdvVendaCabecalho;
  final Value<double?> valorPendente;
  final Value<DateTime?> dataPagamento;
  final Value<DateTime?> dataLancamento;
  const ClienteFiadosCompanion({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.valorPendente = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.dataLancamento = const Value.absent(),
  });
  ClienteFiadosCompanion.insert({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.valorPendente = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.dataLancamento = const Value.absent(),
  });
  static Insertable<ClienteFiado> custom({
    Expression<int>? id,
    Expression<int>? idCliente,
    Expression<int>? idPdvVendaCabecalho,
    Expression<double>? valorPendente,
    Expression<DateTime>? dataPagamento,
    Expression<DateTime>? dataLancamento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCliente != null) 'ID_CLIENTE': idCliente,
      if (idPdvVendaCabecalho != null)
        'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
      if (valorPendente != null) 'VALOR_PENDENTE': valorPendente,
      if (dataPagamento != null) 'DATA_PAGAMENTO': dataPagamento,
      if (dataLancamento != null) 'DATA_LANCAMENTO': dataLancamento,
    });
  }

  ClienteFiadosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idCliente,
      Value<int?>? idPdvVendaCabecalho,
      Value<double?>? valorPendente,
      Value<DateTime?>? dataPagamento,
      Value<DateTime?>? dataLancamento}) {
    return ClienteFiadosCompanion(
      id: id ?? this.id,
      idCliente: idCliente ?? this.idCliente,
      idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
      valorPendente: valorPendente ?? this.valorPendente,
      dataPagamento: dataPagamento ?? this.dataPagamento,
      dataLancamento: dataLancamento ?? this.dataLancamento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCliente.present) {
      map['ID_CLIENTE'] = Variable<int>(idCliente.value);
    }
    if (idPdvVendaCabecalho.present) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho.value);
    }
    if (valorPendente.present) {
      map['VALOR_PENDENTE'] = Variable<double>(valorPendente.value);
    }
    if (dataPagamento.present) {
      map['DATA_PAGAMENTO'] = Variable<DateTime>(dataPagamento.value);
    }
    if (dataLancamento.present) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ClienteFiadosCompanion(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('valorPendente: $valorPendente, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('dataLancamento: $dataLancamento')
          ..write(')'))
        .toString();
  }
}

class $ClienteFiadosTable extends ClienteFiados
    with TableInfo<$ClienteFiadosTable, ClienteFiado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ClienteFiadosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
  @override
  late final GeneratedColumn<int> idCliente = GeneratedColumn<int>(
      'ID_CLIENTE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
  final VerificationMeta _idPdvVendaCabecalhoMeta =
      const VerificationMeta('idPdvVendaCabecalho');
  @override
  late final GeneratedColumn<int> idPdvVendaCabecalho = GeneratedColumn<int>(
      'ID_PDV_VENDA_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
  final VerificationMeta _valorPendenteMeta =
      const VerificationMeta('valorPendente');
  @override
  late final GeneratedColumn<double> valorPendente = GeneratedColumn<double>(
      'VALOR_PENDENTE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _dataPagamentoMeta =
      const VerificationMeta('dataPagamento');
  @override
  late final GeneratedColumn<DateTime> dataPagamento =
      GeneratedColumn<DateTime>('DATA_PAGAMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataLancamentoMeta =
      const VerificationMeta('dataLancamento');
  @override
  late final GeneratedColumn<DateTime> dataLancamento =
      GeneratedColumn<DateTime>('DATA_LANCAMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCliente,
        idPdvVendaCabecalho,
        valorPendente,
        dataPagamento,
        dataLancamento
      ];
  @override
  String get aliasedName => _alias ?? 'CLIENTE_FIADO';
  @override
  String get actualTableName => 'CLIENTE_FIADO';
  @override
  VerificationContext validateIntegrity(Insertable<ClienteFiado> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_CLIENTE')) {
      context.handle(_idClienteMeta,
          idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
    }
    if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
      context.handle(
          _idPdvVendaCabecalhoMeta,
          idPdvVendaCabecalho.isAcceptableOrUnknown(
              data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
    }
    if (data.containsKey('VALOR_PENDENTE')) {
      context.handle(
          _valorPendenteMeta,
          valorPendente.isAcceptableOrUnknown(
              data['VALOR_PENDENTE']!, _valorPendenteMeta));
    }
    if (data.containsKey('DATA_PAGAMENTO')) {
      context.handle(
          _dataPagamentoMeta,
          dataPagamento.isAcceptableOrUnknown(
              data['DATA_PAGAMENTO']!, _dataPagamentoMeta));
    }
    if (data.containsKey('DATA_LANCAMENTO')) {
      context.handle(
          _dataLancamentoMeta,
          dataLancamento.isAcceptableOrUnknown(
              data['DATA_LANCAMENTO']!, _dataLancamentoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ClienteFiado map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ClienteFiado.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ClienteFiadosTable createAlias(String alias) {
    return $ClienteFiadosTable(attachedDatabase, alias);
  }
}

class Colaborador extends DataClass implements Insertable<Colaborador> {
  final int? id;
  final String? nome;
  final String? cpf;
  final String? telefone;
  final String? celular;
  final String? email;
  final double? comissaoVista;
  final double? comissaoPrazo;
  final String? nivelAutorizacao;
  final String? entregadorVeiculo;
  Colaborador(
      {this.id,
      this.nome,
      this.cpf,
      this.telefone,
      this.celular,
      this.email,
      this.comissaoVista,
      this.comissaoPrazo,
      this.nivelAutorizacao,
      this.entregadorVeiculo});
  factory Colaborador.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Colaborador(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      celular: ValueSqlType.stringType(data['${effectivePrefix}CELULAR']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
      comissaoVista: ValueSqlType.doubleType(data['${effectivePrefix}COMISSAO_VISTA']),
      comissaoPrazo: ValueSqlType.doubleType(data['${effectivePrefix}COMISSAO_PRAZO']),
      nivelAutorizacao: ValueSqlType.stringType(data['${effectivePrefix}NIVEL_AUTORIZACAO']),
      entregadorVeiculo: ValueSqlType.stringType(
          data['${effectivePrefix}ENTREGADOR_VEICULO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || comissaoVista != null) {
      map['COMISSAO_VISTA'] = Variable<double>(comissaoVista);
    }
    if (!nullToAbsent || comissaoPrazo != null) {
      map['COMISSAO_PRAZO'] = Variable<double>(comissaoPrazo);
    }
    if (!nullToAbsent || nivelAutorizacao != null) {
      map['NIVEL_AUTORIZACAO'] = Variable<String>(nivelAutorizacao);
    }
    if (!nullToAbsent || entregadorVeiculo != null) {
      map['ENTREGADOR_VEICULO'] = Variable<String>(entregadorVeiculo);
    }
    return map;
  }

  ColaboradorsCompanion toCompanion(bool nullToAbsent) {
    return ColaboradorsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      comissaoVista: comissaoVista == null && nullToAbsent
          ? const Value.absent()
          : Value(comissaoVista),
      comissaoPrazo: comissaoPrazo == null && nullToAbsent
          ? const Value.absent()
          : Value(comissaoPrazo),
      nivelAutorizacao: nivelAutorizacao == null && nullToAbsent
          ? const Value.absent()
          : Value(nivelAutorizacao),
      entregadorVeiculo: entregadorVeiculo == null && nullToAbsent
          ? const Value.absent()
          : Value(entregadorVeiculo),
    );
  }

  factory Colaborador.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Colaborador(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      celular: serializer.fromJson<String?>(json['celular']),
      email: serializer.fromJson<String?>(json['email']),
      comissaoVista: serializer.fromJson<double?>(json['comissaoVista']),
      comissaoPrazo: serializer.fromJson<double?>(json['comissaoPrazo']),
      nivelAutorizacao: serializer.fromJson<String?>(json['nivelAutorizacao']),
      entregadorVeiculo:
          serializer.fromJson<String?>(json['entregadorVeiculo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'cpf': serializer.toJson<String?>(cpf),
      'telefone': serializer.toJson<String?>(telefone),
      'celular': serializer.toJson<String?>(celular),
      'email': serializer.toJson<String?>(email),
      'comissaoVista': serializer.toJson<double?>(comissaoVista),
      'comissaoPrazo': serializer.toJson<double?>(comissaoPrazo),
      'nivelAutorizacao': serializer.toJson<String?>(nivelAutorizacao),
      'entregadorVeiculo': serializer.toJson<String?>(entregadorVeiculo),
    };
  }

  Colaborador copyWith(
          {int? id,
          String? nome,
          String? cpf,
          String? telefone,
          String? celular,
          String? email,
          double? comissaoVista,
          double? comissaoPrazo,
          String? nivelAutorizacao,
          String? entregadorVeiculo}) =>
      Colaborador(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        cpf: cpf ?? this.cpf,
        telefone: telefone ?? this.telefone,
        celular: celular ?? this.celular,
        email: email ?? this.email,
        comissaoVista: comissaoVista ?? this.comissaoVista,
        comissaoPrazo: comissaoPrazo ?? this.comissaoPrazo,
        nivelAutorizacao: nivelAutorizacao ?? this.nivelAutorizacao,
        entregadorVeiculo: entregadorVeiculo ?? this.entregadorVeiculo,
      );
  @override
  String toString() {
    return (StringBuffer('Colaborador(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('cpf: $cpf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('email: $email, ')
          ..write('comissaoVista: $comissaoVista, ')
          ..write('comissaoPrazo: $comissaoPrazo, ')
          ..write('nivelAutorizacao: $nivelAutorizacao, ')
          ..write('entregadorVeiculo: $entregadorVeiculo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, nome, cpf, telefone, celular, email,
      comissaoVista, comissaoPrazo, nivelAutorizacao, entregadorVeiculo);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Colaborador &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.cpf == this.cpf &&
          other.telefone == this.telefone &&
          other.celular == this.celular &&
          other.email == this.email &&
          other.comissaoVista == this.comissaoVista &&
          other.comissaoPrazo == this.comissaoPrazo &&
          other.nivelAutorizacao == this.nivelAutorizacao &&
          other.entregadorVeiculo == this.entregadorVeiculo);
}

class ColaboradorsCompanion extends UpdateCompanion<Colaborador> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> cpf;
  final Value<String?> telefone;
  final Value<String?> celular;
  final Value<String?> email;
  final Value<double?> comissaoVista;
  final Value<double?> comissaoPrazo;
  final Value<String?> nivelAutorizacao;
  final Value<String?> entregadorVeiculo;
  const ColaboradorsCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.cpf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.email = const Value.absent(),
    this.comissaoVista = const Value.absent(),
    this.comissaoPrazo = const Value.absent(),
    this.nivelAutorizacao = const Value.absent(),
    this.entregadorVeiculo = const Value.absent(),
  });
  ColaboradorsCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.cpf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.email = const Value.absent(),
    this.comissaoVista = const Value.absent(),
    this.comissaoPrazo = const Value.absent(),
    this.nivelAutorizacao = const Value.absent(),
    this.entregadorVeiculo = const Value.absent(),
  });
  static Insertable<Colaborador> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? cpf,
    Expression<String>? telefone,
    Expression<String>? celular,
    Expression<String>? email,
    Expression<double>? comissaoVista,
    Expression<double>? comissaoPrazo,
    Expression<String>? nivelAutorizacao,
    Expression<String>? entregadorVeiculo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (cpf != null) 'CPF': cpf,
      if (telefone != null) 'TELEFONE': telefone,
      if (celular != null) 'CELULAR': celular,
      if (email != null) 'EMAIL': email,
      if (comissaoVista != null) 'COMISSAO_VISTA': comissaoVista,
      if (comissaoPrazo != null) 'COMISSAO_PRAZO': comissaoPrazo,
      if (nivelAutorizacao != null) 'NIVEL_AUTORIZACAO': nivelAutorizacao,
      if (entregadorVeiculo != null) 'ENTREGADOR_VEICULO': entregadorVeiculo,
    });
  }

  ColaboradorsCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? nome,
      Value<String?>? cpf,
      Value<String?>? telefone,
      Value<String?>? celular,
      Value<String?>? email,
      Value<double?>? comissaoVista,
      Value<double?>? comissaoPrazo,
      Value<String?>? nivelAutorizacao,
      Value<String?>? entregadorVeiculo}) {
    return ColaboradorsCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      cpf: cpf ?? this.cpf,
      telefone: telefone ?? this.telefone,
      celular: celular ?? this.celular,
      email: email ?? this.email,
      comissaoVista: comissaoVista ?? this.comissaoVista,
      comissaoPrazo: comissaoPrazo ?? this.comissaoPrazo,
      nivelAutorizacao: nivelAutorizacao ?? this.nivelAutorizacao,
      entregadorVeiculo: entregadorVeiculo ?? this.entregadorVeiculo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (comissaoVista.present) {
      map['COMISSAO_VISTA'] = Variable<double>(comissaoVista.value);
    }
    if (comissaoPrazo.present) {
      map['COMISSAO_PRAZO'] = Variable<double>(comissaoPrazo.value);
    }
    if (nivelAutorizacao.present) {
      map['NIVEL_AUTORIZACAO'] = Variable<String>(nivelAutorizacao.value);
    }
    if (entregadorVeiculo.present) {
      map['ENTREGADOR_VEICULO'] = Variable<String>(entregadorVeiculo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ColaboradorsCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('cpf: $cpf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('email: $email, ')
          ..write('comissaoVista: $comissaoVista, ')
          ..write('comissaoPrazo: $comissaoPrazo, ')
          ..write('nivelAutorizacao: $nivelAutorizacao, ')
          ..write('entregadorVeiculo: $entregadorVeiculo')
          ..write(')'))
        .toString();
  }
}

class $ColaboradorsTable extends Colaboradors
    with TableInfo<$ColaboradorsTable, Colaborador> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ColaboradorsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  @override
  late final GeneratedColumn<String> celular = GeneratedColumn<String>(
      'CELULAR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _comissaoVistaMeta =
      const VerificationMeta('comissaoVista');
  @override
  late final GeneratedColumn<double> comissaoVista = GeneratedColumn<double>(
      'COMISSAO_VISTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _comissaoPrazoMeta =
      const VerificationMeta('comissaoPrazo');
  @override
  late final GeneratedColumn<double> comissaoPrazo = GeneratedColumn<double>(
      'COMISSAO_PRAZO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _nivelAutorizacaoMeta =
      const VerificationMeta('nivelAutorizacao');
  @override
  late final GeneratedColumn<String> nivelAutorizacao =
      GeneratedColumn<String>('NIVEL_AUTORIZACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _entregadorVeiculoMeta =
      const VerificationMeta('entregadorVeiculo');
  @override
  late final GeneratedColumn<String> entregadorVeiculo =
      GeneratedColumn<String>('ENTREGADOR_VEICULO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        nome,
        cpf,
        telefone,
        celular,
        email,
        comissaoVista,
        comissaoPrazo,
        nivelAutorizacao,
        entregadorVeiculo
      ];
  @override
  String get aliasedName => _alias ?? 'COLABORADOR';
  @override
  String get actualTableName => 'COLABORADOR';
  @override
  VerificationContext validateIntegrity(Insertable<Colaborador> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    if (data.containsKey('COMISSAO_VISTA')) {
      context.handle(
          _comissaoVistaMeta,
          comissaoVista.isAcceptableOrUnknown(
              data['COMISSAO_VISTA']!, _comissaoVistaMeta));
    }
    if (data.containsKey('COMISSAO_PRAZO')) {
      context.handle(
          _comissaoPrazoMeta,
          comissaoPrazo.isAcceptableOrUnknown(
              data['COMISSAO_PRAZO']!, _comissaoPrazoMeta));
    }
    if (data.containsKey('NIVEL_AUTORIZACAO')) {
      context.handle(
          _nivelAutorizacaoMeta,
          nivelAutorizacao.isAcceptableOrUnknown(
              data['NIVEL_AUTORIZACAO']!, _nivelAutorizacaoMeta));
    }
    if (data.containsKey('ENTREGADOR_VEICULO')) {
      context.handle(
          _entregadorVeiculoMeta,
          entregadorVeiculo.isAcceptableOrUnknown(
              data['ENTREGADOR_VEICULO']!, _entregadorVeiculoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Colaborador map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Colaborador.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ColaboradorsTable createAlias(String alias) {
    return $ColaboradorsTable(attachedDatabase, alias);
  }
}

class Comanda extends DataClass implements Insertable<Comanda> {
  final int? id;
  final int? idColaborador;
  final int? idMesa;
  final int? idCliente;
  final int? idEmpresaDeliveryPedido;
  final int? numero;
  final DateTime? dataChegada;
  final String? horaChegada;
  final DateTime? dataSaida;
  final String? horaSaida;
  final double? valorSubtotal;
  final double? valorDesconto;
  final double? valorTotal;
  final String? tipo;
  final int? quantidadePessoas;
  final double? valorPorPessoa;
  final String? situacao;
  final int? codigoCompartilhado;
  Comanda(
      {this.id,
      this.idColaborador,
      this.idMesa,
      this.idCliente,
      this.idEmpresaDeliveryPedido,
      this.numero,
      this.dataChegada,
      this.horaChegada,
      this.dataSaida,
      this.horaSaida,
      this.valorSubtotal,
      this.valorDesconto,
      this.valorTotal,
      this.tipo,
      this.quantidadePessoas,
      this.valorPorPessoa,
      this.situacao,
      this.codigoCompartilhado});
  factory Comanda.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Comanda(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idColaborador: ValueSqlType.intType(data['${effectivePrefix}ID_COLABORADOR']),
      idMesa: ValueSqlType.intType(data['${effectivePrefix}ID_MESA']),
      idCliente: ValueSqlType.intType(data['${effectivePrefix}ID_CLIENTE']),
      idEmpresaDeliveryPedido: ValueSqlType.intType(
          data['${effectivePrefix}ID_EMPRESA_DELIVERY_PEDIDO']),
      numero: ValueSqlType.intType(data['${effectivePrefix}NUMERO']),
      dataChegada: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_CHEGADA']),
      horaChegada: ValueSqlType.stringType(data['${effectivePrefix}HORA_CHEGADA']),
      dataSaida: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_SAIDA']),
      horaSaida: ValueSqlType.stringType(data['${effectivePrefix}HORA_SAIDA']),
      valorSubtotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_SUBTOTAL']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      valorTotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL']),
      tipo: ValueSqlType.stringType(data['${effectivePrefix}TIPO']),
      quantidadePessoas: ValueSqlType.intType(
          data['${effectivePrefix}QUANTIDADE_PESSOAS']),
      valorPorPessoa: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_POR_PESSOA']),
      situacao: ValueSqlType.stringType(data['${effectivePrefix}SITUACAO']),
      codigoCompartilhado: ValueSqlType.intType(
          data['${effectivePrefix}CODIGO_COMPARTILHADO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || idMesa != null) {
      map['ID_MESA'] = Variable<int>(idMesa);
    }
    if (!nullToAbsent || idCliente != null) {
      map['ID_CLIENTE'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || idEmpresaDeliveryPedido != null) {
      map['ID_EMPRESA_DELIVERY_PEDIDO'] =
          Variable<int>(idEmpresaDeliveryPedido);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<int>(numero);
    }
    if (!nullToAbsent || dataChegada != null) {
      map['DATA_CHEGADA'] = Variable<DateTime>(dataChegada);
    }
    if (!nullToAbsent || horaChegada != null) {
      map['HORA_CHEGADA'] = Variable<String>(horaChegada);
    }
    if (!nullToAbsent || dataSaida != null) {
      map['DATA_SAIDA'] = Variable<DateTime>(dataSaida);
    }
    if (!nullToAbsent || horaSaida != null) {
      map['HORA_SAIDA'] = Variable<String>(horaSaida);
    }
    if (!nullToAbsent || valorSubtotal != null) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || quantidadePessoas != null) {
      map['QUANTIDADE_PESSOAS'] = Variable<int>(quantidadePessoas);
    }
    if (!nullToAbsent || valorPorPessoa != null) {
      map['VALOR_POR_PESSOA'] = Variable<double>(valorPorPessoa);
    }
    if (!nullToAbsent || situacao != null) {
      map['SITUACAO'] = Variable<String>(situacao);
    }
    if (!nullToAbsent || codigoCompartilhado != null) {
      map['CODIGO_COMPARTILHADO'] = Variable<int>(codigoCompartilhado);
    }
    return map;
  }

  ComandasCompanion toCompanion(bool nullToAbsent) {
    return ComandasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      idMesa:
          idMesa == null && nullToAbsent ? const Value.absent() : Value(idMesa),
      idCliente: idCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(idCliente),
      idEmpresaDeliveryPedido: idEmpresaDeliveryPedido == null && nullToAbsent
          ? const Value.absent()
          : Value(idEmpresaDeliveryPedido),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      dataChegada: dataChegada == null && nullToAbsent
          ? const Value.absent()
          : Value(dataChegada),
      horaChegada: horaChegada == null && nullToAbsent
          ? const Value.absent()
          : Value(horaChegada),
      dataSaida: dataSaida == null && nullToAbsent
          ? const Value.absent()
          : Value(dataSaida),
      horaSaida: horaSaida == null && nullToAbsent
          ? const Value.absent()
          : Value(horaSaida),
      valorSubtotal: valorSubtotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSubtotal),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      quantidadePessoas: quantidadePessoas == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadePessoas),
      valorPorPessoa: valorPorPessoa == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPorPessoa),
      situacao: situacao == null && nullToAbsent
          ? const Value.absent()
          : Value(situacao),
      codigoCompartilhado: codigoCompartilhado == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoCompartilhado),
    );
  }

  factory Comanda.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Comanda(
      id: serializer.fromJson<int?>(json['id']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      idMesa: serializer.fromJson<int?>(json['idMesa']),
      idCliente: serializer.fromJson<int?>(json['idCliente']),
      idEmpresaDeliveryPedido:
          serializer.fromJson<int?>(json['idEmpresaDeliveryPedido']),
      numero: serializer.fromJson<int?>(json['numero']),
      dataChegada: serializer.fromJson<DateTime?>(json['dataChegada']),
      horaChegada: serializer.fromJson<String?>(json['horaChegada']),
      dataSaida: serializer.fromJson<DateTime?>(json['dataSaida']),
      horaSaida: serializer.fromJson<String?>(json['horaSaida']),
      valorSubtotal: serializer.fromJson<double?>(json['valorSubtotal']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      quantidadePessoas: serializer.fromJson<int?>(json['quantidadePessoas']),
      valorPorPessoa: serializer.fromJson<double?>(json['valorPorPessoa']),
      situacao: serializer.fromJson<String?>(json['situacao']),
      codigoCompartilhado:
          serializer.fromJson<int?>(json['codigoCompartilhado']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'idMesa': serializer.toJson<int?>(idMesa),
      'idCliente': serializer.toJson<int?>(idCliente),
      'idEmpresaDeliveryPedido':
          serializer.toJson<int?>(idEmpresaDeliveryPedido),
      'numero': serializer.toJson<int?>(numero),
      'dataChegada': serializer.toJson<DateTime?>(dataChegada),
      'horaChegada': serializer.toJson<String?>(horaChegada),
      'dataSaida': serializer.toJson<DateTime?>(dataSaida),
      'horaSaida': serializer.toJson<String?>(horaSaida),
      'valorSubtotal': serializer.toJson<double?>(valorSubtotal),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'tipo': serializer.toJson<String?>(tipo),
      'quantidadePessoas': serializer.toJson<int?>(quantidadePessoas),
      'valorPorPessoa': serializer.toJson<double?>(valorPorPessoa),
      'situacao': serializer.toJson<String?>(situacao),
      'codigoCompartilhado': serializer.toJson<int?>(codigoCompartilhado),
    };
  }

  Comanda copyWith(
          {int? id,
          int? idColaborador,
          int? idMesa,
          int? idCliente,
          int? idEmpresaDeliveryPedido,
          int? numero,
          DateTime? dataChegada,
          String? horaChegada,
          DateTime? dataSaida,
          String? horaSaida,
          double? valorSubtotal,
          double? valorDesconto,
          double? valorTotal,
          String? tipo,
          int? quantidadePessoas,
          double? valorPorPessoa,
          String? situacao,
          int? codigoCompartilhado}) =>
      Comanda(
        id: id ?? this.id,
        idColaborador: idColaborador ?? this.idColaborador,
        idMesa: idMesa ?? this.idMesa,
        idCliente: idCliente ?? this.idCliente,
        idEmpresaDeliveryPedido:
            idEmpresaDeliveryPedido ?? this.idEmpresaDeliveryPedido,
        numero: numero ?? this.numero,
        dataChegada: dataChegada ?? this.dataChegada,
        horaChegada: horaChegada ?? this.horaChegada,
        dataSaida: dataSaida ?? this.dataSaida,
        horaSaida: horaSaida ?? this.horaSaida,
        valorSubtotal: valorSubtotal ?? this.valorSubtotal,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorTotal: valorTotal ?? this.valorTotal,
        tipo: tipo ?? this.tipo,
        quantidadePessoas: quantidadePessoas ?? this.quantidadePessoas,
        valorPorPessoa: valorPorPessoa ?? this.valorPorPessoa,
        situacao: situacao ?? this.situacao,
        codigoCompartilhado: codigoCompartilhado ?? this.codigoCompartilhado,
      );
  @override
  String toString() {
    return (StringBuffer('Comanda(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idMesa: $idMesa, ')
          ..write('idCliente: $idCliente, ')
          ..write('idEmpresaDeliveryPedido: $idEmpresaDeliveryPedido, ')
          ..write('numero: $numero, ')
          ..write('dataChegada: $dataChegada, ')
          ..write('horaChegada: $horaChegada, ')
          ..write('dataSaida: $dataSaida, ')
          ..write('horaSaida: $horaSaida, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('tipo: $tipo, ')
          ..write('quantidadePessoas: $quantidadePessoas, ')
          ..write('valorPorPessoa: $valorPorPessoa, ')
          ..write('situacao: $situacao, ')
          ..write('codigoCompartilhado: $codigoCompartilhado')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idColaborador,
      idMesa,
      idCliente,
      idEmpresaDeliveryPedido,
      numero,
      dataChegada,
      horaChegada,
      dataSaida,
      horaSaida,
      valorSubtotal,
      valorDesconto,
      valorTotal,
      tipo,
      quantidadePessoas,
      valorPorPessoa,
      situacao,
      codigoCompartilhado);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Comanda &&
          other.id == this.id &&
          other.idColaborador == this.idColaborador &&
          other.idMesa == this.idMesa &&
          other.idCliente == this.idCliente &&
          other.idEmpresaDeliveryPedido == this.idEmpresaDeliveryPedido &&
          other.numero == this.numero &&
          other.dataChegada == this.dataChegada &&
          other.horaChegada == this.horaChegada &&
          other.dataSaida == this.dataSaida &&
          other.horaSaida == this.horaSaida &&
          other.valorSubtotal == this.valorSubtotal &&
          other.valorDesconto == this.valorDesconto &&
          other.valorTotal == this.valorTotal &&
          other.tipo == this.tipo &&
          other.quantidadePessoas == this.quantidadePessoas &&
          other.valorPorPessoa == this.valorPorPessoa &&
          other.situacao == this.situacao &&
          other.codigoCompartilhado == this.codigoCompartilhado);
}

class ComandasCompanion extends UpdateCompanion<Comanda> {
  final Value<int?> id;
  final Value<int?> idColaborador;
  final Value<int?> idMesa;
  final Value<int?> idCliente;
  final Value<int?> idEmpresaDeliveryPedido;
  final Value<int?> numero;
  final Value<DateTime?> dataChegada;
  final Value<String?> horaChegada;
  final Value<DateTime?> dataSaida;
  final Value<String?> horaSaida;
  final Value<double?> valorSubtotal;
  final Value<double?> valorDesconto;
  final Value<double?> valorTotal;
  final Value<String?> tipo;
  final Value<int?> quantidadePessoas;
  final Value<double?> valorPorPessoa;
  final Value<String?> situacao;
  final Value<int?> codigoCompartilhado;
  const ComandasCompanion({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idMesa = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idEmpresaDeliveryPedido = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataChegada = const Value.absent(),
    this.horaChegada = const Value.absent(),
    this.dataSaida = const Value.absent(),
    this.horaSaida = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.tipo = const Value.absent(),
    this.quantidadePessoas = const Value.absent(),
    this.valorPorPessoa = const Value.absent(),
    this.situacao = const Value.absent(),
    this.codigoCompartilhado = const Value.absent(),
  });
  ComandasCompanion.insert({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idMesa = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idEmpresaDeliveryPedido = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataChegada = const Value.absent(),
    this.horaChegada = const Value.absent(),
    this.dataSaida = const Value.absent(),
    this.horaSaida = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.tipo = const Value.absent(),
    this.quantidadePessoas = const Value.absent(),
    this.valorPorPessoa = const Value.absent(),
    this.situacao = const Value.absent(),
    this.codigoCompartilhado = const Value.absent(),
  });
  static Insertable<Comanda> custom({
    Expression<int>? id,
    Expression<int>? idColaborador,
    Expression<int>? idMesa,
    Expression<int>? idCliente,
    Expression<int>? idEmpresaDeliveryPedido,
    Expression<int>? numero,
    Expression<DateTime>? dataChegada,
    Expression<String>? horaChegada,
    Expression<DateTime>? dataSaida,
    Expression<String>? horaSaida,
    Expression<double>? valorSubtotal,
    Expression<double>? valorDesconto,
    Expression<double>? valorTotal,
    Expression<String>? tipo,
    Expression<int>? quantidadePessoas,
    Expression<double>? valorPorPessoa,
    Expression<String>? situacao,
    Expression<int>? codigoCompartilhado,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (idMesa != null) 'ID_MESA': idMesa,
      if (idCliente != null) 'ID_CLIENTE': idCliente,
      if (idEmpresaDeliveryPedido != null)
        'ID_EMPRESA_DELIVERY_PEDIDO': idEmpresaDeliveryPedido,
      if (numero != null) 'NUMERO': numero,
      if (dataChegada != null) 'DATA_CHEGADA': dataChegada,
      if (horaChegada != null) 'HORA_CHEGADA': horaChegada,
      if (dataSaida != null) 'DATA_SAIDA': dataSaida,
      if (horaSaida != null) 'HORA_SAIDA': horaSaida,
      if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (tipo != null) 'TIPO': tipo,
      if (quantidadePessoas != null) 'QUANTIDADE_PESSOAS': quantidadePessoas,
      if (valorPorPessoa != null) 'VALOR_POR_PESSOA': valorPorPessoa,
      if (situacao != null) 'SITUACAO': situacao,
      if (codigoCompartilhado != null)
        'CODIGO_COMPARTILHADO': codigoCompartilhado,
    });
  }

  ComandasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idColaborador,
      Value<int?>? idMesa,
      Value<int?>? idCliente,
      Value<int?>? idEmpresaDeliveryPedido,
      Value<int?>? numero,
      Value<DateTime?>? dataChegada,
      Value<String?>? horaChegada,
      Value<DateTime?>? dataSaida,
      Value<String?>? horaSaida,
      Value<double?>? valorSubtotal,
      Value<double?>? valorDesconto,
      Value<double?>? valorTotal,
      Value<String?>? tipo,
      Value<int?>? quantidadePessoas,
      Value<double?>? valorPorPessoa,
      Value<String?>? situacao,
      Value<int?>? codigoCompartilhado}) {
    return ComandasCompanion(
      id: id ?? this.id,
      idColaborador: idColaborador ?? this.idColaborador,
      idMesa: idMesa ?? this.idMesa,
      idCliente: idCliente ?? this.idCliente,
      idEmpresaDeliveryPedido:
          idEmpresaDeliveryPedido ?? this.idEmpresaDeliveryPedido,
      numero: numero ?? this.numero,
      dataChegada: dataChegada ?? this.dataChegada,
      horaChegada: horaChegada ?? this.horaChegada,
      dataSaida: dataSaida ?? this.dataSaida,
      horaSaida: horaSaida ?? this.horaSaida,
      valorSubtotal: valorSubtotal ?? this.valorSubtotal,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorTotal: valorTotal ?? this.valorTotal,
      tipo: tipo ?? this.tipo,
      quantidadePessoas: quantidadePessoas ?? this.quantidadePessoas,
      valorPorPessoa: valorPorPessoa ?? this.valorPorPessoa,
      situacao: situacao ?? this.situacao,
      codigoCompartilhado: codigoCompartilhado ?? this.codigoCompartilhado,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (idMesa.present) {
      map['ID_MESA'] = Variable<int>(idMesa.value);
    }
    if (idCliente.present) {
      map['ID_CLIENTE'] = Variable<int>(idCliente.value);
    }
    if (idEmpresaDeliveryPedido.present) {
      map['ID_EMPRESA_DELIVERY_PEDIDO'] =
          Variable<int>(idEmpresaDeliveryPedido.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<int>(numero.value);
    }
    if (dataChegada.present) {
      map['DATA_CHEGADA'] = Variable<DateTime>(dataChegada.value);
    }
    if (horaChegada.present) {
      map['HORA_CHEGADA'] = Variable<String>(horaChegada.value);
    }
    if (dataSaida.present) {
      map['DATA_SAIDA'] = Variable<DateTime>(dataSaida.value);
    }
    if (horaSaida.present) {
      map['HORA_SAIDA'] = Variable<String>(horaSaida.value);
    }
    if (valorSubtotal.present) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (quantidadePessoas.present) {
      map['QUANTIDADE_PESSOAS'] = Variable<int>(quantidadePessoas.value);
    }
    if (valorPorPessoa.present) {
      map['VALOR_POR_PESSOA'] = Variable<double>(valorPorPessoa.value);
    }
    if (situacao.present) {
      map['SITUACAO'] = Variable<String>(situacao.value);
    }
    if (codigoCompartilhado.present) {
      map['CODIGO_COMPARTILHADO'] = Variable<int>(codigoCompartilhado.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ComandasCompanion(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idMesa: $idMesa, ')
          ..write('idCliente: $idCliente, ')
          ..write('idEmpresaDeliveryPedido: $idEmpresaDeliveryPedido, ')
          ..write('numero: $numero, ')
          ..write('dataChegada: $dataChegada, ')
          ..write('horaChegada: $horaChegada, ')
          ..write('dataSaida: $dataSaida, ')
          ..write('horaSaida: $horaSaida, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('tipo: $tipo, ')
          ..write('quantidadePessoas: $quantidadePessoas, ')
          ..write('valorPorPessoa: $valorPorPessoa, ')
          ..write('situacao: $situacao, ')
          ..write('codigoCompartilhado: $codigoCompartilhado')
          ..write(')'))
        .toString();
  }
}

class $ComandasTable extends Comandas with TableInfo<$ComandasTable, Comanda> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ComandasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
      'ID_COLABORADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  final VerificationMeta _idMesaMeta = const VerificationMeta('idMesa');
  @override
  late final GeneratedColumn<int> idMesa = GeneratedColumn<int>(
      'ID_MESA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES MESA(ID)');
  final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
  @override
  late final GeneratedColumn<int> idCliente = GeneratedColumn<int>(
      'ID_CLIENTE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
  final VerificationMeta _idEmpresaDeliveryPedidoMeta =
      const VerificationMeta('idEmpresaDeliveryPedido');
  @override
  late final GeneratedColumn<int> idEmpresaDeliveryPedido =
      GeneratedColumn<int>('ID_EMPRESA_DELIVERY_PEDIDO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES EMPRESA_DELIVERY_PEDIDO(ID)');
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<int> numero = GeneratedColumn<int>(
      'NUMERO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataChegadaMeta =
      const VerificationMeta('dataChegada');
  @override
  late final GeneratedColumn<DateTime> dataChegada =
      GeneratedColumn<DateTime>('DATA_CHEGADA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaChegadaMeta =
      const VerificationMeta('horaChegada');
  @override
  late final GeneratedColumn<String> horaChegada = GeneratedColumn<String>(
      'HORA_CHEGADA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataSaidaMeta = const VerificationMeta('dataSaida');
  @override
  late final GeneratedColumn<DateTime> dataSaida = GeneratedColumn<DateTime>(
      'DATA_SAIDA', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaSaidaMeta = const VerificationMeta('horaSaida');
  @override
  late final GeneratedColumn<String> horaSaida = GeneratedColumn<String>(
      'HORA_SAIDA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorSubtotalMeta =
      const VerificationMeta('valorSubtotal');
  @override
  late final GeneratedColumn<double> valorSubtotal = GeneratedColumn<double>(
      'VALOR_SUBTOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
      'VALOR_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
      'TIPO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadePessoasMeta =
      const VerificationMeta('quantidadePessoas');
  @override
  late final GeneratedColumn<int> quantidadePessoas = GeneratedColumn<int>(
      'QUANTIDADE_PESSOAS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _valorPorPessoaMeta =
      const VerificationMeta('valorPorPessoa');
  @override
  late final GeneratedColumn<double> valorPorPessoa = GeneratedColumn<double>(
      'VALOR_POR_PESSOA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _situacaoMeta = const VerificationMeta('situacao');
  @override
  late final GeneratedColumn<String> situacao = GeneratedColumn<String>(
      'SITUACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoCompartilhadoMeta =
      const VerificationMeta('codigoCompartilhado');
  @override
  late final GeneratedColumn<int> codigoCompartilhado = GeneratedColumn<int>(
      'CODIGO_COMPARTILHADO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idColaborador,
        idMesa,
        idCliente,
        idEmpresaDeliveryPedido,
        numero,
        dataChegada,
        horaChegada,
        dataSaida,
        horaSaida,
        valorSubtotal,
        valorDesconto,
        valorTotal,
        tipo,
        quantidadePessoas,
        valorPorPessoa,
        situacao,
        codigoCompartilhado
      ];
  @override
  String get aliasedName => _alias ?? 'COMANDA';
  @override
  String get actualTableName => 'COMANDA';
  @override
  VerificationContext validateIntegrity(Insertable<Comanda> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR']!, _idColaboradorMeta));
    }
    if (data.containsKey('ID_MESA')) {
      context.handle(_idMesaMeta,
          idMesa.isAcceptableOrUnknown(data['ID_MESA']!, _idMesaMeta));
    }
    if (data.containsKey('ID_CLIENTE')) {
      context.handle(_idClienteMeta,
          idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
    }
    if (data.containsKey('ID_EMPRESA_DELIVERY_PEDIDO')) {
      context.handle(
          _idEmpresaDeliveryPedidoMeta,
          idEmpresaDeliveryPedido.isAcceptableOrUnknown(
              data['ID_EMPRESA_DELIVERY_PEDIDO']!,
              _idEmpresaDeliveryPedidoMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('DATA_CHEGADA')) {
      context.handle(
          _dataChegadaMeta,
          dataChegada.isAcceptableOrUnknown(
              data['DATA_CHEGADA']!, _dataChegadaMeta));
    }
    if (data.containsKey('HORA_CHEGADA')) {
      context.handle(
          _horaChegadaMeta,
          horaChegada.isAcceptableOrUnknown(
              data['HORA_CHEGADA']!, _horaChegadaMeta));
    }
    if (data.containsKey('DATA_SAIDA')) {
      context.handle(_dataSaidaMeta,
          dataSaida.isAcceptableOrUnknown(data['DATA_SAIDA']!, _dataSaidaMeta));
    }
    if (data.containsKey('HORA_SAIDA')) {
      context.handle(_horaSaidaMeta,
          horaSaida.isAcceptableOrUnknown(data['HORA_SAIDA']!, _horaSaidaMeta));
    }
    if (data.containsKey('VALOR_SUBTOTAL')) {
      context.handle(
          _valorSubtotalMeta,
          valorSubtotal.isAcceptableOrUnknown(
              data['VALOR_SUBTOTAL']!, _valorSubtotalMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL']!, _valorTotalMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
    }
    if (data.containsKey('QUANTIDADE_PESSOAS')) {
      context.handle(
          _quantidadePessoasMeta,
          quantidadePessoas.isAcceptableOrUnknown(
              data['QUANTIDADE_PESSOAS']!, _quantidadePessoasMeta));
    }
    if (data.containsKey('VALOR_POR_PESSOA')) {
      context.handle(
          _valorPorPessoaMeta,
          valorPorPessoa.isAcceptableOrUnknown(
              data['VALOR_POR_PESSOA']!, _valorPorPessoaMeta));
    }
    if (data.containsKey('SITUACAO')) {
      context.handle(_situacaoMeta,
          situacao.isAcceptableOrUnknown(data['SITUACAO']!, _situacaoMeta));
    }
    if (data.containsKey('CODIGO_COMPARTILHADO')) {
      context.handle(
          _codigoCompartilhadoMeta,
          codigoCompartilhado.isAcceptableOrUnknown(
              data['CODIGO_COMPARTILHADO']!, _codigoCompartilhadoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Comanda map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Comanda.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ComandasTable createAlias(String alias) {
    return $ComandasTable(attachedDatabase, alias);
  }
}

class ComandaDetalhe extends DataClass implements Insertable<ComandaDetalhe> {
  final int? id;
  final int? idComanda;
  final int? idProduto;
  final double? quantidade;
  final double? valorUnitario;
  final double? valorTotal;
  final double? valorTotalComplemento;
  final String? observacao;
  final String? gerouPedidoCozinha;
  ComandaDetalhe(
      {this.id,
      this.idComanda,
      this.idProduto,
      this.quantidade,
      this.valorUnitario,
      this.valorTotal,
      this.valorTotalComplemento,
      this.observacao,
      this.gerouPedidoCozinha});
  factory ComandaDetalhe.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ComandaDetalhe(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idComanda: ValueSqlType.intType(data['${effectivePrefix}ID_COMANDA']),
      idProduto: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO']),
      quantidade: ValueSqlType.doubleType(data['${effectivePrefix}QUANTIDADE']),
      valorUnitario: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_UNITARIO']),
      valorTotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL']),
      valorTotalComplemento: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_COMPLEMENTO']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
      gerouPedidoCozinha: ValueSqlType.stringType(
          data['${effectivePrefix}GEROU_PEDIDO_COZINHA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idComanda != null) {
      map['ID_COMANDA'] = Variable<int>(idComanda);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || valorUnitario != null) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || valorTotalComplemento != null) {
      map['VALOR_TOTAL_COMPLEMENTO'] = Variable<double>(valorTotalComplemento);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || gerouPedidoCozinha != null) {
      map['GEROU_PEDIDO_COZINHA'] = Variable<String>(gerouPedidoCozinha);
    }
    return map;
  }

  ComandaDetalhesCompanion toCompanion(bool nullToAbsent) {
    return ComandaDetalhesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idComanda: idComanda == null && nullToAbsent
          ? const Value.absent()
          : Value(idComanda),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      valorUnitario: valorUnitario == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnitario),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      valorTotalComplemento: valorTotalComplemento == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalComplemento),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
      gerouPedidoCozinha: gerouPedidoCozinha == null && nullToAbsent
          ? const Value.absent()
          : Value(gerouPedidoCozinha),
    );
  }

  factory ComandaDetalhe.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ComandaDetalhe(
      id: serializer.fromJson<int?>(json['id']),
      idComanda: serializer.fromJson<int?>(json['idComanda']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
      valorUnitario: serializer.fromJson<double?>(json['valorUnitario']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      valorTotalComplemento:
          serializer.fromJson<double?>(json['valorTotalComplemento']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      gerouPedidoCozinha:
          serializer.fromJson<String?>(json['gerouPedidoCozinha']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idComanda': serializer.toJson<int?>(idComanda),
      'idProduto': serializer.toJson<int?>(idProduto),
      'quantidade': serializer.toJson<double?>(quantidade),
      'valorUnitario': serializer.toJson<double?>(valorUnitario),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'valorTotalComplemento':
          serializer.toJson<double?>(valorTotalComplemento),
      'observacao': serializer.toJson<String?>(observacao),
      'gerouPedidoCozinha': serializer.toJson<String?>(gerouPedidoCozinha),
    };
  }

  ComandaDetalhe copyWith(
          {int? id,
          int? idComanda,
          int? idProduto,
          double? quantidade,
          double? valorUnitario,
          double? valorTotal,
          double? valorTotalComplemento,
          String? observacao,
          String? gerouPedidoCozinha}) =>
      ComandaDetalhe(
        id: id ?? this.id,
        idComanda: idComanda ?? this.idComanda,
        idProduto: idProduto ?? this.idProduto,
        quantidade: quantidade ?? this.quantidade,
        valorUnitario: valorUnitario ?? this.valorUnitario,
        valorTotal: valorTotal ?? this.valorTotal,
        valorTotalComplemento:
            valorTotalComplemento ?? this.valorTotalComplemento,
        observacao: observacao ?? this.observacao,
        gerouPedidoCozinha: gerouPedidoCozinha ?? this.gerouPedidoCozinha,
      );
  @override
  String toString() {
    return (StringBuffer('ComandaDetalhe(')
          ..write('id: $id, ')
          ..write('idComanda: $idComanda, ')
          ..write('idProduto: $idProduto, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalComplemento: $valorTotalComplemento, ')
          ..write('observacao: $observacao, ')
          ..write('gerouPedidoCozinha: $gerouPedidoCozinha')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idComanda,
      idProduto,
      quantidade,
      valorUnitario,
      valorTotal,
      valorTotalComplemento,
      observacao,
      gerouPedidoCozinha);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ComandaDetalhe &&
          other.id == this.id &&
          other.idComanda == this.idComanda &&
          other.idProduto == this.idProduto &&
          other.quantidade == this.quantidade &&
          other.valorUnitario == this.valorUnitario &&
          other.valorTotal == this.valorTotal &&
          other.valorTotalComplemento == this.valorTotalComplemento &&
          other.observacao == this.observacao &&
          other.gerouPedidoCozinha == this.gerouPedidoCozinha);
}

class ComandaDetalhesCompanion extends UpdateCompanion<ComandaDetalhe> {
  final Value<int?> id;
  final Value<int?> idComanda;
  final Value<int?> idProduto;
  final Value<double?> quantidade;
  final Value<double?> valorUnitario;
  final Value<double?> valorTotal;
  final Value<double?> valorTotalComplemento;
  final Value<String?> observacao;
  final Value<String?> gerouPedidoCozinha;
  const ComandaDetalhesCompanion({
    this.id = const Value.absent(),
    this.idComanda = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalComplemento = const Value.absent(),
    this.observacao = const Value.absent(),
    this.gerouPedidoCozinha = const Value.absent(),
  });
  ComandaDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idComanda = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalComplemento = const Value.absent(),
    this.observacao = const Value.absent(),
    this.gerouPedidoCozinha = const Value.absent(),
  });
  static Insertable<ComandaDetalhe> custom({
    Expression<int>? id,
    Expression<int>? idComanda,
    Expression<int>? idProduto,
    Expression<double>? quantidade,
    Expression<double>? valorUnitario,
    Expression<double>? valorTotal,
    Expression<double>? valorTotalComplemento,
    Expression<String>? observacao,
    Expression<String>? gerouPedidoCozinha,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idComanda != null) 'ID_COMANDA': idComanda,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (valorTotalComplemento != null)
        'VALOR_TOTAL_COMPLEMENTO': valorTotalComplemento,
      if (observacao != null) 'OBSERVACAO': observacao,
      if (gerouPedidoCozinha != null)
        'GEROU_PEDIDO_COZINHA': gerouPedidoCozinha,
    });
  }

  ComandaDetalhesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idComanda,
      Value<int?>? idProduto,
      Value<double?>? quantidade,
      Value<double?>? valorUnitario,
      Value<double?>? valorTotal,
      Value<double?>? valorTotalComplemento,
      Value<String?>? observacao,
      Value<String?>? gerouPedidoCozinha}) {
    return ComandaDetalhesCompanion(
      id: id ?? this.id,
      idComanda: idComanda ?? this.idComanda,
      idProduto: idProduto ?? this.idProduto,
      quantidade: quantidade ?? this.quantidade,
      valorUnitario: valorUnitario ?? this.valorUnitario,
      valorTotal: valorTotal ?? this.valorTotal,
      valorTotalComplemento:
          valorTotalComplemento ?? this.valorTotalComplemento,
      observacao: observacao ?? this.observacao,
      gerouPedidoCozinha: gerouPedidoCozinha ?? this.gerouPedidoCozinha,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idComanda.present) {
      map['ID_COMANDA'] = Variable<int>(idComanda.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    if (valorUnitario.present) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (valorTotalComplemento.present) {
      map['VALOR_TOTAL_COMPLEMENTO'] =
          Variable<double>(valorTotalComplemento.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    if (gerouPedidoCozinha.present) {
      map['GEROU_PEDIDO_COZINHA'] = Variable<String>(gerouPedidoCozinha.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ComandaDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idComanda: $idComanda, ')
          ..write('idProduto: $idProduto, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalComplemento: $valorTotalComplemento, ')
          ..write('observacao: $observacao, ')
          ..write('gerouPedidoCozinha: $gerouPedidoCozinha')
          ..write(')'))
        .toString();
  }
}

class $ComandaDetalhesTable extends ComandaDetalhes
    with TableInfo<$ComandaDetalhesTable, ComandaDetalhe> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ComandaDetalhesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idComandaMeta = const VerificationMeta('idComanda');
  @override
  late final GeneratedColumn<int> idComanda = GeneratedColumn<int>(
      'ID_COMANDA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COMANDA(ID)');
  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
      'ID_PRODUTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
      'QUANTIDADE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorUnitarioMeta =
      const VerificationMeta('valorUnitario');
  @override
  late final GeneratedColumn<double> valorUnitario = GeneratedColumn<double>(
      'VALOR_UNITARIO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
      'VALOR_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalComplementoMeta =
      const VerificationMeta('valorTotalComplemento');
  @override
  late final GeneratedColumn<double> valorTotalComplemento =
      GeneratedColumn<double>('VALOR_TOTAL_COMPLEMENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _gerouPedidoCozinhaMeta =
      const VerificationMeta('gerouPedidoCozinha');
  @override
  late final GeneratedColumn<String> gerouPedidoCozinha =
      GeneratedColumn<String>(
          'GEROU_PEDIDO_COZINHA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idComanda,
        idProduto,
        quantidade,
        valorUnitario,
        valorTotal,
        valorTotalComplemento,
        observacao,
        gerouPedidoCozinha
      ];
  @override
  String get aliasedName => _alias ?? 'COMANDA_DETALHE';
  @override
  String get actualTableName => 'COMANDA_DETALHE';
  @override
  VerificationContext validateIntegrity(Insertable<ComandaDetalhe> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COMANDA')) {
      context.handle(_idComandaMeta,
          idComanda.isAcceptableOrUnknown(data['ID_COMANDA']!, _idComandaMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE']!, _quantidadeMeta));
    }
    if (data.containsKey('VALOR_UNITARIO')) {
      context.handle(
          _valorUnitarioMeta,
          valorUnitario.isAcceptableOrUnknown(
              data['VALOR_UNITARIO']!, _valorUnitarioMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL']!, _valorTotalMeta));
    }
    if (data.containsKey('VALOR_TOTAL_COMPLEMENTO')) {
      context.handle(
          _valorTotalComplementoMeta,
          valorTotalComplemento.isAcceptableOrUnknown(
              data['VALOR_TOTAL_COMPLEMENTO']!, _valorTotalComplementoMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    if (data.containsKey('GEROU_PEDIDO_COZINHA')) {
      context.handle(
          _gerouPedidoCozinhaMeta,
          gerouPedidoCozinha.isAcceptableOrUnknown(
              data['GEROU_PEDIDO_COZINHA']!, _gerouPedidoCozinhaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ComandaDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ComandaDetalhe.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ComandaDetalhesTable createAlias(String alias) {
    return $ComandaDetalhesTable(attachedDatabase, alias);
  }
}

class ComandaDetalheComplemento extends DataClass
    implements Insertable<ComandaDetalheComplemento> {
  final int? id;
  final int? idComandaDetalhe;
  final int? idProduto;
  final String? nomeProduto;
  final double? quantidade;
  final double? valorUnitario;
  final double? valorTotal;
  ComandaDetalheComplemento(
      {this.id,
      this.idComandaDetalhe,
      this.idProduto,
      this.nomeProduto,
      this.quantidade,
      this.valorUnitario,
      this.valorTotal});
  factory ComandaDetalheComplemento.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ComandaDetalheComplemento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idComandaDetalhe: ValueSqlType.intType(
          data['${effectivePrefix}ID_COMANDA_DETALHE']),
      idProduto: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO']),
      nomeProduto: ValueSqlType.stringType(data['${effectivePrefix}NOME_PRODUTO']),
      quantidade: ValueSqlType.doubleType(data['${effectivePrefix}QUANTIDADE']),
      valorUnitario: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_UNITARIO']),
      valorTotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idComandaDetalhe != null) {
      map['ID_COMANDA_DETALHE'] = Variable<int>(idComandaDetalhe);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || nomeProduto != null) {
      map['NOME_PRODUTO'] = Variable<String>(nomeProduto);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || valorUnitario != null) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    return map;
  }

  ComandaDetalheComplementosCompanion toCompanion(bool nullToAbsent) {
    return ComandaDetalheComplementosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idComandaDetalhe: idComandaDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idComandaDetalhe),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      nomeProduto: nomeProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeProduto),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      valorUnitario: valorUnitario == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnitario),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
    );
  }

  factory ComandaDetalheComplemento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ComandaDetalheComplemento(
      id: serializer.fromJson<int?>(json['id']),
      idComandaDetalhe: serializer.fromJson<int?>(json['idComandaDetalhe']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      nomeProduto: serializer.fromJson<String?>(json['nomeProduto']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
      valorUnitario: serializer.fromJson<double?>(json['valorUnitario']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idComandaDetalhe': serializer.toJson<int?>(idComandaDetalhe),
      'idProduto': serializer.toJson<int?>(idProduto),
      'nomeProduto': serializer.toJson<String?>(nomeProduto),
      'quantidade': serializer.toJson<double?>(quantidade),
      'valorUnitario': serializer.toJson<double?>(valorUnitario),
      'valorTotal': serializer.toJson<double?>(valorTotal),
    };
  }

  ComandaDetalheComplemento copyWith(
          {int? id,
          int? idComandaDetalhe,
          int? idProduto,
          String? nomeProduto,
          double? quantidade,
          double? valorUnitario,
          double? valorTotal}) =>
      ComandaDetalheComplemento(
        id: id ?? this.id,
        idComandaDetalhe: idComandaDetalhe ?? this.idComandaDetalhe,
        idProduto: idProduto ?? this.idProduto,
        nomeProduto: nomeProduto ?? this.nomeProduto,
        quantidade: quantidade ?? this.quantidade,
        valorUnitario: valorUnitario ?? this.valorUnitario,
        valorTotal: valorTotal ?? this.valorTotal,
      );
  @override
  String toString() {
    return (StringBuffer('ComandaDetalheComplemento(')
          ..write('id: $id, ')
          ..write('idComandaDetalhe: $idComandaDetalhe, ')
          ..write('idProduto: $idProduto, ')
          ..write('nomeProduto: $nomeProduto, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorTotal: $valorTotal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idComandaDetalhe, idProduto, nomeProduto,
      quantidade, valorUnitario, valorTotal);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ComandaDetalheComplemento &&
          other.id == this.id &&
          other.idComandaDetalhe == this.idComandaDetalhe &&
          other.idProduto == this.idProduto &&
          other.nomeProduto == this.nomeProduto &&
          other.quantidade == this.quantidade &&
          other.valorUnitario == this.valorUnitario &&
          other.valorTotal == this.valorTotal);
}

class ComandaDetalheComplementosCompanion
    extends UpdateCompanion<ComandaDetalheComplemento> {
  final Value<int?> id;
  final Value<int?> idComandaDetalhe;
  final Value<int?> idProduto;
  final Value<String?> nomeProduto;
  final Value<double?> quantidade;
  final Value<double?> valorUnitario;
  final Value<double?> valorTotal;
  const ComandaDetalheComplementosCompanion({
    this.id = const Value.absent(),
    this.idComandaDetalhe = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.nomeProduto = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorTotal = const Value.absent(),
  });
  ComandaDetalheComplementosCompanion.insert({
    this.id = const Value.absent(),
    this.idComandaDetalhe = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.nomeProduto = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorTotal = const Value.absent(),
  });
  static Insertable<ComandaDetalheComplemento> custom({
    Expression<int>? id,
    Expression<int>? idComandaDetalhe,
    Expression<int>? idProduto,
    Expression<String>? nomeProduto,
    Expression<double>? quantidade,
    Expression<double>? valorUnitario,
    Expression<double>? valorTotal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idComandaDetalhe != null) 'ID_COMANDA_DETALHE': idComandaDetalhe,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (nomeProduto != null) 'NOME_PRODUTO': nomeProduto,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
    });
  }

  ComandaDetalheComplementosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idComandaDetalhe,
      Value<int?>? idProduto,
      Value<String?>? nomeProduto,
      Value<double?>? quantidade,
      Value<double?>? valorUnitario,
      Value<double?>? valorTotal}) {
    return ComandaDetalheComplementosCompanion(
      id: id ?? this.id,
      idComandaDetalhe: idComandaDetalhe ?? this.idComandaDetalhe,
      idProduto: idProduto ?? this.idProduto,
      nomeProduto: nomeProduto ?? this.nomeProduto,
      quantidade: quantidade ?? this.quantidade,
      valorUnitario: valorUnitario ?? this.valorUnitario,
      valorTotal: valorTotal ?? this.valorTotal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idComandaDetalhe.present) {
      map['ID_COMANDA_DETALHE'] = Variable<int>(idComandaDetalhe.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (nomeProduto.present) {
      map['NOME_PRODUTO'] = Variable<String>(nomeProduto.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    if (valorUnitario.present) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ComandaDetalheComplementosCompanion(')
          ..write('id: $id, ')
          ..write('idComandaDetalhe: $idComandaDetalhe, ')
          ..write('idProduto: $idProduto, ')
          ..write('nomeProduto: $nomeProduto, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorTotal: $valorTotal')
          ..write(')'))
        .toString();
  }
}

class $ComandaDetalheComplementosTable extends ComandaDetalheComplementos
    with
        TableInfo<$ComandaDetalheComplementosTable, ComandaDetalheComplemento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ComandaDetalheComplementosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idComandaDetalheMeta =
      const VerificationMeta('idComandaDetalhe');
  @override
  late final GeneratedColumn<int> idComandaDetalhe = GeneratedColumn<int>(
      'ID_COMANDA_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COMANDA_DETALHE(ID)');
  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
      'ID_PRODUTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  final VerificationMeta _nomeProdutoMeta =
      const VerificationMeta('nomeProduto');
  @override
  late final GeneratedColumn<String> nomeProduto = GeneratedColumn<String>(
      'NOME_PRODUTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
      'QUANTIDADE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorUnitarioMeta =
      const VerificationMeta('valorUnitario');
  @override
  late final GeneratedColumn<double> valorUnitario = GeneratedColumn<double>(
      'VALOR_UNITARIO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
      'VALOR_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idComandaDetalhe,
        idProduto,
        nomeProduto,
        quantidade,
        valorUnitario,
        valorTotal
      ];
  @override
  String get aliasedName => _alias ?? 'COMANDA_DETALHE_COMPLEMENTO';
  @override
  String get actualTableName => 'COMANDA_DETALHE_COMPLEMENTO';
  @override
  VerificationContext validateIntegrity(
      Insertable<ComandaDetalheComplemento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COMANDA_DETALHE')) {
      context.handle(
          _idComandaDetalheMeta,
          idComandaDetalhe.isAcceptableOrUnknown(
              data['ID_COMANDA_DETALHE']!, _idComandaDetalheMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
    }
    if (data.containsKey('NOME_PRODUTO')) {
      context.handle(
          _nomeProdutoMeta,
          nomeProduto.isAcceptableOrUnknown(
              data['NOME_PRODUTO']!, _nomeProdutoMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE']!, _quantidadeMeta));
    }
    if (data.containsKey('VALOR_UNITARIO')) {
      context.handle(
          _valorUnitarioMeta,
          valorUnitario.isAcceptableOrUnknown(
              data['VALOR_UNITARIO']!, _valorUnitarioMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL']!, _valorTotalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ComandaDetalheComplemento map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return ComandaDetalheComplemento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ComandaDetalheComplementosTable createAlias(String alias) {
    return $ComandaDetalheComplementosTable(attachedDatabase, alias);
  }
}

class ComandaObservacaoPadrao extends DataClass
    implements Insertable<ComandaObservacaoPadrao> {
  final int? id;
  final String? codigo;
  final String? descricao;
  ComandaObservacaoPadrao({this.id, this.codigo, this.descricao});
  factory ComandaObservacaoPadrao.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ComandaObservacaoPadrao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      codigo: ValueSqlType.stringType(data['${effectivePrefix}CODIGO']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<String>(codigo);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    return map;
  }

  ComandaObservacaoPadraosCompanion toCompanion(bool nullToAbsent) {
    return ComandaObservacaoPadraosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
    );
  }

  factory ComandaObservacaoPadrao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ComandaObservacaoPadrao(
      id: serializer.fromJson<int?>(json['id']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'codigo': serializer.toJson<String?>(codigo),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  ComandaObservacaoPadrao copyWith(
          {int? id, String? codigo, String? descricao}) =>
      ComandaObservacaoPadrao(
        id: id ?? this.id,
        codigo: codigo ?? this.codigo,
        descricao: descricao ?? this.descricao,
      );
  @override
  String toString() {
    return (StringBuffer('ComandaObservacaoPadrao(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, codigo, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ComandaObservacaoPadrao &&
          other.id == this.id &&
          other.codigo == this.codigo &&
          other.descricao == this.descricao);
}

class ComandaObservacaoPadraosCompanion
    extends UpdateCompanion<ComandaObservacaoPadrao> {
  final Value<int?> id;
  final Value<String?> codigo;
  final Value<String?> descricao;
  const ComandaObservacaoPadraosCompanion({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  ComandaObservacaoPadraosCompanion.insert({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<ComandaObservacaoPadrao> custom({
    Expression<int>? id,
    Expression<String>? codigo,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigo != null) 'CODIGO': codigo,
      if (descricao != null) 'DESCRICAO': descricao,
    });
  }

  ComandaObservacaoPadraosCompanion copyWith(
      {Value<int?>? id, Value<String?>? codigo, Value<String?>? descricao}) {
    return ComandaObservacaoPadraosCompanion(
      id: id ?? this.id,
      codigo: codigo ?? this.codigo,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<String>(codigo.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ComandaObservacaoPadraosCompanion(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $ComandaObservacaoPadraosTable extends ComandaObservacaoPadraos
    with TableInfo<$ComandaObservacaoPadraosTable, ComandaObservacaoPadrao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ComandaObservacaoPadraosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  @override
  late final GeneratedColumn<String> codigo = GeneratedColumn<String>(
      'CODIGO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, codigo, descricao];
  @override
  String get aliasedName => _alias ?? 'COMANDA_OBSERVACAO_PADRAO';
  @override
  String get actualTableName => 'COMANDA_OBSERVACAO_PADRAO';
  @override
  VerificationContext validateIntegrity(
      Insertable<ComandaObservacaoPadrao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ComandaObservacaoPadrao map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return ComandaObservacaoPadrao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ComandaObservacaoPadraosTable createAlias(String alias) {
    return $ComandaObservacaoPadraosTable(attachedDatabase, alias);
  }
}

class ComandaPedido extends DataClass implements Insertable<ComandaPedido> {
  final int? id;
  final int? idComanda;
  final int? idCozinha;
  final DateTime? entrouNaFila;
  final DateTime? saiuDaFila;
  final int? estimativaMinutos;
  final int? posicao;
  final String? prioridade;
  final DateTime? inicioPreparo;
  final DateTime? fimPreparo;
  ComandaPedido(
      {this.id,
      this.idComanda,
      this.idCozinha,
      this.entrouNaFila,
      this.saiuDaFila,
      this.estimativaMinutos,
      this.posicao,
      this.prioridade,
      this.inicioPreparo,
      this.fimPreparo});
  factory ComandaPedido.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ComandaPedido(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idComanda: ValueSqlType.intType(data['${effectivePrefix}ID_COMANDA']),
      idCozinha: ValueSqlType.intType(data['${effectivePrefix}ID_COZINHA']),
      entrouNaFila: ValueSqlType.dateTimeType(data['${effectivePrefix}ENTROU_NA_FILA']),
      saiuDaFila: ValueSqlType.dateTimeType(data['${effectivePrefix}SAIU_DA_FILA']),
      estimativaMinutos: ValueSqlType.intType(
          data['${effectivePrefix}ESTIMATIVA_MINUTOS']),
      posicao: ValueSqlType.intType(data['${effectivePrefix}POSICAO']),
      prioridade: ValueSqlType.stringType(data['${effectivePrefix}PRIORIDADE']),
      inicioPreparo: ValueSqlType.dateTimeType(data['${effectivePrefix}INICIO_PREPARO']),
      fimPreparo: ValueSqlType.dateTimeType(data['${effectivePrefix}FIM_PREPARO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idComanda != null) {
      map['ID_COMANDA'] = Variable<int>(idComanda);
    }
    if (!nullToAbsent || idCozinha != null) {
      map['ID_COZINHA'] = Variable<int>(idCozinha);
    }
    if (!nullToAbsent || entrouNaFila != null) {
      map['ENTROU_NA_FILA'] = Variable<DateTime>(entrouNaFila);
    }
    if (!nullToAbsent || saiuDaFila != null) {
      map['SAIU_DA_FILA'] = Variable<DateTime>(saiuDaFila);
    }
    if (!nullToAbsent || estimativaMinutos != null) {
      map['ESTIMATIVA_MINUTOS'] = Variable<int>(estimativaMinutos);
    }
    if (!nullToAbsent || posicao != null) {
      map['POSICAO'] = Variable<int>(posicao);
    }
    if (!nullToAbsent || prioridade != null) {
      map['PRIORIDADE'] = Variable<String>(prioridade);
    }
    if (!nullToAbsent || inicioPreparo != null) {
      map['INICIO_PREPARO'] = Variable<DateTime>(inicioPreparo);
    }
    if (!nullToAbsent || fimPreparo != null) {
      map['FIM_PREPARO'] = Variable<DateTime>(fimPreparo);
    }
    return map;
  }

  ComandaPedidosCompanion toCompanion(bool nullToAbsent) {
    return ComandaPedidosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idComanda: idComanda == null && nullToAbsent
          ? const Value.absent()
          : Value(idComanda),
      idCozinha: idCozinha == null && nullToAbsent
          ? const Value.absent()
          : Value(idCozinha),
      entrouNaFila: entrouNaFila == null && nullToAbsent
          ? const Value.absent()
          : Value(entrouNaFila),
      saiuDaFila: saiuDaFila == null && nullToAbsent
          ? const Value.absent()
          : Value(saiuDaFila),
      estimativaMinutos: estimativaMinutos == null && nullToAbsent
          ? const Value.absent()
          : Value(estimativaMinutos),
      posicao: posicao == null && nullToAbsent
          ? const Value.absent()
          : Value(posicao),
      prioridade: prioridade == null && nullToAbsent
          ? const Value.absent()
          : Value(prioridade),
      inicioPreparo: inicioPreparo == null && nullToAbsent
          ? const Value.absent()
          : Value(inicioPreparo),
      fimPreparo: fimPreparo == null && nullToAbsent
          ? const Value.absent()
          : Value(fimPreparo),
    );
  }

  factory ComandaPedido.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ComandaPedido(
      id: serializer.fromJson<int?>(json['id']),
      idComanda: serializer.fromJson<int?>(json['idComanda']),
      idCozinha: serializer.fromJson<int?>(json['idCozinha']),
      entrouNaFila: serializer.fromJson<DateTime?>(json['entrouNaFila']),
      saiuDaFila: serializer.fromJson<DateTime?>(json['saiuDaFila']),
      estimativaMinutos: serializer.fromJson<int?>(json['estimativaMinutos']),
      posicao: serializer.fromJson<int?>(json['posicao']),
      prioridade: serializer.fromJson<String?>(json['prioridade']),
      inicioPreparo: serializer.fromJson<DateTime?>(json['inicioPreparo']),
      fimPreparo: serializer.fromJson<DateTime?>(json['fimPreparo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idComanda': serializer.toJson<int?>(idComanda),
      'idCozinha': serializer.toJson<int?>(idCozinha),
      'entrouNaFila': serializer.toJson<DateTime?>(entrouNaFila),
      'saiuDaFila': serializer.toJson<DateTime?>(saiuDaFila),
      'estimativaMinutos': serializer.toJson<int?>(estimativaMinutos),
      'posicao': serializer.toJson<int?>(posicao),
      'prioridade': serializer.toJson<String?>(prioridade),
      'inicioPreparo': serializer.toJson<DateTime?>(inicioPreparo),
      'fimPreparo': serializer.toJson<DateTime?>(fimPreparo),
    };
  }

  ComandaPedido copyWith(
          {int? id,
          int? idComanda,
          int? idCozinha,
          DateTime? entrouNaFila,
          DateTime? saiuDaFila,
          int? estimativaMinutos,
          int? posicao,
          String? prioridade,
          DateTime? inicioPreparo,
          DateTime? fimPreparo}) =>
      ComandaPedido(
        id: id ?? this.id,
        idComanda: idComanda ?? this.idComanda,
        idCozinha: idCozinha ?? this.idCozinha,
        entrouNaFila: entrouNaFila ?? this.entrouNaFila,
        saiuDaFila: saiuDaFila ?? this.saiuDaFila,
        estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
        posicao: posicao ?? this.posicao,
        prioridade: prioridade ?? this.prioridade,
        inicioPreparo: inicioPreparo ?? this.inicioPreparo,
        fimPreparo: fimPreparo ?? this.fimPreparo,
      );
  @override
  String toString() {
    return (StringBuffer('ComandaPedido(')
          ..write('id: $id, ')
          ..write('idComanda: $idComanda, ')
          ..write('idCozinha: $idCozinha, ')
          ..write('entrouNaFila: $entrouNaFila, ')
          ..write('saiuDaFila: $saiuDaFila, ')
          ..write('estimativaMinutos: $estimativaMinutos, ')
          ..write('posicao: $posicao, ')
          ..write('prioridade: $prioridade, ')
          ..write('inicioPreparo: $inicioPreparo, ')
          ..write('fimPreparo: $fimPreparo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idComanda,
      idCozinha,
      entrouNaFila,
      saiuDaFila,
      estimativaMinutos,
      posicao,
      prioridade,
      inicioPreparo,
      fimPreparo);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ComandaPedido &&
          other.id == this.id &&
          other.idComanda == this.idComanda &&
          other.idCozinha == this.idCozinha &&
          other.entrouNaFila == this.entrouNaFila &&
          other.saiuDaFila == this.saiuDaFila &&
          other.estimativaMinutos == this.estimativaMinutos &&
          other.posicao == this.posicao &&
          other.prioridade == this.prioridade &&
          other.inicioPreparo == this.inicioPreparo &&
          other.fimPreparo == this.fimPreparo);
}

class ComandaPedidosCompanion extends UpdateCompanion<ComandaPedido> {
  final Value<int?> id;
  final Value<int?> idComanda;
  final Value<int?> idCozinha;
  final Value<DateTime?> entrouNaFila;
  final Value<DateTime?> saiuDaFila;
  final Value<int?> estimativaMinutos;
  final Value<int?> posicao;
  final Value<String?> prioridade;
  final Value<DateTime?> inicioPreparo;
  final Value<DateTime?> fimPreparo;
  const ComandaPedidosCompanion({
    this.id = const Value.absent(),
    this.idComanda = const Value.absent(),
    this.idCozinha = const Value.absent(),
    this.entrouNaFila = const Value.absent(),
    this.saiuDaFila = const Value.absent(),
    this.estimativaMinutos = const Value.absent(),
    this.posicao = const Value.absent(),
    this.prioridade = const Value.absent(),
    this.inicioPreparo = const Value.absent(),
    this.fimPreparo = const Value.absent(),
  });
  ComandaPedidosCompanion.insert({
    this.id = const Value.absent(),
    this.idComanda = const Value.absent(),
    this.idCozinha = const Value.absent(),
    this.entrouNaFila = const Value.absent(),
    this.saiuDaFila = const Value.absent(),
    this.estimativaMinutos = const Value.absent(),
    this.posicao = const Value.absent(),
    this.prioridade = const Value.absent(),
    this.inicioPreparo = const Value.absent(),
    this.fimPreparo = const Value.absent(),
  });
  static Insertable<ComandaPedido> custom({
    Expression<int>? id,
    Expression<int>? idComanda,
    Expression<int>? idCozinha,
    Expression<DateTime>? entrouNaFila,
    Expression<DateTime>? saiuDaFila,
    Expression<int>? estimativaMinutos,
    Expression<int>? posicao,
    Expression<String>? prioridade,
    Expression<DateTime>? inicioPreparo,
    Expression<DateTime>? fimPreparo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idComanda != null) 'ID_COMANDA': idComanda,
      if (idCozinha != null) 'ID_COZINHA': idCozinha,
      if (entrouNaFila != null) 'ENTROU_NA_FILA': entrouNaFila,
      if (saiuDaFila != null) 'SAIU_DA_FILA': saiuDaFila,
      if (estimativaMinutos != null) 'ESTIMATIVA_MINUTOS': estimativaMinutos,
      if (posicao != null) 'POSICAO': posicao,
      if (prioridade != null) 'PRIORIDADE': prioridade,
      if (inicioPreparo != null) 'INICIO_PREPARO': inicioPreparo,
      if (fimPreparo != null) 'FIM_PREPARO': fimPreparo,
    });
  }

  ComandaPedidosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idComanda,
      Value<int?>? idCozinha,
      Value<DateTime?>? entrouNaFila,
      Value<DateTime?>? saiuDaFila,
      Value<int?>? estimativaMinutos,
      Value<int?>? posicao,
      Value<String?>? prioridade,
      Value<DateTime?>? inicioPreparo,
      Value<DateTime?>? fimPreparo}) {
    return ComandaPedidosCompanion(
      id: id ?? this.id,
      idComanda: idComanda ?? this.idComanda,
      idCozinha: idCozinha ?? this.idCozinha,
      entrouNaFila: entrouNaFila ?? this.entrouNaFila,
      saiuDaFila: saiuDaFila ?? this.saiuDaFila,
      estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
      posicao: posicao ?? this.posicao,
      prioridade: prioridade ?? this.prioridade,
      inicioPreparo: inicioPreparo ?? this.inicioPreparo,
      fimPreparo: fimPreparo ?? this.fimPreparo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idComanda.present) {
      map['ID_COMANDA'] = Variable<int>(idComanda.value);
    }
    if (idCozinha.present) {
      map['ID_COZINHA'] = Variable<int>(idCozinha.value);
    }
    if (entrouNaFila.present) {
      map['ENTROU_NA_FILA'] = Variable<DateTime>(entrouNaFila.value);
    }
    if (saiuDaFila.present) {
      map['SAIU_DA_FILA'] = Variable<DateTime>(saiuDaFila.value);
    }
    if (estimativaMinutos.present) {
      map['ESTIMATIVA_MINUTOS'] = Variable<int>(estimativaMinutos.value);
    }
    if (posicao.present) {
      map['POSICAO'] = Variable<int>(posicao.value);
    }
    if (prioridade.present) {
      map['PRIORIDADE'] = Variable<String>(prioridade.value);
    }
    if (inicioPreparo.present) {
      map['INICIO_PREPARO'] = Variable<DateTime>(inicioPreparo.value);
    }
    if (fimPreparo.present) {
      map['FIM_PREPARO'] = Variable<DateTime>(fimPreparo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ComandaPedidosCompanion(')
          ..write('id: $id, ')
          ..write('idComanda: $idComanda, ')
          ..write('idCozinha: $idCozinha, ')
          ..write('entrouNaFila: $entrouNaFila, ')
          ..write('saiuDaFila: $saiuDaFila, ')
          ..write('estimativaMinutos: $estimativaMinutos, ')
          ..write('posicao: $posicao, ')
          ..write('prioridade: $prioridade, ')
          ..write('inicioPreparo: $inicioPreparo, ')
          ..write('fimPreparo: $fimPreparo')
          ..write(')'))
        .toString();
  }
}

class $ComandaPedidosTable extends ComandaPedidos
    with TableInfo<$ComandaPedidosTable, ComandaPedido> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ComandaPedidosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idComandaMeta = const VerificationMeta('idComanda');
  @override
  late final GeneratedColumn<int> idComanda = GeneratedColumn<int>(
      'ID_COMANDA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COMANDA(ID)');
  final VerificationMeta _idCozinhaMeta = const VerificationMeta('idCozinha');
  @override
  late final GeneratedColumn<int> idCozinha = GeneratedColumn<int>(
      'ID_COZINHA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COZINHA(ID)');
  final VerificationMeta _entrouNaFilaMeta =
      const VerificationMeta('entrouNaFila');
  @override
  late final GeneratedColumn<DateTime> entrouNaFila =
      GeneratedColumn<DateTime>('ENTROU_NA_FILA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _saiuDaFilaMeta = const VerificationMeta('saiuDaFila');
  @override
  late final GeneratedColumn<DateTime> saiuDaFila = GeneratedColumn<DateTime>(
      'SAIU_DA_FILA', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _estimativaMinutosMeta =
      const VerificationMeta('estimativaMinutos');
  @override
  late final GeneratedColumn<int> estimativaMinutos = GeneratedColumn<int>(
      'ESTIMATIVA_MINUTOS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _posicaoMeta = const VerificationMeta('posicao');
  @override
  late final GeneratedColumn<int> posicao = GeneratedColumn<int>(
      'POSICAO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _prioridadeMeta = const VerificationMeta('prioridade');
  @override
  late final GeneratedColumn<String> prioridade = GeneratedColumn<String>(
      'PRIORIDADE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inicioPreparoMeta =
      const VerificationMeta('inicioPreparo');
  @override
  late final GeneratedColumn<DateTime> inicioPreparo =
      GeneratedColumn<DateTime>('INICIO_PREPARO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _fimPreparoMeta = const VerificationMeta('fimPreparo');
  @override
  late final GeneratedColumn<DateTime> fimPreparo = GeneratedColumn<DateTime>(
      'FIM_PREPARO', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idComanda,
        idCozinha,
        entrouNaFila,
        saiuDaFila,
        estimativaMinutos,
        posicao,
        prioridade,
        inicioPreparo,
        fimPreparo
      ];
  @override
  String get aliasedName => _alias ?? 'COMANDA_PEDIDO';
  @override
  String get actualTableName => 'COMANDA_PEDIDO';
  @override
  VerificationContext validateIntegrity(Insertable<ComandaPedido> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COMANDA')) {
      context.handle(_idComandaMeta,
          idComanda.isAcceptableOrUnknown(data['ID_COMANDA']!, _idComandaMeta));
    }
    if (data.containsKey('ID_COZINHA')) {
      context.handle(_idCozinhaMeta,
          idCozinha.isAcceptableOrUnknown(data['ID_COZINHA']!, _idCozinhaMeta));
    }
    if (data.containsKey('ENTROU_NA_FILA')) {
      context.handle(
          _entrouNaFilaMeta,
          entrouNaFila.isAcceptableOrUnknown(
              data['ENTROU_NA_FILA']!, _entrouNaFilaMeta));
    }
    if (data.containsKey('SAIU_DA_FILA')) {
      context.handle(
          _saiuDaFilaMeta,
          saiuDaFila.isAcceptableOrUnknown(
              data['SAIU_DA_FILA']!, _saiuDaFilaMeta));
    }
    if (data.containsKey('ESTIMATIVA_MINUTOS')) {
      context.handle(
          _estimativaMinutosMeta,
          estimativaMinutos.isAcceptableOrUnknown(
              data['ESTIMATIVA_MINUTOS']!, _estimativaMinutosMeta));
    }
    if (data.containsKey('POSICAO')) {
      context.handle(_posicaoMeta,
          posicao.isAcceptableOrUnknown(data['POSICAO']!, _posicaoMeta));
    }
    if (data.containsKey('PRIORIDADE')) {
      context.handle(
          _prioridadeMeta,
          prioridade.isAcceptableOrUnknown(
              data['PRIORIDADE']!, _prioridadeMeta));
    }
    if (data.containsKey('INICIO_PREPARO')) {
      context.handle(
          _inicioPreparoMeta,
          inicioPreparo.isAcceptableOrUnknown(
              data['INICIO_PREPARO']!, _inicioPreparoMeta));
    }
    if (data.containsKey('FIM_PREPARO')) {
      context.handle(
          _fimPreparoMeta,
          fimPreparo.isAcceptableOrUnknown(
              data['FIM_PREPARO']!, _fimPreparoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ComandaPedido map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ComandaPedido.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ComandaPedidosTable createAlias(String alias) {
    return $ComandaPedidosTable(attachedDatabase, alias);
  }
}

class CompraPedidoCabecalho extends DataClass
    implements Insertable<CompraPedidoCabecalho> {
  final int? id;
  final int? idColaborador;
  final int? idFornecedor;
  final DateTime? dataPedido;
  final DateTime? dataPrevisaoEntrega;
  final DateTime? dataPrevisaoPagamento;
  final String? localEntrega;
  final String? localCobranca;
  final String? contato;
  final double? valorSubtotal;
  final double? taxaDesconto;
  final double? valorDesconto;
  final double? valorTotal;
  final String? formaPagamento;
  final String? geraFinanceiro;
  final int? quantidadeParcelas;
  final DateTime? diaPrimeiroVencimento;
  final int? intervaloEntreParcelas;
  final String? diaFixoParcela;
  final DateTime? dataRecebimentoItens;
  final String? horaRecebimentoItens;
  final String? atualizouEstoque;
  final String? numeroDocumentoEntrada;
  CompraPedidoCabecalho(
      {this.id,
      this.idColaborador,
      this.idFornecedor,
      this.dataPedido,
      this.dataPrevisaoEntrega,
      this.dataPrevisaoPagamento,
      this.localEntrega,
      this.localCobranca,
      this.contato,
      this.valorSubtotal,
      this.taxaDesconto,
      this.valorDesconto,
      this.valorTotal,
      this.formaPagamento,
      this.geraFinanceiro,
      this.quantidadeParcelas,
      this.diaPrimeiroVencimento,
      this.intervaloEntreParcelas,
      this.diaFixoParcela,
      this.dataRecebimentoItens,
      this.horaRecebimentoItens,
      this.atualizouEstoque,
      this.numeroDocumentoEntrada});
  factory CompraPedidoCabecalho.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CompraPedidoCabecalho(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idColaborador: ValueSqlType.intType(data['${effectivePrefix}ID_COLABORADOR']),
      idFornecedor: ValueSqlType.intType(data['${effectivePrefix}ID_FORNECEDOR']),
      dataPedido: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_PEDIDO']),
      dataPrevisaoEntrega: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_PREVISAO_ENTREGA']),
      dataPrevisaoPagamento: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_PREVISAO_PAGAMENTO']),
      localEntrega: ValueSqlType.stringType(data['${effectivePrefix}LOCAL_ENTREGA']),
      localCobranca: ValueSqlType.stringType(data['${effectivePrefix}LOCAL_COBRANCA']),
      contato: ValueSqlType.stringType(data['${effectivePrefix}CONTATO']),
      valorSubtotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_SUBTOTAL']),
      taxaDesconto: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_DESCONTO']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      valorTotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL']),
      formaPagamento: ValueSqlType.stringType(data['${effectivePrefix}FORMA_PAGAMENTO']),
      geraFinanceiro: ValueSqlType.stringType(data['${effectivePrefix}GERA_FINANCEIRO']),
      quantidadeParcelas: ValueSqlType.intType(
          data['${effectivePrefix}QUANTIDADE_PARCELAS']),
      diaPrimeiroVencimento: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DIA_PRIMEIRO_VENCIMENTO']),
      intervaloEntreParcelas: ValueSqlType.intType(
          data['${effectivePrefix}INTERVALO_ENTRE_PARCELAS']),
      diaFixoParcela: ValueSqlType.stringType(data['${effectivePrefix}DIA_FIXO_PARCELA']),
      dataRecebimentoItens: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_RECEBIMENTO_ITENS']),
      horaRecebimentoItens: ValueSqlType.stringType(
          data['${effectivePrefix}HORA_RECEBIMENTO_ITENS']),
      atualizouEstoque: ValueSqlType.stringType(data['${effectivePrefix}ATUALIZOU_ESTOQUE']),
      numeroDocumentoEntrada: ValueSqlType.stringType(
          data['${effectivePrefix}NUMERO_DOCUMENTO_ENTRADA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || idFornecedor != null) {
      map['ID_FORNECEDOR'] = Variable<int>(idFornecedor);
    }
    if (!nullToAbsent || dataPedido != null) {
      map['DATA_PEDIDO'] = Variable<DateTime>(dataPedido);
    }
    if (!nullToAbsent || dataPrevisaoEntrega != null) {
      map['DATA_PREVISAO_ENTREGA'] = Variable<DateTime>(dataPrevisaoEntrega);
    }
    if (!nullToAbsent || dataPrevisaoPagamento != null) {
      map['DATA_PREVISAO_PAGAMENTO'] =
          Variable<DateTime>(dataPrevisaoPagamento);
    }
    if (!nullToAbsent || localEntrega != null) {
      map['LOCAL_ENTREGA'] = Variable<String>(localEntrega);
    }
    if (!nullToAbsent || localCobranca != null) {
      map['LOCAL_COBRANCA'] = Variable<String>(localCobranca);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || valorSubtotal != null) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || formaPagamento != null) {
      map['FORMA_PAGAMENTO'] = Variable<String>(formaPagamento);
    }
    if (!nullToAbsent || geraFinanceiro != null) {
      map['GERA_FINANCEIRO'] = Variable<String>(geraFinanceiro);
    }
    if (!nullToAbsent || quantidadeParcelas != null) {
      map['QUANTIDADE_PARCELAS'] = Variable<int>(quantidadeParcelas);
    }
    if (!nullToAbsent || diaPrimeiroVencimento != null) {
      map['DIA_PRIMEIRO_VENCIMENTO'] =
          Variable<DateTime>(diaPrimeiroVencimento);
    }
    if (!nullToAbsent || intervaloEntreParcelas != null) {
      map['INTERVALO_ENTRE_PARCELAS'] = Variable<int>(intervaloEntreParcelas);
    }
    if (!nullToAbsent || diaFixoParcela != null) {
      map['DIA_FIXO_PARCELA'] = Variable<String>(diaFixoParcela);
    }
    if (!nullToAbsent || dataRecebimentoItens != null) {
      map['DATA_RECEBIMENTO_ITENS'] = Variable<DateTime>(dataRecebimentoItens);
    }
    if (!nullToAbsent || horaRecebimentoItens != null) {
      map['HORA_RECEBIMENTO_ITENS'] = Variable<String>(horaRecebimentoItens);
    }
    if (!nullToAbsent || atualizouEstoque != null) {
      map['ATUALIZOU_ESTOQUE'] = Variable<String>(atualizouEstoque);
    }
    if (!nullToAbsent || numeroDocumentoEntrada != null) {
      map['NUMERO_DOCUMENTO_ENTRADA'] =
          Variable<String>(numeroDocumentoEntrada);
    }
    return map;
  }

  CompraPedidoCabecalhosCompanion toCompanion(bool nullToAbsent) {
    return CompraPedidoCabecalhosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      idFornecedor: idFornecedor == null && nullToAbsent
          ? const Value.absent()
          : Value(idFornecedor),
      dataPedido: dataPedido == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPedido),
      dataPrevisaoEntrega: dataPrevisaoEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPrevisaoEntrega),
      dataPrevisaoPagamento: dataPrevisaoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPrevisaoPagamento),
      localEntrega: localEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(localEntrega),
      localCobranca: localCobranca == null && nullToAbsent
          ? const Value.absent()
          : Value(localCobranca),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      valorSubtotal: valorSubtotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSubtotal),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      formaPagamento: formaPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(formaPagamento),
      geraFinanceiro: geraFinanceiro == null && nullToAbsent
          ? const Value.absent()
          : Value(geraFinanceiro),
      quantidadeParcelas: quantidadeParcelas == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeParcelas),
      diaPrimeiroVencimento: diaPrimeiroVencimento == null && nullToAbsent
          ? const Value.absent()
          : Value(diaPrimeiroVencimento),
      intervaloEntreParcelas: intervaloEntreParcelas == null && nullToAbsent
          ? const Value.absent()
          : Value(intervaloEntreParcelas),
      diaFixoParcela: diaFixoParcela == null && nullToAbsent
          ? const Value.absent()
          : Value(diaFixoParcela),
      dataRecebimentoItens: dataRecebimentoItens == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRecebimentoItens),
      horaRecebimentoItens: horaRecebimentoItens == null && nullToAbsent
          ? const Value.absent()
          : Value(horaRecebimentoItens),
      atualizouEstoque: atualizouEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(atualizouEstoque),
      numeroDocumentoEntrada: numeroDocumentoEntrada == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroDocumentoEntrada),
    );
  }

  factory CompraPedidoCabecalho.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CompraPedidoCabecalho(
      id: serializer.fromJson<int?>(json['id']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      idFornecedor: serializer.fromJson<int?>(json['idFornecedor']),
      dataPedido: serializer.fromJson<DateTime?>(json['dataPedido']),
      dataPrevisaoEntrega:
          serializer.fromJson<DateTime?>(json['dataPrevisaoEntrega']),
      dataPrevisaoPagamento:
          serializer.fromJson<DateTime?>(json['dataPrevisaoPagamento']),
      localEntrega: serializer.fromJson<String?>(json['localEntrega']),
      localCobranca: serializer.fromJson<String?>(json['localCobranca']),
      contato: serializer.fromJson<String?>(json['contato']),
      valorSubtotal: serializer.fromJson<double?>(json['valorSubtotal']),
      taxaDesconto: serializer.fromJson<double?>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      formaPagamento: serializer.fromJson<String?>(json['formaPagamento']),
      geraFinanceiro: serializer.fromJson<String?>(json['geraFinanceiro']),
      quantidadeParcelas: serializer.fromJson<int?>(json['quantidadeParcelas']),
      diaPrimeiroVencimento:
          serializer.fromJson<DateTime?>(json['diaPrimeiroVencimento']),
      intervaloEntreParcelas:
          serializer.fromJson<int?>(json['intervaloEntreParcelas']),
      diaFixoParcela: serializer.fromJson<String?>(json['diaFixoParcela']),
      dataRecebimentoItens:
          serializer.fromJson<DateTime?>(json['dataRecebimentoItens']),
      horaRecebimentoItens:
          serializer.fromJson<String?>(json['horaRecebimentoItens']),
      atualizouEstoque: serializer.fromJson<String?>(json['atualizouEstoque']),
      numeroDocumentoEntrada:
          serializer.fromJson<String?>(json['numeroDocumentoEntrada']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'idFornecedor': serializer.toJson<int?>(idFornecedor),
      'dataPedido': serializer.toJson<DateTime?>(dataPedido),
      'dataPrevisaoEntrega': serializer.toJson<DateTime?>(dataPrevisaoEntrega),
      'dataPrevisaoPagamento':
          serializer.toJson<DateTime?>(dataPrevisaoPagamento),
      'localEntrega': serializer.toJson<String?>(localEntrega),
      'localCobranca': serializer.toJson<String?>(localCobranca),
      'contato': serializer.toJson<String?>(contato),
      'valorSubtotal': serializer.toJson<double?>(valorSubtotal),
      'taxaDesconto': serializer.toJson<double?>(taxaDesconto),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'formaPagamento': serializer.toJson<String?>(formaPagamento),
      'geraFinanceiro': serializer.toJson<String?>(geraFinanceiro),
      'quantidadeParcelas': serializer.toJson<int?>(quantidadeParcelas),
      'diaPrimeiroVencimento':
          serializer.toJson<DateTime?>(diaPrimeiroVencimento),
      'intervaloEntreParcelas': serializer.toJson<int?>(intervaloEntreParcelas),
      'diaFixoParcela': serializer.toJson<String?>(diaFixoParcela),
      'dataRecebimentoItens':
          serializer.toJson<DateTime?>(dataRecebimentoItens),
      'horaRecebimentoItens': serializer.toJson<String?>(horaRecebimentoItens),
      'atualizouEstoque': serializer.toJson<String?>(atualizouEstoque),
      'numeroDocumentoEntrada':
          serializer.toJson<String?>(numeroDocumentoEntrada),
    };
  }

  CompraPedidoCabecalho copyWith(
          {int? id,
          int? idColaborador,
          int? idFornecedor,
          DateTime? dataPedido,
          DateTime? dataPrevisaoEntrega,
          DateTime? dataPrevisaoPagamento,
          String? localEntrega,
          String? localCobranca,
          String? contato,
          double? valorSubtotal,
          double? taxaDesconto,
          double? valorDesconto,
          double? valorTotal,
          String? formaPagamento,
          String? geraFinanceiro,
          int? quantidadeParcelas,
          DateTime? diaPrimeiroVencimento,
          int? intervaloEntreParcelas,
          String? diaFixoParcela,
          DateTime? dataRecebimentoItens,
          String? horaRecebimentoItens,
          String? atualizouEstoque,
          String? numeroDocumentoEntrada}) =>
      CompraPedidoCabecalho(
        id: id ?? this.id,
        idColaborador: idColaborador ?? this.idColaborador,
        idFornecedor: idFornecedor ?? this.idFornecedor,
        dataPedido: dataPedido ?? this.dataPedido,
        dataPrevisaoEntrega: dataPrevisaoEntrega ?? this.dataPrevisaoEntrega,
        dataPrevisaoPagamento:
            dataPrevisaoPagamento ?? this.dataPrevisaoPagamento,
        localEntrega: localEntrega ?? this.localEntrega,
        localCobranca: localCobranca ?? this.localCobranca,
        contato: contato ?? this.contato,
        valorSubtotal: valorSubtotal ?? this.valorSubtotal,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorTotal: valorTotal ?? this.valorTotal,
        formaPagamento: formaPagamento ?? this.formaPagamento,
        geraFinanceiro: geraFinanceiro ?? this.geraFinanceiro,
        quantidadeParcelas: quantidadeParcelas ?? this.quantidadeParcelas,
        diaPrimeiroVencimento:
            diaPrimeiroVencimento ?? this.diaPrimeiroVencimento,
        intervaloEntreParcelas:
            intervaloEntreParcelas ?? this.intervaloEntreParcelas,
        diaFixoParcela: diaFixoParcela ?? this.diaFixoParcela,
        dataRecebimentoItens: dataRecebimentoItens ?? this.dataRecebimentoItens,
        horaRecebimentoItens: horaRecebimentoItens ?? this.horaRecebimentoItens,
        atualizouEstoque: atualizouEstoque ?? this.atualizouEstoque,
        numeroDocumentoEntrada:
            numeroDocumentoEntrada ?? this.numeroDocumentoEntrada,
      );
  @override
  String toString() {
    return (StringBuffer('CompraPedidoCabecalho(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('dataPedido: $dataPedido, ')
          ..write('dataPrevisaoEntrega: $dataPrevisaoEntrega, ')
          ..write('dataPrevisaoPagamento: $dataPrevisaoPagamento, ')
          ..write('localEntrega: $localEntrega, ')
          ..write('localCobranca: $localCobranca, ')
          ..write('contato: $contato, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('formaPagamento: $formaPagamento, ')
          ..write('geraFinanceiro: $geraFinanceiro, ')
          ..write('quantidadeParcelas: $quantidadeParcelas, ')
          ..write('diaPrimeiroVencimento: $diaPrimeiroVencimento, ')
          ..write('intervaloEntreParcelas: $intervaloEntreParcelas, ')
          ..write('diaFixoParcela: $diaFixoParcela, ')
          ..write('dataRecebimentoItens: $dataRecebimentoItens, ')
          ..write('horaRecebimentoItens: $horaRecebimentoItens, ')
          ..write('atualizouEstoque: $atualizouEstoque, ')
          ..write('numeroDocumentoEntrada: $numeroDocumentoEntrada')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idColaborador,
        idFornecedor,
        dataPedido,
        dataPrevisaoEntrega,
        dataPrevisaoPagamento,
        localEntrega,
        localCobranca,
        contato,
        valorSubtotal,
        taxaDesconto,
        valorDesconto,
        valorTotal,
        formaPagamento,
        geraFinanceiro,
        quantidadeParcelas,
        diaPrimeiroVencimento,
        intervaloEntreParcelas,
        diaFixoParcela,
        dataRecebimentoItens,
        horaRecebimentoItens,
        atualizouEstoque,
        numeroDocumentoEntrada
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CompraPedidoCabecalho &&
          other.id == this.id &&
          other.idColaborador == this.idColaborador &&
          other.idFornecedor == this.idFornecedor &&
          other.dataPedido == this.dataPedido &&
          other.dataPrevisaoEntrega == this.dataPrevisaoEntrega &&
          other.dataPrevisaoPagamento == this.dataPrevisaoPagamento &&
          other.localEntrega == this.localEntrega &&
          other.localCobranca == this.localCobranca &&
          other.contato == this.contato &&
          other.valorSubtotal == this.valorSubtotal &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.valorTotal == this.valorTotal &&
          other.formaPagamento == this.formaPagamento &&
          other.geraFinanceiro == this.geraFinanceiro &&
          other.quantidadeParcelas == this.quantidadeParcelas &&
          other.diaPrimeiroVencimento == this.diaPrimeiroVencimento &&
          other.intervaloEntreParcelas == this.intervaloEntreParcelas &&
          other.diaFixoParcela == this.diaFixoParcela &&
          other.dataRecebimentoItens == this.dataRecebimentoItens &&
          other.horaRecebimentoItens == this.horaRecebimentoItens &&
          other.atualizouEstoque == this.atualizouEstoque &&
          other.numeroDocumentoEntrada == this.numeroDocumentoEntrada);
}

class CompraPedidoCabecalhosCompanion
    extends UpdateCompanion<CompraPedidoCabecalho> {
  final Value<int?> id;
  final Value<int?> idColaborador;
  final Value<int?> idFornecedor;
  final Value<DateTime?> dataPedido;
  final Value<DateTime?> dataPrevisaoEntrega;
  final Value<DateTime?> dataPrevisaoPagamento;
  final Value<String?> localEntrega;
  final Value<String?> localCobranca;
  final Value<String?> contato;
  final Value<double?> valorSubtotal;
  final Value<double?> taxaDesconto;
  final Value<double?> valorDesconto;
  final Value<double?> valorTotal;
  final Value<String?> formaPagamento;
  final Value<String?> geraFinanceiro;
  final Value<int?> quantidadeParcelas;
  final Value<DateTime?> diaPrimeiroVencimento;
  final Value<int?> intervaloEntreParcelas;
  final Value<String?> diaFixoParcela;
  final Value<DateTime?> dataRecebimentoItens;
  final Value<String?> horaRecebimentoItens;
  final Value<String?> atualizouEstoque;
  final Value<String?> numeroDocumentoEntrada;
  const CompraPedidoCabecalhosCompanion({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.dataPedido = const Value.absent(),
    this.dataPrevisaoEntrega = const Value.absent(),
    this.dataPrevisaoPagamento = const Value.absent(),
    this.localEntrega = const Value.absent(),
    this.localCobranca = const Value.absent(),
    this.contato = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.formaPagamento = const Value.absent(),
    this.geraFinanceiro = const Value.absent(),
    this.quantidadeParcelas = const Value.absent(),
    this.diaPrimeiroVencimento = const Value.absent(),
    this.intervaloEntreParcelas = const Value.absent(),
    this.diaFixoParcela = const Value.absent(),
    this.dataRecebimentoItens = const Value.absent(),
    this.horaRecebimentoItens = const Value.absent(),
    this.atualizouEstoque = const Value.absent(),
    this.numeroDocumentoEntrada = const Value.absent(),
  });
  CompraPedidoCabecalhosCompanion.insert({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.dataPedido = const Value.absent(),
    this.dataPrevisaoEntrega = const Value.absent(),
    this.dataPrevisaoPagamento = const Value.absent(),
    this.localEntrega = const Value.absent(),
    this.localCobranca = const Value.absent(),
    this.contato = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.formaPagamento = const Value.absent(),
    this.geraFinanceiro = const Value.absent(),
    this.quantidadeParcelas = const Value.absent(),
    this.diaPrimeiroVencimento = const Value.absent(),
    this.intervaloEntreParcelas = const Value.absent(),
    this.diaFixoParcela = const Value.absent(),
    this.dataRecebimentoItens = const Value.absent(),
    this.horaRecebimentoItens = const Value.absent(),
    this.atualizouEstoque = const Value.absent(),
    this.numeroDocumentoEntrada = const Value.absent(),
  });
  static Insertable<CompraPedidoCabecalho> custom({
    Expression<int>? id,
    Expression<int>? idColaborador,
    Expression<int>? idFornecedor,
    Expression<DateTime>? dataPedido,
    Expression<DateTime>? dataPrevisaoEntrega,
    Expression<DateTime>? dataPrevisaoPagamento,
    Expression<String>? localEntrega,
    Expression<String>? localCobranca,
    Expression<String>? contato,
    Expression<double>? valorSubtotal,
    Expression<double>? taxaDesconto,
    Expression<double>? valorDesconto,
    Expression<double>? valorTotal,
    Expression<String>? formaPagamento,
    Expression<String>? geraFinanceiro,
    Expression<int>? quantidadeParcelas,
    Expression<DateTime>? diaPrimeiroVencimento,
    Expression<int>? intervaloEntreParcelas,
    Expression<String>? diaFixoParcela,
    Expression<DateTime>? dataRecebimentoItens,
    Expression<String>? horaRecebimentoItens,
    Expression<String>? atualizouEstoque,
    Expression<String>? numeroDocumentoEntrada,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (idFornecedor != null) 'ID_FORNECEDOR': idFornecedor,
      if (dataPedido != null) 'DATA_PEDIDO': dataPedido,
      if (dataPrevisaoEntrega != null)
        'DATA_PREVISAO_ENTREGA': dataPrevisaoEntrega,
      if (dataPrevisaoPagamento != null)
        'DATA_PREVISAO_PAGAMENTO': dataPrevisaoPagamento,
      if (localEntrega != null) 'LOCAL_ENTREGA': localEntrega,
      if (localCobranca != null) 'LOCAL_COBRANCA': localCobranca,
      if (contato != null) 'CONTATO': contato,
      if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (formaPagamento != null) 'FORMA_PAGAMENTO': formaPagamento,
      if (geraFinanceiro != null) 'GERA_FINANCEIRO': geraFinanceiro,
      if (quantidadeParcelas != null) 'QUANTIDADE_PARCELAS': quantidadeParcelas,
      if (diaPrimeiroVencimento != null)
        'DIA_PRIMEIRO_VENCIMENTO': diaPrimeiroVencimento,
      if (intervaloEntreParcelas != null)
        'INTERVALO_ENTRE_PARCELAS': intervaloEntreParcelas,
      if (diaFixoParcela != null) 'DIA_FIXO_PARCELA': diaFixoParcela,
      if (dataRecebimentoItens != null)
        'DATA_RECEBIMENTO_ITENS': dataRecebimentoItens,
      if (horaRecebimentoItens != null)
        'HORA_RECEBIMENTO_ITENS': horaRecebimentoItens,
      if (atualizouEstoque != null) 'ATUALIZOU_ESTOQUE': atualizouEstoque,
      if (numeroDocumentoEntrada != null)
        'NUMERO_DOCUMENTO_ENTRADA': numeroDocumentoEntrada,
    });
  }

  CompraPedidoCabecalhosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idColaborador,
      Value<int?>? idFornecedor,
      Value<DateTime?>? dataPedido,
      Value<DateTime?>? dataPrevisaoEntrega,
      Value<DateTime?>? dataPrevisaoPagamento,
      Value<String?>? localEntrega,
      Value<String?>? localCobranca,
      Value<String?>? contato,
      Value<double?>? valorSubtotal,
      Value<double?>? taxaDesconto,
      Value<double?>? valorDesconto,
      Value<double?>? valorTotal,
      Value<String?>? formaPagamento,
      Value<String?>? geraFinanceiro,
      Value<int?>? quantidadeParcelas,
      Value<DateTime?>? diaPrimeiroVencimento,
      Value<int?>? intervaloEntreParcelas,
      Value<String?>? diaFixoParcela,
      Value<DateTime?>? dataRecebimentoItens,
      Value<String?>? horaRecebimentoItens,
      Value<String?>? atualizouEstoque,
      Value<String?>? numeroDocumentoEntrada}) {
    return CompraPedidoCabecalhosCompanion(
      id: id ?? this.id,
      idColaborador: idColaborador ?? this.idColaborador,
      idFornecedor: idFornecedor ?? this.idFornecedor,
      dataPedido: dataPedido ?? this.dataPedido,
      dataPrevisaoEntrega: dataPrevisaoEntrega ?? this.dataPrevisaoEntrega,
      dataPrevisaoPagamento:
          dataPrevisaoPagamento ?? this.dataPrevisaoPagamento,
      localEntrega: localEntrega ?? this.localEntrega,
      localCobranca: localCobranca ?? this.localCobranca,
      contato: contato ?? this.contato,
      valorSubtotal: valorSubtotal ?? this.valorSubtotal,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorTotal: valorTotal ?? this.valorTotal,
      formaPagamento: formaPagamento ?? this.formaPagamento,
      geraFinanceiro: geraFinanceiro ?? this.geraFinanceiro,
      quantidadeParcelas: quantidadeParcelas ?? this.quantidadeParcelas,
      diaPrimeiroVencimento:
          diaPrimeiroVencimento ?? this.diaPrimeiroVencimento,
      intervaloEntreParcelas:
          intervaloEntreParcelas ?? this.intervaloEntreParcelas,
      diaFixoParcela: diaFixoParcela ?? this.diaFixoParcela,
      dataRecebimentoItens: dataRecebimentoItens ?? this.dataRecebimentoItens,
      horaRecebimentoItens: horaRecebimentoItens ?? this.horaRecebimentoItens,
      atualizouEstoque: atualizouEstoque ?? this.atualizouEstoque,
      numeroDocumentoEntrada:
          numeroDocumentoEntrada ?? this.numeroDocumentoEntrada,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (idFornecedor.present) {
      map['ID_FORNECEDOR'] = Variable<int>(idFornecedor.value);
    }
    if (dataPedido.present) {
      map['DATA_PEDIDO'] = Variable<DateTime>(dataPedido.value);
    }
    if (dataPrevisaoEntrega.present) {
      map['DATA_PREVISAO_ENTREGA'] =
          Variable<DateTime>(dataPrevisaoEntrega.value);
    }
    if (dataPrevisaoPagamento.present) {
      map['DATA_PREVISAO_PAGAMENTO'] =
          Variable<DateTime>(dataPrevisaoPagamento.value);
    }
    if (localEntrega.present) {
      map['LOCAL_ENTREGA'] = Variable<String>(localEntrega.value);
    }
    if (localCobranca.present) {
      map['LOCAL_COBRANCA'] = Variable<String>(localCobranca.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (valorSubtotal.present) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (formaPagamento.present) {
      map['FORMA_PAGAMENTO'] = Variable<String>(formaPagamento.value);
    }
    if (geraFinanceiro.present) {
      map['GERA_FINANCEIRO'] = Variable<String>(geraFinanceiro.value);
    }
    if (quantidadeParcelas.present) {
      map['QUANTIDADE_PARCELAS'] = Variable<int>(quantidadeParcelas.value);
    }
    if (diaPrimeiroVencimento.present) {
      map['DIA_PRIMEIRO_VENCIMENTO'] =
          Variable<DateTime>(diaPrimeiroVencimento.value);
    }
    if (intervaloEntreParcelas.present) {
      map['INTERVALO_ENTRE_PARCELAS'] =
          Variable<int>(intervaloEntreParcelas.value);
    }
    if (diaFixoParcela.present) {
      map['DIA_FIXO_PARCELA'] = Variable<String>(diaFixoParcela.value);
    }
    if (dataRecebimentoItens.present) {
      map['DATA_RECEBIMENTO_ITENS'] =
          Variable<DateTime>(dataRecebimentoItens.value);
    }
    if (horaRecebimentoItens.present) {
      map['HORA_RECEBIMENTO_ITENS'] =
          Variable<String>(horaRecebimentoItens.value);
    }
    if (atualizouEstoque.present) {
      map['ATUALIZOU_ESTOQUE'] = Variable<String>(atualizouEstoque.value);
    }
    if (numeroDocumentoEntrada.present) {
      map['NUMERO_DOCUMENTO_ENTRADA'] =
          Variable<String>(numeroDocumentoEntrada.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CompraPedidoCabecalhosCompanion(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('dataPedido: $dataPedido, ')
          ..write('dataPrevisaoEntrega: $dataPrevisaoEntrega, ')
          ..write('dataPrevisaoPagamento: $dataPrevisaoPagamento, ')
          ..write('localEntrega: $localEntrega, ')
          ..write('localCobranca: $localCobranca, ')
          ..write('contato: $contato, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('formaPagamento: $formaPagamento, ')
          ..write('geraFinanceiro: $geraFinanceiro, ')
          ..write('quantidadeParcelas: $quantidadeParcelas, ')
          ..write('diaPrimeiroVencimento: $diaPrimeiroVencimento, ')
          ..write('intervaloEntreParcelas: $intervaloEntreParcelas, ')
          ..write('diaFixoParcela: $diaFixoParcela, ')
          ..write('dataRecebimentoItens: $dataRecebimentoItens, ')
          ..write('horaRecebimentoItens: $horaRecebimentoItens, ')
          ..write('atualizouEstoque: $atualizouEstoque, ')
          ..write('numeroDocumentoEntrada: $numeroDocumentoEntrada')
          ..write(')'))
        .toString();
  }
}

class $CompraPedidoCabecalhosTable extends CompraPedidoCabecalhos
    with TableInfo<$CompraPedidoCabecalhosTable, CompraPedidoCabecalho> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $CompraPedidoCabecalhosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
      'ID_COLABORADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  final VerificationMeta _idFornecedorMeta =
      const VerificationMeta('idFornecedor');
  @override
  late final GeneratedColumn<int> idFornecedor = GeneratedColumn<int>(
      'ID_FORNECEDOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES FORNECEDOR(ID)');
  final VerificationMeta _dataPedidoMeta = const VerificationMeta('dataPedido');
  @override
  late final GeneratedColumn<DateTime> dataPedido = GeneratedColumn<DateTime>(
      'DATA_PEDIDO', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataPrevisaoEntregaMeta =
      const VerificationMeta('dataPrevisaoEntrega');
  @override
  late final GeneratedColumn<DateTime> dataPrevisaoEntrega =
      GeneratedColumn<DateTime>('DATA_PREVISAO_ENTREGA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataPrevisaoPagamentoMeta =
      const VerificationMeta('dataPrevisaoPagamento');
  @override
  late final GeneratedColumn<DateTime> dataPrevisaoPagamento =
      GeneratedColumn<DateTime>('DATA_PREVISAO_PAGAMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _localEntregaMeta =
      const VerificationMeta('localEntrega');
  @override
  late final GeneratedColumn<String> localEntrega = GeneratedColumn<String>(
      'LOCAL_ENTREGA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _localCobrancaMeta =
      const VerificationMeta('localCobranca');
  @override
  late final GeneratedColumn<String> localCobranca = GeneratedColumn<String>(
      'LOCAL_COBRANCA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  @override
  late final GeneratedColumn<String> contato = GeneratedColumn<String>(
      'CONTATO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorSubtotalMeta =
      const VerificationMeta('valorSubtotal');
  @override
  late final GeneratedColumn<double> valorSubtotal = GeneratedColumn<double>(
      'VALOR_SUBTOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  @override
  late final GeneratedColumn<double> taxaDesconto = GeneratedColumn<double>(
      'TAXA_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
      'VALOR_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _formaPagamentoMeta =
      const VerificationMeta('formaPagamento');
  @override
  late final GeneratedColumn<String> formaPagamento = GeneratedColumn<String>(
      'FORMA_PAGAMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _geraFinanceiroMeta =
      const VerificationMeta('geraFinanceiro');
  @override
  late final GeneratedColumn<String> geraFinanceiro = GeneratedColumn<String>(
      'GERA_FINANCEIRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadeParcelasMeta =
      const VerificationMeta('quantidadeParcelas');
  @override
  late final GeneratedColumn<int> quantidadeParcelas = GeneratedColumn<int>(
      'QUANTIDADE_PARCELAS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _diaPrimeiroVencimentoMeta =
      const VerificationMeta('diaPrimeiroVencimento');
  @override
  late final GeneratedColumn<DateTime> diaPrimeiroVencimento =
      GeneratedColumn<DateTime>('DIA_PRIMEIRO_VENCIMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _intervaloEntreParcelasMeta =
      const VerificationMeta('intervaloEntreParcelas');
  @override
  late final GeneratedColumn<int> intervaloEntreParcelas =
      GeneratedColumn<int>('INTERVALO_ENTRE_PARCELAS', aliasedName, true,
          type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _diaFixoParcelaMeta =
      const VerificationMeta('diaFixoParcela');
  @override
  late final GeneratedColumn<String> diaFixoParcela = GeneratedColumn<String>(
      'DIA_FIXO_PARCELA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataRecebimentoItensMeta =
      const VerificationMeta('dataRecebimentoItens');
  @override
  late final GeneratedColumn<DateTime> dataRecebimentoItens =
      GeneratedColumn<DateTime>('DATA_RECEBIMENTO_ITENS', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaRecebimentoItensMeta =
      const VerificationMeta('horaRecebimentoItens');
  @override
  late final GeneratedColumn<String> horaRecebimentoItens =
      GeneratedColumn<String>('HORA_RECEBIMENTO_ITENS', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 8),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _atualizouEstoqueMeta =
      const VerificationMeta('atualizouEstoque');
  @override
  late final GeneratedColumn<String> atualizouEstoque =
      GeneratedColumn<String>('ATUALIZOU_ESTOQUE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _numeroDocumentoEntradaMeta =
      const VerificationMeta('numeroDocumentoEntrada');
  @override
  late final GeneratedColumn<String> numeroDocumentoEntrada =
      GeneratedColumn<String>('NUMERO_DOCUMENTO_ENTRADA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 50),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idColaborador,
        idFornecedor,
        dataPedido,
        dataPrevisaoEntrega,
        dataPrevisaoPagamento,
        localEntrega,
        localCobranca,
        contato,
        valorSubtotal,
        taxaDesconto,
        valorDesconto,
        valorTotal,
        formaPagamento,
        geraFinanceiro,
        quantidadeParcelas,
        diaPrimeiroVencimento,
        intervaloEntreParcelas,
        diaFixoParcela,
        dataRecebimentoItens,
        horaRecebimentoItens,
        atualizouEstoque,
        numeroDocumentoEntrada
      ];
  @override
  String get aliasedName => _alias ?? 'COMPRA_PEDIDO_CABECALHO';
  @override
  String get actualTableName => 'COMPRA_PEDIDO_CABECALHO';
  @override
  VerificationContext validateIntegrity(
      Insertable<CompraPedidoCabecalho> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR']!, _idColaboradorMeta));
    }
    if (data.containsKey('ID_FORNECEDOR')) {
      context.handle(
          _idFornecedorMeta,
          idFornecedor.isAcceptableOrUnknown(
              data['ID_FORNECEDOR']!, _idFornecedorMeta));
    }
    if (data.containsKey('DATA_PEDIDO')) {
      context.handle(
          _dataPedidoMeta,
          dataPedido.isAcceptableOrUnknown(
              data['DATA_PEDIDO']!, _dataPedidoMeta));
    }
    if (data.containsKey('DATA_PREVISAO_ENTREGA')) {
      context.handle(
          _dataPrevisaoEntregaMeta,
          dataPrevisaoEntrega.isAcceptableOrUnknown(
              data['DATA_PREVISAO_ENTREGA']!, _dataPrevisaoEntregaMeta));
    }
    if (data.containsKey('DATA_PREVISAO_PAGAMENTO')) {
      context.handle(
          _dataPrevisaoPagamentoMeta,
          dataPrevisaoPagamento.isAcceptableOrUnknown(
              data['DATA_PREVISAO_PAGAMENTO']!, _dataPrevisaoPagamentoMeta));
    }
    if (data.containsKey('LOCAL_ENTREGA')) {
      context.handle(
          _localEntregaMeta,
          localEntrega.isAcceptableOrUnknown(
              data['LOCAL_ENTREGA']!, _localEntregaMeta));
    }
    if (data.containsKey('LOCAL_COBRANCA')) {
      context.handle(
          _localCobrancaMeta,
          localCobranca.isAcceptableOrUnknown(
              data['LOCAL_COBRANCA']!, _localCobrancaMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
    }
    if (data.containsKey('VALOR_SUBTOTAL')) {
      context.handle(
          _valorSubtotalMeta,
          valorSubtotal.isAcceptableOrUnknown(
              data['VALOR_SUBTOTAL']!, _valorSubtotalMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO']!, _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL']!, _valorTotalMeta));
    }
    if (data.containsKey('FORMA_PAGAMENTO')) {
      context.handle(
          _formaPagamentoMeta,
          formaPagamento.isAcceptableOrUnknown(
              data['FORMA_PAGAMENTO']!, _formaPagamentoMeta));
    }
    if (data.containsKey('GERA_FINANCEIRO')) {
      context.handle(
          _geraFinanceiroMeta,
          geraFinanceiro.isAcceptableOrUnknown(
              data['GERA_FINANCEIRO']!, _geraFinanceiroMeta));
    }
    if (data.containsKey('QUANTIDADE_PARCELAS')) {
      context.handle(
          _quantidadeParcelasMeta,
          quantidadeParcelas.isAcceptableOrUnknown(
              data['QUANTIDADE_PARCELAS']!, _quantidadeParcelasMeta));
    }
    if (data.containsKey('DIA_PRIMEIRO_VENCIMENTO')) {
      context.handle(
          _diaPrimeiroVencimentoMeta,
          diaPrimeiroVencimento.isAcceptableOrUnknown(
              data['DIA_PRIMEIRO_VENCIMENTO']!, _diaPrimeiroVencimentoMeta));
    }
    if (data.containsKey('INTERVALO_ENTRE_PARCELAS')) {
      context.handle(
          _intervaloEntreParcelasMeta,
          intervaloEntreParcelas.isAcceptableOrUnknown(
              data['INTERVALO_ENTRE_PARCELAS']!, _intervaloEntreParcelasMeta));
    }
    if (data.containsKey('DIA_FIXO_PARCELA')) {
      context.handle(
          _diaFixoParcelaMeta,
          diaFixoParcela.isAcceptableOrUnknown(
              data['DIA_FIXO_PARCELA']!, _diaFixoParcelaMeta));
    }
    if (data.containsKey('DATA_RECEBIMENTO_ITENS')) {
      context.handle(
          _dataRecebimentoItensMeta,
          dataRecebimentoItens.isAcceptableOrUnknown(
              data['DATA_RECEBIMENTO_ITENS']!, _dataRecebimentoItensMeta));
    }
    if (data.containsKey('HORA_RECEBIMENTO_ITENS')) {
      context.handle(
          _horaRecebimentoItensMeta,
          horaRecebimentoItens.isAcceptableOrUnknown(
              data['HORA_RECEBIMENTO_ITENS']!, _horaRecebimentoItensMeta));
    }
    if (data.containsKey('ATUALIZOU_ESTOQUE')) {
      context.handle(
          _atualizouEstoqueMeta,
          atualizouEstoque.isAcceptableOrUnknown(
              data['ATUALIZOU_ESTOQUE']!, _atualizouEstoqueMeta));
    }
    if (data.containsKey('NUMERO_DOCUMENTO_ENTRADA')) {
      context.handle(
          _numeroDocumentoEntradaMeta,
          numeroDocumentoEntrada.isAcceptableOrUnknown(
              data['NUMERO_DOCUMENTO_ENTRADA']!, _numeroDocumentoEntradaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CompraPedidoCabecalho map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CompraPedidoCabecalho.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CompraPedidoCabecalhosTable createAlias(String alias) {
    return $CompraPedidoCabecalhosTable(attachedDatabase, alias);
  }
}

class CompraPedidoDetalhe extends DataClass
    implements Insertable<CompraPedidoDetalhe> {
  final int? id;
  final int? idCompraPedidoCabecalho;
  final int? idProduto;
  final double? quantidade;
  final double? valorUnitario;
  final double? valorSubtotal;
  final double? taxaDesconto;
  final double? valorDesconto;
  final double? valorTotal;
  final String? cst;
  final String? csosn;
  final int? cfop;
  CompraPedidoDetalhe(
      {this.id,
      this.idCompraPedidoCabecalho,
      this.idProduto,
      this.quantidade,
      this.valorUnitario,
      this.valorSubtotal,
      this.taxaDesconto,
      this.valorDesconto,
      this.valorTotal,
      this.cst,
      this.csosn,
      this.cfop});
  factory CompraPedidoDetalhe.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return CompraPedidoDetalhe(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idCompraPedidoCabecalho: ValueSqlType.intType(
          data['${effectivePrefix}ID_COMPRA_PEDIDO_CABECALHO']),
      idProduto: ValueSqlType.intType(data['${effectivePrefix}ID_PRODUTO']),
      quantidade: ValueSqlType.doubleType(data['${effectivePrefix}QUANTIDADE']),
      valorUnitario: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_UNITARIO']),
      valorSubtotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_SUBTOTAL']),
      taxaDesconto: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_DESCONTO']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      valorTotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL']),
      cst: ValueSqlType.stringType(data['${effectivePrefix}CST']),
      csosn: ValueSqlType.stringType(data['${effectivePrefix}CSOSN']),
      cfop: ValueSqlType.intType(data['${effectivePrefix}CFOP']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCompraPedidoCabecalho != null) {
      map['ID_COMPRA_PEDIDO_CABECALHO'] =
          Variable<int>(idCompraPedidoCabecalho);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || valorUnitario != null) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario);
    }
    if (!nullToAbsent || valorSubtotal != null) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || cst != null) {
      map['CST'] = Variable<String>(cst);
    }
    if (!nullToAbsent || csosn != null) {
      map['CSOSN'] = Variable<String>(csosn);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    return map;
  }

  CompraPedidoDetalhesCompanion toCompanion(bool nullToAbsent) {
    return CompraPedidoDetalhesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCompraPedidoCabecalho: idCompraPedidoCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idCompraPedidoCabecalho),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      valorUnitario: valorUnitario == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnitario),
      valorSubtotal: valorSubtotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSubtotal),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      cst: cst == null && nullToAbsent ? const Value.absent() : Value(cst),
      csosn:
          csosn == null && nullToAbsent ? const Value.absent() : Value(csosn),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
    );
  }

  factory CompraPedidoDetalhe.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return CompraPedidoDetalhe(
      id: serializer.fromJson<int?>(json['id']),
      idCompraPedidoCabecalho:
          serializer.fromJson<int?>(json['idCompraPedidoCabecalho']),
      idProduto: serializer.fromJson<int?>(json['idProduto']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
      valorUnitario: serializer.fromJson<double?>(json['valorUnitario']),
      valorSubtotal: serializer.fromJson<double?>(json['valorSubtotal']),
      taxaDesconto: serializer.fromJson<double?>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      cst: serializer.fromJson<String?>(json['cst']),
      csosn: serializer.fromJson<String?>(json['csosn']),
      cfop: serializer.fromJson<int?>(json['cfop']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idCompraPedidoCabecalho':
          serializer.toJson<int?>(idCompraPedidoCabecalho),
      'idProduto': serializer.toJson<int?>(idProduto),
      'quantidade': serializer.toJson<double?>(quantidade),
      'valorUnitario': serializer.toJson<double?>(valorUnitario),
      'valorSubtotal': serializer.toJson<double?>(valorSubtotal),
      'taxaDesconto': serializer.toJson<double?>(taxaDesconto),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'cst': serializer.toJson<String?>(cst),
      'csosn': serializer.toJson<String?>(csosn),
      'cfop': serializer.toJson<int?>(cfop),
    };
  }

  CompraPedidoDetalhe copyWith(
          {int? id,
          int? idCompraPedidoCabecalho,
          int? idProduto,
          double? quantidade,
          double? valorUnitario,
          double? valorSubtotal,
          double? taxaDesconto,
          double? valorDesconto,
          double? valorTotal,
          String? cst,
          String? csosn,
          int? cfop}) =>
      CompraPedidoDetalhe(
        id: id ?? this.id,
        idCompraPedidoCabecalho:
            idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
        idProduto: idProduto ?? this.idProduto,
        quantidade: quantidade ?? this.quantidade,
        valorUnitario: valorUnitario ?? this.valorUnitario,
        valorSubtotal: valorSubtotal ?? this.valorSubtotal,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorTotal: valorTotal ?? this.valorTotal,
        cst: cst ?? this.cst,
        csosn: csosn ?? this.csosn,
        cfop: cfop ?? this.cfop,
      );
  @override
  String toString() {
    return (StringBuffer('CompraPedidoDetalhe(')
          ..write('id: $id, ')
          ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
          ..write('idProduto: $idProduto, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('cst: $cst, ')
          ..write('csosn: $csosn, ')
          ..write('cfop: $cfop')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idCompraPedidoCabecalho,
      idProduto,
      quantidade,
      valorUnitario,
      valorSubtotal,
      taxaDesconto,
      valorDesconto,
      valorTotal,
      cst,
      csosn,
      cfop);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is CompraPedidoDetalhe &&
          other.id == this.id &&
          other.idCompraPedidoCabecalho == this.idCompraPedidoCabecalho &&
          other.idProduto == this.idProduto &&
          other.quantidade == this.quantidade &&
          other.valorUnitario == this.valorUnitario &&
          other.valorSubtotal == this.valorSubtotal &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.valorTotal == this.valorTotal &&
          other.cst == this.cst &&
          other.csosn == this.csosn &&
          other.cfop == this.cfop);
}

class CompraPedidoDetalhesCompanion
    extends UpdateCompanion<CompraPedidoDetalhe> {
  final Value<int?> id;
  final Value<int?> idCompraPedidoCabecalho;
  final Value<int?> idProduto;
  final Value<double?> quantidade;
  final Value<double?> valorUnitario;
  final Value<double?> valorSubtotal;
  final Value<double?> taxaDesconto;
  final Value<double?> valorDesconto;
  final Value<double?> valorTotal;
  final Value<String?> cst;
  final Value<String?> csosn;
  final Value<int?> cfop;
  const CompraPedidoDetalhesCompanion({
    this.id = const Value.absent(),
    this.idCompraPedidoCabecalho = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.cst = const Value.absent(),
    this.csosn = const Value.absent(),
    this.cfop = const Value.absent(),
  });
  CompraPedidoDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idCompraPedidoCabecalho = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.cst = const Value.absent(),
    this.csosn = const Value.absent(),
    this.cfop = const Value.absent(),
  });
  static Insertable<CompraPedidoDetalhe> custom({
    Expression<int>? id,
    Expression<int>? idCompraPedidoCabecalho,
    Expression<int>? idProduto,
    Expression<double>? quantidade,
    Expression<double>? valorUnitario,
    Expression<double>? valorSubtotal,
    Expression<double>? taxaDesconto,
    Expression<double>? valorDesconto,
    Expression<double>? valorTotal,
    Expression<String>? cst,
    Expression<String>? csosn,
    Expression<int>? cfop,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCompraPedidoCabecalho != null)
        'ID_COMPRA_PEDIDO_CABECALHO': idCompraPedidoCabecalho,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
      if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (cst != null) 'CST': cst,
      if (csosn != null) 'CSOSN': csosn,
      if (cfop != null) 'CFOP': cfop,
    });
  }

  CompraPedidoDetalhesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idCompraPedidoCabecalho,
      Value<int?>? idProduto,
      Value<double?>? quantidade,
      Value<double?>? valorUnitario,
      Value<double?>? valorSubtotal,
      Value<double?>? taxaDesconto,
      Value<double?>? valorDesconto,
      Value<double?>? valorTotal,
      Value<String?>? cst,
      Value<String?>? csosn,
      Value<int?>? cfop}) {
    return CompraPedidoDetalhesCompanion(
      id: id ?? this.id,
      idCompraPedidoCabecalho:
          idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
      idProduto: idProduto ?? this.idProduto,
      quantidade: quantidade ?? this.quantidade,
      valorUnitario: valorUnitario ?? this.valorUnitario,
      valorSubtotal: valorSubtotal ?? this.valorSubtotal,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorTotal: valorTotal ?? this.valorTotal,
      cst: cst ?? this.cst,
      csosn: csosn ?? this.csosn,
      cfop: cfop ?? this.cfop,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCompraPedidoCabecalho.present) {
      map['ID_COMPRA_PEDIDO_CABECALHO'] =
          Variable<int>(idCompraPedidoCabecalho.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    if (valorUnitario.present) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario.value);
    }
    if (valorSubtotal.present) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (cst.present) {
      map['CST'] = Variable<String>(cst.value);
    }
    if (csosn.present) {
      map['CSOSN'] = Variable<String>(csosn.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CompraPedidoDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
          ..write('idProduto: $idProduto, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('cst: $cst, ')
          ..write('csosn: $csosn, ')
          ..write('cfop: $cfop')
          ..write(')'))
        .toString();
  }
}

class $CompraPedidoDetalhesTable extends CompraPedidoDetalhes
    with TableInfo<$CompraPedidoDetalhesTable, CompraPedidoDetalhe> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $CompraPedidoDetalhesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idCompraPedidoCabecalhoMeta =
      const VerificationMeta('idCompraPedidoCabecalho');
  @override
  late final GeneratedColumn<int> idCompraPedidoCabecalho =
      GeneratedColumn<int>('ID_COMPRA_PEDIDO_CABECALHO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES COMPRA_PEDIDO_CABECALHO(ID)');
  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  @override
  late final GeneratedColumn<int> idProduto = GeneratedColumn<int>(
      'ID_PRODUTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
      'QUANTIDADE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorUnitarioMeta =
      const VerificationMeta('valorUnitario');
  @override
  late final GeneratedColumn<double> valorUnitario = GeneratedColumn<double>(
      'VALOR_UNITARIO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorSubtotalMeta =
      const VerificationMeta('valorSubtotal');
  @override
  late final GeneratedColumn<double> valorSubtotal = GeneratedColumn<double>(
      'VALOR_SUBTOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  @override
  late final GeneratedColumn<double> taxaDesconto = GeneratedColumn<double>(
      'TAXA_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
      'VALOR_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _cstMeta = const VerificationMeta('cst');
  @override
  late final GeneratedColumn<String> cst = GeneratedColumn<String>(
      'CST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
  @override
  late final GeneratedColumn<String> csosn = GeneratedColumn<String>(
      'CSOSN', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  @override
  late final GeneratedColumn<int> cfop = GeneratedColumn<int>(
      'CFOP', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCompraPedidoCabecalho,
        idProduto,
        quantidade,
        valorUnitario,
        valorSubtotal,
        taxaDesconto,
        valorDesconto,
        valorTotal,
        cst,
        csosn,
        cfop
      ];
  @override
  String get aliasedName => _alias ?? 'COMPRA_PEDIDO_DETALHE';
  @override
  String get actualTableName => 'COMPRA_PEDIDO_DETALHE';
  @override
  VerificationContext validateIntegrity(
      Insertable<CompraPedidoDetalhe> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COMPRA_PEDIDO_CABECALHO')) {
      context.handle(
          _idCompraPedidoCabecalhoMeta,
          idCompraPedidoCabecalho.isAcceptableOrUnknown(
              data['ID_COMPRA_PEDIDO_CABECALHO']!,
              _idCompraPedidoCabecalhoMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO']!, _idProdutoMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE']!, _quantidadeMeta));
    }
    if (data.containsKey('VALOR_UNITARIO')) {
      context.handle(
          _valorUnitarioMeta,
          valorUnitario.isAcceptableOrUnknown(
              data['VALOR_UNITARIO']!, _valorUnitarioMeta));
    }
    if (data.containsKey('VALOR_SUBTOTAL')) {
      context.handle(
          _valorSubtotalMeta,
          valorSubtotal.isAcceptableOrUnknown(
              data['VALOR_SUBTOTAL']!, _valorSubtotalMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO']!, _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL']!, _valorTotalMeta));
    }
    if (data.containsKey('CST')) {
      context.handle(
          _cstMeta, cst.isAcceptableOrUnknown(data['CST']!, _cstMeta));
    }
    if (data.containsKey('CSOSN')) {
      context.handle(
          _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN']!, _csosnMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP']!, _cfopMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CompraPedidoDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
    return CompraPedidoDetalhe.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CompraPedidoDetalhesTable createAlias(String alias) {
    return $CompraPedidoDetalhesTable(attachedDatabase, alias);
  }
}

class Contador extends DataClass implements Insertable<Contador> {
  final int? id;
  final String? cpf;
  final String? cnpj;
  final String? nome;
  final String? email;
  final String? inscricaoCrc;
  final String? telefone;
  final String? celular;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final String? cidade;
  final String? uf;
  final String? cep;
  final int? codigoIbgeCidade;
  final int? codigoIbgeUf;
  Contador(
      {this.id,
      this.cpf,
      this.cnpj,
      this.nome,
      this.email,
      this.inscricaoCrc,
      this.telefone,
      this.celular,
      this.logradouro,
      this.numero,
      this.complemento,
      this.bairro,
      this.cidade,
      this.uf,
      this.cep,
      this.codigoIbgeCidade,
      this.codigoIbgeUf});
  factory Contador.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Contador(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
      inscricaoCrc: ValueSqlType.stringType(data['${effectivePrefix}INSCRICAO_CRC']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      celular: ValueSqlType.stringType(data['${effectivePrefix}CELULAR']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      cidade: ValueSqlType.stringType(data['${effectivePrefix}CIDADE']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      codigoIbgeCidade: ValueSqlType.intType(
          data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
      codigoIbgeUf: ValueSqlType.intType(data['${effectivePrefix}CODIGO_IBGE_UF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || inscricaoCrc != null) {
      map['INSCRICAO_CRC'] = Variable<String>(inscricaoCrc);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoIbgeCidade != null) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade);
    }
    if (!nullToAbsent || codigoIbgeUf != null) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf);
    }
    return map;
  }

  ContadorsCompanion toCompanion(bool nullToAbsent) {
    return ContadorsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      inscricaoCrc: inscricaoCrc == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoCrc),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      codigoIbgeCidade: codigoIbgeCidade == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeCidade),
      codigoIbgeUf: codigoIbgeUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeUf),
    );
  }

  factory Contador.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Contador(
      id: serializer.fromJson<int?>(json['id']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      nome: serializer.fromJson<String?>(json['nome']),
      email: serializer.fromJson<String?>(json['email']),
      inscricaoCrc: serializer.fromJson<String?>(json['inscricaoCrc']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      celular: serializer.fromJson<String?>(json['celular']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      cidade: serializer.fromJson<String?>(json['cidade']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoIbgeCidade: serializer.fromJson<int?>(json['codigoIbgeCidade']),
      codigoIbgeUf: serializer.fromJson<int?>(json['codigoIbgeUf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'cpf': serializer.toJson<String?>(cpf),
      'cnpj': serializer.toJson<String?>(cnpj),
      'nome': serializer.toJson<String?>(nome),
      'email': serializer.toJson<String?>(email),
      'inscricaoCrc': serializer.toJson<String?>(inscricaoCrc),
      'telefone': serializer.toJson<String?>(telefone),
      'celular': serializer.toJson<String?>(celular),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'cidade': serializer.toJson<String?>(cidade),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoIbgeCidade': serializer.toJson<int?>(codigoIbgeCidade),
      'codigoIbgeUf': serializer.toJson<int?>(codigoIbgeUf),
    };
  }

  Contador copyWith(
          {int? id,
          String? cpf,
          String? cnpj,
          String? nome,
          String? email,
          String? inscricaoCrc,
          String? telefone,
          String? celular,
          String? logradouro,
          String? numero,
          String? complemento,
          String? bairro,
          String? cidade,
          String? uf,
          String? cep,
          int? codigoIbgeCidade,
          int? codigoIbgeUf}) =>
      Contador(
        id: id ?? this.id,
        cpf: cpf ?? this.cpf,
        cnpj: cnpj ?? this.cnpj,
        nome: nome ?? this.nome,
        email: email ?? this.email,
        inscricaoCrc: inscricaoCrc ?? this.inscricaoCrc,
        telefone: telefone ?? this.telefone,
        celular: celular ?? this.celular,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        cep: cep ?? this.cep,
        codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
        codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
      );
  @override
  String toString() {
    return (StringBuffer('Contador(')
          ..write('id: $id, ')
          ..write('cpf: $cpf, ')
          ..write('cnpj: $cnpj, ')
          ..write('nome: $nome, ')
          ..write('email: $email, ')
          ..write('inscricaoCrc: $inscricaoCrc, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      cpf,
      cnpj,
      nome,
      email,
      inscricaoCrc,
      telefone,
      celular,
      logradouro,
      numero,
      complemento,
      bairro,
      cidade,
      uf,
      cep,
      codigoIbgeCidade,
      codigoIbgeUf);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Contador &&
          other.id == this.id &&
          other.cpf == this.cpf &&
          other.cnpj == this.cnpj &&
          other.nome == this.nome &&
          other.email == this.email &&
          other.inscricaoCrc == this.inscricaoCrc &&
          other.telefone == this.telefone &&
          other.celular == this.celular &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoIbgeCidade == this.codigoIbgeCidade &&
          other.codigoIbgeUf == this.codigoIbgeUf);
}

class ContadorsCompanion extends UpdateCompanion<Contador> {
  final Value<int?> id;
  final Value<String?> cpf;
  final Value<String?> cnpj;
  final Value<String?> nome;
  final Value<String?> email;
  final Value<String?> inscricaoCrc;
  final Value<String?> telefone;
  final Value<String?> celular;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<String?> cidade;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoIbgeCidade;
  final Value<int?> codigoIbgeUf;
  const ContadorsCompanion({
    this.id = const Value.absent(),
    this.cpf = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.nome = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoCrc = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  ContadorsCompanion.insert({
    this.id = const Value.absent(),
    this.cpf = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.nome = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoCrc = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  static Insertable<Contador> custom({
    Expression<int>? id,
    Expression<String>? cpf,
    Expression<String>? cnpj,
    Expression<String>? nome,
    Expression<String>? email,
    Expression<String>? inscricaoCrc,
    Expression<String>? telefone,
    Expression<String>? celular,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<String>? cidade,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoIbgeCidade,
    Expression<int>? codigoIbgeUf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (cpf != null) 'CPF': cpf,
      if (cnpj != null) 'CNPJ': cnpj,
      if (nome != null) 'NOME': nome,
      if (email != null) 'EMAIL': email,
      if (inscricaoCrc != null) 'INSCRICAO_CRC': inscricaoCrc,
      if (telefone != null) 'TELEFONE': telefone,
      if (celular != null) 'CELULAR': celular,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (cep != null) 'CEP': cep,
      if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
      if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
    });
  }

  ContadorsCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? cpf,
      Value<String?>? cnpj,
      Value<String?>? nome,
      Value<String?>? email,
      Value<String?>? inscricaoCrc,
      Value<String?>? telefone,
      Value<String?>? celular,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? bairro,
      Value<String?>? cidade,
      Value<String?>? uf,
      Value<String?>? cep,
      Value<int?>? codigoIbgeCidade,
      Value<int?>? codigoIbgeUf}) {
    return ContadorsCompanion(
      id: id ?? this.id,
      cpf: cpf ?? this.cpf,
      cnpj: cnpj ?? this.cnpj,
      nome: nome ?? this.nome,
      email: email ?? this.email,
      inscricaoCrc: inscricaoCrc ?? this.inscricaoCrc,
      telefone: telefone ?? this.telefone,
      celular: celular ?? this.celular,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
      codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (inscricaoCrc.present) {
      map['INSCRICAO_CRC'] = Variable<String>(inscricaoCrc.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (codigoIbgeCidade.present) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade.value);
    }
    if (codigoIbgeUf.present) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContadorsCompanion(')
          ..write('id: $id, ')
          ..write('cpf: $cpf, ')
          ..write('cnpj: $cnpj, ')
          ..write('nome: $nome, ')
          ..write('email: $email, ')
          ..write('inscricaoCrc: $inscricaoCrc, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }
}

class $ContadorsTable extends Contadors
    with TableInfo<$ContadorsTable, Contador> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ContadorsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoCrcMeta =
      const VerificationMeta('inscricaoCrc');
  @override
  late final GeneratedColumn<String> inscricaoCrc = GeneratedColumn<String>(
      'INSCRICAO_CRC', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  @override
  late final GeneratedColumn<String> celular = GeneratedColumn<String>(
      'CELULAR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  @override
  late final GeneratedColumn<String> cidade = GeneratedColumn<String>(
      'CIDADE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoIbgeCidadeMeta =
      const VerificationMeta('codigoIbgeCidade');
  @override
  late final GeneratedColumn<int> codigoIbgeCidade = GeneratedColumn<int>(
      'CODIGO_IBGE_CIDADE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoIbgeUfMeta =
      const VerificationMeta('codigoIbgeUf');
  @override
  late final GeneratedColumn<int> codigoIbgeUf = GeneratedColumn<int>(
      'CODIGO_IBGE_UF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        cpf,
        cnpj,
        nome,
        email,
        inscricaoCrc,
        telefone,
        celular,
        logradouro,
        numero,
        complemento,
        bairro,
        cidade,
        uf,
        cep,
        codigoIbgeCidade,
        codigoIbgeUf
      ];
  @override
  String get aliasedName => _alias ?? 'CONTADOR';
  @override
  String get actualTableName => 'CONTADOR';
  @override
  VerificationContext validateIntegrity(Insertable<Contador> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    if (data.containsKey('INSCRICAO_CRC')) {
      context.handle(
          _inscricaoCrcMeta,
          inscricaoCrc.isAcceptableOrUnknown(
              data['INSCRICAO_CRC']!, _inscricaoCrcMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('CODIGO_IBGE_CIDADE')) {
      context.handle(
          _codigoIbgeCidadeMeta,
          codigoIbgeCidade.isAcceptableOrUnknown(
              data['CODIGO_IBGE_CIDADE']!, _codigoIbgeCidadeMeta));
    }
    if (data.containsKey('CODIGO_IBGE_UF')) {
      context.handle(
          _codigoIbgeUfMeta,
          codigoIbgeUf.isAcceptableOrUnknown(
              data['CODIGO_IBGE_UF']!, _codigoIbgeUfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Contador map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Contador.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ContadorsTable createAlias(String alias) {
    return $ContadorsTable(attachedDatabase, alias);
  }
}

class ContasPagar extends DataClass implements Insertable<ContasPagar> {
  final int? id;
  final int? idFornecedor;
  final int? idCompraPedidoCabecalho;
  final DateTime? dataLancamento;
  final DateTime? dataVencimento;
  final DateTime? dataPagamento;
  final double? valorAPagar;
  final double? taxaJuro;
  final double? taxaMulta;
  final double? taxaDesconto;
  final double? valorJuro;
  final double? valorMulta;
  final double? valorDesconto;
  final double? valorPago;
  final String? numeroDocumento;
  final String? historico;
  final String? statusPagamento;
  ContasPagar(
      {this.id,
      this.idFornecedor,
      this.idCompraPedidoCabecalho,
      this.dataLancamento,
      this.dataVencimento,
      this.dataPagamento,
      this.valorAPagar,
      this.taxaJuro,
      this.taxaMulta,
      this.taxaDesconto,
      this.valorJuro,
      this.valorMulta,
      this.valorDesconto,
      this.valorPago,
      this.numeroDocumento,
      this.historico,
      this.statusPagamento});
  factory ContasPagar.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ContasPagar(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idFornecedor: ValueSqlType.intType(data['${effectivePrefix}ID_FORNECEDOR']),
      idCompraPedidoCabecalho: ValueSqlType.intType(
          data['${effectivePrefix}ID_COMPRA_PEDIDO_CABECALHO']),
      dataLancamento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_LANCAMENTO']),
      dataVencimento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_VENCIMENTO']),
      dataPagamento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_PAGAMENTO']),
      valorAPagar: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_A_PAGAR']),
      taxaJuro: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_JURO']),
      taxaMulta: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_MULTA']),
      taxaDesconto: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_DESCONTO']),
      valorJuro: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_JURO']),
      valorMulta: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_MULTA']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      valorPago: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PAGO']),
      numeroDocumento: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_DOCUMENTO']),
      historico: ValueSqlType.stringType(data['${effectivePrefix}HISTORICO']),
      statusPagamento: ValueSqlType.stringType(data['${effectivePrefix}STATUS_PAGAMENTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idFornecedor != null) {
      map['ID_FORNECEDOR'] = Variable<int>(idFornecedor);
    }
    if (!nullToAbsent || idCompraPedidoCabecalho != null) {
      map['ID_COMPRA_PEDIDO_CABECALHO'] =
          Variable<int>(idCompraPedidoCabecalho);
    }
    if (!nullToAbsent || dataLancamento != null) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento);
    }
    if (!nullToAbsent || dataVencimento != null) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento);
    }
    if (!nullToAbsent || dataPagamento != null) {
      map['DATA_PAGAMENTO'] = Variable<DateTime>(dataPagamento);
    }
    if (!nullToAbsent || valorAPagar != null) {
      map['VALOR_A_PAGAR'] = Variable<double>(valorAPagar);
    }
    if (!nullToAbsent || taxaJuro != null) {
      map['TAXA_JURO'] = Variable<double>(taxaJuro);
    }
    if (!nullToAbsent || taxaMulta != null) {
      map['TAXA_MULTA'] = Variable<double>(taxaMulta);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorJuro != null) {
      map['VALOR_JURO'] = Variable<double>(valorJuro);
    }
    if (!nullToAbsent || valorMulta != null) {
      map['VALOR_MULTA'] = Variable<double>(valorMulta);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorPago != null) {
      map['VALOR_PAGO'] = Variable<double>(valorPago);
    }
    if (!nullToAbsent || numeroDocumento != null) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento);
    }
    if (!nullToAbsent || historico != null) {
      map['HISTORICO'] = Variable<String>(historico);
    }
    if (!nullToAbsent || statusPagamento != null) {
      map['STATUS_PAGAMENTO'] = Variable<String>(statusPagamento);
    }
    return map;
  }

  ContasPagarsCompanion toCompanion(bool nullToAbsent) {
    return ContasPagarsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idFornecedor: idFornecedor == null && nullToAbsent
          ? const Value.absent()
          : Value(idFornecedor),
      idCompraPedidoCabecalho: idCompraPedidoCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idCompraPedidoCabecalho),
      dataLancamento: dataLancamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataLancamento),
      dataVencimento: dataVencimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVencimento),
      dataPagamento: dataPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPagamento),
      valorAPagar: valorAPagar == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAPagar),
      taxaJuro: taxaJuro == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaJuro),
      taxaMulta: taxaMulta == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaMulta),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorJuro: valorJuro == null && nullToAbsent
          ? const Value.absent()
          : Value(valorJuro),
      valorMulta: valorMulta == null && nullToAbsent
          ? const Value.absent()
          : Value(valorMulta),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorPago: valorPago == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPago),
      numeroDocumento: numeroDocumento == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroDocumento),
      historico: historico == null && nullToAbsent
          ? const Value.absent()
          : Value(historico),
      statusPagamento: statusPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(statusPagamento),
    );
  }

  factory ContasPagar.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ContasPagar(
      id: serializer.fromJson<int?>(json['id']),
      idFornecedor: serializer.fromJson<int?>(json['idFornecedor']),
      idCompraPedidoCabecalho:
          serializer.fromJson<int?>(json['idCompraPedidoCabecalho']),
      dataLancamento: serializer.fromJson<DateTime?>(json['dataLancamento']),
      dataVencimento: serializer.fromJson<DateTime?>(json['dataVencimento']),
      dataPagamento: serializer.fromJson<DateTime?>(json['dataPagamento']),
      valorAPagar: serializer.fromJson<double?>(json['valorAPagar']),
      taxaJuro: serializer.fromJson<double?>(json['taxaJuro']),
      taxaMulta: serializer.fromJson<double?>(json['taxaMulta']),
      taxaDesconto: serializer.fromJson<double?>(json['taxaDesconto']),
      valorJuro: serializer.fromJson<double?>(json['valorJuro']),
      valorMulta: serializer.fromJson<double?>(json['valorMulta']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorPago: serializer.fromJson<double?>(json['valorPago']),
      numeroDocumento: serializer.fromJson<String?>(json['numeroDocumento']),
      historico: serializer.fromJson<String?>(json['historico']),
      statusPagamento: serializer.fromJson<String?>(json['statusPagamento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idFornecedor': serializer.toJson<int?>(idFornecedor),
      'idCompraPedidoCabecalho':
          serializer.toJson<int?>(idCompraPedidoCabecalho),
      'dataLancamento': serializer.toJson<DateTime?>(dataLancamento),
      'dataVencimento': serializer.toJson<DateTime?>(dataVencimento),
      'dataPagamento': serializer.toJson<DateTime?>(dataPagamento),
      'valorAPagar': serializer.toJson<double?>(valorAPagar),
      'taxaJuro': serializer.toJson<double?>(taxaJuro),
      'taxaMulta': serializer.toJson<double?>(taxaMulta),
      'taxaDesconto': serializer.toJson<double?>(taxaDesconto),
      'valorJuro': serializer.toJson<double?>(valorJuro),
      'valorMulta': serializer.toJson<double?>(valorMulta),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorPago': serializer.toJson<double?>(valorPago),
      'numeroDocumento': serializer.toJson<String?>(numeroDocumento),
      'historico': serializer.toJson<String?>(historico),
      'statusPagamento': serializer.toJson<String?>(statusPagamento),
    };
  }

  ContasPagar copyWith(
          {int? id,
          int? idFornecedor,
          int? idCompraPedidoCabecalho,
          DateTime? dataLancamento,
          DateTime? dataVencimento,
          DateTime? dataPagamento,
          double? valorAPagar,
          double? taxaJuro,
          double? taxaMulta,
          double? taxaDesconto,
          double? valorJuro,
          double? valorMulta,
          double? valorDesconto,
          double? valorPago,
          String? numeroDocumento,
          String? historico,
          String? statusPagamento}) =>
      ContasPagar(
        id: id ?? this.id,
        idFornecedor: idFornecedor ?? this.idFornecedor,
        idCompraPedidoCabecalho:
            idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
        dataLancamento: dataLancamento ?? this.dataLancamento,
        dataVencimento: dataVencimento ?? this.dataVencimento,
        dataPagamento: dataPagamento ?? this.dataPagamento,
        valorAPagar: valorAPagar ?? this.valorAPagar,
        taxaJuro: taxaJuro ?? this.taxaJuro,
        taxaMulta: taxaMulta ?? this.taxaMulta,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorJuro: valorJuro ?? this.valorJuro,
        valorMulta: valorMulta ?? this.valorMulta,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorPago: valorPago ?? this.valorPago,
        numeroDocumento: numeroDocumento ?? this.numeroDocumento,
        historico: historico ?? this.historico,
        statusPagamento: statusPagamento ?? this.statusPagamento,
      );
  @override
  String toString() {
    return (StringBuffer('ContasPagar(')
          ..write('id: $id, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
          ..write('dataLancamento: $dataLancamento, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('valorAPagar: $valorAPagar, ')
          ..write('taxaJuro: $taxaJuro, ')
          ..write('taxaMulta: $taxaMulta, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorJuro: $valorJuro, ')
          ..write('valorMulta: $valorMulta, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorPago: $valorPago, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('historico: $historico, ')
          ..write('statusPagamento: $statusPagamento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idFornecedor,
      idCompraPedidoCabecalho,
      dataLancamento,
      dataVencimento,
      dataPagamento,
      valorAPagar,
      taxaJuro,
      taxaMulta,
      taxaDesconto,
      valorJuro,
      valorMulta,
      valorDesconto,
      valorPago,
      numeroDocumento,
      historico,
      statusPagamento);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ContasPagar &&
          other.id == this.id &&
          other.idFornecedor == this.idFornecedor &&
          other.idCompraPedidoCabecalho == this.idCompraPedidoCabecalho &&
          other.dataLancamento == this.dataLancamento &&
          other.dataVencimento == this.dataVencimento &&
          other.dataPagamento == this.dataPagamento &&
          other.valorAPagar == this.valorAPagar &&
          other.taxaJuro == this.taxaJuro &&
          other.taxaMulta == this.taxaMulta &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorJuro == this.valorJuro &&
          other.valorMulta == this.valorMulta &&
          other.valorDesconto == this.valorDesconto &&
          other.valorPago == this.valorPago &&
          other.numeroDocumento == this.numeroDocumento &&
          other.historico == this.historico &&
          other.statusPagamento == this.statusPagamento);
}

class ContasPagarsCompanion extends UpdateCompanion<ContasPagar> {
  final Value<int?> id;
  final Value<int?> idFornecedor;
  final Value<int?> idCompraPedidoCabecalho;
  final Value<DateTime?> dataLancamento;
  final Value<DateTime?> dataVencimento;
  final Value<DateTime?> dataPagamento;
  final Value<double?> valorAPagar;
  final Value<double?> taxaJuro;
  final Value<double?> taxaMulta;
  final Value<double?> taxaDesconto;
  final Value<double?> valorJuro;
  final Value<double?> valorMulta;
  final Value<double?> valorDesconto;
  final Value<double?> valorPago;
  final Value<String?> numeroDocumento;
  final Value<String?> historico;
  final Value<String?> statusPagamento;
  const ContasPagarsCompanion({
    this.id = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.idCompraPedidoCabecalho = const Value.absent(),
    this.dataLancamento = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.valorAPagar = const Value.absent(),
    this.taxaJuro = const Value.absent(),
    this.taxaMulta = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorJuro = const Value.absent(),
    this.valorMulta = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorPago = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.historico = const Value.absent(),
    this.statusPagamento = const Value.absent(),
  });
  ContasPagarsCompanion.insert({
    this.id = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.idCompraPedidoCabecalho = const Value.absent(),
    this.dataLancamento = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.valorAPagar = const Value.absent(),
    this.taxaJuro = const Value.absent(),
    this.taxaMulta = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorJuro = const Value.absent(),
    this.valorMulta = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorPago = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.historico = const Value.absent(),
    this.statusPagamento = const Value.absent(),
  });
  static Insertable<ContasPagar> custom({
    Expression<int>? id,
    Expression<int>? idFornecedor,
    Expression<int>? idCompraPedidoCabecalho,
    Expression<DateTime>? dataLancamento,
    Expression<DateTime>? dataVencimento,
    Expression<DateTime>? dataPagamento,
    Expression<double>? valorAPagar,
    Expression<double>? taxaJuro,
    Expression<double>? taxaMulta,
    Expression<double>? taxaDesconto,
    Expression<double>? valorJuro,
    Expression<double>? valorMulta,
    Expression<double>? valorDesconto,
    Expression<double>? valorPago,
    Expression<String>? numeroDocumento,
    Expression<String>? historico,
    Expression<String>? statusPagamento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idFornecedor != null) 'ID_FORNECEDOR': idFornecedor,
      if (idCompraPedidoCabecalho != null)
        'ID_COMPRA_PEDIDO_CABECALHO': idCompraPedidoCabecalho,
      if (dataLancamento != null) 'DATA_LANCAMENTO': dataLancamento,
      if (dataVencimento != null) 'DATA_VENCIMENTO': dataVencimento,
      if (dataPagamento != null) 'DATA_PAGAMENTO': dataPagamento,
      if (valorAPagar != null) 'VALOR_A_PAGAR': valorAPagar,
      if (taxaJuro != null) 'TAXA_JURO': taxaJuro,
      if (taxaMulta != null) 'TAXA_MULTA': taxaMulta,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorJuro != null) 'VALOR_JURO': valorJuro,
      if (valorMulta != null) 'VALOR_MULTA': valorMulta,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorPago != null) 'VALOR_PAGO': valorPago,
      if (numeroDocumento != null) 'NUMERO_DOCUMENTO': numeroDocumento,
      if (historico != null) 'HISTORICO': historico,
      if (statusPagamento != null) 'STATUS_PAGAMENTO': statusPagamento,
    });
  }

  ContasPagarsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idFornecedor,
      Value<int?>? idCompraPedidoCabecalho,
      Value<DateTime?>? dataLancamento,
      Value<DateTime?>? dataVencimento,
      Value<DateTime?>? dataPagamento,
      Value<double?>? valorAPagar,
      Value<double?>? taxaJuro,
      Value<double?>? taxaMulta,
      Value<double?>? taxaDesconto,
      Value<double?>? valorJuro,
      Value<double?>? valorMulta,
      Value<double?>? valorDesconto,
      Value<double?>? valorPago,
      Value<String?>? numeroDocumento,
      Value<String?>? historico,
      Value<String?>? statusPagamento}) {
    return ContasPagarsCompanion(
      id: id ?? this.id,
      idFornecedor: idFornecedor ?? this.idFornecedor,
      idCompraPedidoCabecalho:
          idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
      dataLancamento: dataLancamento ?? this.dataLancamento,
      dataVencimento: dataVencimento ?? this.dataVencimento,
      dataPagamento: dataPagamento ?? this.dataPagamento,
      valorAPagar: valorAPagar ?? this.valorAPagar,
      taxaJuro: taxaJuro ?? this.taxaJuro,
      taxaMulta: taxaMulta ?? this.taxaMulta,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorJuro: valorJuro ?? this.valorJuro,
      valorMulta: valorMulta ?? this.valorMulta,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorPago: valorPago ?? this.valorPago,
      numeroDocumento: numeroDocumento ?? this.numeroDocumento,
      historico: historico ?? this.historico,
      statusPagamento: statusPagamento ?? this.statusPagamento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idFornecedor.present) {
      map['ID_FORNECEDOR'] = Variable<int>(idFornecedor.value);
    }
    if (idCompraPedidoCabecalho.present) {
      map['ID_COMPRA_PEDIDO_CABECALHO'] =
          Variable<int>(idCompraPedidoCabecalho.value);
    }
    if (dataLancamento.present) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento.value);
    }
    if (dataVencimento.present) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento.value);
    }
    if (dataPagamento.present) {
      map['DATA_PAGAMENTO'] = Variable<DateTime>(dataPagamento.value);
    }
    if (valorAPagar.present) {
      map['VALOR_A_PAGAR'] = Variable<double>(valorAPagar.value);
    }
    if (taxaJuro.present) {
      map['TAXA_JURO'] = Variable<double>(taxaJuro.value);
    }
    if (taxaMulta.present) {
      map['TAXA_MULTA'] = Variable<double>(taxaMulta.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorJuro.present) {
      map['VALOR_JURO'] = Variable<double>(valorJuro.value);
    }
    if (valorMulta.present) {
      map['VALOR_MULTA'] = Variable<double>(valorMulta.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorPago.present) {
      map['VALOR_PAGO'] = Variable<double>(valorPago.value);
    }
    if (numeroDocumento.present) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento.value);
    }
    if (historico.present) {
      map['HISTORICO'] = Variable<String>(historico.value);
    }
    if (statusPagamento.present) {
      map['STATUS_PAGAMENTO'] = Variable<String>(statusPagamento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContasPagarsCompanion(')
          ..write('id: $id, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
          ..write('dataLancamento: $dataLancamento, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('valorAPagar: $valorAPagar, ')
          ..write('taxaJuro: $taxaJuro, ')
          ..write('taxaMulta: $taxaMulta, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorJuro: $valorJuro, ')
          ..write('valorMulta: $valorMulta, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorPago: $valorPago, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('historico: $historico, ')
          ..write('statusPagamento: $statusPagamento')
          ..write(')'))
        .toString();
  }
}

class $ContasPagarsTable extends ContasPagars
    with TableInfo<$ContasPagarsTable, ContasPagar> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ContasPagarsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idFornecedorMeta =
      const VerificationMeta('idFornecedor');
  @override
  late final GeneratedColumn<int> idFornecedor = GeneratedColumn<int>(
      'ID_FORNECEDOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES FORNECEDOR(ID)');
  final VerificationMeta _idCompraPedidoCabecalhoMeta =
      const VerificationMeta('idCompraPedidoCabecalho');
  @override
  late final GeneratedColumn<int> idCompraPedidoCabecalho =
      GeneratedColumn<int>('ID_COMPRA_PEDIDO_CABECALHO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints:
              'NULLABLE REFERENCES COMPRA_PEDIDO_CABECALHO(ID)');
  final VerificationMeta _dataLancamentoMeta =
      const VerificationMeta('dataLancamento');
  @override
  late final GeneratedColumn<DateTime> dataLancamento =
      GeneratedColumn<DateTime>('DATA_LANCAMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataVencimentoMeta =
      const VerificationMeta('dataVencimento');
  @override
  late final GeneratedColumn<DateTime> dataVencimento =
      GeneratedColumn<DateTime>('DATA_VENCIMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataPagamentoMeta =
      const VerificationMeta('dataPagamento');
  @override
  late final GeneratedColumn<DateTime> dataPagamento =
      GeneratedColumn<DateTime>('DATA_PAGAMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _valorAPagarMeta =
      const VerificationMeta('valorAPagar');
  @override
  late final GeneratedColumn<double> valorAPagar = GeneratedColumn<double>(
      'VALOR_A_PAGAR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaJuroMeta = const VerificationMeta('taxaJuro');
  @override
  late final GeneratedColumn<double> taxaJuro = GeneratedColumn<double>(
      'TAXA_JURO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaMultaMeta = const VerificationMeta('taxaMulta');
  @override
  late final GeneratedColumn<double> taxaMulta = GeneratedColumn<double>(
      'TAXA_MULTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  @override
  late final GeneratedColumn<double> taxaDesconto = GeneratedColumn<double>(
      'TAXA_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorJuroMeta = const VerificationMeta('valorJuro');
  @override
  late final GeneratedColumn<double> valorJuro = GeneratedColumn<double>(
      'VALOR_JURO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorMultaMeta = const VerificationMeta('valorMulta');
  @override
  late final GeneratedColumn<double> valorMulta = GeneratedColumn<double>(
      'VALOR_MULTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPagoMeta = const VerificationMeta('valorPago');
  @override
  late final GeneratedColumn<double> valorPago = GeneratedColumn<double>(
      'VALOR_PAGO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _numeroDocumentoMeta =
      const VerificationMeta('numeroDocumento');
  @override
  late final GeneratedColumn<String> numeroDocumento =
      GeneratedColumn<String>('NUMERO_DOCUMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 50),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _historicoMeta = const VerificationMeta('historico');
  @override
  late final GeneratedColumn<String> historico = GeneratedColumn<String>(
      'HISTORICO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _statusPagamentoMeta =
      const VerificationMeta('statusPagamento');
  @override
  late final GeneratedColumn<String> statusPagamento =
      GeneratedColumn<String>('STATUS_PAGAMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idFornecedor,
        idCompraPedidoCabecalho,
        dataLancamento,
        dataVencimento,
        dataPagamento,
        valorAPagar,
        taxaJuro,
        taxaMulta,
        taxaDesconto,
        valorJuro,
        valorMulta,
        valorDesconto,
        valorPago,
        numeroDocumento,
        historico,
        statusPagamento
      ];
  @override
  String get aliasedName => _alias ?? 'CONTAS_PAGAR';
  @override
  String get actualTableName => 'CONTAS_PAGAR';
  @override
  VerificationContext validateIntegrity(Insertable<ContasPagar> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_FORNECEDOR')) {
      context.handle(
          _idFornecedorMeta,
          idFornecedor.isAcceptableOrUnknown(
              data['ID_FORNECEDOR']!, _idFornecedorMeta));
    }
    if (data.containsKey('ID_COMPRA_PEDIDO_CABECALHO')) {
      context.handle(
          _idCompraPedidoCabecalhoMeta,
          idCompraPedidoCabecalho.isAcceptableOrUnknown(
              data['ID_COMPRA_PEDIDO_CABECALHO']!,
              _idCompraPedidoCabecalhoMeta));
    }
    if (data.containsKey('DATA_LANCAMENTO')) {
      context.handle(
          _dataLancamentoMeta,
          dataLancamento.isAcceptableOrUnknown(
              data['DATA_LANCAMENTO']!, _dataLancamentoMeta));
    }
    if (data.containsKey('DATA_VENCIMENTO')) {
      context.handle(
          _dataVencimentoMeta,
          dataVencimento.isAcceptableOrUnknown(
              data['DATA_VENCIMENTO']!, _dataVencimentoMeta));
    }
    if (data.containsKey('DATA_PAGAMENTO')) {
      context.handle(
          _dataPagamentoMeta,
          dataPagamento.isAcceptableOrUnknown(
              data['DATA_PAGAMENTO']!, _dataPagamentoMeta));
    }
    if (data.containsKey('VALOR_A_PAGAR')) {
      context.handle(
          _valorAPagarMeta,
          valorAPagar.isAcceptableOrUnknown(
              data['VALOR_A_PAGAR']!, _valorAPagarMeta));
    }
    if (data.containsKey('TAXA_JURO')) {
      context.handle(_taxaJuroMeta,
          taxaJuro.isAcceptableOrUnknown(data['TAXA_JURO']!, _taxaJuroMeta));
    }
    if (data.containsKey('TAXA_MULTA')) {
      context.handle(_taxaMultaMeta,
          taxaMulta.isAcceptableOrUnknown(data['TAXA_MULTA']!, _taxaMultaMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO']!, _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_JURO')) {
      context.handle(_valorJuroMeta,
          valorJuro.isAcceptableOrUnknown(data['VALOR_JURO']!, _valorJuroMeta));
    }
    if (data.containsKey('VALOR_MULTA')) {
      context.handle(
          _valorMultaMeta,
          valorMulta.isAcceptableOrUnknown(
              data['VALOR_MULTA']!, _valorMultaMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_PAGO')) {
      context.handle(_valorPagoMeta,
          valorPago.isAcceptableOrUnknown(data['VALOR_PAGO']!, _valorPagoMeta));
    }
    if (data.containsKey('NUMERO_DOCUMENTO')) {
      context.handle(
          _numeroDocumentoMeta,
          numeroDocumento.isAcceptableOrUnknown(
              data['NUMERO_DOCUMENTO']!, _numeroDocumentoMeta));
    }
    if (data.containsKey('HISTORICO')) {
      context.handle(_historicoMeta,
          historico.isAcceptableOrUnknown(data['HISTORICO']!, _historicoMeta));
    }
    if (data.containsKey('STATUS_PAGAMENTO')) {
      context.handle(
          _statusPagamentoMeta,
          statusPagamento.isAcceptableOrUnknown(
              data['STATUS_PAGAMENTO']!, _statusPagamentoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ContasPagar map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ContasPagar.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ContasPagarsTable createAlias(String alias) {
    return $ContasPagarsTable(attachedDatabase, alias);
  }
}

class ContasReceber extends DataClass implements Insertable<ContasReceber> {
  final int? id;
  final int? idCliente;
  final int? idPdvVendaCabecalho;
  final DateTime? dataLancamento;
  final DateTime? dataVencimento;
  final DateTime? dataRecebimento;
  final double? valorAReceber;
  final double? taxaJuro;
  final double? taxaMulta;
  final double? taxaDesconto;
  final double? valorJuro;
  final double? valorMulta;
  final double? valorDesconto;
  final double? valorRecebido;
  final String? numeroDocumento;
  final String? historico;
  final String? statusRecebimento;
  ContasReceber(
      {this.id,
      this.idCliente,
      this.idPdvVendaCabecalho,
      this.dataLancamento,
      this.dataVencimento,
      this.dataRecebimento,
      this.valorAReceber,
      this.taxaJuro,
      this.taxaMulta,
      this.taxaDesconto,
      this.valorJuro,
      this.valorMulta,
      this.valorDesconto,
      this.valorRecebido,
      this.numeroDocumento,
      this.historico,
      this.statusRecebimento});
  factory ContasReceber.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return ContasReceber(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idCliente: ValueSqlType.intType(data['${effectivePrefix}ID_CLIENTE']),
      idPdvVendaCabecalho: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
      dataLancamento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_LANCAMENTO']),
      dataVencimento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_VENCIMENTO']),
      dataRecebimento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_RECEBIMENTO']),
      valorAReceber: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_A_RECEBER']),
      taxaJuro: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_JURO']),
      taxaMulta: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_MULTA']),
      taxaDesconto: ValueSqlType.doubleType(data['${effectivePrefix}TAXA_DESCONTO']),
      valorJuro: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_JURO']),
      valorMulta: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_MULTA']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      valorRecebido: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_RECEBIDO']),
      numeroDocumento: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_DOCUMENTO']),
      historico: ValueSqlType.stringType(data['${effectivePrefix}HISTORICO']),
      statusRecebimento: ValueSqlType.stringType(
          data['${effectivePrefix}STATUS_RECEBIMENTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCliente != null) {
      map['ID_CLIENTE'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || idPdvVendaCabecalho != null) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho);
    }
    if (!nullToAbsent || dataLancamento != null) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento);
    }
    if (!nullToAbsent || dataVencimento != null) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento);
    }
    if (!nullToAbsent || dataRecebimento != null) {
      map['DATA_RECEBIMENTO'] = Variable<DateTime>(dataRecebimento);
    }
    if (!nullToAbsent || valorAReceber != null) {
      map['VALOR_A_RECEBER'] = Variable<double>(valorAReceber);
    }
    if (!nullToAbsent || taxaJuro != null) {
      map['TAXA_JURO'] = Variable<double>(taxaJuro);
    }
    if (!nullToAbsent || taxaMulta != null) {
      map['TAXA_MULTA'] = Variable<double>(taxaMulta);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorJuro != null) {
      map['VALOR_JURO'] = Variable<double>(valorJuro);
    }
    if (!nullToAbsent || valorMulta != null) {
      map['VALOR_MULTA'] = Variable<double>(valorMulta);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorRecebido != null) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido);
    }
    if (!nullToAbsent || numeroDocumento != null) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento);
    }
    if (!nullToAbsent || historico != null) {
      map['HISTORICO'] = Variable<String>(historico);
    }
    if (!nullToAbsent || statusRecebimento != null) {
      map['STATUS_RECEBIMENTO'] = Variable<String>(statusRecebimento);
    }
    return map;
  }

  ContasRecebersCompanion toCompanion(bool nullToAbsent) {
    return ContasRecebersCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCliente: idCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(idCliente),
      idPdvVendaCabecalho: idPdvVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvVendaCabecalho),
      dataLancamento: dataLancamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataLancamento),
      dataVencimento: dataVencimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVencimento),
      dataRecebimento: dataRecebimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRecebimento),
      valorAReceber: valorAReceber == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAReceber),
      taxaJuro: taxaJuro == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaJuro),
      taxaMulta: taxaMulta == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaMulta),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorJuro: valorJuro == null && nullToAbsent
          ? const Value.absent()
          : Value(valorJuro),
      valorMulta: valorMulta == null && nullToAbsent
          ? const Value.absent()
          : Value(valorMulta),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorRecebido: valorRecebido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRecebido),
      numeroDocumento: numeroDocumento == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroDocumento),
      historico: historico == null && nullToAbsent
          ? const Value.absent()
          : Value(historico),
      statusRecebimento: statusRecebimento == null && nullToAbsent
          ? const Value.absent()
          : Value(statusRecebimento),
    );
  }

  factory ContasReceber.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return ContasReceber(
      id: serializer.fromJson<int?>(json['id']),
      idCliente: serializer.fromJson<int?>(json['idCliente']),
      idPdvVendaCabecalho:
          serializer.fromJson<int?>(json['idPdvVendaCabecalho']),
      dataLancamento: serializer.fromJson<DateTime?>(json['dataLancamento']),
      dataVencimento: serializer.fromJson<DateTime?>(json['dataVencimento']),
      dataRecebimento: serializer.fromJson<DateTime?>(json['dataRecebimento']),
      valorAReceber: serializer.fromJson<double?>(json['valorAReceber']),
      taxaJuro: serializer.fromJson<double?>(json['taxaJuro']),
      taxaMulta: serializer.fromJson<double?>(json['taxaMulta']),
      taxaDesconto: serializer.fromJson<double?>(json['taxaDesconto']),
      valorJuro: serializer.fromJson<double?>(json['valorJuro']),
      valorMulta: serializer.fromJson<double?>(json['valorMulta']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorRecebido: serializer.fromJson<double?>(json['valorRecebido']),
      numeroDocumento: serializer.fromJson<String?>(json['numeroDocumento']),
      historico: serializer.fromJson<String?>(json['historico']),
      statusRecebimento:
          serializer.fromJson<String?>(json['statusRecebimento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idCliente': serializer.toJson<int?>(idCliente),
      'idPdvVendaCabecalho': serializer.toJson<int?>(idPdvVendaCabecalho),
      'dataLancamento': serializer.toJson<DateTime?>(dataLancamento),
      'dataVencimento': serializer.toJson<DateTime?>(dataVencimento),
      'dataRecebimento': serializer.toJson<DateTime?>(dataRecebimento),
      'valorAReceber': serializer.toJson<double?>(valorAReceber),
      'taxaJuro': serializer.toJson<double?>(taxaJuro),
      'taxaMulta': serializer.toJson<double?>(taxaMulta),
      'taxaDesconto': serializer.toJson<double?>(taxaDesconto),
      'valorJuro': serializer.toJson<double?>(valorJuro),
      'valorMulta': serializer.toJson<double?>(valorMulta),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorRecebido': serializer.toJson<double?>(valorRecebido),
      'numeroDocumento': serializer.toJson<String?>(numeroDocumento),
      'historico': serializer.toJson<String?>(historico),
      'statusRecebimento': serializer.toJson<String?>(statusRecebimento),
    };
  }

  ContasReceber copyWith(
          {int? id,
          int? idCliente,
          int? idPdvVendaCabecalho,
          DateTime? dataLancamento,
          DateTime? dataVencimento,
          DateTime? dataRecebimento,
          double? valorAReceber,
          double? taxaJuro,
          double? taxaMulta,
          double? taxaDesconto,
          double? valorJuro,
          double? valorMulta,
          double? valorDesconto,
          double? valorRecebido,
          String? numeroDocumento,
          String? historico,
          String? statusRecebimento}) =>
      ContasReceber(
        id: id ?? this.id,
        idCliente: idCliente ?? this.idCliente,
        idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
        dataLancamento: dataLancamento ?? this.dataLancamento,
        dataVencimento: dataVencimento ?? this.dataVencimento,
        dataRecebimento: dataRecebimento ?? this.dataRecebimento,
        valorAReceber: valorAReceber ?? this.valorAReceber,
        taxaJuro: taxaJuro ?? this.taxaJuro,
        taxaMulta: taxaMulta ?? this.taxaMulta,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorJuro: valorJuro ?? this.valorJuro,
        valorMulta: valorMulta ?? this.valorMulta,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorRecebido: valorRecebido ?? this.valorRecebido,
        numeroDocumento: numeroDocumento ?? this.numeroDocumento,
        historico: historico ?? this.historico,
        statusRecebimento: statusRecebimento ?? this.statusRecebimento,
      );
  @override
  String toString() {
    return (StringBuffer('ContasReceber(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('dataLancamento: $dataLancamento, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('dataRecebimento: $dataRecebimento, ')
          ..write('valorAReceber: $valorAReceber, ')
          ..write('taxaJuro: $taxaJuro, ')
          ..write('taxaMulta: $taxaMulta, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorJuro: $valorJuro, ')
          ..write('valorMulta: $valorMulta, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('historico: $historico, ')
          ..write('statusRecebimento: $statusRecebimento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idCliente,
      idPdvVendaCabecalho,
      dataLancamento,
      dataVencimento,
      dataRecebimento,
      valorAReceber,
      taxaJuro,
      taxaMulta,
      taxaDesconto,
      valorJuro,
      valorMulta,
      valorDesconto,
      valorRecebido,
      numeroDocumento,
      historico,
      statusRecebimento);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is ContasReceber &&
          other.id == this.id &&
          other.idCliente == this.idCliente &&
          other.idPdvVendaCabecalho == this.idPdvVendaCabecalho &&
          other.dataLancamento == this.dataLancamento &&
          other.dataVencimento == this.dataVencimento &&
          other.dataRecebimento == this.dataRecebimento &&
          other.valorAReceber == this.valorAReceber &&
          other.taxaJuro == this.taxaJuro &&
          other.taxaMulta == this.taxaMulta &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorJuro == this.valorJuro &&
          other.valorMulta == this.valorMulta &&
          other.valorDesconto == this.valorDesconto &&
          other.valorRecebido == this.valorRecebido &&
          other.numeroDocumento == this.numeroDocumento &&
          other.historico == this.historico &&
          other.statusRecebimento == this.statusRecebimento);
}

class ContasRecebersCompanion extends UpdateCompanion<ContasReceber> {
  final Value<int?> id;
  final Value<int?> idCliente;
  final Value<int?> idPdvVendaCabecalho;
  final Value<DateTime?> dataLancamento;
  final Value<DateTime?> dataVencimento;
  final Value<DateTime?> dataRecebimento;
  final Value<double?> valorAReceber;
  final Value<double?> taxaJuro;
  final Value<double?> taxaMulta;
  final Value<double?> taxaDesconto;
  final Value<double?> valorJuro;
  final Value<double?> valorMulta;
  final Value<double?> valorDesconto;
  final Value<double?> valorRecebido;
  final Value<String?> numeroDocumento;
  final Value<String?> historico;
  final Value<String?> statusRecebimento;
  const ContasRecebersCompanion({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.dataLancamento = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.dataRecebimento = const Value.absent(),
    this.valorAReceber = const Value.absent(),
    this.taxaJuro = const Value.absent(),
    this.taxaMulta = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorJuro = const Value.absent(),
    this.valorMulta = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.historico = const Value.absent(),
    this.statusRecebimento = const Value.absent(),
  });
  ContasRecebersCompanion.insert({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.dataLancamento = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.dataRecebimento = const Value.absent(),
    this.valorAReceber = const Value.absent(),
    this.taxaJuro = const Value.absent(),
    this.taxaMulta = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorJuro = const Value.absent(),
    this.valorMulta = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.historico = const Value.absent(),
    this.statusRecebimento = const Value.absent(),
  });
  static Insertable<ContasReceber> custom({
    Expression<int>? id,
    Expression<int>? idCliente,
    Expression<int>? idPdvVendaCabecalho,
    Expression<DateTime>? dataLancamento,
    Expression<DateTime>? dataVencimento,
    Expression<DateTime>? dataRecebimento,
    Expression<double>? valorAReceber,
    Expression<double>? taxaJuro,
    Expression<double>? taxaMulta,
    Expression<double>? taxaDesconto,
    Expression<double>? valorJuro,
    Expression<double>? valorMulta,
    Expression<double>? valorDesconto,
    Expression<double>? valorRecebido,
    Expression<String>? numeroDocumento,
    Expression<String>? historico,
    Expression<String>? statusRecebimento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCliente != null) 'ID_CLIENTE': idCliente,
      if (idPdvVendaCabecalho != null)
        'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
      if (dataLancamento != null) 'DATA_LANCAMENTO': dataLancamento,
      if (dataVencimento != null) 'DATA_VENCIMENTO': dataVencimento,
      if (dataRecebimento != null) 'DATA_RECEBIMENTO': dataRecebimento,
      if (valorAReceber != null) 'VALOR_A_RECEBER': valorAReceber,
      if (taxaJuro != null) 'TAXA_JURO': taxaJuro,
      if (taxaMulta != null) 'TAXA_MULTA': taxaMulta,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorJuro != null) 'VALOR_JURO': valorJuro,
      if (valorMulta != null) 'VALOR_MULTA': valorMulta,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
      if (numeroDocumento != null) 'NUMERO_DOCUMENTO': numeroDocumento,
      if (historico != null) 'HISTORICO': historico,
      if (statusRecebimento != null) 'STATUS_RECEBIMENTO': statusRecebimento,
    });
  }

  ContasRecebersCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idCliente,
      Value<int?>? idPdvVendaCabecalho,
      Value<DateTime?>? dataLancamento,
      Value<DateTime?>? dataVencimento,
      Value<DateTime?>? dataRecebimento,
      Value<double?>? valorAReceber,
      Value<double?>? taxaJuro,
      Value<double?>? taxaMulta,
      Value<double?>? taxaDesconto,
      Value<double?>? valorJuro,
      Value<double?>? valorMulta,
      Value<double?>? valorDesconto,
      Value<double?>? valorRecebido,
      Value<String?>? numeroDocumento,
      Value<String?>? historico,
      Value<String?>? statusRecebimento}) {
    return ContasRecebersCompanion(
      id: id ?? this.id,
      idCliente: idCliente ?? this.idCliente,
      idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
      dataLancamento: dataLancamento ?? this.dataLancamento,
      dataVencimento: dataVencimento ?? this.dataVencimento,
      dataRecebimento: dataRecebimento ?? this.dataRecebimento,
      valorAReceber: valorAReceber ?? this.valorAReceber,
      taxaJuro: taxaJuro ?? this.taxaJuro,
      taxaMulta: taxaMulta ?? this.taxaMulta,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorJuro: valorJuro ?? this.valorJuro,
      valorMulta: valorMulta ?? this.valorMulta,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorRecebido: valorRecebido ?? this.valorRecebido,
      numeroDocumento: numeroDocumento ?? this.numeroDocumento,
      historico: historico ?? this.historico,
      statusRecebimento: statusRecebimento ?? this.statusRecebimento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCliente.present) {
      map['ID_CLIENTE'] = Variable<int>(idCliente.value);
    }
    if (idPdvVendaCabecalho.present) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho.value);
    }
    if (dataLancamento.present) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento.value);
    }
    if (dataVencimento.present) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento.value);
    }
    if (dataRecebimento.present) {
      map['DATA_RECEBIMENTO'] = Variable<DateTime>(dataRecebimento.value);
    }
    if (valorAReceber.present) {
      map['VALOR_A_RECEBER'] = Variable<double>(valorAReceber.value);
    }
    if (taxaJuro.present) {
      map['TAXA_JURO'] = Variable<double>(taxaJuro.value);
    }
    if (taxaMulta.present) {
      map['TAXA_MULTA'] = Variable<double>(taxaMulta.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorJuro.present) {
      map['VALOR_JURO'] = Variable<double>(valorJuro.value);
    }
    if (valorMulta.present) {
      map['VALOR_MULTA'] = Variable<double>(valorMulta.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorRecebido.present) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido.value);
    }
    if (numeroDocumento.present) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento.value);
    }
    if (historico.present) {
      map['HISTORICO'] = Variable<String>(historico.value);
    }
    if (statusRecebimento.present) {
      map['STATUS_RECEBIMENTO'] = Variable<String>(statusRecebimento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContasRecebersCompanion(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('dataLancamento: $dataLancamento, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('dataRecebimento: $dataRecebimento, ')
          ..write('valorAReceber: $valorAReceber, ')
          ..write('taxaJuro: $taxaJuro, ')
          ..write('taxaMulta: $taxaMulta, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorJuro: $valorJuro, ')
          ..write('valorMulta: $valorMulta, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('historico: $historico, ')
          ..write('statusRecebimento: $statusRecebimento')
          ..write(')'))
        .toString();
  }
}

class $ContasRecebersTable extends ContasRecebers
    with TableInfo<$ContasRecebersTable, ContasReceber> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $ContasRecebersTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
  @override
  late final GeneratedColumn<int> idCliente = GeneratedColumn<int>(
      'ID_CLIENTE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
  final VerificationMeta _idPdvVendaCabecalhoMeta =
      const VerificationMeta('idPdvVendaCabecalho');
  @override
  late final GeneratedColumn<int> idPdvVendaCabecalho = GeneratedColumn<int>(
      'ID_PDV_VENDA_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
  final VerificationMeta _dataLancamentoMeta =
      const VerificationMeta('dataLancamento');
  @override
  late final GeneratedColumn<DateTime> dataLancamento =
      GeneratedColumn<DateTime>('DATA_LANCAMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataVencimentoMeta =
      const VerificationMeta('dataVencimento');
  @override
  late final GeneratedColumn<DateTime> dataVencimento =
      GeneratedColumn<DateTime>('DATA_VENCIMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataRecebimentoMeta =
      const VerificationMeta('dataRecebimento');
  @override
  late final GeneratedColumn<DateTime> dataRecebimento =
      GeneratedColumn<DateTime>('DATA_RECEBIMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _valorAReceberMeta =
      const VerificationMeta('valorAReceber');
  @override
  late final GeneratedColumn<double> valorAReceber = GeneratedColumn<double>(
      'VALOR_A_RECEBER', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaJuroMeta = const VerificationMeta('taxaJuro');
  @override
  late final GeneratedColumn<double> taxaJuro = GeneratedColumn<double>(
      'TAXA_JURO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaMultaMeta = const VerificationMeta('taxaMulta');
  @override
  late final GeneratedColumn<double> taxaMulta = GeneratedColumn<double>(
      'TAXA_MULTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  @override
  late final GeneratedColumn<double> taxaDesconto = GeneratedColumn<double>(
      'TAXA_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorJuroMeta = const VerificationMeta('valorJuro');
  @override
  late final GeneratedColumn<double> valorJuro = GeneratedColumn<double>(
      'VALOR_JURO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorMultaMeta = const VerificationMeta('valorMulta');
  @override
  late final GeneratedColumn<double> valorMulta = GeneratedColumn<double>(
      'VALOR_MULTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorRecebidoMeta =
      const VerificationMeta('valorRecebido');
  @override
  late final GeneratedColumn<double> valorRecebido = GeneratedColumn<double>(
      'VALOR_RECEBIDO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _numeroDocumentoMeta =
      const VerificationMeta('numeroDocumento');
  @override
  late final GeneratedColumn<String> numeroDocumento =
      GeneratedColumn<String>('NUMERO_DOCUMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 50),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _historicoMeta = const VerificationMeta('historico');
  @override
  late final GeneratedColumn<String> historico = GeneratedColumn<String>(
      'HISTORICO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _statusRecebimentoMeta =
      const VerificationMeta('statusRecebimento');
  @override
  late final GeneratedColumn<String> statusRecebimento =
      GeneratedColumn<String>('STATUS_RECEBIMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCliente,
        idPdvVendaCabecalho,
        dataLancamento,
        dataVencimento,
        dataRecebimento,
        valorAReceber,
        taxaJuro,
        taxaMulta,
        taxaDesconto,
        valorJuro,
        valorMulta,
        valorDesconto,
        valorRecebido,
        numeroDocumento,
        historico,
        statusRecebimento
      ];
  @override
  String get aliasedName => _alias ?? 'CONTAS_RECEBER';
  @override
  String get actualTableName => 'CONTAS_RECEBER';
  @override
  VerificationContext validateIntegrity(Insertable<ContasReceber> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_CLIENTE')) {
      context.handle(_idClienteMeta,
          idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
    }
    if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
      context.handle(
          _idPdvVendaCabecalhoMeta,
          idPdvVendaCabecalho.isAcceptableOrUnknown(
              data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
    }
    if (data.containsKey('DATA_LANCAMENTO')) {
      context.handle(
          _dataLancamentoMeta,
          dataLancamento.isAcceptableOrUnknown(
              data['DATA_LANCAMENTO']!, _dataLancamentoMeta));
    }
    if (data.containsKey('DATA_VENCIMENTO')) {
      context.handle(
          _dataVencimentoMeta,
          dataVencimento.isAcceptableOrUnknown(
              data['DATA_VENCIMENTO']!, _dataVencimentoMeta));
    }
    if (data.containsKey('DATA_RECEBIMENTO')) {
      context.handle(
          _dataRecebimentoMeta,
          dataRecebimento.isAcceptableOrUnknown(
              data['DATA_RECEBIMENTO']!, _dataRecebimentoMeta));
    }
    if (data.containsKey('VALOR_A_RECEBER')) {
      context.handle(
          _valorAReceberMeta,
          valorAReceber.isAcceptableOrUnknown(
              data['VALOR_A_RECEBER']!, _valorAReceberMeta));
    }
    if (data.containsKey('TAXA_JURO')) {
      context.handle(_taxaJuroMeta,
          taxaJuro.isAcceptableOrUnknown(data['TAXA_JURO']!, _taxaJuroMeta));
    }
    if (data.containsKey('TAXA_MULTA')) {
      context.handle(_taxaMultaMeta,
          taxaMulta.isAcceptableOrUnknown(data['TAXA_MULTA']!, _taxaMultaMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO']!, _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_JURO')) {
      context.handle(_valorJuroMeta,
          valorJuro.isAcceptableOrUnknown(data['VALOR_JURO']!, _valorJuroMeta));
    }
    if (data.containsKey('VALOR_MULTA')) {
      context.handle(
          _valorMultaMeta,
          valorMulta.isAcceptableOrUnknown(
              data['VALOR_MULTA']!, _valorMultaMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_RECEBIDO')) {
      context.handle(
          _valorRecebidoMeta,
          valorRecebido.isAcceptableOrUnknown(
              data['VALOR_RECEBIDO']!, _valorRecebidoMeta));
    }
    if (data.containsKey('NUMERO_DOCUMENTO')) {
      context.handle(
          _numeroDocumentoMeta,
          numeroDocumento.isAcceptableOrUnknown(
              data['NUMERO_DOCUMENTO']!, _numeroDocumentoMeta));
    }
    if (data.containsKey('HISTORICO')) {
      context.handle(_historicoMeta,
          historico.isAcceptableOrUnknown(data['HISTORICO']!, _historicoMeta));
    }
    if (data.containsKey('STATUS_RECEBIMENTO')) {
      context.handle(
          _statusRecebimentoMeta,
          statusRecebimento.isAcceptableOrUnknown(
              data['STATUS_RECEBIMENTO']!, _statusRecebimentoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ContasReceber map(Map<String, dynamic> data, {String? tablePrefix}) {
    return ContasReceber.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $ContasRecebersTable createAlias(String alias) {
    return $ContasRecebersTable(attachedDatabase, alias);
  }
}

class Cozinha extends DataClass implements Insertable<Cozinha> {
  final int? id;
  final String? nome;
  final String? impressoraNome;
  final String? impressoraEndereco;
  Cozinha({this.id, this.nome, this.impressoraNome, this.impressoraEndereco});
  factory Cozinha.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Cozinha(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      impressoraNome: ValueSqlType.stringType(data['${effectivePrefix}IMPRESSORA_NOME']),
      impressoraEndereco: ValueSqlType.stringType(
          data['${effectivePrefix}IMPRESSORA_ENDERECO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || impressoraNome != null) {
      map['IMPRESSORA_NOME'] = Variable<String>(impressoraNome);
    }
    if (!nullToAbsent || impressoraEndereco != null) {
      map['IMPRESSORA_ENDERECO'] = Variable<String>(impressoraEndereco);
    }
    return map;
  }

  CozinhasCompanion toCompanion(bool nullToAbsent) {
    return CozinhasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      impressoraNome: impressoraNome == null && nullToAbsent
          ? const Value.absent()
          : Value(impressoraNome),
      impressoraEndereco: impressoraEndereco == null && nullToAbsent
          ? const Value.absent()
          : Value(impressoraEndereco),
    );
  }

  factory Cozinha.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Cozinha(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      impressoraNome: serializer.fromJson<String?>(json['impressoraNome']),
      impressoraEndereco:
          serializer.fromJson<String?>(json['impressoraEndereco']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'impressoraNome': serializer.toJson<String?>(impressoraNome),
      'impressoraEndereco': serializer.toJson<String?>(impressoraEndereco),
    };
  }

  Cozinha copyWith(
          {int? id,
          String? nome,
          String? impressoraNome,
          String? impressoraEndereco}) =>
      Cozinha(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        impressoraNome: impressoraNome ?? this.impressoraNome,
        impressoraEndereco: impressoraEndereco ?? this.impressoraEndereco,
      );
  @override
  String toString() {
    return (StringBuffer('Cozinha(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('impressoraNome: $impressoraNome, ')
          ..write('impressoraEndereco: $impressoraEndereco')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, nome, impressoraNome, impressoraEndereco);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Cozinha &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.impressoraNome == this.impressoraNome &&
          other.impressoraEndereco == this.impressoraEndereco);
}

class CozinhasCompanion extends UpdateCompanion<Cozinha> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> impressoraNome;
  final Value<String?> impressoraEndereco;
  const CozinhasCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.impressoraNome = const Value.absent(),
    this.impressoraEndereco = const Value.absent(),
  });
  CozinhasCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.impressoraNome = const Value.absent(),
    this.impressoraEndereco = const Value.absent(),
  });
  static Insertable<Cozinha> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? impressoraNome,
    Expression<String>? impressoraEndereco,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (impressoraNome != null) 'IMPRESSORA_NOME': impressoraNome,
      if (impressoraEndereco != null) 'IMPRESSORA_ENDERECO': impressoraEndereco,
    });
  }

  CozinhasCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? nome,
      Value<String?>? impressoraNome,
      Value<String?>? impressoraEndereco}) {
    return CozinhasCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      impressoraNome: impressoraNome ?? this.impressoraNome,
      impressoraEndereco: impressoraEndereco ?? this.impressoraEndereco,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (impressoraNome.present) {
      map['IMPRESSORA_NOME'] = Variable<String>(impressoraNome.value);
    }
    if (impressoraEndereco.present) {
      map['IMPRESSORA_ENDERECO'] = Variable<String>(impressoraEndereco.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CozinhasCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('impressoraNome: $impressoraNome, ')
          ..write('impressoraEndereco: $impressoraEndereco')
          ..write(')'))
        .toString();
  }
}

class $CozinhasTable extends Cozinhas with TableInfo<$CozinhasTable, Cozinha> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $CozinhasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _impressoraNomeMeta =
      const VerificationMeta('impressoraNome');
  @override
  late final GeneratedColumn<String> impressoraNome = GeneratedColumn<String>(
      'IMPRESSORA_NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _impressoraEnderecoMeta =
      const VerificationMeta('impressoraEndereco');
  @override
  late final GeneratedColumn<String> impressoraEndereco =
      GeneratedColumn<String>(
          'IMPRESSORA_ENDERECO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, nome, impressoraNome, impressoraEndereco];
  @override
  String get aliasedName => _alias ?? 'COZINHA';
  @override
  String get actualTableName => 'COZINHA';
  @override
  VerificationContext validateIntegrity(Insertable<Cozinha> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('IMPRESSORA_NOME')) {
      context.handle(
          _impressoraNomeMeta,
          impressoraNome.isAcceptableOrUnknown(
              data['IMPRESSORA_NOME']!, _impressoraNomeMeta));
    }
    if (data.containsKey('IMPRESSORA_ENDERECO')) {
      context.handle(
          _impressoraEnderecoMeta,
          impressoraEndereco.isAcceptableOrUnknown(
              data['IMPRESSORA_ENDERECO']!, _impressoraEnderecoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Cozinha map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Cozinha.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $CozinhasTable createAlias(String alias) {
    return $CozinhasTable(attachedDatabase, alias);
  }
}

class Delivery extends DataClass implements Insertable<Delivery> {
  final int? id;
  final int? idComanda;
  final int? idTaxaEntrega;
  final int? idColaborador;
  final String? nomeCliente;
  final String? telefonePrincipal;
  final String? telefoneRecado;
  final String? celular;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? cep;
  final String? bairro;
  final String? cidade;
  final String? uf;
  final double? valorFrete;
  final double? valorRecebido;
  final double? valorAReceber;
  final double? valorSolicitadoTroco;
  final DateTime? previsaoPreparo;
  final DateTime? inicioPreparo;
  final DateTime? previsaoEntrega;
  final DateTime? saiuParaEntrega;
  final DateTime? entregue;
  final DateTime? previsaoRetirada;
  final DateTime? prontoParaRetirada;
  final DateTime? retirou;
  Delivery(
      {this.id,
      this.idComanda,
      this.idTaxaEntrega,
      this.idColaborador,
      this.nomeCliente,
      this.telefonePrincipal,
      this.telefoneRecado,
      this.celular,
      this.logradouro,
      this.numero,
      this.complemento,
      this.cep,
      this.bairro,
      this.cidade,
      this.uf,
      this.valorFrete,
      this.valorRecebido,
      this.valorAReceber,
      this.valorSolicitadoTroco,
      this.previsaoPreparo,
      this.inicioPreparo,
      this.previsaoEntrega,
      this.saiuParaEntrega,
      this.entregue,
      this.previsaoRetirada,
      this.prontoParaRetirada,
      this.retirou});
  factory Delivery.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Delivery(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idComanda: ValueSqlType.intType(data['${effectivePrefix}ID_COMANDA']),
      idTaxaEntrega: ValueSqlType.intType(data['${effectivePrefix}ID_TAXA_ENTREGA']),
      idColaborador: ValueSqlType.intType(data['${effectivePrefix}ID_COLABORADOR']),
      nomeCliente: ValueSqlType.stringType(data['${effectivePrefix}NOME_CLIENTE']),
      telefonePrincipal: ValueSqlType.stringType(
          data['${effectivePrefix}TELEFONE_PRINCIPAL']),
      telefoneRecado: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE_RECADO']),
      celular: ValueSqlType.stringType(data['${effectivePrefix}CELULAR']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      cidade: ValueSqlType.stringType(data['${effectivePrefix}CIDADE']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      valorFrete: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_FRETE']),
      valorRecebido: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_RECEBIDO']),
      valorAReceber: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_A_RECEBER']),
      valorSolicitadoTroco: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_SOLICITADO_TROCO']),
      previsaoPreparo: ValueSqlType.dateTimeType(data['${effectivePrefix}PREVISAO_PREPARO']),
      inicioPreparo: ValueSqlType.dateTimeType(data['${effectivePrefix}INICIO_PREPARO']),
      previsaoEntrega: ValueSqlType.dateTimeType(data['${effectivePrefix}PREVISAO_ENTREGA']),
      saiuParaEntrega: ValueSqlType.dateTimeType(data['${effectivePrefix}SAIU_PARA_ENTREGA']),
      entregue: ValueSqlType.dateTimeType(data['${effectivePrefix}ENTREGUE']),
      previsaoRetirada: ValueSqlType.dateTimeType(data['${effectivePrefix}PREVISAO_RETIRADA']),
      prontoParaRetirada: ValueSqlType.dateTimeType(
          data['${effectivePrefix}PRONTO_PARA_RETIRADA']),
      retirou: ValueSqlType.dateTimeType(data['${effectivePrefix}RETIROU']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idComanda != null) {
      map['ID_COMANDA'] = Variable<int>(idComanda);
    }
    if (!nullToAbsent || idTaxaEntrega != null) {
      map['ID_TAXA_ENTREGA'] = Variable<int>(idTaxaEntrega);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || nomeCliente != null) {
      map['NOME_CLIENTE'] = Variable<String>(nomeCliente);
    }
    if (!nullToAbsent || telefonePrincipal != null) {
      map['TELEFONE_PRINCIPAL'] = Variable<String>(telefonePrincipal);
    }
    if (!nullToAbsent || telefoneRecado != null) {
      map['TELEFONE_RECADO'] = Variable<String>(telefoneRecado);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || valorFrete != null) {
      map['VALOR_FRETE'] = Variable<double>(valorFrete);
    }
    if (!nullToAbsent || valorRecebido != null) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido);
    }
    if (!nullToAbsent || valorAReceber != null) {
      map['VALOR_A_RECEBER'] = Variable<double>(valorAReceber);
    }
    if (!nullToAbsent || valorSolicitadoTroco != null) {
      map['VALOR_SOLICITADO_TROCO'] = Variable<double>(valorSolicitadoTroco);
    }
    if (!nullToAbsent || previsaoPreparo != null) {
      map['PREVISAO_PREPARO'] = Variable<DateTime>(previsaoPreparo);
    }
    if (!nullToAbsent || inicioPreparo != null) {
      map['INICIO_PREPARO'] = Variable<DateTime>(inicioPreparo);
    }
    if (!nullToAbsent || previsaoEntrega != null) {
      map['PREVISAO_ENTREGA'] = Variable<DateTime>(previsaoEntrega);
    }
    if (!nullToAbsent || saiuParaEntrega != null) {
      map['SAIU_PARA_ENTREGA'] = Variable<DateTime>(saiuParaEntrega);
    }
    if (!nullToAbsent || entregue != null) {
      map['ENTREGUE'] = Variable<DateTime>(entregue);
    }
    if (!nullToAbsent || previsaoRetirada != null) {
      map['PREVISAO_RETIRADA'] = Variable<DateTime>(previsaoRetirada);
    }
    if (!nullToAbsent || prontoParaRetirada != null) {
      map['PRONTO_PARA_RETIRADA'] = Variable<DateTime>(prontoParaRetirada);
    }
    if (!nullToAbsent || retirou != null) {
      map['RETIROU'] = Variable<DateTime>(retirou);
    }
    return map;
  }

  DeliverysCompanion toCompanion(bool nullToAbsent) {
    return DeliverysCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idComanda: idComanda == null && nullToAbsent
          ? const Value.absent()
          : Value(idComanda),
      idTaxaEntrega: idTaxaEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(idTaxaEntrega),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      nomeCliente: nomeCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeCliente),
      telefonePrincipal: telefonePrincipal == null && nullToAbsent
          ? const Value.absent()
          : Value(telefonePrincipal),
      telefoneRecado: telefoneRecado == null && nullToAbsent
          ? const Value.absent()
          : Value(telefoneRecado),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      valorFrete: valorFrete == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFrete),
      valorRecebido: valorRecebido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRecebido),
      valorAReceber: valorAReceber == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAReceber),
      valorSolicitadoTroco: valorSolicitadoTroco == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSolicitadoTroco),
      previsaoPreparo: previsaoPreparo == null && nullToAbsent
          ? const Value.absent()
          : Value(previsaoPreparo),
      inicioPreparo: inicioPreparo == null && nullToAbsent
          ? const Value.absent()
          : Value(inicioPreparo),
      previsaoEntrega: previsaoEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(previsaoEntrega),
      saiuParaEntrega: saiuParaEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(saiuParaEntrega),
      entregue: entregue == null && nullToAbsent
          ? const Value.absent()
          : Value(entregue),
      previsaoRetirada: previsaoRetirada == null && nullToAbsent
          ? const Value.absent()
          : Value(previsaoRetirada),
      prontoParaRetirada: prontoParaRetirada == null && nullToAbsent
          ? const Value.absent()
          : Value(prontoParaRetirada),
      retirou: retirou == null && nullToAbsent
          ? const Value.absent()
          : Value(retirou),
    );
  }

  factory Delivery.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Delivery(
      id: serializer.fromJson<int?>(json['id']),
      idComanda: serializer.fromJson<int?>(json['idComanda']),
      idTaxaEntrega: serializer.fromJson<int?>(json['idTaxaEntrega']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      nomeCliente: serializer.fromJson<String?>(json['nomeCliente']),
      telefonePrincipal:
          serializer.fromJson<String?>(json['telefonePrincipal']),
      telefoneRecado: serializer.fromJson<String?>(json['telefoneRecado']),
      celular: serializer.fromJson<String?>(json['celular']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      cep: serializer.fromJson<String?>(json['cep']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      cidade: serializer.fromJson<String?>(json['cidade']),
      uf: serializer.fromJson<String?>(json['uf']),
      valorFrete: serializer.fromJson<double?>(json['valorFrete']),
      valorRecebido: serializer.fromJson<double?>(json['valorRecebido']),
      valorAReceber: serializer.fromJson<double?>(json['valorAReceber']),
      valorSolicitadoTroco:
          serializer.fromJson<double?>(json['valorSolicitadoTroco']),
      previsaoPreparo: serializer.fromJson<DateTime?>(json['previsaoPreparo']),
      inicioPreparo: serializer.fromJson<DateTime?>(json['inicioPreparo']),
      previsaoEntrega: serializer.fromJson<DateTime?>(json['previsaoEntrega']),
      saiuParaEntrega: serializer.fromJson<DateTime?>(json['saiuParaEntrega']),
      entregue: serializer.fromJson<DateTime?>(json['entregue']),
      previsaoRetirada:
          serializer.fromJson<DateTime?>(json['previsaoRetirada']),
      prontoParaRetirada:
          serializer.fromJson<DateTime?>(json['prontoParaRetirada']),
      retirou: serializer.fromJson<DateTime?>(json['retirou']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idComanda': serializer.toJson<int?>(idComanda),
      'idTaxaEntrega': serializer.toJson<int?>(idTaxaEntrega),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'nomeCliente': serializer.toJson<String?>(nomeCliente),
      'telefonePrincipal': serializer.toJson<String?>(telefonePrincipal),
      'telefoneRecado': serializer.toJson<String?>(telefoneRecado),
      'celular': serializer.toJson<String?>(celular),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'cep': serializer.toJson<String?>(cep),
      'bairro': serializer.toJson<String?>(bairro),
      'cidade': serializer.toJson<String?>(cidade),
      'uf': serializer.toJson<String?>(uf),
      'valorFrete': serializer.toJson<double?>(valorFrete),
      'valorRecebido': serializer.toJson<double?>(valorRecebido),
      'valorAReceber': serializer.toJson<double?>(valorAReceber),
      'valorSolicitadoTroco': serializer.toJson<double?>(valorSolicitadoTroco),
      'previsaoPreparo': serializer.toJson<DateTime?>(previsaoPreparo),
      'inicioPreparo': serializer.toJson<DateTime?>(inicioPreparo),
      'previsaoEntrega': serializer.toJson<DateTime?>(previsaoEntrega),
      'saiuParaEntrega': serializer.toJson<DateTime?>(saiuParaEntrega),
      'entregue': serializer.toJson<DateTime?>(entregue),
      'previsaoRetirada': serializer.toJson<DateTime?>(previsaoRetirada),
      'prontoParaRetirada': serializer.toJson<DateTime?>(prontoParaRetirada),
      'retirou': serializer.toJson<DateTime?>(retirou),
    };
  }

  Delivery copyWith(
          {int? id,
          int? idComanda,
          int? idTaxaEntrega,
          int? idColaborador,
          String? nomeCliente,
          String? telefonePrincipal,
          String? telefoneRecado,
          String? celular,
          String? logradouro,
          String? numero,
          String? complemento,
          String? cep,
          String? bairro,
          String? cidade,
          String? uf,
          double? valorFrete,
          double? valorRecebido,
          double? valorAReceber,
          double? valorSolicitadoTroco,
          DateTime? previsaoPreparo,
          DateTime? inicioPreparo,
          DateTime? previsaoEntrega,
          DateTime? saiuParaEntrega,
          DateTime? entregue,
          DateTime? previsaoRetirada,
          DateTime? prontoParaRetirada,
          DateTime? retirou}) =>
      Delivery(
        id: id ?? this.id,
        idComanda: idComanda ?? this.idComanda,
        idTaxaEntrega: idTaxaEntrega ?? this.idTaxaEntrega,
        idColaborador: idColaborador ?? this.idColaborador,
        nomeCliente: nomeCliente ?? this.nomeCliente,
        telefonePrincipal: telefonePrincipal ?? this.telefonePrincipal,
        telefoneRecado: telefoneRecado ?? this.telefoneRecado,
        celular: celular ?? this.celular,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        cep: cep ?? this.cep,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        valorFrete: valorFrete ?? this.valorFrete,
        valorRecebido: valorRecebido ?? this.valorRecebido,
        valorAReceber: valorAReceber ?? this.valorAReceber,
        valorSolicitadoTroco: valorSolicitadoTroco ?? this.valorSolicitadoTroco,
        previsaoPreparo: previsaoPreparo ?? this.previsaoPreparo,
        inicioPreparo: inicioPreparo ?? this.inicioPreparo,
        previsaoEntrega: previsaoEntrega ?? this.previsaoEntrega,
        saiuParaEntrega: saiuParaEntrega ?? this.saiuParaEntrega,
        entregue: entregue ?? this.entregue,
        previsaoRetirada: previsaoRetirada ?? this.previsaoRetirada,
        prontoParaRetirada: prontoParaRetirada ?? this.prontoParaRetirada,
        retirou: retirou ?? this.retirou,
      );
  @override
  String toString() {
    return (StringBuffer('Delivery(')
          ..write('id: $id, ')
          ..write('idComanda: $idComanda, ')
          ..write('idTaxaEntrega: $idTaxaEntrega, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('nomeCliente: $nomeCliente, ')
          ..write('telefonePrincipal: $telefonePrincipal, ')
          ..write('telefoneRecado: $telefoneRecado, ')
          ..write('celular: $celular, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('valorAReceber: $valorAReceber, ')
          ..write('valorSolicitadoTroco: $valorSolicitadoTroco, ')
          ..write('previsaoPreparo: $previsaoPreparo, ')
          ..write('inicioPreparo: $inicioPreparo, ')
          ..write('previsaoEntrega: $previsaoEntrega, ')
          ..write('saiuParaEntrega: $saiuParaEntrega, ')
          ..write('entregue: $entregue, ')
          ..write('previsaoRetirada: $previsaoRetirada, ')
          ..write('prontoParaRetirada: $prontoParaRetirada, ')
          ..write('retirou: $retirou')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idComanda,
        idTaxaEntrega,
        idColaborador,
        nomeCliente,
        telefonePrincipal,
        telefoneRecado,
        celular,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        valorFrete,
        valorRecebido,
        valorAReceber,
        valorSolicitadoTroco,
        previsaoPreparo,
        inicioPreparo,
        previsaoEntrega,
        saiuParaEntrega,
        entregue,
        previsaoRetirada,
        prontoParaRetirada,
        retirou
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Delivery &&
          other.id == this.id &&
          other.idComanda == this.idComanda &&
          other.idTaxaEntrega == this.idTaxaEntrega &&
          other.idColaborador == this.idColaborador &&
          other.nomeCliente == this.nomeCliente &&
          other.telefonePrincipal == this.telefonePrincipal &&
          other.telefoneRecado == this.telefoneRecado &&
          other.celular == this.celular &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.cep == this.cep &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.valorFrete == this.valorFrete &&
          other.valorRecebido == this.valorRecebido &&
          other.valorAReceber == this.valorAReceber &&
          other.valorSolicitadoTroco == this.valorSolicitadoTroco &&
          other.previsaoPreparo == this.previsaoPreparo &&
          other.inicioPreparo == this.inicioPreparo &&
          other.previsaoEntrega == this.previsaoEntrega &&
          other.saiuParaEntrega == this.saiuParaEntrega &&
          other.entregue == this.entregue &&
          other.previsaoRetirada == this.previsaoRetirada &&
          other.prontoParaRetirada == this.prontoParaRetirada &&
          other.retirou == this.retirou);
}

class DeliverysCompanion extends UpdateCompanion<Delivery> {
  final Value<int?> id;
  final Value<int?> idComanda;
  final Value<int?> idTaxaEntrega;
  final Value<int?> idColaborador;
  final Value<String?> nomeCliente;
  final Value<String?> telefonePrincipal;
  final Value<String?> telefoneRecado;
  final Value<String?> celular;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> cep;
  final Value<String?> bairro;
  final Value<String?> cidade;
  final Value<String?> uf;
  final Value<double?> valorFrete;
  final Value<double?> valorRecebido;
  final Value<double?> valorAReceber;
  final Value<double?> valorSolicitadoTroco;
  final Value<DateTime?> previsaoPreparo;
  final Value<DateTime?> inicioPreparo;
  final Value<DateTime?> previsaoEntrega;
  final Value<DateTime?> saiuParaEntrega;
  final Value<DateTime?> entregue;
  final Value<DateTime?> previsaoRetirada;
  final Value<DateTime?> prontoParaRetirada;
  final Value<DateTime?> retirou;
  const DeliverysCompanion({
    this.id = const Value.absent(),
    this.idComanda = const Value.absent(),
    this.idTaxaEntrega = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.nomeCliente = const Value.absent(),
    this.telefonePrincipal = const Value.absent(),
    this.telefoneRecado = const Value.absent(),
    this.celular = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.valorAReceber = const Value.absent(),
    this.valorSolicitadoTroco = const Value.absent(),
    this.previsaoPreparo = const Value.absent(),
    this.inicioPreparo = const Value.absent(),
    this.previsaoEntrega = const Value.absent(),
    this.saiuParaEntrega = const Value.absent(),
    this.entregue = const Value.absent(),
    this.previsaoRetirada = const Value.absent(),
    this.prontoParaRetirada = const Value.absent(),
    this.retirou = const Value.absent(),
  });
  DeliverysCompanion.insert({
    this.id = const Value.absent(),
    this.idComanda = const Value.absent(),
    this.idTaxaEntrega = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.nomeCliente = const Value.absent(),
    this.telefonePrincipal = const Value.absent(),
    this.telefoneRecado = const Value.absent(),
    this.celular = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.valorAReceber = const Value.absent(),
    this.valorSolicitadoTroco = const Value.absent(),
    this.previsaoPreparo = const Value.absent(),
    this.inicioPreparo = const Value.absent(),
    this.previsaoEntrega = const Value.absent(),
    this.saiuParaEntrega = const Value.absent(),
    this.entregue = const Value.absent(),
    this.previsaoRetirada = const Value.absent(),
    this.prontoParaRetirada = const Value.absent(),
    this.retirou = const Value.absent(),
  });
  static Insertable<Delivery> custom({
    Expression<int>? id,
    Expression<int>? idComanda,
    Expression<int>? idTaxaEntrega,
    Expression<int>? idColaborador,
    Expression<String>? nomeCliente,
    Expression<String>? telefonePrincipal,
    Expression<String>? telefoneRecado,
    Expression<String>? celular,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? cep,
    Expression<String>? bairro,
    Expression<String>? cidade,
    Expression<String>? uf,
    Expression<double>? valorFrete,
    Expression<double>? valorRecebido,
    Expression<double>? valorAReceber,
    Expression<double>? valorSolicitadoTroco,
    Expression<DateTime>? previsaoPreparo,
    Expression<DateTime>? inicioPreparo,
    Expression<DateTime>? previsaoEntrega,
    Expression<DateTime>? saiuParaEntrega,
    Expression<DateTime>? entregue,
    Expression<DateTime>? previsaoRetirada,
    Expression<DateTime>? prontoParaRetirada,
    Expression<DateTime>? retirou,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idComanda != null) 'ID_COMANDA': idComanda,
      if (idTaxaEntrega != null) 'ID_TAXA_ENTREGA': idTaxaEntrega,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (nomeCliente != null) 'NOME_CLIENTE': nomeCliente,
      if (telefonePrincipal != null) 'TELEFONE_PRINCIPAL': telefonePrincipal,
      if (telefoneRecado != null) 'TELEFONE_RECADO': telefoneRecado,
      if (celular != null) 'CELULAR': celular,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (cep != null) 'CEP': cep,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (valorFrete != null) 'VALOR_FRETE': valorFrete,
      if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
      if (valorAReceber != null) 'VALOR_A_RECEBER': valorAReceber,
      if (valorSolicitadoTroco != null)
        'VALOR_SOLICITADO_TROCO': valorSolicitadoTroco,
      if (previsaoPreparo != null) 'PREVISAO_PREPARO': previsaoPreparo,
      if (inicioPreparo != null) 'INICIO_PREPARO': inicioPreparo,
      if (previsaoEntrega != null) 'PREVISAO_ENTREGA': previsaoEntrega,
      if (saiuParaEntrega != null) 'SAIU_PARA_ENTREGA': saiuParaEntrega,
      if (entregue != null) 'ENTREGUE': entregue,
      if (previsaoRetirada != null) 'PREVISAO_RETIRADA': previsaoRetirada,
      if (prontoParaRetirada != null)
        'PRONTO_PARA_RETIRADA': prontoParaRetirada,
      if (retirou != null) 'RETIROU': retirou,
    });
  }

  DeliverysCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idComanda,
      Value<int?>? idTaxaEntrega,
      Value<int?>? idColaborador,
      Value<String?>? nomeCliente,
      Value<String?>? telefonePrincipal,
      Value<String?>? telefoneRecado,
      Value<String?>? celular,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? cep,
      Value<String?>? bairro,
      Value<String?>? cidade,
      Value<String?>? uf,
      Value<double?>? valorFrete,
      Value<double?>? valorRecebido,
      Value<double?>? valorAReceber,
      Value<double?>? valorSolicitadoTroco,
      Value<DateTime?>? previsaoPreparo,
      Value<DateTime?>? inicioPreparo,
      Value<DateTime?>? previsaoEntrega,
      Value<DateTime?>? saiuParaEntrega,
      Value<DateTime?>? entregue,
      Value<DateTime?>? previsaoRetirada,
      Value<DateTime?>? prontoParaRetirada,
      Value<DateTime?>? retirou}) {
    return DeliverysCompanion(
      id: id ?? this.id,
      idComanda: idComanda ?? this.idComanda,
      idTaxaEntrega: idTaxaEntrega ?? this.idTaxaEntrega,
      idColaborador: idColaborador ?? this.idColaborador,
      nomeCliente: nomeCliente ?? this.nomeCliente,
      telefonePrincipal: telefonePrincipal ?? this.telefonePrincipal,
      telefoneRecado: telefoneRecado ?? this.telefoneRecado,
      celular: celular ?? this.celular,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      cep: cep ?? this.cep,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      valorFrete: valorFrete ?? this.valorFrete,
      valorRecebido: valorRecebido ?? this.valorRecebido,
      valorAReceber: valorAReceber ?? this.valorAReceber,
      valorSolicitadoTroco: valorSolicitadoTroco ?? this.valorSolicitadoTroco,
      previsaoPreparo: previsaoPreparo ?? this.previsaoPreparo,
      inicioPreparo: inicioPreparo ?? this.inicioPreparo,
      previsaoEntrega: previsaoEntrega ?? this.previsaoEntrega,
      saiuParaEntrega: saiuParaEntrega ?? this.saiuParaEntrega,
      entregue: entregue ?? this.entregue,
      previsaoRetirada: previsaoRetirada ?? this.previsaoRetirada,
      prontoParaRetirada: prontoParaRetirada ?? this.prontoParaRetirada,
      retirou: retirou ?? this.retirou,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idComanda.present) {
      map['ID_COMANDA'] = Variable<int>(idComanda.value);
    }
    if (idTaxaEntrega.present) {
      map['ID_TAXA_ENTREGA'] = Variable<int>(idTaxaEntrega.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (nomeCliente.present) {
      map['NOME_CLIENTE'] = Variable<String>(nomeCliente.value);
    }
    if (telefonePrincipal.present) {
      map['TELEFONE_PRINCIPAL'] = Variable<String>(telefonePrincipal.value);
    }
    if (telefoneRecado.present) {
      map['TELEFONE_RECADO'] = Variable<String>(telefoneRecado.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (valorFrete.present) {
      map['VALOR_FRETE'] = Variable<double>(valorFrete.value);
    }
    if (valorRecebido.present) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido.value);
    }
    if (valorAReceber.present) {
      map['VALOR_A_RECEBER'] = Variable<double>(valorAReceber.value);
    }
    if (valorSolicitadoTroco.present) {
      map['VALOR_SOLICITADO_TROCO'] =
          Variable<double>(valorSolicitadoTroco.value);
    }
    if (previsaoPreparo.present) {
      map['PREVISAO_PREPARO'] = Variable<DateTime>(previsaoPreparo.value);
    }
    if (inicioPreparo.present) {
      map['INICIO_PREPARO'] = Variable<DateTime>(inicioPreparo.value);
    }
    if (previsaoEntrega.present) {
      map['PREVISAO_ENTREGA'] = Variable<DateTime>(previsaoEntrega.value);
    }
    if (saiuParaEntrega.present) {
      map['SAIU_PARA_ENTREGA'] = Variable<DateTime>(saiuParaEntrega.value);
    }
    if (entregue.present) {
      map['ENTREGUE'] = Variable<DateTime>(entregue.value);
    }
    if (previsaoRetirada.present) {
      map['PREVISAO_RETIRADA'] = Variable<DateTime>(previsaoRetirada.value);
    }
    if (prontoParaRetirada.present) {
      map['PRONTO_PARA_RETIRADA'] =
          Variable<DateTime>(prontoParaRetirada.value);
    }
    if (retirou.present) {
      map['RETIROU'] = Variable<DateTime>(retirou.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DeliverysCompanion(')
          ..write('id: $id, ')
          ..write('idComanda: $idComanda, ')
          ..write('idTaxaEntrega: $idTaxaEntrega, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('nomeCliente: $nomeCliente, ')
          ..write('telefonePrincipal: $telefonePrincipal, ')
          ..write('telefoneRecado: $telefoneRecado, ')
          ..write('celular: $celular, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('valorAReceber: $valorAReceber, ')
          ..write('valorSolicitadoTroco: $valorSolicitadoTroco, ')
          ..write('previsaoPreparo: $previsaoPreparo, ')
          ..write('inicioPreparo: $inicioPreparo, ')
          ..write('previsaoEntrega: $previsaoEntrega, ')
          ..write('saiuParaEntrega: $saiuParaEntrega, ')
          ..write('entregue: $entregue, ')
          ..write('previsaoRetirada: $previsaoRetirada, ')
          ..write('prontoParaRetirada: $prontoParaRetirada, ')
          ..write('retirou: $retirou')
          ..write(')'))
        .toString();
  }
}

class $DeliverysTable extends Deliverys
    with TableInfo<$DeliverysTable, Delivery> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $DeliverysTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idComandaMeta = const VerificationMeta('idComanda');
  @override
  late final GeneratedColumn<int> idComanda = GeneratedColumn<int>(
      'ID_COMANDA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COMANDA(ID)');
  final VerificationMeta _idTaxaEntregaMeta =
      const VerificationMeta('idTaxaEntrega');
  @override
  late final GeneratedColumn<int> idTaxaEntrega = GeneratedColumn<int>(
      'ID_TAXA_ENTREGA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES TAXA_ENTREGA(ID)');
  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
      'ID_COLABORADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  final VerificationMeta _nomeClienteMeta =
      const VerificationMeta('nomeCliente');
  @override
  late final GeneratedColumn<String> nomeCliente = GeneratedColumn<String>(
      'NOME_CLIENTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefonePrincipalMeta =
      const VerificationMeta('telefonePrincipal');
  @override
  late final GeneratedColumn<String> telefonePrincipal =
      GeneratedColumn<String>('TELEFONE_PRINCIPAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 15),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _telefoneRecadoMeta =
      const VerificationMeta('telefoneRecado');
  @override
  late final GeneratedColumn<String> telefoneRecado = GeneratedColumn<String>(
      'TELEFONE_RECADO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  @override
  late final GeneratedColumn<String> celular = GeneratedColumn<String>(
      'CELULAR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  @override
  late final GeneratedColumn<String> cidade = GeneratedColumn<String>(
      'CIDADE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorFreteMeta = const VerificationMeta('valorFrete');
  @override
  late final GeneratedColumn<double> valorFrete = GeneratedColumn<double>(
      'VALOR_FRETE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorRecebidoMeta =
      const VerificationMeta('valorRecebido');
  @override
  late final GeneratedColumn<double> valorRecebido = GeneratedColumn<double>(
      'VALOR_RECEBIDO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorAReceberMeta =
      const VerificationMeta('valorAReceber');
  @override
  late final GeneratedColumn<double> valorAReceber = GeneratedColumn<double>(
      'VALOR_A_RECEBER', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorSolicitadoTrocoMeta =
      const VerificationMeta('valorSolicitadoTroco');
  @override
  late final GeneratedColumn<double> valorSolicitadoTroco =
      GeneratedColumn<double>('VALOR_SOLICITADO_TROCO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _previsaoPreparoMeta =
      const VerificationMeta('previsaoPreparo');
  @override
  late final GeneratedColumn<DateTime> previsaoPreparo =
      GeneratedColumn<DateTime>('PREVISAO_PREPARO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _inicioPreparoMeta =
      const VerificationMeta('inicioPreparo');
  @override
  late final GeneratedColumn<DateTime> inicioPreparo =
      GeneratedColumn<DateTime>('INICIO_PREPARO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _previsaoEntregaMeta =
      const VerificationMeta('previsaoEntrega');
  @override
  late final GeneratedColumn<DateTime> previsaoEntrega =
      GeneratedColumn<DateTime>('PREVISAO_ENTREGA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _saiuParaEntregaMeta =
      const VerificationMeta('saiuParaEntrega');
  @override
  late final GeneratedColumn<DateTime> saiuParaEntrega =
      GeneratedColumn<DateTime>('SAIU_PARA_ENTREGA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _entregueMeta = const VerificationMeta('entregue');
  @override
  late final GeneratedColumn<DateTime> entregue = GeneratedColumn<DateTime>(
      'ENTREGUE', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _previsaoRetiradaMeta =
      const VerificationMeta('previsaoRetirada');
  @override
  late final GeneratedColumn<DateTime> previsaoRetirada =
      GeneratedColumn<DateTime>('PREVISAO_RETIRADA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _prontoParaRetiradaMeta =
      const VerificationMeta('prontoParaRetirada');
  @override
  late final GeneratedColumn<DateTime> prontoParaRetirada =
      GeneratedColumn<DateTime>('PRONTO_PARA_RETIRADA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _retirouMeta = const VerificationMeta('retirou');
  @override
  late final GeneratedColumn<DateTime> retirou = GeneratedColumn<DateTime>(
      'RETIROU', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idComanda,
        idTaxaEntrega,
        idColaborador,
        nomeCliente,
        telefonePrincipal,
        telefoneRecado,
        celular,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        valorFrete,
        valorRecebido,
        valorAReceber,
        valorSolicitadoTroco,
        previsaoPreparo,
        inicioPreparo,
        previsaoEntrega,
        saiuParaEntrega,
        entregue,
        previsaoRetirada,
        prontoParaRetirada,
        retirou
      ];
  @override
  String get aliasedName => _alias ?? 'DELIVERY';
  @override
  String get actualTableName => 'DELIVERY';
  @override
  VerificationContext validateIntegrity(Insertable<Delivery> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COMANDA')) {
      context.handle(_idComandaMeta,
          idComanda.isAcceptableOrUnknown(data['ID_COMANDA']!, _idComandaMeta));
    }
    if (data.containsKey('ID_TAXA_ENTREGA')) {
      context.handle(
          _idTaxaEntregaMeta,
          idTaxaEntrega.isAcceptableOrUnknown(
              data['ID_TAXA_ENTREGA']!, _idTaxaEntregaMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR']!, _idColaboradorMeta));
    }
    if (data.containsKey('NOME_CLIENTE')) {
      context.handle(
          _nomeClienteMeta,
          nomeCliente.isAcceptableOrUnknown(
              data['NOME_CLIENTE']!, _nomeClienteMeta));
    }
    if (data.containsKey('TELEFONE_PRINCIPAL')) {
      context.handle(
          _telefonePrincipalMeta,
          telefonePrincipal.isAcceptableOrUnknown(
              data['TELEFONE_PRINCIPAL']!, _telefonePrincipalMeta));
    }
    if (data.containsKey('TELEFONE_RECADO')) {
      context.handle(
          _telefoneRecadoMeta,
          telefoneRecado.isAcceptableOrUnknown(
              data['TELEFONE_RECADO']!, _telefoneRecadoMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('VALOR_FRETE')) {
      context.handle(
          _valorFreteMeta,
          valorFrete.isAcceptableOrUnknown(
              data['VALOR_FRETE']!, _valorFreteMeta));
    }
    if (data.containsKey('VALOR_RECEBIDO')) {
      context.handle(
          _valorRecebidoMeta,
          valorRecebido.isAcceptableOrUnknown(
              data['VALOR_RECEBIDO']!, _valorRecebidoMeta));
    }
    if (data.containsKey('VALOR_A_RECEBER')) {
      context.handle(
          _valorAReceberMeta,
          valorAReceber.isAcceptableOrUnknown(
              data['VALOR_A_RECEBER']!, _valorAReceberMeta));
    }
    if (data.containsKey('VALOR_SOLICITADO_TROCO')) {
      context.handle(
          _valorSolicitadoTrocoMeta,
          valorSolicitadoTroco.isAcceptableOrUnknown(
              data['VALOR_SOLICITADO_TROCO']!, _valorSolicitadoTrocoMeta));
    }
    if (data.containsKey('PREVISAO_PREPARO')) {
      context.handle(
          _previsaoPreparoMeta,
          previsaoPreparo.isAcceptableOrUnknown(
              data['PREVISAO_PREPARO']!, _previsaoPreparoMeta));
    }
    if (data.containsKey('INICIO_PREPARO')) {
      context.handle(
          _inicioPreparoMeta,
          inicioPreparo.isAcceptableOrUnknown(
              data['INICIO_PREPARO']!, _inicioPreparoMeta));
    }
    if (data.containsKey('PREVISAO_ENTREGA')) {
      context.handle(
          _previsaoEntregaMeta,
          previsaoEntrega.isAcceptableOrUnknown(
              data['PREVISAO_ENTREGA']!, _previsaoEntregaMeta));
    }
    if (data.containsKey('SAIU_PARA_ENTREGA')) {
      context.handle(
          _saiuParaEntregaMeta,
          saiuParaEntrega.isAcceptableOrUnknown(
              data['SAIU_PARA_ENTREGA']!, _saiuParaEntregaMeta));
    }
    if (data.containsKey('ENTREGUE')) {
      context.handle(_entregueMeta,
          entregue.isAcceptableOrUnknown(data['ENTREGUE']!, _entregueMeta));
    }
    if (data.containsKey('PREVISAO_RETIRADA')) {
      context.handle(
          _previsaoRetiradaMeta,
          previsaoRetirada.isAcceptableOrUnknown(
              data['PREVISAO_RETIRADA']!, _previsaoRetiradaMeta));
    }
    if (data.containsKey('PRONTO_PARA_RETIRADA')) {
      context.handle(
          _prontoParaRetiradaMeta,
          prontoParaRetirada.isAcceptableOrUnknown(
              data['PRONTO_PARA_RETIRADA']!, _prontoParaRetiradaMeta));
    }
    if (data.containsKey('RETIROU')) {
      context.handle(_retirouMeta,
          retirou.isAcceptableOrUnknown(data['RETIROU']!, _retirouMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Delivery map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Delivery.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $DeliverysTable createAlias(String alias) {
    return $DeliverysTable(attachedDatabase, alias);
  }
}

class DeliveryAcerto extends DataClass implements Insertable<DeliveryAcerto> {
  final int? id;
  final DateTime? dataAcerto;
  final String? horaAcerto;
  final double? valorRecebido;
  final double? valorPagoEntregador;
  final String? observacao;
  DeliveryAcerto(
      {this.id,
      this.dataAcerto,
      this.horaAcerto,
      this.valorRecebido,
      this.valorPagoEntregador,
      this.observacao});
  factory DeliveryAcerto.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return DeliveryAcerto(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      dataAcerto: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_ACERTO']),
      horaAcerto: ValueSqlType.stringType(data['${effectivePrefix}HORA_ACERTO']),
      valorRecebido: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_RECEBIDO']),
      valorPagoEntregador: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_PAGO_ENTREGADOR']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || dataAcerto != null) {
      map['DATA_ACERTO'] = Variable<DateTime>(dataAcerto);
    }
    if (!nullToAbsent || horaAcerto != null) {
      map['HORA_ACERTO'] = Variable<String>(horaAcerto);
    }
    if (!nullToAbsent || valorRecebido != null) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido);
    }
    if (!nullToAbsent || valorPagoEntregador != null) {
      map['VALOR_PAGO_ENTREGADOR'] = Variable<double>(valorPagoEntregador);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  DeliveryAcertosCompanion toCompanion(bool nullToAbsent) {
    return DeliveryAcertosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      dataAcerto: dataAcerto == null && nullToAbsent
          ? const Value.absent()
          : Value(dataAcerto),
      horaAcerto: horaAcerto == null && nullToAbsent
          ? const Value.absent()
          : Value(horaAcerto),
      valorRecebido: valorRecebido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRecebido),
      valorPagoEntregador: valorPagoEntregador == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPagoEntregador),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory DeliveryAcerto.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DeliveryAcerto(
      id: serializer.fromJson<int?>(json['id']),
      dataAcerto: serializer.fromJson<DateTime?>(json['dataAcerto']),
      horaAcerto: serializer.fromJson<String?>(json['horaAcerto']),
      valorRecebido: serializer.fromJson<double?>(json['valorRecebido']),
      valorPagoEntregador:
          serializer.fromJson<double?>(json['valorPagoEntregador']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'dataAcerto': serializer.toJson<DateTime?>(dataAcerto),
      'horaAcerto': serializer.toJson<String?>(horaAcerto),
      'valorRecebido': serializer.toJson<double?>(valorRecebido),
      'valorPagoEntregador': serializer.toJson<double?>(valorPagoEntregador),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  DeliveryAcerto copyWith(
          {int? id,
          DateTime? dataAcerto,
          String? horaAcerto,
          double? valorRecebido,
          double? valorPagoEntregador,
          String? observacao}) =>
      DeliveryAcerto(
        id: id ?? this.id,
        dataAcerto: dataAcerto ?? this.dataAcerto,
        horaAcerto: horaAcerto ?? this.horaAcerto,
        valorRecebido: valorRecebido ?? this.valorRecebido,
        valorPagoEntregador: valorPagoEntregador ?? this.valorPagoEntregador,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('DeliveryAcerto(')
          ..write('id: $id, ')
          ..write('dataAcerto: $dataAcerto, ')
          ..write('horaAcerto: $horaAcerto, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('valorPagoEntregador: $valorPagoEntregador, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, dataAcerto, horaAcerto, valorRecebido,
      valorPagoEntregador, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DeliveryAcerto &&
          other.id == this.id &&
          other.dataAcerto == this.dataAcerto &&
          other.horaAcerto == this.horaAcerto &&
          other.valorRecebido == this.valorRecebido &&
          other.valorPagoEntregador == this.valorPagoEntregador &&
          other.observacao == this.observacao);
}

class DeliveryAcertosCompanion extends UpdateCompanion<DeliveryAcerto> {
  final Value<int?> id;
  final Value<DateTime?> dataAcerto;
  final Value<String?> horaAcerto;
  final Value<double?> valorRecebido;
  final Value<double?> valorPagoEntregador;
  final Value<String?> observacao;
  const DeliveryAcertosCompanion({
    this.id = const Value.absent(),
    this.dataAcerto = const Value.absent(),
    this.horaAcerto = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.valorPagoEntregador = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  DeliveryAcertosCompanion.insert({
    this.id = const Value.absent(),
    this.dataAcerto = const Value.absent(),
    this.horaAcerto = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.valorPagoEntregador = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<DeliveryAcerto> custom({
    Expression<int>? id,
    Expression<DateTime>? dataAcerto,
    Expression<String>? horaAcerto,
    Expression<double>? valorRecebido,
    Expression<double>? valorPagoEntregador,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (dataAcerto != null) 'DATA_ACERTO': dataAcerto,
      if (horaAcerto != null) 'HORA_ACERTO': horaAcerto,
      if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
      if (valorPagoEntregador != null)
        'VALOR_PAGO_ENTREGADOR': valorPagoEntregador,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  DeliveryAcertosCompanion copyWith(
      {Value<int?>? id,
      Value<DateTime?>? dataAcerto,
      Value<String?>? horaAcerto,
      Value<double?>? valorRecebido,
      Value<double?>? valorPagoEntregador,
      Value<String?>? observacao}) {
    return DeliveryAcertosCompanion(
      id: id ?? this.id,
      dataAcerto: dataAcerto ?? this.dataAcerto,
      horaAcerto: horaAcerto ?? this.horaAcerto,
      valorRecebido: valorRecebido ?? this.valorRecebido,
      valorPagoEntregador: valorPagoEntregador ?? this.valorPagoEntregador,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (dataAcerto.present) {
      map['DATA_ACERTO'] = Variable<DateTime>(dataAcerto.value);
    }
    if (horaAcerto.present) {
      map['HORA_ACERTO'] = Variable<String>(horaAcerto.value);
    }
    if (valorRecebido.present) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido.value);
    }
    if (valorPagoEntregador.present) {
      map['VALOR_PAGO_ENTREGADOR'] =
          Variable<double>(valorPagoEntregador.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DeliveryAcertosCompanion(')
          ..write('id: $id, ')
          ..write('dataAcerto: $dataAcerto, ')
          ..write('horaAcerto: $horaAcerto, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('valorPagoEntregador: $valorPagoEntregador, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $DeliveryAcertosTable extends DeliveryAcertos
    with TableInfo<$DeliveryAcertosTable, DeliveryAcerto> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $DeliveryAcertosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataAcertoMeta = const VerificationMeta('dataAcerto');
  @override
  late final GeneratedColumn<DateTime> dataAcerto = GeneratedColumn<DateTime>(
      'DATA_ACERTO', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaAcertoMeta = const VerificationMeta('horaAcerto');
  @override
  late final GeneratedColumn<String> horaAcerto = GeneratedColumn<String>(
      'HORA_ACERTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorRecebidoMeta =
      const VerificationMeta('valorRecebido');
  @override
  late final GeneratedColumn<double> valorRecebido = GeneratedColumn<double>(
      'VALOR_RECEBIDO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPagoEntregadorMeta =
      const VerificationMeta('valorPagoEntregador');
  @override
  late final GeneratedColumn<double> valorPagoEntregador =
      GeneratedColumn<double>('VALOR_PAGO_ENTREGADOR', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        dataAcerto,
        horaAcerto,
        valorRecebido,
        valorPagoEntregador,
        observacao
      ];
  @override
  String get aliasedName => _alias ?? 'DELIVERY_ACERTO';
  @override
  String get actualTableName => 'DELIVERY_ACERTO';
  @override
  VerificationContext validateIntegrity(Insertable<DeliveryAcerto> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('DATA_ACERTO')) {
      context.handle(
          _dataAcertoMeta,
          dataAcerto.isAcceptableOrUnknown(
              data['DATA_ACERTO']!, _dataAcertoMeta));
    }
    if (data.containsKey('HORA_ACERTO')) {
      context.handle(
          _horaAcertoMeta,
          horaAcerto.isAcceptableOrUnknown(
              data['HORA_ACERTO']!, _horaAcertoMeta));
    }
    if (data.containsKey('VALOR_RECEBIDO')) {
      context.handle(
          _valorRecebidoMeta,
          valorRecebido.isAcceptableOrUnknown(
              data['VALOR_RECEBIDO']!, _valorRecebidoMeta));
    }
    if (data.containsKey('VALOR_PAGO_ENTREGADOR')) {
      context.handle(
          _valorPagoEntregadorMeta,
          valorPagoEntregador.isAcceptableOrUnknown(
              data['VALOR_PAGO_ENTREGADOR']!, _valorPagoEntregadorMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DeliveryAcerto map(Map<String, dynamic> data, {String? tablePrefix}) {
    return DeliveryAcerto.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $DeliveryAcertosTable createAlias(String alias) {
    return $DeliveryAcertosTable(attachedDatabase, alias);
  }
}

class DeliveryAcertoComanda extends DataClass
    implements Insertable<DeliveryAcertoComanda> {
  final int? id;
  final int? idDeliveryAcerto;
  final int? idDelivery;
  DeliveryAcertoComanda({this.id, this.idDeliveryAcerto, this.idDelivery});
  factory DeliveryAcertoComanda.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return DeliveryAcertoComanda(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idDeliveryAcerto: ValueSqlType.intType(
          data['${effectivePrefix}ID_DELIVERY_ACERTO']),
      idDelivery: ValueSqlType.intType(data['${effectivePrefix}ID_DELIVERY']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idDeliveryAcerto != null) {
      map['ID_DELIVERY_ACERTO'] = Variable<int>(idDeliveryAcerto);
    }
    if (!nullToAbsent || idDelivery != null) {
      map['ID_DELIVERY'] = Variable<int>(idDelivery);
    }
    return map;
  }

  DeliveryAcertoComandasCompanion toCompanion(bool nullToAbsent) {
    return DeliveryAcertoComandasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idDeliveryAcerto: idDeliveryAcerto == null && nullToAbsent
          ? const Value.absent()
          : Value(idDeliveryAcerto),
      idDelivery: idDelivery == null && nullToAbsent
          ? const Value.absent()
          : Value(idDelivery),
    );
  }

  factory DeliveryAcertoComanda.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return DeliveryAcertoComanda(
      id: serializer.fromJson<int?>(json['id']),
      idDeliveryAcerto: serializer.fromJson<int?>(json['idDeliveryAcerto']),
      idDelivery: serializer.fromJson<int?>(json['idDelivery']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idDeliveryAcerto': serializer.toJson<int?>(idDeliveryAcerto),
      'idDelivery': serializer.toJson<int?>(idDelivery),
    };
  }

  DeliveryAcertoComanda copyWith(
          {int? id, int? idDeliveryAcerto, int? idDelivery}) =>
      DeliveryAcertoComanda(
        id: id ?? this.id,
        idDeliveryAcerto: idDeliveryAcerto ?? this.idDeliveryAcerto,
        idDelivery: idDelivery ?? this.idDelivery,
      );
  @override
  String toString() {
    return (StringBuffer('DeliveryAcertoComanda(')
          ..write('id: $id, ')
          ..write('idDeliveryAcerto: $idDeliveryAcerto, ')
          ..write('idDelivery: $idDelivery')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idDeliveryAcerto, idDelivery);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is DeliveryAcertoComanda &&
          other.id == this.id &&
          other.idDeliveryAcerto == this.idDeliveryAcerto &&
          other.idDelivery == this.idDelivery);
}

class DeliveryAcertoComandasCompanion
    extends UpdateCompanion<DeliveryAcertoComanda> {
  final Value<int?> id;
  final Value<int?> idDeliveryAcerto;
  final Value<int?> idDelivery;
  const DeliveryAcertoComandasCompanion({
    this.id = const Value.absent(),
    this.idDeliveryAcerto = const Value.absent(),
    this.idDelivery = const Value.absent(),
  });
  DeliveryAcertoComandasCompanion.insert({
    this.id = const Value.absent(),
    this.idDeliveryAcerto = const Value.absent(),
    this.idDelivery = const Value.absent(),
  });
  static Insertable<DeliveryAcertoComanda> custom({
    Expression<int>? id,
    Expression<int>? idDeliveryAcerto,
    Expression<int>? idDelivery,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idDeliveryAcerto != null) 'ID_DELIVERY_ACERTO': idDeliveryAcerto,
      if (idDelivery != null) 'ID_DELIVERY': idDelivery,
    });
  }

  DeliveryAcertoComandasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idDeliveryAcerto,
      Value<int?>? idDelivery}) {
    return DeliveryAcertoComandasCompanion(
      id: id ?? this.id,
      idDeliveryAcerto: idDeliveryAcerto ?? this.idDeliveryAcerto,
      idDelivery: idDelivery ?? this.idDelivery,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idDeliveryAcerto.present) {
      map['ID_DELIVERY_ACERTO'] = Variable<int>(idDeliveryAcerto.value);
    }
    if (idDelivery.present) {
      map['ID_DELIVERY'] = Variable<int>(idDelivery.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('DeliveryAcertoComandasCompanion(')
          ..write('id: $id, ')
          ..write('idDeliveryAcerto: $idDeliveryAcerto, ')
          ..write('idDelivery: $idDelivery')
          ..write(')'))
        .toString();
  }
}

class $DeliveryAcertoComandasTable extends DeliveryAcertoComandas
    with TableInfo<$DeliveryAcertoComandasTable, DeliveryAcertoComanda> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $DeliveryAcertoComandasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idDeliveryAcertoMeta =
      const VerificationMeta('idDeliveryAcerto');
  @override
  late final GeneratedColumn<int> idDeliveryAcerto = GeneratedColumn<int>(
      'ID_DELIVERY_ACERTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES DELIVERY_ACERTO(ID)');
  final VerificationMeta _idDeliveryMeta = const VerificationMeta('idDelivery');
  @override
  late final GeneratedColumn<int> idDelivery = GeneratedColumn<int>(
      'ID_DELIVERY', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES DELIVERY(ID)');
  @override
  List<GeneratedColumn> get $columns => [id, idDeliveryAcerto, idDelivery];
  @override
  String get aliasedName => _alias ?? 'DELIVERY_ACERTO_COMANDA';
  @override
  String get actualTableName => 'DELIVERY_ACERTO_COMANDA';
  @override
  VerificationContext validateIntegrity(
      Insertable<DeliveryAcertoComanda> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_DELIVERY_ACERTO')) {
      context.handle(
          _idDeliveryAcertoMeta,
          idDeliveryAcerto.isAcceptableOrUnknown(
              data['ID_DELIVERY_ACERTO']!, _idDeliveryAcertoMeta));
    }
    if (data.containsKey('ID_DELIVERY')) {
      context.handle(
          _idDeliveryMeta,
          idDelivery.isAcceptableOrUnknown(
              data['ID_DELIVERY']!, _idDeliveryMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  DeliveryAcertoComanda map(Map<String, dynamic> data, {String? tablePrefix}) {
    return DeliveryAcertoComanda.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $DeliveryAcertoComandasTable createAlias(String alias) {
    return $DeliveryAcertoComandasTable(attachedDatabase, alias);
  }
}

class EcfAliquotas extends DataClass implements Insertable<EcfAliquotas> {
  final int? id;
  final String? totalizadorParcial;
  final String? ecfIcmsSt;
  final String? pafPSt;
  EcfAliquotas({this.id, this.totalizadorParcial, this.ecfIcmsSt, this.pafPSt});
  factory EcfAliquotas.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfAliquotas(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      totalizadorParcial: ValueSqlType.stringType(
          data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
      ecfIcmsSt: ValueSqlType.stringType(data['${effectivePrefix}ECF_ICMS_ST']),
      pafPSt: ValueSqlType.stringType(data['${effectivePrefix}PAF_P_ST']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || totalizadorParcial != null) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial);
    }
    if (!nullToAbsent || ecfIcmsSt != null) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt);
    }
    if (!nullToAbsent || pafPSt != null) {
      map['PAF_P_ST'] = Variable<String>(pafPSt);
    }
    return map;
  }

  EcfAliquotassCompanion toCompanion(bool nullToAbsent) {
    return EcfAliquotassCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      totalizadorParcial: totalizadorParcial == null && nullToAbsent
          ? const Value.absent()
          : Value(totalizadorParcial),
      ecfIcmsSt: ecfIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(ecfIcmsSt),
      pafPSt:
          pafPSt == null && nullToAbsent ? const Value.absent() : Value(pafPSt),
    );
  }

  factory EcfAliquotas.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfAliquotas(
      id: serializer.fromJson<int?>(json['id']),
      totalizadorParcial:
          serializer.fromJson<String?>(json['totalizadorParcial']),
      ecfIcmsSt: serializer.fromJson<String?>(json['ecfIcmsSt']),
      pafPSt: serializer.fromJson<String?>(json['pafPSt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'totalizadorParcial': serializer.toJson<String?>(totalizadorParcial),
      'ecfIcmsSt': serializer.toJson<String?>(ecfIcmsSt),
      'pafPSt': serializer.toJson<String?>(pafPSt),
    };
  }

  EcfAliquotas copyWith(
          {int? id,
          String? totalizadorParcial,
          String? ecfIcmsSt,
          String? pafPSt}) =>
      EcfAliquotas(
        id: id ?? this.id,
        totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
        ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
        pafPSt: pafPSt ?? this.pafPSt,
      );
  @override
  String toString() {
    return (StringBuffer('EcfAliquotas(')
          ..write('id: $id, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('pafPSt: $pafPSt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, totalizadorParcial, ecfIcmsSt, pafPSt);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfAliquotas &&
          other.id == this.id &&
          other.totalizadorParcial == this.totalizadorParcial &&
          other.ecfIcmsSt == this.ecfIcmsSt &&
          other.pafPSt == this.pafPSt);
}

class EcfAliquotassCompanion extends UpdateCompanion<EcfAliquotas> {
  final Value<int?> id;
  final Value<String?> totalizadorParcial;
  final Value<String?> ecfIcmsSt;
  final Value<String?> pafPSt;
  const EcfAliquotassCompanion({
    this.id = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.pafPSt = const Value.absent(),
  });
  EcfAliquotassCompanion.insert({
    this.id = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.pafPSt = const Value.absent(),
  });
  static Insertable<EcfAliquotas> custom({
    Expression<int>? id,
    Expression<String>? totalizadorParcial,
    Expression<String>? ecfIcmsSt,
    Expression<String>? pafPSt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
      if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
      if (pafPSt != null) 'PAF_P_ST': pafPSt,
    });
  }

  EcfAliquotassCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? totalizadorParcial,
      Value<String?>? ecfIcmsSt,
      Value<String?>? pafPSt}) {
    return EcfAliquotassCompanion(
      id: id ?? this.id,
      totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
      ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
      pafPSt: pafPSt ?? this.pafPSt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (totalizadorParcial.present) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial.value);
    }
    if (ecfIcmsSt.present) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt.value);
    }
    if (pafPSt.present) {
      map['PAF_P_ST'] = Variable<String>(pafPSt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfAliquotassCompanion(')
          ..write('id: $id, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('pafPSt: $pafPSt')
          ..write(')'))
        .toString();
  }
}

class $EcfAliquotassTable extends EcfAliquotass
    with TableInfo<$EcfAliquotassTable, EcfAliquotas> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfAliquotassTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _totalizadorParcialMeta =
      const VerificationMeta('totalizadorParcial');
  @override
  late final GeneratedColumn<String> totalizadorParcial =
      GeneratedColumn<String>(
          'TOTALIZADOR_PARCIAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 10),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
  @override
  late final GeneratedColumn<String> ecfIcmsSt = GeneratedColumn<String>(
      'ECF_ICMS_ST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _pafPStMeta = const VerificationMeta('pafPSt');
  @override
  late final GeneratedColumn<String> pafPSt = GeneratedColumn<String>(
      'PAF_P_ST', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, totalizadorParcial, ecfIcmsSt, pafPSt];
  @override
  String get aliasedName => _alias ?? 'ECF_ALIQUOTAS';
  @override
  String get actualTableName => 'ECF_ALIQUOTAS';
  @override
  VerificationContext validateIntegrity(Insertable<EcfAliquotas> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('TOTALIZADOR_PARCIAL')) {
      context.handle(
          _totalizadorParcialMeta,
          totalizadorParcial.isAcceptableOrUnknown(
              data['TOTALIZADOR_PARCIAL']!, _totalizadorParcialMeta));
    }
    if (data.containsKey('ECF_ICMS_ST')) {
      context.handle(
          _ecfIcmsStMeta,
          ecfIcmsSt.isAcceptableOrUnknown(
              data['ECF_ICMS_ST']!, _ecfIcmsStMeta));
    }
    if (data.containsKey('PAF_P_ST')) {
      context.handle(_pafPStMeta,
          pafPSt.isAcceptableOrUnknown(data['PAF_P_ST']!, _pafPStMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfAliquotas map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfAliquotas.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfAliquotassTable createAlias(String alias) {
    return $EcfAliquotassTable(attachedDatabase, alias);
  }
}

class EcfDocumentosEmitidos extends DataClass
    implements Insertable<EcfDocumentosEmitidos> {
  final int? id;
  final int? idPdvMovimento;
  final DateTime? dataEmissao;
  final String? horaEmissao;
  final String? tipo;
  final int? coo;
  EcfDocumentosEmitidos(
      {this.id,
      this.idPdvMovimento,
      this.dataEmissao,
      this.horaEmissao,
      this.tipo,
      this.coo});
  factory EcfDocumentosEmitidos.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfDocumentosEmitidos(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvMovimento: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      dataEmissao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_EMISSAO']),
      horaEmissao: ValueSqlType.stringType(data['${effectivePrefix}HORA_EMISSAO']),
      tipo: ValueSqlType.stringType(data['${effectivePrefix}TIPO']),
      coo: ValueSqlType.intType(data['${effectivePrefix}COO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || dataEmissao != null) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao);
    }
    if (!nullToAbsent || horaEmissao != null) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    return map;
  }

  EcfDocumentosEmitidossCompanion toCompanion(bool nullToAbsent) {
    return EcfDocumentosEmitidossCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      dataEmissao: dataEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissao),
      horaEmissao: horaEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEmissao),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
    );
  }

  factory EcfDocumentosEmitidos.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfDocumentosEmitidos(
      id: serializer.fromJson<int?>(json['id']),
      idPdvMovimento: serializer.fromJson<int?>(json['idPdvMovimento']),
      dataEmissao: serializer.fromJson<DateTime?>(json['dataEmissao']),
      horaEmissao: serializer.fromJson<String?>(json['horaEmissao']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      coo: serializer.fromJson<int?>(json['coo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvMovimento': serializer.toJson<int?>(idPdvMovimento),
      'dataEmissao': serializer.toJson<DateTime?>(dataEmissao),
      'horaEmissao': serializer.toJson<String?>(horaEmissao),
      'tipo': serializer.toJson<String?>(tipo),
      'coo': serializer.toJson<int?>(coo),
    };
  }

  EcfDocumentosEmitidos copyWith(
          {int? id,
          int? idPdvMovimento,
          DateTime? dataEmissao,
          String? horaEmissao,
          String? tipo,
          int? coo}) =>
      EcfDocumentosEmitidos(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        dataEmissao: dataEmissao ?? this.dataEmissao,
        horaEmissao: horaEmissao ?? this.horaEmissao,
        tipo: tipo ?? this.tipo,
        coo: coo ?? this.coo,
      );
  @override
  String toString() {
    return (StringBuffer('EcfDocumentosEmitidos(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('tipo: $tipo, ')
          ..write('coo: $coo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idPdvMovimento, dataEmissao, horaEmissao, tipo, coo);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfDocumentosEmitidos &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.dataEmissao == this.dataEmissao &&
          other.horaEmissao == this.horaEmissao &&
          other.tipo == this.tipo &&
          other.coo == this.coo);
}

class EcfDocumentosEmitidossCompanion
    extends UpdateCompanion<EcfDocumentosEmitidos> {
  final Value<int?> id;
  final Value<int?> idPdvMovimento;
  final Value<DateTime?> dataEmissao;
  final Value<String?> horaEmissao;
  final Value<String?> tipo;
  final Value<int?> coo;
  const EcfDocumentosEmitidossCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.tipo = const Value.absent(),
    this.coo = const Value.absent(),
  });
  EcfDocumentosEmitidossCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.tipo = const Value.absent(),
    this.coo = const Value.absent(),
  });
  static Insertable<EcfDocumentosEmitidos> custom({
    Expression<int>? id,
    Expression<int>? idPdvMovimento,
    Expression<DateTime>? dataEmissao,
    Expression<String>? horaEmissao,
    Expression<String>? tipo,
    Expression<int>? coo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
      if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
      if (tipo != null) 'TIPO': tipo,
      if (coo != null) 'COO': coo,
    });
  }

  EcfDocumentosEmitidossCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvMovimento,
      Value<DateTime?>? dataEmissao,
      Value<String?>? horaEmissao,
      Value<String?>? tipo,
      Value<int?>? coo}) {
    return EcfDocumentosEmitidossCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      dataEmissao: dataEmissao ?? this.dataEmissao,
      horaEmissao: horaEmissao ?? this.horaEmissao,
      tipo: tipo ?? this.tipo,
      coo: coo ?? this.coo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (dataEmissao.present) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao.value);
    }
    if (horaEmissao.present) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfDocumentosEmitidossCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('tipo: $tipo, ')
          ..write('coo: $coo')
          ..write(')'))
        .toString();
  }
}

class $EcfDocumentosEmitidossTable extends EcfDocumentosEmitidoss
    with TableInfo<$EcfDocumentosEmitidossTable, EcfDocumentosEmitidos> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfDocumentosEmitidossTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  @override
  late final GeneratedColumn<int> idPdvMovimento = GeneratedColumn<int>(
      'ID_PDV_MOVIMENTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  final VerificationMeta _dataEmissaoMeta =
      const VerificationMeta('dataEmissao');
  @override
  late final GeneratedColumn<DateTime> dataEmissao =
      GeneratedColumn<DateTime>('DATA_EMISSAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaEmissaoMeta =
      const VerificationMeta('horaEmissao');
  @override
  late final GeneratedColumn<String> horaEmissao = GeneratedColumn<String>(
      'HORA_EMISSAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
      'TIPO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  @override
  late final GeneratedColumn<int> coo = GeneratedColumn<int>(
      'COO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, dataEmissao, horaEmissao, tipo, coo];
  @override
  String get aliasedName => _alias ?? 'ECF_DOCUMENTOS_EMITIDOS';
  @override
  String get actualTableName => 'ECF_DOCUMENTOS_EMITIDOS';
  @override
  VerificationContext validateIntegrity(
      Insertable<EcfDocumentosEmitidos> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
    }
    if (data.containsKey('DATA_EMISSAO')) {
      context.handle(
          _dataEmissaoMeta,
          dataEmissao.isAcceptableOrUnknown(
              data['DATA_EMISSAO']!, _dataEmissaoMeta));
    }
    if (data.containsKey('HORA_EMISSAO')) {
      context.handle(
          _horaEmissaoMeta,
          horaEmissao.isAcceptableOrUnknown(
              data['HORA_EMISSAO']!, _horaEmissaoMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfDocumentosEmitidos map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfDocumentosEmitidos.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfDocumentosEmitidossTable createAlias(String alias) {
    return $EcfDocumentosEmitidossTable(attachedDatabase, alias);
  }
}

class EcfE3 extends DataClass implements Insertable<EcfE3> {
  final int? id;
  final String? serieEcf;
  final String? mfAdicional;
  final String? tipoEcf;
  final String? marcaEcf;
  final String? modeloEcf;
  final DateTime? dataEstoque;
  final String? horaEstoque;
  final String? hashRegistro;
  EcfE3(
      {this.id,
      this.serieEcf,
      this.mfAdicional,
      this.tipoEcf,
      this.marcaEcf,
      this.modeloEcf,
      this.dataEstoque,
      this.horaEstoque,
      this.hashRegistro});
  factory EcfE3.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfE3(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      serieEcf: ValueSqlType.stringType(data['${effectivePrefix}SERIE_ECF']),
      mfAdicional: ValueSqlType.stringType(data['${effectivePrefix}MF_ADICIONAL']),
      tipoEcf: ValueSqlType.stringType(data['${effectivePrefix}TIPO_ECF']),
      marcaEcf: ValueSqlType.stringType(data['${effectivePrefix}MARCA_ECF']),
      modeloEcf: ValueSqlType.stringType(data['${effectivePrefix}MODELO_ECF']),
      dataEstoque: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_ESTOQUE']),
      horaEstoque: ValueSqlType.stringType(data['${effectivePrefix}HORA_ESTOQUE']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || mfAdicional != null) {
      map['MF_ADICIONAL'] = Variable<String>(mfAdicional);
    }
    if (!nullToAbsent || tipoEcf != null) {
      map['TIPO_ECF'] = Variable<String>(tipoEcf);
    }
    if (!nullToAbsent || marcaEcf != null) {
      map['MARCA_ECF'] = Variable<String>(marcaEcf);
    }
    if (!nullToAbsent || modeloEcf != null) {
      map['MODELO_ECF'] = Variable<String>(modeloEcf);
    }
    if (!nullToAbsent || dataEstoque != null) {
      map['DATA_ESTOQUE'] = Variable<DateTime>(dataEstoque);
    }
    if (!nullToAbsent || horaEstoque != null) {
      map['HORA_ESTOQUE'] = Variable<String>(horaEstoque);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfE3sCompanion toCompanion(bool nullToAbsent) {
    return EcfE3sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      mfAdicional: mfAdicional == null && nullToAbsent
          ? const Value.absent()
          : Value(mfAdicional),
      tipoEcf: tipoEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoEcf),
      marcaEcf: marcaEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(marcaEcf),
      modeloEcf: modeloEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloEcf),
      dataEstoque: dataEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEstoque),
      horaEstoque: horaEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEstoque),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfE3.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfE3(
      id: serializer.fromJson<int?>(json['id']),
      serieEcf: serializer.fromJson<String?>(json['serieEcf']),
      mfAdicional: serializer.fromJson<String?>(json['mfAdicional']),
      tipoEcf: serializer.fromJson<String?>(json['tipoEcf']),
      marcaEcf: serializer.fromJson<String?>(json['marcaEcf']),
      modeloEcf: serializer.fromJson<String?>(json['modeloEcf']),
      dataEstoque: serializer.fromJson<DateTime?>(json['dataEstoque']),
      horaEstoque: serializer.fromJson<String?>(json['horaEstoque']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'serieEcf': serializer.toJson<String?>(serieEcf),
      'mfAdicional': serializer.toJson<String?>(mfAdicional),
      'tipoEcf': serializer.toJson<String?>(tipoEcf),
      'marcaEcf': serializer.toJson<String?>(marcaEcf),
      'modeloEcf': serializer.toJson<String?>(modeloEcf),
      'dataEstoque': serializer.toJson<DateTime?>(dataEstoque),
      'horaEstoque': serializer.toJson<String?>(horaEstoque),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  EcfE3 copyWith(
          {int? id,
          String? serieEcf,
          String? mfAdicional,
          String? tipoEcf,
          String? marcaEcf,
          String? modeloEcf,
          DateTime? dataEstoque,
          String? horaEstoque,
          String? hashRegistro}) =>
      EcfE3(
        id: id ?? this.id,
        serieEcf: serieEcf ?? this.serieEcf,
        mfAdicional: mfAdicional ?? this.mfAdicional,
        tipoEcf: tipoEcf ?? this.tipoEcf,
        marcaEcf: marcaEcf ?? this.marcaEcf,
        modeloEcf: modeloEcf ?? this.modeloEcf,
        dataEstoque: dataEstoque ?? this.dataEstoque,
        horaEstoque: horaEstoque ?? this.horaEstoque,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfE3(')
          ..write('id: $id, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('mfAdicional: $mfAdicional, ')
          ..write('tipoEcf: $tipoEcf, ')
          ..write('marcaEcf: $marcaEcf, ')
          ..write('modeloEcf: $modeloEcf, ')
          ..write('dataEstoque: $dataEstoque, ')
          ..write('horaEstoque: $horaEstoque, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, serieEcf, mfAdicional, tipoEcf, marcaEcf,
      modeloEcf, dataEstoque, horaEstoque, hashRegistro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfE3 &&
          other.id == this.id &&
          other.serieEcf == this.serieEcf &&
          other.mfAdicional == this.mfAdicional &&
          other.tipoEcf == this.tipoEcf &&
          other.marcaEcf == this.marcaEcf &&
          other.modeloEcf == this.modeloEcf &&
          other.dataEstoque == this.dataEstoque &&
          other.horaEstoque == this.horaEstoque &&
          other.hashRegistro == this.hashRegistro);
}

class EcfE3sCompanion extends UpdateCompanion<EcfE3> {
  final Value<int?> id;
  final Value<String?> serieEcf;
  final Value<String?> mfAdicional;
  final Value<String?> tipoEcf;
  final Value<String?> marcaEcf;
  final Value<String?> modeloEcf;
  final Value<DateTime?> dataEstoque;
  final Value<String?> horaEstoque;
  final Value<String?> hashRegistro;
  const EcfE3sCompanion({
    this.id = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.mfAdicional = const Value.absent(),
    this.tipoEcf = const Value.absent(),
    this.marcaEcf = const Value.absent(),
    this.modeloEcf = const Value.absent(),
    this.dataEstoque = const Value.absent(),
    this.horaEstoque = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfE3sCompanion.insert({
    this.id = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.mfAdicional = const Value.absent(),
    this.tipoEcf = const Value.absent(),
    this.marcaEcf = const Value.absent(),
    this.modeloEcf = const Value.absent(),
    this.dataEstoque = const Value.absent(),
    this.horaEstoque = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfE3> custom({
    Expression<int>? id,
    Expression<String>? serieEcf,
    Expression<String>? mfAdicional,
    Expression<String>? tipoEcf,
    Expression<String>? marcaEcf,
    Expression<String>? modeloEcf,
    Expression<DateTime>? dataEstoque,
    Expression<String>? horaEstoque,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (mfAdicional != null) 'MF_ADICIONAL': mfAdicional,
      if (tipoEcf != null) 'TIPO_ECF': tipoEcf,
      if (marcaEcf != null) 'MARCA_ECF': marcaEcf,
      if (modeloEcf != null) 'MODELO_ECF': modeloEcf,
      if (dataEstoque != null) 'DATA_ESTOQUE': dataEstoque,
      if (horaEstoque != null) 'HORA_ESTOQUE': horaEstoque,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfE3sCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? serieEcf,
      Value<String?>? mfAdicional,
      Value<String?>? tipoEcf,
      Value<String?>? marcaEcf,
      Value<String?>? modeloEcf,
      Value<DateTime?>? dataEstoque,
      Value<String?>? horaEstoque,
      Value<String?>? hashRegistro}) {
    return EcfE3sCompanion(
      id: id ?? this.id,
      serieEcf: serieEcf ?? this.serieEcf,
      mfAdicional: mfAdicional ?? this.mfAdicional,
      tipoEcf: tipoEcf ?? this.tipoEcf,
      marcaEcf: marcaEcf ?? this.marcaEcf,
      modeloEcf: modeloEcf ?? this.modeloEcf,
      dataEstoque: dataEstoque ?? this.dataEstoque,
      horaEstoque: horaEstoque ?? this.horaEstoque,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (mfAdicional.present) {
      map['MF_ADICIONAL'] = Variable<String>(mfAdicional.value);
    }
    if (tipoEcf.present) {
      map['TIPO_ECF'] = Variable<String>(tipoEcf.value);
    }
    if (marcaEcf.present) {
      map['MARCA_ECF'] = Variable<String>(marcaEcf.value);
    }
    if (modeloEcf.present) {
      map['MODELO_ECF'] = Variable<String>(modeloEcf.value);
    }
    if (dataEstoque.present) {
      map['DATA_ESTOQUE'] = Variable<DateTime>(dataEstoque.value);
    }
    if (horaEstoque.present) {
      map['HORA_ESTOQUE'] = Variable<String>(horaEstoque.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfE3sCompanion(')
          ..write('id: $id, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('mfAdicional: $mfAdicional, ')
          ..write('tipoEcf: $tipoEcf, ')
          ..write('marcaEcf: $marcaEcf, ')
          ..write('modeloEcf: $modeloEcf, ')
          ..write('dataEstoque: $dataEstoque, ')
          ..write('horaEstoque: $horaEstoque, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfE3sTable extends EcfE3s with TableInfo<$EcfE3sTable, EcfE3> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfE3sTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  @override
  late final GeneratedColumn<String> serieEcf = GeneratedColumn<String>(
      'SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _mfAdicionalMeta =
      const VerificationMeta('mfAdicional');
  @override
  late final GeneratedColumn<String> mfAdicional = GeneratedColumn<String>(
      'MF_ADICIONAL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoEcfMeta = const VerificationMeta('tipoEcf');
  @override
  late final GeneratedColumn<String> tipoEcf = GeneratedColumn<String>(
      'TIPO_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _marcaEcfMeta = const VerificationMeta('marcaEcf');
  @override
  late final GeneratedColumn<String> marcaEcf = GeneratedColumn<String>(
      'MARCA_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modeloEcfMeta = const VerificationMeta('modeloEcf');
  @override
  late final GeneratedColumn<String> modeloEcf = GeneratedColumn<String>(
      'MODELO_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataEstoqueMeta =
      const VerificationMeta('dataEstoque');
  @override
  late final GeneratedColumn<DateTime> dataEstoque =
      GeneratedColumn<DateTime>('DATA_ESTOQUE', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaEstoqueMeta =
      const VerificationMeta('horaEstoque');
  @override
  late final GeneratedColumn<String> horaEstoque = GeneratedColumn<String>(
      'HORA_ESTOQUE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        serieEcf,
        mfAdicional,
        tipoEcf,
        marcaEcf,
        modeloEcf,
        dataEstoque,
        horaEstoque,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_E3';
  @override
  String get actualTableName => 'ECF_E3';
  @override
  VerificationContext validateIntegrity(Insertable<EcfE3> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
    }
    if (data.containsKey('MF_ADICIONAL')) {
      context.handle(
          _mfAdicionalMeta,
          mfAdicional.isAcceptableOrUnknown(
              data['MF_ADICIONAL']!, _mfAdicionalMeta));
    }
    if (data.containsKey('TIPO_ECF')) {
      context.handle(_tipoEcfMeta,
          tipoEcf.isAcceptableOrUnknown(data['TIPO_ECF']!, _tipoEcfMeta));
    }
    if (data.containsKey('MARCA_ECF')) {
      context.handle(_marcaEcfMeta,
          marcaEcf.isAcceptableOrUnknown(data['MARCA_ECF']!, _marcaEcfMeta));
    }
    if (data.containsKey('MODELO_ECF')) {
      context.handle(_modeloEcfMeta,
          modeloEcf.isAcceptableOrUnknown(data['MODELO_ECF']!, _modeloEcfMeta));
    }
    if (data.containsKey('DATA_ESTOQUE')) {
      context.handle(
          _dataEstoqueMeta,
          dataEstoque.isAcceptableOrUnknown(
              data['DATA_ESTOQUE']!, _dataEstoqueMeta));
    }
    if (data.containsKey('HORA_ESTOQUE')) {
      context.handle(
          _horaEstoqueMeta,
          horaEstoque.isAcceptableOrUnknown(
              data['HORA_ESTOQUE']!, _horaEstoqueMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfE3 map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfE3.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfE3sTable createAlias(String alias) {
    return $EcfE3sTable(attachedDatabase, alias);
  }
}

class EcfImpressora extends DataClass implements Insertable<EcfImpressora> {
  final int? id;
  final int? numero;
  final String? codigo;
  final String? serie;
  final String? identificacao;
  final String? mc;
  final String? md;
  final String? vr;
  final String? tipo;
  final String? marca;
  final String? modelo;
  final String? modeloAcbr;
  final String? modeloDocumentoFiscal;
  final String? versao;
  final String? le;
  final String? lef;
  final String? mfd;
  final String? lacreNaMfd;
  final String? docto;
  final DateTime? dataInstalacaoSb;
  final String? horaInstalacaoSb;
  EcfImpressora(
      {this.id,
      this.numero,
      this.codigo,
      this.serie,
      this.identificacao,
      this.mc,
      this.md,
      this.vr,
      this.tipo,
      this.marca,
      this.modelo,
      this.modeloAcbr,
      this.modeloDocumentoFiscal,
      this.versao,
      this.le,
      this.lef,
      this.mfd,
      this.lacreNaMfd,
      this.docto,
      this.dataInstalacaoSb,
      this.horaInstalacaoSb});
  factory EcfImpressora.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfImpressora(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      numero: ValueSqlType.intType(data['${effectivePrefix}NUMERO']),
      codigo: ValueSqlType.stringType(data['${effectivePrefix}CODIGO']),
      serie: ValueSqlType.stringType(data['${effectivePrefix}SERIE']),
      identificacao: ValueSqlType.stringType(data['${effectivePrefix}IDENTIFICACAO']),
      mc: ValueSqlType.stringType(data['${effectivePrefix}MC']),
      md: ValueSqlType.stringType(data['${effectivePrefix}MD']),
      vr: ValueSqlType.stringType(data['${effectivePrefix}VR']),
      tipo: ValueSqlType.stringType(data['${effectivePrefix}TIPO']),
      marca: ValueSqlType.stringType(data['${effectivePrefix}MARCA']),
      modelo: ValueSqlType.stringType(data['${effectivePrefix}MODELO']),
      modeloAcbr: ValueSqlType.stringType(data['${effectivePrefix}MODELO_ACBR']),
      modeloDocumentoFiscal: ValueSqlType.stringType(
          data['${effectivePrefix}MODELO_DOCUMENTO_FISCAL']),
      versao: ValueSqlType.stringType(data['${effectivePrefix}VERSAO']),
      le: ValueSqlType.stringType(data['${effectivePrefix}LE']),
      lef: ValueSqlType.stringType(data['${effectivePrefix}LEF']),
      mfd: ValueSqlType.stringType(data['${effectivePrefix}MFD']),
      lacreNaMfd: ValueSqlType.stringType(data['${effectivePrefix}LACRE_NA_MFD']),
      docto: ValueSqlType.stringType(data['${effectivePrefix}DOCTO']),
      dataInstalacaoSb: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_INSTALACAO_SB']),
      horaInstalacaoSb: ValueSqlType.stringType(
          data['${effectivePrefix}HORA_INSTALACAO_SB']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<int>(numero);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<String>(codigo);
    }
    if (!nullToAbsent || serie != null) {
      map['SERIE'] = Variable<String>(serie);
    }
    if (!nullToAbsent || identificacao != null) {
      map['IDENTIFICACAO'] = Variable<String>(identificacao);
    }
    if (!nullToAbsent || mc != null) {
      map['MC'] = Variable<String>(mc);
    }
    if (!nullToAbsent || md != null) {
      map['MD'] = Variable<String>(md);
    }
    if (!nullToAbsent || vr != null) {
      map['VR'] = Variable<String>(vr);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || marca != null) {
      map['MARCA'] = Variable<String>(marca);
    }
    if (!nullToAbsent || modelo != null) {
      map['MODELO'] = Variable<String>(modelo);
    }
    if (!nullToAbsent || modeloAcbr != null) {
      map['MODELO_ACBR'] = Variable<String>(modeloAcbr);
    }
    if (!nullToAbsent || modeloDocumentoFiscal != null) {
      map['MODELO_DOCUMENTO_FISCAL'] = Variable<String>(modeloDocumentoFiscal);
    }
    if (!nullToAbsent || versao != null) {
      map['VERSAO'] = Variable<String>(versao);
    }
    if (!nullToAbsent || le != null) {
      map['LE'] = Variable<String>(le);
    }
    if (!nullToAbsent || lef != null) {
      map['LEF'] = Variable<String>(lef);
    }
    if (!nullToAbsent || mfd != null) {
      map['MFD'] = Variable<String>(mfd);
    }
    if (!nullToAbsent || lacreNaMfd != null) {
      map['LACRE_NA_MFD'] = Variable<String>(lacreNaMfd);
    }
    if (!nullToAbsent || docto != null) {
      map['DOCTO'] = Variable<String>(docto);
    }
    if (!nullToAbsent || dataInstalacaoSb != null) {
      map['DATA_INSTALACAO_SB'] = Variable<DateTime>(dataInstalacaoSb);
    }
    if (!nullToAbsent || horaInstalacaoSb != null) {
      map['HORA_INSTALACAO_SB'] = Variable<String>(horaInstalacaoSb);
    }
    return map;
  }

  EcfImpressorasCompanion toCompanion(bool nullToAbsent) {
    return EcfImpressorasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      serie:
          serie == null && nullToAbsent ? const Value.absent() : Value(serie),
      identificacao: identificacao == null && nullToAbsent
          ? const Value.absent()
          : Value(identificacao),
      mc: mc == null && nullToAbsent ? const Value.absent() : Value(mc),
      md: md == null && nullToAbsent ? const Value.absent() : Value(md),
      vr: vr == null && nullToAbsent ? const Value.absent() : Value(vr),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      marca:
          marca == null && nullToAbsent ? const Value.absent() : Value(marca),
      modelo:
          modelo == null && nullToAbsent ? const Value.absent() : Value(modelo),
      modeloAcbr: modeloAcbr == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloAcbr),
      modeloDocumentoFiscal: modeloDocumentoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloDocumentoFiscal),
      versao:
          versao == null && nullToAbsent ? const Value.absent() : Value(versao),
      le: le == null && nullToAbsent ? const Value.absent() : Value(le),
      lef: lef == null && nullToAbsent ? const Value.absent() : Value(lef),
      mfd: mfd == null && nullToAbsent ? const Value.absent() : Value(mfd),
      lacreNaMfd: lacreNaMfd == null && nullToAbsent
          ? const Value.absent()
          : Value(lacreNaMfd),
      docto:
          docto == null && nullToAbsent ? const Value.absent() : Value(docto),
      dataInstalacaoSb: dataInstalacaoSb == null && nullToAbsent
          ? const Value.absent()
          : Value(dataInstalacaoSb),
      horaInstalacaoSb: horaInstalacaoSb == null && nullToAbsent
          ? const Value.absent()
          : Value(horaInstalacaoSb),
    );
  }

  factory EcfImpressora.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfImpressora(
      id: serializer.fromJson<int?>(json['id']),
      numero: serializer.fromJson<int?>(json['numero']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      serie: serializer.fromJson<String?>(json['serie']),
      identificacao: serializer.fromJson<String?>(json['identificacao']),
      mc: serializer.fromJson<String?>(json['mc']),
      md: serializer.fromJson<String?>(json['md']),
      vr: serializer.fromJson<String?>(json['vr']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      marca: serializer.fromJson<String?>(json['marca']),
      modelo: serializer.fromJson<String?>(json['modelo']),
      modeloAcbr: serializer.fromJson<String?>(json['modeloAcbr']),
      modeloDocumentoFiscal:
          serializer.fromJson<String?>(json['modeloDocumentoFiscal']),
      versao: serializer.fromJson<String?>(json['versao']),
      le: serializer.fromJson<String?>(json['le']),
      lef: serializer.fromJson<String?>(json['lef']),
      mfd: serializer.fromJson<String?>(json['mfd']),
      lacreNaMfd: serializer.fromJson<String?>(json['lacreNaMfd']),
      docto: serializer.fromJson<String?>(json['docto']),
      dataInstalacaoSb:
          serializer.fromJson<DateTime?>(json['dataInstalacaoSb']),
      horaInstalacaoSb: serializer.fromJson<String?>(json['horaInstalacaoSb']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'numero': serializer.toJson<int?>(numero),
      'codigo': serializer.toJson<String?>(codigo),
      'serie': serializer.toJson<String?>(serie),
      'identificacao': serializer.toJson<String?>(identificacao),
      'mc': serializer.toJson<String?>(mc),
      'md': serializer.toJson<String?>(md),
      'vr': serializer.toJson<String?>(vr),
      'tipo': serializer.toJson<String?>(tipo),
      'marca': serializer.toJson<String?>(marca),
      'modelo': serializer.toJson<String?>(modelo),
      'modeloAcbr': serializer.toJson<String?>(modeloAcbr),
      'modeloDocumentoFiscal':
          serializer.toJson<String?>(modeloDocumentoFiscal),
      'versao': serializer.toJson<String?>(versao),
      'le': serializer.toJson<String?>(le),
      'lef': serializer.toJson<String?>(lef),
      'mfd': serializer.toJson<String?>(mfd),
      'lacreNaMfd': serializer.toJson<String?>(lacreNaMfd),
      'docto': serializer.toJson<String?>(docto),
      'dataInstalacaoSb': serializer.toJson<DateTime?>(dataInstalacaoSb),
      'horaInstalacaoSb': serializer.toJson<String?>(horaInstalacaoSb),
    };
  }

  EcfImpressora copyWith(
          {int? id,
          int? numero,
          String? codigo,
          String? serie,
          String? identificacao,
          String? mc,
          String? md,
          String? vr,
          String? tipo,
          String? marca,
          String? modelo,
          String? modeloAcbr,
          String? modeloDocumentoFiscal,
          String? versao,
          String? le,
          String? lef,
          String? mfd,
          String? lacreNaMfd,
          String? docto,
          DateTime? dataInstalacaoSb,
          String? horaInstalacaoSb}) =>
      EcfImpressora(
        id: id ?? this.id,
        numero: numero ?? this.numero,
        codigo: codigo ?? this.codigo,
        serie: serie ?? this.serie,
        identificacao: identificacao ?? this.identificacao,
        mc: mc ?? this.mc,
        md: md ?? this.md,
        vr: vr ?? this.vr,
        tipo: tipo ?? this.tipo,
        marca: marca ?? this.marca,
        modelo: modelo ?? this.modelo,
        modeloAcbr: modeloAcbr ?? this.modeloAcbr,
        modeloDocumentoFiscal:
            modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
        versao: versao ?? this.versao,
        le: le ?? this.le,
        lef: lef ?? this.lef,
        mfd: mfd ?? this.mfd,
        lacreNaMfd: lacreNaMfd ?? this.lacreNaMfd,
        docto: docto ?? this.docto,
        dataInstalacaoSb: dataInstalacaoSb ?? this.dataInstalacaoSb,
        horaInstalacaoSb: horaInstalacaoSb ?? this.horaInstalacaoSb,
      );
  @override
  String toString() {
    return (StringBuffer('EcfImpressora(')
          ..write('id: $id, ')
          ..write('numero: $numero, ')
          ..write('codigo: $codigo, ')
          ..write('serie: $serie, ')
          ..write('identificacao: $identificacao, ')
          ..write('mc: $mc, ')
          ..write('md: $md, ')
          ..write('vr: $vr, ')
          ..write('tipo: $tipo, ')
          ..write('marca: $marca, ')
          ..write('modelo: $modelo, ')
          ..write('modeloAcbr: $modeloAcbr, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('versao: $versao, ')
          ..write('le: $le, ')
          ..write('lef: $lef, ')
          ..write('mfd: $mfd, ')
          ..write('lacreNaMfd: $lacreNaMfd, ')
          ..write('docto: $docto, ')
          ..write('dataInstalacaoSb: $dataInstalacaoSb, ')
          ..write('horaInstalacaoSb: $horaInstalacaoSb')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        numero,
        codigo,
        serie,
        identificacao,
        mc,
        md,
        vr,
        tipo,
        marca,
        modelo,
        modeloAcbr,
        modeloDocumentoFiscal,
        versao,
        le,
        lef,
        mfd,
        lacreNaMfd,
        docto,
        dataInstalacaoSb,
        horaInstalacaoSb
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfImpressora &&
          other.id == this.id &&
          other.numero == this.numero &&
          other.codigo == this.codigo &&
          other.serie == this.serie &&
          other.identificacao == this.identificacao &&
          other.mc == this.mc &&
          other.md == this.md &&
          other.vr == this.vr &&
          other.tipo == this.tipo &&
          other.marca == this.marca &&
          other.modelo == this.modelo &&
          other.modeloAcbr == this.modeloAcbr &&
          other.modeloDocumentoFiscal == this.modeloDocumentoFiscal &&
          other.versao == this.versao &&
          other.le == this.le &&
          other.lef == this.lef &&
          other.mfd == this.mfd &&
          other.lacreNaMfd == this.lacreNaMfd &&
          other.docto == this.docto &&
          other.dataInstalacaoSb == this.dataInstalacaoSb &&
          other.horaInstalacaoSb == this.horaInstalacaoSb);
}

class EcfImpressorasCompanion extends UpdateCompanion<EcfImpressora> {
  final Value<int?> id;
  final Value<int?> numero;
  final Value<String?> codigo;
  final Value<String?> serie;
  final Value<String?> identificacao;
  final Value<String?> mc;
  final Value<String?> md;
  final Value<String?> vr;
  final Value<String?> tipo;
  final Value<String?> marca;
  final Value<String?> modelo;
  final Value<String?> modeloAcbr;
  final Value<String?> modeloDocumentoFiscal;
  final Value<String?> versao;
  final Value<String?> le;
  final Value<String?> lef;
  final Value<String?> mfd;
  final Value<String?> lacreNaMfd;
  final Value<String?> docto;
  final Value<DateTime?> dataInstalacaoSb;
  final Value<String?> horaInstalacaoSb;
  const EcfImpressorasCompanion({
    this.id = const Value.absent(),
    this.numero = const Value.absent(),
    this.codigo = const Value.absent(),
    this.serie = const Value.absent(),
    this.identificacao = const Value.absent(),
    this.mc = const Value.absent(),
    this.md = const Value.absent(),
    this.vr = const Value.absent(),
    this.tipo = const Value.absent(),
    this.marca = const Value.absent(),
    this.modelo = const Value.absent(),
    this.modeloAcbr = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.versao = const Value.absent(),
    this.le = const Value.absent(),
    this.lef = const Value.absent(),
    this.mfd = const Value.absent(),
    this.lacreNaMfd = const Value.absent(),
    this.docto = const Value.absent(),
    this.dataInstalacaoSb = const Value.absent(),
    this.horaInstalacaoSb = const Value.absent(),
  });
  EcfImpressorasCompanion.insert({
    this.id = const Value.absent(),
    this.numero = const Value.absent(),
    this.codigo = const Value.absent(),
    this.serie = const Value.absent(),
    this.identificacao = const Value.absent(),
    this.mc = const Value.absent(),
    this.md = const Value.absent(),
    this.vr = const Value.absent(),
    this.tipo = const Value.absent(),
    this.marca = const Value.absent(),
    this.modelo = const Value.absent(),
    this.modeloAcbr = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.versao = const Value.absent(),
    this.le = const Value.absent(),
    this.lef = const Value.absent(),
    this.mfd = const Value.absent(),
    this.lacreNaMfd = const Value.absent(),
    this.docto = const Value.absent(),
    this.dataInstalacaoSb = const Value.absent(),
    this.horaInstalacaoSb = const Value.absent(),
  });
  static Insertable<EcfImpressora> custom({
    Expression<int>? id,
    Expression<int>? numero,
    Expression<String>? codigo,
    Expression<String>? serie,
    Expression<String>? identificacao,
    Expression<String>? mc,
    Expression<String>? md,
    Expression<String>? vr,
    Expression<String>? tipo,
    Expression<String>? marca,
    Expression<String>? modelo,
    Expression<String>? modeloAcbr,
    Expression<String>? modeloDocumentoFiscal,
    Expression<String>? versao,
    Expression<String>? le,
    Expression<String>? lef,
    Expression<String>? mfd,
    Expression<String>? lacreNaMfd,
    Expression<String>? docto,
    Expression<DateTime>? dataInstalacaoSb,
    Expression<String>? horaInstalacaoSb,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (numero != null) 'NUMERO': numero,
      if (codigo != null) 'CODIGO': codigo,
      if (serie != null) 'SERIE': serie,
      if (identificacao != null) 'IDENTIFICACAO': identificacao,
      if (mc != null) 'MC': mc,
      if (md != null) 'MD': md,
      if (vr != null) 'VR': vr,
      if (tipo != null) 'TIPO': tipo,
      if (marca != null) 'MARCA': marca,
      if (modelo != null) 'MODELO': modelo,
      if (modeloAcbr != null) 'MODELO_ACBR': modeloAcbr,
      if (modeloDocumentoFiscal != null)
        'MODELO_DOCUMENTO_FISCAL': modeloDocumentoFiscal,
      if (versao != null) 'VERSAO': versao,
      if (le != null) 'LE': le,
      if (lef != null) 'LEF': lef,
      if (mfd != null) 'MFD': mfd,
      if (lacreNaMfd != null) 'LACRE_NA_MFD': lacreNaMfd,
      if (docto != null) 'DOCTO': docto,
      if (dataInstalacaoSb != null) 'DATA_INSTALACAO_SB': dataInstalacaoSb,
      if (horaInstalacaoSb != null) 'HORA_INSTALACAO_SB': horaInstalacaoSb,
    });
  }

  EcfImpressorasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? numero,
      Value<String?>? codigo,
      Value<String?>? serie,
      Value<String?>? identificacao,
      Value<String?>? mc,
      Value<String?>? md,
      Value<String?>? vr,
      Value<String?>? tipo,
      Value<String?>? marca,
      Value<String?>? modelo,
      Value<String?>? modeloAcbr,
      Value<String?>? modeloDocumentoFiscal,
      Value<String?>? versao,
      Value<String?>? le,
      Value<String?>? lef,
      Value<String?>? mfd,
      Value<String?>? lacreNaMfd,
      Value<String?>? docto,
      Value<DateTime?>? dataInstalacaoSb,
      Value<String?>? horaInstalacaoSb}) {
    return EcfImpressorasCompanion(
      id: id ?? this.id,
      numero: numero ?? this.numero,
      codigo: codigo ?? this.codigo,
      serie: serie ?? this.serie,
      identificacao: identificacao ?? this.identificacao,
      mc: mc ?? this.mc,
      md: md ?? this.md,
      vr: vr ?? this.vr,
      tipo: tipo ?? this.tipo,
      marca: marca ?? this.marca,
      modelo: modelo ?? this.modelo,
      modeloAcbr: modeloAcbr ?? this.modeloAcbr,
      modeloDocumentoFiscal:
          modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
      versao: versao ?? this.versao,
      le: le ?? this.le,
      lef: lef ?? this.lef,
      mfd: mfd ?? this.mfd,
      lacreNaMfd: lacreNaMfd ?? this.lacreNaMfd,
      docto: docto ?? this.docto,
      dataInstalacaoSb: dataInstalacaoSb ?? this.dataInstalacaoSb,
      horaInstalacaoSb: horaInstalacaoSb ?? this.horaInstalacaoSb,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<int>(numero.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<String>(codigo.value);
    }
    if (serie.present) {
      map['SERIE'] = Variable<String>(serie.value);
    }
    if (identificacao.present) {
      map['IDENTIFICACAO'] = Variable<String>(identificacao.value);
    }
    if (mc.present) {
      map['MC'] = Variable<String>(mc.value);
    }
    if (md.present) {
      map['MD'] = Variable<String>(md.value);
    }
    if (vr.present) {
      map['VR'] = Variable<String>(vr.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (marca.present) {
      map['MARCA'] = Variable<String>(marca.value);
    }
    if (modelo.present) {
      map['MODELO'] = Variable<String>(modelo.value);
    }
    if (modeloAcbr.present) {
      map['MODELO_ACBR'] = Variable<String>(modeloAcbr.value);
    }
    if (modeloDocumentoFiscal.present) {
      map['MODELO_DOCUMENTO_FISCAL'] =
          Variable<String>(modeloDocumentoFiscal.value);
    }
    if (versao.present) {
      map['VERSAO'] = Variable<String>(versao.value);
    }
    if (le.present) {
      map['LE'] = Variable<String>(le.value);
    }
    if (lef.present) {
      map['LEF'] = Variable<String>(lef.value);
    }
    if (mfd.present) {
      map['MFD'] = Variable<String>(mfd.value);
    }
    if (lacreNaMfd.present) {
      map['LACRE_NA_MFD'] = Variable<String>(lacreNaMfd.value);
    }
    if (docto.present) {
      map['DOCTO'] = Variable<String>(docto.value);
    }
    if (dataInstalacaoSb.present) {
      map['DATA_INSTALACAO_SB'] = Variable<DateTime>(dataInstalacaoSb.value);
    }
    if (horaInstalacaoSb.present) {
      map['HORA_INSTALACAO_SB'] = Variable<String>(horaInstalacaoSb.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfImpressorasCompanion(')
          ..write('id: $id, ')
          ..write('numero: $numero, ')
          ..write('codigo: $codigo, ')
          ..write('serie: $serie, ')
          ..write('identificacao: $identificacao, ')
          ..write('mc: $mc, ')
          ..write('md: $md, ')
          ..write('vr: $vr, ')
          ..write('tipo: $tipo, ')
          ..write('marca: $marca, ')
          ..write('modelo: $modelo, ')
          ..write('modeloAcbr: $modeloAcbr, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('versao: $versao, ')
          ..write('le: $le, ')
          ..write('lef: $lef, ')
          ..write('mfd: $mfd, ')
          ..write('lacreNaMfd: $lacreNaMfd, ')
          ..write('docto: $docto, ')
          ..write('dataInstalacaoSb: $dataInstalacaoSb, ')
          ..write('horaInstalacaoSb: $horaInstalacaoSb')
          ..write(')'))
        .toString();
  }
}

class $EcfImpressorasTable extends EcfImpressoras
    with TableInfo<$EcfImpressorasTable, EcfImpressora> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfImpressorasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<int> numero = GeneratedColumn<int>(
      'NUMERO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  @override
  late final GeneratedColumn<String> codigo = GeneratedColumn<String>(
      'CODIGO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
      'SERIE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _identificacaoMeta =
      const VerificationMeta('identificacao');
  @override
  late final GeneratedColumn<String> identificacao = GeneratedColumn<String>(
      'IDENTIFICACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _mcMeta = const VerificationMeta('mc');
  @override
  late final GeneratedColumn<String> mc = GeneratedColumn<String>(
      'MC', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _mdMeta = const VerificationMeta('md');
  @override
  late final GeneratedColumn<String> md = GeneratedColumn<String>(
      'MD', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _vrMeta = const VerificationMeta('vr');
  @override
  late final GeneratedColumn<String> vr = GeneratedColumn<String>(
      'VR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
      'TIPO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _marcaMeta = const VerificationMeta('marca');
  @override
  late final GeneratedColumn<String> marca = GeneratedColumn<String>(
      'MARCA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  @override
  late final GeneratedColumn<String> modelo = GeneratedColumn<String>(
      'MODELO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modeloAcbrMeta = const VerificationMeta('modeloAcbr');
  @override
  late final GeneratedColumn<String> modeloAcbr = GeneratedColumn<String>(
      'MODELO_ACBR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _modeloDocumentoFiscalMeta =
      const VerificationMeta('modeloDocumentoFiscal');
  @override
  late final GeneratedColumn<String> modeloDocumentoFiscal =
      GeneratedColumn<String>('MODELO_DOCUMENTO_FISCAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _versaoMeta = const VerificationMeta('versao');
  @override
  late final GeneratedColumn<String> versao = GeneratedColumn<String>(
      'VERSAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _leMeta = const VerificationMeta('le');
  @override
  late final GeneratedColumn<String> le = GeneratedColumn<String>(
      'LE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _lefMeta = const VerificationMeta('lef');
  @override
  late final GeneratedColumn<String> lef = GeneratedColumn<String>(
      'LEF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _mfdMeta = const VerificationMeta('mfd');
  @override
  late final GeneratedColumn<String> mfd = GeneratedColumn<String>(
      'MFD', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _lacreNaMfdMeta = const VerificationMeta('lacreNaMfd');
  @override
  late final GeneratedColumn<String> lacreNaMfd = GeneratedColumn<String>(
      'LACRE_NA_MFD', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _doctoMeta = const VerificationMeta('docto');
  @override
  late final GeneratedColumn<String> docto = GeneratedColumn<String>(
      'DOCTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataInstalacaoSbMeta =
      const VerificationMeta('dataInstalacaoSb');
  @override
  late final GeneratedColumn<DateTime> dataInstalacaoSb =
      GeneratedColumn<DateTime>('DATA_INSTALACAO_SB', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaInstalacaoSbMeta =
      const VerificationMeta('horaInstalacaoSb');
  @override
  late final GeneratedColumn<String> horaInstalacaoSb =
      GeneratedColumn<String>('HORA_INSTALACAO_SB', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 8),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        numero,
        codigo,
        serie,
        identificacao,
        mc,
        md,
        vr,
        tipo,
        marca,
        modelo,
        modeloAcbr,
        modeloDocumentoFiscal,
        versao,
        le,
        lef,
        mfd,
        lacreNaMfd,
        docto,
        dataInstalacaoSb,
        horaInstalacaoSb
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_IMPRESSORA';
  @override
  String get actualTableName => 'ECF_IMPRESSORA';
  @override
  VerificationContext validateIntegrity(Insertable<EcfImpressora> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
    }
    if (data.containsKey('SERIE')) {
      context.handle(
          _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
    }
    if (data.containsKey('IDENTIFICACAO')) {
      context.handle(
          _identificacaoMeta,
          identificacao.isAcceptableOrUnknown(
              data['IDENTIFICACAO']!, _identificacaoMeta));
    }
    if (data.containsKey('MC')) {
      context.handle(_mcMeta, mc.isAcceptableOrUnknown(data['MC']!, _mcMeta));
    }
    if (data.containsKey('MD')) {
      context.handle(_mdMeta, md.isAcceptableOrUnknown(data['MD']!, _mdMeta));
    }
    if (data.containsKey('VR')) {
      context.handle(_vrMeta, vr.isAcceptableOrUnknown(data['VR']!, _vrMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
    }
    if (data.containsKey('MARCA')) {
      context.handle(
          _marcaMeta, marca.isAcceptableOrUnknown(data['MARCA']!, _marcaMeta));
    }
    if (data.containsKey('MODELO')) {
      context.handle(_modeloMeta,
          modelo.isAcceptableOrUnknown(data['MODELO']!, _modeloMeta));
    }
    if (data.containsKey('MODELO_ACBR')) {
      context.handle(
          _modeloAcbrMeta,
          modeloAcbr.isAcceptableOrUnknown(
              data['MODELO_ACBR']!, _modeloAcbrMeta));
    }
    if (data.containsKey('MODELO_DOCUMENTO_FISCAL')) {
      context.handle(
          _modeloDocumentoFiscalMeta,
          modeloDocumentoFiscal.isAcceptableOrUnknown(
              data['MODELO_DOCUMENTO_FISCAL']!, _modeloDocumentoFiscalMeta));
    }
    if (data.containsKey('VERSAO')) {
      context.handle(_versaoMeta,
          versao.isAcceptableOrUnknown(data['VERSAO']!, _versaoMeta));
    }
    if (data.containsKey('LE')) {
      context.handle(_leMeta, le.isAcceptableOrUnknown(data['LE']!, _leMeta));
    }
    if (data.containsKey('LEF')) {
      context.handle(
          _lefMeta, lef.isAcceptableOrUnknown(data['LEF']!, _lefMeta));
    }
    if (data.containsKey('MFD')) {
      context.handle(
          _mfdMeta, mfd.isAcceptableOrUnknown(data['MFD']!, _mfdMeta));
    }
    if (data.containsKey('LACRE_NA_MFD')) {
      context.handle(
          _lacreNaMfdMeta,
          lacreNaMfd.isAcceptableOrUnknown(
              data['LACRE_NA_MFD']!, _lacreNaMfdMeta));
    }
    if (data.containsKey('DOCTO')) {
      context.handle(
          _doctoMeta, docto.isAcceptableOrUnknown(data['DOCTO']!, _doctoMeta));
    }
    if (data.containsKey('DATA_INSTALACAO_SB')) {
      context.handle(
          _dataInstalacaoSbMeta,
          dataInstalacaoSb.isAcceptableOrUnknown(
              data['DATA_INSTALACAO_SB']!, _dataInstalacaoSbMeta));
    }
    if (data.containsKey('HORA_INSTALACAO_SB')) {
      context.handle(
          _horaInstalacaoSbMeta,
          horaInstalacaoSb.isAcceptableOrUnknown(
              data['HORA_INSTALACAO_SB']!, _horaInstalacaoSbMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfImpressora map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfImpressora.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfImpressorasTable createAlias(String alias) {
    return $EcfImpressorasTable(attachedDatabase, alias);
  }
}

class EcfLogTotais extends DataClass implements Insertable<EcfLogTotais> {
  final int? id;
  final int? tipoPagamento;
  final int? produto;
  final int? r01;
  final int? r02;
  final int? r03;
  final int? r04;
  final int? r05;
  final int? r06;
  final int? r07;
  EcfLogTotais(
      {this.id,
      this.tipoPagamento,
      this.produto,
      this.r01,
      this.r02,
      this.r03,
      this.r04,
      this.r05,
      this.r06,
      this.r07});
  factory EcfLogTotais.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfLogTotais(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      tipoPagamento: ValueSqlType.intType(data['${effectivePrefix}TIPO_PAGAMENTO']),
      produto: ValueSqlType.intType(data['${effectivePrefix}PRODUTO']),
      r01: ValueSqlType.intType(data['${effectivePrefix}R01']),
      r02: ValueSqlType.intType(data['${effectivePrefix}R02']),
      r03: ValueSqlType.intType(data['${effectivePrefix}R03']),
      r04: ValueSqlType.intType(data['${effectivePrefix}R04']),
      r05: ValueSqlType.intType(data['${effectivePrefix}R05']),
      r06: ValueSqlType.intType(data['${effectivePrefix}R06']),
      r07: ValueSqlType.intType(data['${effectivePrefix}R07']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || tipoPagamento != null) {
      map['TIPO_PAGAMENTO'] = Variable<int>(tipoPagamento);
    }
    if (!nullToAbsent || produto != null) {
      map['PRODUTO'] = Variable<int>(produto);
    }
    if (!nullToAbsent || r01 != null) {
      map['R01'] = Variable<int>(r01);
    }
    if (!nullToAbsent || r02 != null) {
      map['R02'] = Variable<int>(r02);
    }
    if (!nullToAbsent || r03 != null) {
      map['R03'] = Variable<int>(r03);
    }
    if (!nullToAbsent || r04 != null) {
      map['R04'] = Variable<int>(r04);
    }
    if (!nullToAbsent || r05 != null) {
      map['R05'] = Variable<int>(r05);
    }
    if (!nullToAbsent || r06 != null) {
      map['R06'] = Variable<int>(r06);
    }
    if (!nullToAbsent || r07 != null) {
      map['R07'] = Variable<int>(r07);
    }
    return map;
  }

  EcfLogTotaissCompanion toCompanion(bool nullToAbsent) {
    return EcfLogTotaissCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      tipoPagamento: tipoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoPagamento),
      produto: produto == null && nullToAbsent
          ? const Value.absent()
          : Value(produto),
      r01: r01 == null && nullToAbsent ? const Value.absent() : Value(r01),
      r02: r02 == null && nullToAbsent ? const Value.absent() : Value(r02),
      r03: r03 == null && nullToAbsent ? const Value.absent() : Value(r03),
      r04: r04 == null && nullToAbsent ? const Value.absent() : Value(r04),
      r05: r05 == null && nullToAbsent ? const Value.absent() : Value(r05),
      r06: r06 == null && nullToAbsent ? const Value.absent() : Value(r06),
      r07: r07 == null && nullToAbsent ? const Value.absent() : Value(r07),
    );
  }

  factory EcfLogTotais.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfLogTotais(
      id: serializer.fromJson<int?>(json['id']),
      tipoPagamento: serializer.fromJson<int?>(json['tipoPagamento']),
      produto: serializer.fromJson<int?>(json['produto']),
      r01: serializer.fromJson<int?>(json['r01']),
      r02: serializer.fromJson<int?>(json['r02']),
      r03: serializer.fromJson<int?>(json['r03']),
      r04: serializer.fromJson<int?>(json['r04']),
      r05: serializer.fromJson<int?>(json['r05']),
      r06: serializer.fromJson<int?>(json['r06']),
      r07: serializer.fromJson<int?>(json['r07']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'tipoPagamento': serializer.toJson<int?>(tipoPagamento),
      'produto': serializer.toJson<int?>(produto),
      'r01': serializer.toJson<int?>(r01),
      'r02': serializer.toJson<int?>(r02),
      'r03': serializer.toJson<int?>(r03),
      'r04': serializer.toJson<int?>(r04),
      'r05': serializer.toJson<int?>(r05),
      'r06': serializer.toJson<int?>(r06),
      'r07': serializer.toJson<int?>(r07),
    };
  }

  EcfLogTotais copyWith(
          {int? id,
          int? tipoPagamento,
          int? produto,
          int? r01,
          int? r02,
          int? r03,
          int? r04,
          int? r05,
          int? r06,
          int? r07}) =>
      EcfLogTotais(
        id: id ?? this.id,
        tipoPagamento: tipoPagamento ?? this.tipoPagamento,
        produto: produto ?? this.produto,
        r01: r01 ?? this.r01,
        r02: r02 ?? this.r02,
        r03: r03 ?? this.r03,
        r04: r04 ?? this.r04,
        r05: r05 ?? this.r05,
        r06: r06 ?? this.r06,
        r07: r07 ?? this.r07,
      );
  @override
  String toString() {
    return (StringBuffer('EcfLogTotais(')
          ..write('id: $id, ')
          ..write('tipoPagamento: $tipoPagamento, ')
          ..write('produto: $produto, ')
          ..write('r01: $r01, ')
          ..write('r02: $r02, ')
          ..write('r03: $r03, ')
          ..write('r04: $r04, ')
          ..write('r05: $r05, ')
          ..write('r06: $r06, ')
          ..write('r07: $r07')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, tipoPagamento, produto, r01, r02, r03, r04, r05, r06, r07);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfLogTotais &&
          other.id == this.id &&
          other.tipoPagamento == this.tipoPagamento &&
          other.produto == this.produto &&
          other.r01 == this.r01 &&
          other.r02 == this.r02 &&
          other.r03 == this.r03 &&
          other.r04 == this.r04 &&
          other.r05 == this.r05 &&
          other.r06 == this.r06 &&
          other.r07 == this.r07);
}

class EcfLogTotaissCompanion extends UpdateCompanion<EcfLogTotais> {
  final Value<int?> id;
  final Value<int?> tipoPagamento;
  final Value<int?> produto;
  final Value<int?> r01;
  final Value<int?> r02;
  final Value<int?> r03;
  final Value<int?> r04;
  final Value<int?> r05;
  final Value<int?> r06;
  final Value<int?> r07;
  const EcfLogTotaissCompanion({
    this.id = const Value.absent(),
    this.tipoPagamento = const Value.absent(),
    this.produto = const Value.absent(),
    this.r01 = const Value.absent(),
    this.r02 = const Value.absent(),
    this.r03 = const Value.absent(),
    this.r04 = const Value.absent(),
    this.r05 = const Value.absent(),
    this.r06 = const Value.absent(),
    this.r07 = const Value.absent(),
  });
  EcfLogTotaissCompanion.insert({
    this.id = const Value.absent(),
    this.tipoPagamento = const Value.absent(),
    this.produto = const Value.absent(),
    this.r01 = const Value.absent(),
    this.r02 = const Value.absent(),
    this.r03 = const Value.absent(),
    this.r04 = const Value.absent(),
    this.r05 = const Value.absent(),
    this.r06 = const Value.absent(),
    this.r07 = const Value.absent(),
  });
  static Insertable<EcfLogTotais> custom({
    Expression<int>? id,
    Expression<int>? tipoPagamento,
    Expression<int>? produto,
    Expression<int>? r01,
    Expression<int>? r02,
    Expression<int>? r03,
    Expression<int>? r04,
    Expression<int>? r05,
    Expression<int>? r06,
    Expression<int>? r07,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (tipoPagamento != null) 'TIPO_PAGAMENTO': tipoPagamento,
      if (produto != null) 'PRODUTO': produto,
      if (r01 != null) 'R01': r01,
      if (r02 != null) 'R02': r02,
      if (r03 != null) 'R03': r03,
      if (r04 != null) 'R04': r04,
      if (r05 != null) 'R05': r05,
      if (r06 != null) 'R06': r06,
      if (r07 != null) 'R07': r07,
    });
  }

  EcfLogTotaissCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? tipoPagamento,
      Value<int?>? produto,
      Value<int?>? r01,
      Value<int?>? r02,
      Value<int?>? r03,
      Value<int?>? r04,
      Value<int?>? r05,
      Value<int?>? r06,
      Value<int?>? r07}) {
    return EcfLogTotaissCompanion(
      id: id ?? this.id,
      tipoPagamento: tipoPagamento ?? this.tipoPagamento,
      produto: produto ?? this.produto,
      r01: r01 ?? this.r01,
      r02: r02 ?? this.r02,
      r03: r03 ?? this.r03,
      r04: r04 ?? this.r04,
      r05: r05 ?? this.r05,
      r06: r06 ?? this.r06,
      r07: r07 ?? this.r07,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (tipoPagamento.present) {
      map['TIPO_PAGAMENTO'] = Variable<int>(tipoPagamento.value);
    }
    if (produto.present) {
      map['PRODUTO'] = Variable<int>(produto.value);
    }
    if (r01.present) {
      map['R01'] = Variable<int>(r01.value);
    }
    if (r02.present) {
      map['R02'] = Variable<int>(r02.value);
    }
    if (r03.present) {
      map['R03'] = Variable<int>(r03.value);
    }
    if (r04.present) {
      map['R04'] = Variable<int>(r04.value);
    }
    if (r05.present) {
      map['R05'] = Variable<int>(r05.value);
    }
    if (r06.present) {
      map['R06'] = Variable<int>(r06.value);
    }
    if (r07.present) {
      map['R07'] = Variable<int>(r07.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfLogTotaissCompanion(')
          ..write('id: $id, ')
          ..write('tipoPagamento: $tipoPagamento, ')
          ..write('produto: $produto, ')
          ..write('r01: $r01, ')
          ..write('r02: $r02, ')
          ..write('r03: $r03, ')
          ..write('r04: $r04, ')
          ..write('r05: $r05, ')
          ..write('r06: $r06, ')
          ..write('r07: $r07')
          ..write(')'))
        .toString();
  }
}

class $EcfLogTotaissTable extends EcfLogTotaiss
    with TableInfo<$EcfLogTotaissTable, EcfLogTotais> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfLogTotaissTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _tipoPagamentoMeta =
      const VerificationMeta('tipoPagamento');
  @override
  late final GeneratedColumn<int> tipoPagamento = GeneratedColumn<int>(
      'TIPO_PAGAMENTO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _produtoMeta = const VerificationMeta('produto');
  @override
  late final GeneratedColumn<int> produto = GeneratedColumn<int>(
      'PRODUTO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _r01Meta = const VerificationMeta('r01');
  @override
  late final GeneratedColumn<int> r01 = GeneratedColumn<int>(
      'R01', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _r02Meta = const VerificationMeta('r02');
  @override
  late final GeneratedColumn<int> r02 = GeneratedColumn<int>(
      'R02', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _r03Meta = const VerificationMeta('r03');
  @override
  late final GeneratedColumn<int> r03 = GeneratedColumn<int>(
      'R03', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _r04Meta = const VerificationMeta('r04');
  @override
  late final GeneratedColumn<int> r04 = GeneratedColumn<int>(
      'R04', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _r05Meta = const VerificationMeta('r05');
  @override
  late final GeneratedColumn<int> r05 = GeneratedColumn<int>(
      'R05', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _r06Meta = const VerificationMeta('r06');
  @override
  late final GeneratedColumn<int> r06 = GeneratedColumn<int>(
      'R06', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _r07Meta = const VerificationMeta('r07');
  @override
  late final GeneratedColumn<int> r07 = GeneratedColumn<int>(
      'R07', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, tipoPagamento, produto, r01, r02, r03, r04, r05, r06, r07];
  @override
  String get aliasedName => _alias ?? 'ECF_LOG_TOTAIS';
  @override
  String get actualTableName => 'ECF_LOG_TOTAIS';
  @override
  VerificationContext validateIntegrity(Insertable<EcfLogTotais> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('TIPO_PAGAMENTO')) {
      context.handle(
          _tipoPagamentoMeta,
          tipoPagamento.isAcceptableOrUnknown(
              data['TIPO_PAGAMENTO']!, _tipoPagamentoMeta));
    }
    if (data.containsKey('PRODUTO')) {
      context.handle(_produtoMeta,
          produto.isAcceptableOrUnknown(data['PRODUTO']!, _produtoMeta));
    }
    if (data.containsKey('R01')) {
      context.handle(
          _r01Meta, r01.isAcceptableOrUnknown(data['R01']!, _r01Meta));
    }
    if (data.containsKey('R02')) {
      context.handle(
          _r02Meta, r02.isAcceptableOrUnknown(data['R02']!, _r02Meta));
    }
    if (data.containsKey('R03')) {
      context.handle(
          _r03Meta, r03.isAcceptableOrUnknown(data['R03']!, _r03Meta));
    }
    if (data.containsKey('R04')) {
      context.handle(
          _r04Meta, r04.isAcceptableOrUnknown(data['R04']!, _r04Meta));
    }
    if (data.containsKey('R05')) {
      context.handle(
          _r05Meta, r05.isAcceptableOrUnknown(data['R05']!, _r05Meta));
    }
    if (data.containsKey('R06')) {
      context.handle(
          _r06Meta, r06.isAcceptableOrUnknown(data['R06']!, _r06Meta));
    }
    if (data.containsKey('R07')) {
      context.handle(
          _r07Meta, r07.isAcceptableOrUnknown(data['R07']!, _r07Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfLogTotais map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfLogTotais.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfLogTotaissTable createAlias(String alias) {
    return $EcfLogTotaissTable(attachedDatabase, alias);
  }
}

class EcfR01 extends DataClass implements Insertable<EcfR01> {
  final int? id;
  final String? serieEcf;
  final String? cnpjEmpresa;
  final String? cnpjSh;
  final String? inscricaoEstadualSh;
  final String? inscricaoMunicipalSh;
  final String? denominacaoSh;
  final String? nomePafEcf;
  final String? versaoPafEcf;
  final String? md5PafEcf;
  final DateTime? dataInicial;
  final DateTime? dataFinal;
  final String? versaoEr;
  final String? numeroLaudoPaf;
  final String? razaoSocialSh;
  final String? enderecoSh;
  final String? numeroSh;
  final String? complementoSh;
  final String? bairroSh;
  final String? cidadeSh;
  final String? cepSh;
  final String? ufSh;
  final String? telefoneSh;
  final String? contatoSh;
  final String? principalExecutavel;
  final String? hashRegistro;
  EcfR01(
      {this.id,
      this.serieEcf,
      this.cnpjEmpresa,
      this.cnpjSh,
      this.inscricaoEstadualSh,
      this.inscricaoMunicipalSh,
      this.denominacaoSh,
      this.nomePafEcf,
      this.versaoPafEcf,
      this.md5PafEcf,
      this.dataInicial,
      this.dataFinal,
      this.versaoEr,
      this.numeroLaudoPaf,
      this.razaoSocialSh,
      this.enderecoSh,
      this.numeroSh,
      this.complementoSh,
      this.bairroSh,
      this.cidadeSh,
      this.cepSh,
      this.ufSh,
      this.telefoneSh,
      this.contatoSh,
      this.principalExecutavel,
      this.hashRegistro});
  factory EcfR01.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfR01(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      serieEcf: ValueSqlType.stringType(data['${effectivePrefix}SERIE_ECF']),
      cnpjEmpresa: ValueSqlType.stringType(data['${effectivePrefix}CNPJ_EMPRESA']),
      cnpjSh: ValueSqlType.stringType(data['${effectivePrefix}CNPJ_SH']),
      inscricaoEstadualSh: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL_SH']),
      inscricaoMunicipalSh: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL_SH']),
      denominacaoSh: ValueSqlType.stringType(data['${effectivePrefix}DENOMINACAO_SH']),
      nomePafEcf: ValueSqlType.stringType(data['${effectivePrefix}NOME_PAF_ECF']),
      versaoPafEcf: ValueSqlType.stringType(data['${effectivePrefix}VERSAO_PAF_ECF']),
      md5PafEcf: ValueSqlType.stringType(data['${effectivePrefix}MD5_PAF_ECF']),
      dataInicial: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_INICIAL']),
      dataFinal: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_FINAL']),
      versaoEr: ValueSqlType.stringType(data['${effectivePrefix}VERSAO_ER']),
      numeroLaudoPaf: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_LAUDO_PAF']),
      razaoSocialSh: ValueSqlType.stringType(data['${effectivePrefix}RAZAO_SOCIAL_SH']),
      enderecoSh: ValueSqlType.stringType(data['${effectivePrefix}ENDERECO_SH']),
      numeroSh: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_SH']),
      complementoSh: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO_SH']),
      bairroSh: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO_SH']),
      cidadeSh: ValueSqlType.stringType(data['${effectivePrefix}CIDADE_SH']),
      cepSh: ValueSqlType.stringType(data['${effectivePrefix}CEP_SH']),
      ufSh: ValueSqlType.stringType(data['${effectivePrefix}UF_SH']),
      telefoneSh: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE_SH']),
      contatoSh: ValueSqlType.stringType(data['${effectivePrefix}CONTATO_SH']),
      principalExecutavel: ValueSqlType.stringType(
          data['${effectivePrefix}PRINCIPAL_EXECUTAVEL']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || cnpjEmpresa != null) {
      map['CNPJ_EMPRESA'] = Variable<String>(cnpjEmpresa);
    }
    if (!nullToAbsent || cnpjSh != null) {
      map['CNPJ_SH'] = Variable<String>(cnpjSh);
    }
    if (!nullToAbsent || inscricaoEstadualSh != null) {
      map['INSCRICAO_ESTADUAL_SH'] = Variable<String>(inscricaoEstadualSh);
    }
    if (!nullToAbsent || inscricaoMunicipalSh != null) {
      map['INSCRICAO_MUNICIPAL_SH'] = Variable<String>(inscricaoMunicipalSh);
    }
    if (!nullToAbsent || denominacaoSh != null) {
      map['DENOMINACAO_SH'] = Variable<String>(denominacaoSh);
    }
    if (!nullToAbsent || nomePafEcf != null) {
      map['NOME_PAF_ECF'] = Variable<String>(nomePafEcf);
    }
    if (!nullToAbsent || versaoPafEcf != null) {
      map['VERSAO_PAF_ECF'] = Variable<String>(versaoPafEcf);
    }
    if (!nullToAbsent || md5PafEcf != null) {
      map['MD5_PAF_ECF'] = Variable<String>(md5PafEcf);
    }
    if (!nullToAbsent || dataInicial != null) {
      map['DATA_INICIAL'] = Variable<DateTime>(dataInicial);
    }
    if (!nullToAbsent || dataFinal != null) {
      map['DATA_FINAL'] = Variable<DateTime>(dataFinal);
    }
    if (!nullToAbsent || versaoEr != null) {
      map['VERSAO_ER'] = Variable<String>(versaoEr);
    }
    if (!nullToAbsent || numeroLaudoPaf != null) {
      map['NUMERO_LAUDO_PAF'] = Variable<String>(numeroLaudoPaf);
    }
    if (!nullToAbsent || razaoSocialSh != null) {
      map['RAZAO_SOCIAL_SH'] = Variable<String>(razaoSocialSh);
    }
    if (!nullToAbsent || enderecoSh != null) {
      map['ENDERECO_SH'] = Variable<String>(enderecoSh);
    }
    if (!nullToAbsent || numeroSh != null) {
      map['NUMERO_SH'] = Variable<String>(numeroSh);
    }
    if (!nullToAbsent || complementoSh != null) {
      map['COMPLEMENTO_SH'] = Variable<String>(complementoSh);
    }
    if (!nullToAbsent || bairroSh != null) {
      map['BAIRRO_SH'] = Variable<String>(bairroSh);
    }
    if (!nullToAbsent || cidadeSh != null) {
      map['CIDADE_SH'] = Variable<String>(cidadeSh);
    }
    if (!nullToAbsent || cepSh != null) {
      map['CEP_SH'] = Variable<String>(cepSh);
    }
    if (!nullToAbsent || ufSh != null) {
      map['UF_SH'] = Variable<String>(ufSh);
    }
    if (!nullToAbsent || telefoneSh != null) {
      map['TELEFONE_SH'] = Variable<String>(telefoneSh);
    }
    if (!nullToAbsent || contatoSh != null) {
      map['CONTATO_SH'] = Variable<String>(contatoSh);
    }
    if (!nullToAbsent || principalExecutavel != null) {
      map['PRINCIPAL_EXECUTAVEL'] = Variable<String>(principalExecutavel);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR01sCompanion toCompanion(bool nullToAbsent) {
    return EcfR01sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      cnpjEmpresa: cnpjEmpresa == null && nullToAbsent
          ? const Value.absent()
          : Value(cnpjEmpresa),
      cnpjSh:
          cnpjSh == null && nullToAbsent ? const Value.absent() : Value(cnpjSh),
      inscricaoEstadualSh: inscricaoEstadualSh == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadualSh),
      inscricaoMunicipalSh: inscricaoMunicipalSh == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipalSh),
      denominacaoSh: denominacaoSh == null && nullToAbsent
          ? const Value.absent()
          : Value(denominacaoSh),
      nomePafEcf: nomePafEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(nomePafEcf),
      versaoPafEcf: versaoPafEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(versaoPafEcf),
      md5PafEcf: md5PafEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(md5PafEcf),
      dataInicial: dataInicial == null && nullToAbsent
          ? const Value.absent()
          : Value(dataInicial),
      dataFinal: dataFinal == null && nullToAbsent
          ? const Value.absent()
          : Value(dataFinal),
      versaoEr: versaoEr == null && nullToAbsent
          ? const Value.absent()
          : Value(versaoEr),
      numeroLaudoPaf: numeroLaudoPaf == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroLaudoPaf),
      razaoSocialSh: razaoSocialSh == null && nullToAbsent
          ? const Value.absent()
          : Value(razaoSocialSh),
      enderecoSh: enderecoSh == null && nullToAbsent
          ? const Value.absent()
          : Value(enderecoSh),
      numeroSh: numeroSh == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSh),
      complementoSh: complementoSh == null && nullToAbsent
          ? const Value.absent()
          : Value(complementoSh),
      bairroSh: bairroSh == null && nullToAbsent
          ? const Value.absent()
          : Value(bairroSh),
      cidadeSh: cidadeSh == null && nullToAbsent
          ? const Value.absent()
          : Value(cidadeSh),
      cepSh:
          cepSh == null && nullToAbsent ? const Value.absent() : Value(cepSh),
      ufSh: ufSh == null && nullToAbsent ? const Value.absent() : Value(ufSh),
      telefoneSh: telefoneSh == null && nullToAbsent
          ? const Value.absent()
          : Value(telefoneSh),
      contatoSh: contatoSh == null && nullToAbsent
          ? const Value.absent()
          : Value(contatoSh),
      principalExecutavel: principalExecutavel == null && nullToAbsent
          ? const Value.absent()
          : Value(principalExecutavel),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR01.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfR01(
      id: serializer.fromJson<int?>(json['id']),
      serieEcf: serializer.fromJson<String?>(json['serieEcf']),
      cnpjEmpresa: serializer.fromJson<String?>(json['cnpjEmpresa']),
      cnpjSh: serializer.fromJson<String?>(json['cnpjSh']),
      inscricaoEstadualSh:
          serializer.fromJson<String?>(json['inscricaoEstadualSh']),
      inscricaoMunicipalSh:
          serializer.fromJson<String?>(json['inscricaoMunicipalSh']),
      denominacaoSh: serializer.fromJson<String?>(json['denominacaoSh']),
      nomePafEcf: serializer.fromJson<String?>(json['nomePafEcf']),
      versaoPafEcf: serializer.fromJson<String?>(json['versaoPafEcf']),
      md5PafEcf: serializer.fromJson<String?>(json['md5PafEcf']),
      dataInicial: serializer.fromJson<DateTime?>(json['dataInicial']),
      dataFinal: serializer.fromJson<DateTime?>(json['dataFinal']),
      versaoEr: serializer.fromJson<String?>(json['versaoEr']),
      numeroLaudoPaf: serializer.fromJson<String?>(json['numeroLaudoPaf']),
      razaoSocialSh: serializer.fromJson<String?>(json['razaoSocialSh']),
      enderecoSh: serializer.fromJson<String?>(json['enderecoSh']),
      numeroSh: serializer.fromJson<String?>(json['numeroSh']),
      complementoSh: serializer.fromJson<String?>(json['complementoSh']),
      bairroSh: serializer.fromJson<String?>(json['bairroSh']),
      cidadeSh: serializer.fromJson<String?>(json['cidadeSh']),
      cepSh: serializer.fromJson<String?>(json['cepSh']),
      ufSh: serializer.fromJson<String?>(json['ufSh']),
      telefoneSh: serializer.fromJson<String?>(json['telefoneSh']),
      contatoSh: serializer.fromJson<String?>(json['contatoSh']),
      principalExecutavel:
          serializer.fromJson<String?>(json['principalExecutavel']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'serieEcf': serializer.toJson<String?>(serieEcf),
      'cnpjEmpresa': serializer.toJson<String?>(cnpjEmpresa),
      'cnpjSh': serializer.toJson<String?>(cnpjSh),
      'inscricaoEstadualSh': serializer.toJson<String?>(inscricaoEstadualSh),
      'inscricaoMunicipalSh': serializer.toJson<String?>(inscricaoMunicipalSh),
      'denominacaoSh': serializer.toJson<String?>(denominacaoSh),
      'nomePafEcf': serializer.toJson<String?>(nomePafEcf),
      'versaoPafEcf': serializer.toJson<String?>(versaoPafEcf),
      'md5PafEcf': serializer.toJson<String?>(md5PafEcf),
      'dataInicial': serializer.toJson<DateTime?>(dataInicial),
      'dataFinal': serializer.toJson<DateTime?>(dataFinal),
      'versaoEr': serializer.toJson<String?>(versaoEr),
      'numeroLaudoPaf': serializer.toJson<String?>(numeroLaudoPaf),
      'razaoSocialSh': serializer.toJson<String?>(razaoSocialSh),
      'enderecoSh': serializer.toJson<String?>(enderecoSh),
      'numeroSh': serializer.toJson<String?>(numeroSh),
      'complementoSh': serializer.toJson<String?>(complementoSh),
      'bairroSh': serializer.toJson<String?>(bairroSh),
      'cidadeSh': serializer.toJson<String?>(cidadeSh),
      'cepSh': serializer.toJson<String?>(cepSh),
      'ufSh': serializer.toJson<String?>(ufSh),
      'telefoneSh': serializer.toJson<String?>(telefoneSh),
      'contatoSh': serializer.toJson<String?>(contatoSh),
      'principalExecutavel': serializer.toJson<String?>(principalExecutavel),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  EcfR01 copyWith(
          {int? id,
          String? serieEcf,
          String? cnpjEmpresa,
          String? cnpjSh,
          String? inscricaoEstadualSh,
          String? inscricaoMunicipalSh,
          String? denominacaoSh,
          String? nomePafEcf,
          String? versaoPafEcf,
          String? md5PafEcf,
          DateTime? dataInicial,
          DateTime? dataFinal,
          String? versaoEr,
          String? numeroLaudoPaf,
          String? razaoSocialSh,
          String? enderecoSh,
          String? numeroSh,
          String? complementoSh,
          String? bairroSh,
          String? cidadeSh,
          String? cepSh,
          String? ufSh,
          String? telefoneSh,
          String? contatoSh,
          String? principalExecutavel,
          String? hashRegistro}) =>
      EcfR01(
        id: id ?? this.id,
        serieEcf: serieEcf ?? this.serieEcf,
        cnpjEmpresa: cnpjEmpresa ?? this.cnpjEmpresa,
        cnpjSh: cnpjSh ?? this.cnpjSh,
        inscricaoEstadualSh: inscricaoEstadualSh ?? this.inscricaoEstadualSh,
        inscricaoMunicipalSh: inscricaoMunicipalSh ?? this.inscricaoMunicipalSh,
        denominacaoSh: denominacaoSh ?? this.denominacaoSh,
        nomePafEcf: nomePafEcf ?? this.nomePafEcf,
        versaoPafEcf: versaoPafEcf ?? this.versaoPafEcf,
        md5PafEcf: md5PafEcf ?? this.md5PafEcf,
        dataInicial: dataInicial ?? this.dataInicial,
        dataFinal: dataFinal ?? this.dataFinal,
        versaoEr: versaoEr ?? this.versaoEr,
        numeroLaudoPaf: numeroLaudoPaf ?? this.numeroLaudoPaf,
        razaoSocialSh: razaoSocialSh ?? this.razaoSocialSh,
        enderecoSh: enderecoSh ?? this.enderecoSh,
        numeroSh: numeroSh ?? this.numeroSh,
        complementoSh: complementoSh ?? this.complementoSh,
        bairroSh: bairroSh ?? this.bairroSh,
        cidadeSh: cidadeSh ?? this.cidadeSh,
        cepSh: cepSh ?? this.cepSh,
        ufSh: ufSh ?? this.ufSh,
        telefoneSh: telefoneSh ?? this.telefoneSh,
        contatoSh: contatoSh ?? this.contatoSh,
        principalExecutavel: principalExecutavel ?? this.principalExecutavel,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR01(')
          ..write('id: $id, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('cnpjEmpresa: $cnpjEmpresa, ')
          ..write('cnpjSh: $cnpjSh, ')
          ..write('inscricaoEstadualSh: $inscricaoEstadualSh, ')
          ..write('inscricaoMunicipalSh: $inscricaoMunicipalSh, ')
          ..write('denominacaoSh: $denominacaoSh, ')
          ..write('nomePafEcf: $nomePafEcf, ')
          ..write('versaoPafEcf: $versaoPafEcf, ')
          ..write('md5PafEcf: $md5PafEcf, ')
          ..write('dataInicial: $dataInicial, ')
          ..write('dataFinal: $dataFinal, ')
          ..write('versaoEr: $versaoEr, ')
          ..write('numeroLaudoPaf: $numeroLaudoPaf, ')
          ..write('razaoSocialSh: $razaoSocialSh, ')
          ..write('enderecoSh: $enderecoSh, ')
          ..write('numeroSh: $numeroSh, ')
          ..write('complementoSh: $complementoSh, ')
          ..write('bairroSh: $bairroSh, ')
          ..write('cidadeSh: $cidadeSh, ')
          ..write('cepSh: $cepSh, ')
          ..write('ufSh: $ufSh, ')
          ..write('telefoneSh: $telefoneSh, ')
          ..write('contatoSh: $contatoSh, ')
          ..write('principalExecutavel: $principalExecutavel, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        serieEcf,
        cnpjEmpresa,
        cnpjSh,
        inscricaoEstadualSh,
        inscricaoMunicipalSh,
        denominacaoSh,
        nomePafEcf,
        versaoPafEcf,
        md5PafEcf,
        dataInicial,
        dataFinal,
        versaoEr,
        numeroLaudoPaf,
        razaoSocialSh,
        enderecoSh,
        numeroSh,
        complementoSh,
        bairroSh,
        cidadeSh,
        cepSh,
        ufSh,
        telefoneSh,
        contatoSh,
        principalExecutavel,
        hashRegistro
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfR01 &&
          other.id == this.id &&
          other.serieEcf == this.serieEcf &&
          other.cnpjEmpresa == this.cnpjEmpresa &&
          other.cnpjSh == this.cnpjSh &&
          other.inscricaoEstadualSh == this.inscricaoEstadualSh &&
          other.inscricaoMunicipalSh == this.inscricaoMunicipalSh &&
          other.denominacaoSh == this.denominacaoSh &&
          other.nomePafEcf == this.nomePafEcf &&
          other.versaoPafEcf == this.versaoPafEcf &&
          other.md5PafEcf == this.md5PafEcf &&
          other.dataInicial == this.dataInicial &&
          other.dataFinal == this.dataFinal &&
          other.versaoEr == this.versaoEr &&
          other.numeroLaudoPaf == this.numeroLaudoPaf &&
          other.razaoSocialSh == this.razaoSocialSh &&
          other.enderecoSh == this.enderecoSh &&
          other.numeroSh == this.numeroSh &&
          other.complementoSh == this.complementoSh &&
          other.bairroSh == this.bairroSh &&
          other.cidadeSh == this.cidadeSh &&
          other.cepSh == this.cepSh &&
          other.ufSh == this.ufSh &&
          other.telefoneSh == this.telefoneSh &&
          other.contatoSh == this.contatoSh &&
          other.principalExecutavel == this.principalExecutavel &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR01sCompanion extends UpdateCompanion<EcfR01> {
  final Value<int?> id;
  final Value<String?> serieEcf;
  final Value<String?> cnpjEmpresa;
  final Value<String?> cnpjSh;
  final Value<String?> inscricaoEstadualSh;
  final Value<String?> inscricaoMunicipalSh;
  final Value<String?> denominacaoSh;
  final Value<String?> nomePafEcf;
  final Value<String?> versaoPafEcf;
  final Value<String?> md5PafEcf;
  final Value<DateTime?> dataInicial;
  final Value<DateTime?> dataFinal;
  final Value<String?> versaoEr;
  final Value<String?> numeroLaudoPaf;
  final Value<String?> razaoSocialSh;
  final Value<String?> enderecoSh;
  final Value<String?> numeroSh;
  final Value<String?> complementoSh;
  final Value<String?> bairroSh;
  final Value<String?> cidadeSh;
  final Value<String?> cepSh;
  final Value<String?> ufSh;
  final Value<String?> telefoneSh;
  final Value<String?> contatoSh;
  final Value<String?> principalExecutavel;
  final Value<String?> hashRegistro;
  const EcfR01sCompanion({
    this.id = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.cnpjEmpresa = const Value.absent(),
    this.cnpjSh = const Value.absent(),
    this.inscricaoEstadualSh = const Value.absent(),
    this.inscricaoMunicipalSh = const Value.absent(),
    this.denominacaoSh = const Value.absent(),
    this.nomePafEcf = const Value.absent(),
    this.versaoPafEcf = const Value.absent(),
    this.md5PafEcf = const Value.absent(),
    this.dataInicial = const Value.absent(),
    this.dataFinal = const Value.absent(),
    this.versaoEr = const Value.absent(),
    this.numeroLaudoPaf = const Value.absent(),
    this.razaoSocialSh = const Value.absent(),
    this.enderecoSh = const Value.absent(),
    this.numeroSh = const Value.absent(),
    this.complementoSh = const Value.absent(),
    this.bairroSh = const Value.absent(),
    this.cidadeSh = const Value.absent(),
    this.cepSh = const Value.absent(),
    this.ufSh = const Value.absent(),
    this.telefoneSh = const Value.absent(),
    this.contatoSh = const Value.absent(),
    this.principalExecutavel = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR01sCompanion.insert({
    this.id = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.cnpjEmpresa = const Value.absent(),
    this.cnpjSh = const Value.absent(),
    this.inscricaoEstadualSh = const Value.absent(),
    this.inscricaoMunicipalSh = const Value.absent(),
    this.denominacaoSh = const Value.absent(),
    this.nomePafEcf = const Value.absent(),
    this.versaoPafEcf = const Value.absent(),
    this.md5PafEcf = const Value.absent(),
    this.dataInicial = const Value.absent(),
    this.dataFinal = const Value.absent(),
    this.versaoEr = const Value.absent(),
    this.numeroLaudoPaf = const Value.absent(),
    this.razaoSocialSh = const Value.absent(),
    this.enderecoSh = const Value.absent(),
    this.numeroSh = const Value.absent(),
    this.complementoSh = const Value.absent(),
    this.bairroSh = const Value.absent(),
    this.cidadeSh = const Value.absent(),
    this.cepSh = const Value.absent(),
    this.ufSh = const Value.absent(),
    this.telefoneSh = const Value.absent(),
    this.contatoSh = const Value.absent(),
    this.principalExecutavel = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR01> custom({
    Expression<int>? id,
    Expression<String>? serieEcf,
    Expression<String>? cnpjEmpresa,
    Expression<String>? cnpjSh,
    Expression<String>? inscricaoEstadualSh,
    Expression<String>? inscricaoMunicipalSh,
    Expression<String>? denominacaoSh,
    Expression<String>? nomePafEcf,
    Expression<String>? versaoPafEcf,
    Expression<String>? md5PafEcf,
    Expression<DateTime>? dataInicial,
    Expression<DateTime>? dataFinal,
    Expression<String>? versaoEr,
    Expression<String>? numeroLaudoPaf,
    Expression<String>? razaoSocialSh,
    Expression<String>? enderecoSh,
    Expression<String>? numeroSh,
    Expression<String>? complementoSh,
    Expression<String>? bairroSh,
    Expression<String>? cidadeSh,
    Expression<String>? cepSh,
    Expression<String>? ufSh,
    Expression<String>? telefoneSh,
    Expression<String>? contatoSh,
    Expression<String>? principalExecutavel,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (cnpjEmpresa != null) 'CNPJ_EMPRESA': cnpjEmpresa,
      if (cnpjSh != null) 'CNPJ_SH': cnpjSh,
      if (inscricaoEstadualSh != null)
        'INSCRICAO_ESTADUAL_SH': inscricaoEstadualSh,
      if (inscricaoMunicipalSh != null)
        'INSCRICAO_MUNICIPAL_SH': inscricaoMunicipalSh,
      if (denominacaoSh != null) 'DENOMINACAO_SH': denominacaoSh,
      if (nomePafEcf != null) 'NOME_PAF_ECF': nomePafEcf,
      if (versaoPafEcf != null) 'VERSAO_PAF_ECF': versaoPafEcf,
      if (md5PafEcf != null) 'MD5_PAF_ECF': md5PafEcf,
      if (dataInicial != null) 'DATA_INICIAL': dataInicial,
      if (dataFinal != null) 'DATA_FINAL': dataFinal,
      if (versaoEr != null) 'VERSAO_ER': versaoEr,
      if (numeroLaudoPaf != null) 'NUMERO_LAUDO_PAF': numeroLaudoPaf,
      if (razaoSocialSh != null) 'RAZAO_SOCIAL_SH': razaoSocialSh,
      if (enderecoSh != null) 'ENDERECO_SH': enderecoSh,
      if (numeroSh != null) 'NUMERO_SH': numeroSh,
      if (complementoSh != null) 'COMPLEMENTO_SH': complementoSh,
      if (bairroSh != null) 'BAIRRO_SH': bairroSh,
      if (cidadeSh != null) 'CIDADE_SH': cidadeSh,
      if (cepSh != null) 'CEP_SH': cepSh,
      if (ufSh != null) 'UF_SH': ufSh,
      if (telefoneSh != null) 'TELEFONE_SH': telefoneSh,
      if (contatoSh != null) 'CONTATO_SH': contatoSh,
      if (principalExecutavel != null)
        'PRINCIPAL_EXECUTAVEL': principalExecutavel,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR01sCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? serieEcf,
      Value<String?>? cnpjEmpresa,
      Value<String?>? cnpjSh,
      Value<String?>? inscricaoEstadualSh,
      Value<String?>? inscricaoMunicipalSh,
      Value<String?>? denominacaoSh,
      Value<String?>? nomePafEcf,
      Value<String?>? versaoPafEcf,
      Value<String?>? md5PafEcf,
      Value<DateTime?>? dataInicial,
      Value<DateTime?>? dataFinal,
      Value<String?>? versaoEr,
      Value<String?>? numeroLaudoPaf,
      Value<String?>? razaoSocialSh,
      Value<String?>? enderecoSh,
      Value<String?>? numeroSh,
      Value<String?>? complementoSh,
      Value<String?>? bairroSh,
      Value<String?>? cidadeSh,
      Value<String?>? cepSh,
      Value<String?>? ufSh,
      Value<String?>? telefoneSh,
      Value<String?>? contatoSh,
      Value<String?>? principalExecutavel,
      Value<String?>? hashRegistro}) {
    return EcfR01sCompanion(
      id: id ?? this.id,
      serieEcf: serieEcf ?? this.serieEcf,
      cnpjEmpresa: cnpjEmpresa ?? this.cnpjEmpresa,
      cnpjSh: cnpjSh ?? this.cnpjSh,
      inscricaoEstadualSh: inscricaoEstadualSh ?? this.inscricaoEstadualSh,
      inscricaoMunicipalSh: inscricaoMunicipalSh ?? this.inscricaoMunicipalSh,
      denominacaoSh: denominacaoSh ?? this.denominacaoSh,
      nomePafEcf: nomePafEcf ?? this.nomePafEcf,
      versaoPafEcf: versaoPafEcf ?? this.versaoPafEcf,
      md5PafEcf: md5PafEcf ?? this.md5PafEcf,
      dataInicial: dataInicial ?? this.dataInicial,
      dataFinal: dataFinal ?? this.dataFinal,
      versaoEr: versaoEr ?? this.versaoEr,
      numeroLaudoPaf: numeroLaudoPaf ?? this.numeroLaudoPaf,
      razaoSocialSh: razaoSocialSh ?? this.razaoSocialSh,
      enderecoSh: enderecoSh ?? this.enderecoSh,
      numeroSh: numeroSh ?? this.numeroSh,
      complementoSh: complementoSh ?? this.complementoSh,
      bairroSh: bairroSh ?? this.bairroSh,
      cidadeSh: cidadeSh ?? this.cidadeSh,
      cepSh: cepSh ?? this.cepSh,
      ufSh: ufSh ?? this.ufSh,
      telefoneSh: telefoneSh ?? this.telefoneSh,
      contatoSh: contatoSh ?? this.contatoSh,
      principalExecutavel: principalExecutavel ?? this.principalExecutavel,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (cnpjEmpresa.present) {
      map['CNPJ_EMPRESA'] = Variable<String>(cnpjEmpresa.value);
    }
    if (cnpjSh.present) {
      map['CNPJ_SH'] = Variable<String>(cnpjSh.value);
    }
    if (inscricaoEstadualSh.present) {
      map['INSCRICAO_ESTADUAL_SH'] =
          Variable<String>(inscricaoEstadualSh.value);
    }
    if (inscricaoMunicipalSh.present) {
      map['INSCRICAO_MUNICIPAL_SH'] =
          Variable<String>(inscricaoMunicipalSh.value);
    }
    if (denominacaoSh.present) {
      map['DENOMINACAO_SH'] = Variable<String>(denominacaoSh.value);
    }
    if (nomePafEcf.present) {
      map['NOME_PAF_ECF'] = Variable<String>(nomePafEcf.value);
    }
    if (versaoPafEcf.present) {
      map['VERSAO_PAF_ECF'] = Variable<String>(versaoPafEcf.value);
    }
    if (md5PafEcf.present) {
      map['MD5_PAF_ECF'] = Variable<String>(md5PafEcf.value);
    }
    if (dataInicial.present) {
      map['DATA_INICIAL'] = Variable<DateTime>(dataInicial.value);
    }
    if (dataFinal.present) {
      map['DATA_FINAL'] = Variable<DateTime>(dataFinal.value);
    }
    if (versaoEr.present) {
      map['VERSAO_ER'] = Variable<String>(versaoEr.value);
    }
    if (numeroLaudoPaf.present) {
      map['NUMERO_LAUDO_PAF'] = Variable<String>(numeroLaudoPaf.value);
    }
    if (razaoSocialSh.present) {
      map['RAZAO_SOCIAL_SH'] = Variable<String>(razaoSocialSh.value);
    }
    if (enderecoSh.present) {
      map['ENDERECO_SH'] = Variable<String>(enderecoSh.value);
    }
    if (numeroSh.present) {
      map['NUMERO_SH'] = Variable<String>(numeroSh.value);
    }
    if (complementoSh.present) {
      map['COMPLEMENTO_SH'] = Variable<String>(complementoSh.value);
    }
    if (bairroSh.present) {
      map['BAIRRO_SH'] = Variable<String>(bairroSh.value);
    }
    if (cidadeSh.present) {
      map['CIDADE_SH'] = Variable<String>(cidadeSh.value);
    }
    if (cepSh.present) {
      map['CEP_SH'] = Variable<String>(cepSh.value);
    }
    if (ufSh.present) {
      map['UF_SH'] = Variable<String>(ufSh.value);
    }
    if (telefoneSh.present) {
      map['TELEFONE_SH'] = Variable<String>(telefoneSh.value);
    }
    if (contatoSh.present) {
      map['CONTATO_SH'] = Variable<String>(contatoSh.value);
    }
    if (principalExecutavel.present) {
      map['PRINCIPAL_EXECUTAVEL'] =
          Variable<String>(principalExecutavel.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR01sCompanion(')
          ..write('id: $id, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('cnpjEmpresa: $cnpjEmpresa, ')
          ..write('cnpjSh: $cnpjSh, ')
          ..write('inscricaoEstadualSh: $inscricaoEstadualSh, ')
          ..write('inscricaoMunicipalSh: $inscricaoMunicipalSh, ')
          ..write('denominacaoSh: $denominacaoSh, ')
          ..write('nomePafEcf: $nomePafEcf, ')
          ..write('versaoPafEcf: $versaoPafEcf, ')
          ..write('md5PafEcf: $md5PafEcf, ')
          ..write('dataInicial: $dataInicial, ')
          ..write('dataFinal: $dataFinal, ')
          ..write('versaoEr: $versaoEr, ')
          ..write('numeroLaudoPaf: $numeroLaudoPaf, ')
          ..write('razaoSocialSh: $razaoSocialSh, ')
          ..write('enderecoSh: $enderecoSh, ')
          ..write('numeroSh: $numeroSh, ')
          ..write('complementoSh: $complementoSh, ')
          ..write('bairroSh: $bairroSh, ')
          ..write('cidadeSh: $cidadeSh, ')
          ..write('cepSh: $cepSh, ')
          ..write('ufSh: $ufSh, ')
          ..write('telefoneSh: $telefoneSh, ')
          ..write('contatoSh: $contatoSh, ')
          ..write('principalExecutavel: $principalExecutavel, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR01sTable extends EcfR01s with TableInfo<$EcfR01sTable, EcfR01> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfR01sTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  @override
  late final GeneratedColumn<String> serieEcf = GeneratedColumn<String>(
      'SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cnpjEmpresaMeta =
      const VerificationMeta('cnpjEmpresa');
  @override
  late final GeneratedColumn<String> cnpjEmpresa = GeneratedColumn<String>(
      'CNPJ_EMPRESA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cnpjShMeta = const VerificationMeta('cnpjSh');
  @override
  late final GeneratedColumn<String> cnpjSh = GeneratedColumn<String>(
      'CNPJ_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualShMeta =
      const VerificationMeta('inscricaoEstadualSh');
  @override
  late final GeneratedColumn<String> inscricaoEstadualSh =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL_SH', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _inscricaoMunicipalShMeta =
      const VerificationMeta('inscricaoMunicipalSh');
  @override
  late final GeneratedColumn<String> inscricaoMunicipalSh =
      GeneratedColumn<String>('INSCRICAO_MUNICIPAL_SH', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _denominacaoShMeta =
      const VerificationMeta('denominacaoSh');
  @override
  late final GeneratedColumn<String> denominacaoSh = GeneratedColumn<String>(
      'DENOMINACAO_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomePafEcfMeta = const VerificationMeta('nomePafEcf');
  @override
  late final GeneratedColumn<String> nomePafEcf = GeneratedColumn<String>(
      'NOME_PAF_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _versaoPafEcfMeta =
      const VerificationMeta('versaoPafEcf');
  @override
  late final GeneratedColumn<String> versaoPafEcf = GeneratedColumn<String>(
      'VERSAO_PAF_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _md5PafEcfMeta = const VerificationMeta('md5PafEcf');
  @override
  late final GeneratedColumn<String> md5PafEcf = GeneratedColumn<String>(
      'MD5_PAF_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataInicialMeta =
      const VerificationMeta('dataInicial');
  @override
  late final GeneratedColumn<DateTime> dataInicial =
      GeneratedColumn<DateTime>('DATA_INICIAL', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataFinalMeta = const VerificationMeta('dataFinal');
  @override
  late final GeneratedColumn<DateTime> dataFinal = GeneratedColumn<DateTime>(
      'DATA_FINAL', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _versaoErMeta = const VerificationMeta('versaoEr');
  @override
  late final GeneratedColumn<String> versaoEr = GeneratedColumn<String>(
      'VERSAO_ER', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 4),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroLaudoPafMeta =
      const VerificationMeta('numeroLaudoPaf');
  @override
  late final GeneratedColumn<String> numeroLaudoPaf = GeneratedColumn<String>(
      'NUMERO_LAUDO_PAF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _razaoSocialShMeta =
      const VerificationMeta('razaoSocialSh');
  @override
  late final GeneratedColumn<String> razaoSocialSh = GeneratedColumn<String>(
      'RAZAO_SOCIAL_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _enderecoShMeta = const VerificationMeta('enderecoSh');
  @override
  late final GeneratedColumn<String> enderecoSh = GeneratedColumn<String>(
      'ENDERECO_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroShMeta = const VerificationMeta('numeroSh');
  @override
  late final GeneratedColumn<String> numeroSh = GeneratedColumn<String>(
      'NUMERO_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoShMeta =
      const VerificationMeta('complementoSh');
  @override
  late final GeneratedColumn<String> complementoSh = GeneratedColumn<String>(
      'COMPLEMENTO_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroShMeta = const VerificationMeta('bairroSh');
  @override
  late final GeneratedColumn<String> bairroSh = GeneratedColumn<String>(
      'BAIRRO_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cidadeShMeta = const VerificationMeta('cidadeSh');
  @override
  late final GeneratedColumn<String> cidadeSh = GeneratedColumn<String>(
      'CIDADE_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 40),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepShMeta = const VerificationMeta('cepSh');
  @override
  late final GeneratedColumn<String> cepSh = GeneratedColumn<String>(
      'CEP_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufShMeta = const VerificationMeta('ufSh');
  @override
  late final GeneratedColumn<String> ufSh = GeneratedColumn<String>(
      'UF_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneShMeta = const VerificationMeta('telefoneSh');
  @override
  late final GeneratedColumn<String> telefoneSh = GeneratedColumn<String>(
      'TELEFONE_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _contatoShMeta = const VerificationMeta('contatoSh');
  @override
  late final GeneratedColumn<String> contatoSh = GeneratedColumn<String>(
      'CONTATO_SH', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _principalExecutavelMeta =
      const VerificationMeta('principalExecutavel');
  @override
  late final GeneratedColumn<String> principalExecutavel =
      GeneratedColumn<String>('PRINCIPAL_EXECUTAVEL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 40),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        serieEcf,
        cnpjEmpresa,
        cnpjSh,
        inscricaoEstadualSh,
        inscricaoMunicipalSh,
        denominacaoSh,
        nomePafEcf,
        versaoPafEcf,
        md5PafEcf,
        dataInicial,
        dataFinal,
        versaoEr,
        numeroLaudoPaf,
        razaoSocialSh,
        enderecoSh,
        numeroSh,
        complementoSh,
        bairroSh,
        cidadeSh,
        cepSh,
        ufSh,
        telefoneSh,
        contatoSh,
        principalExecutavel,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_R01';
  @override
  String get actualTableName => 'ECF_R01';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR01> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
    }
    if (data.containsKey('CNPJ_EMPRESA')) {
      context.handle(
          _cnpjEmpresaMeta,
          cnpjEmpresa.isAcceptableOrUnknown(
              data['CNPJ_EMPRESA']!, _cnpjEmpresaMeta));
    }
    if (data.containsKey('CNPJ_SH')) {
      context.handle(_cnpjShMeta,
          cnpjSh.isAcceptableOrUnknown(data['CNPJ_SH']!, _cnpjShMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL_SH')) {
      context.handle(
          _inscricaoEstadualShMeta,
          inscricaoEstadualSh.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL_SH']!, _inscricaoEstadualShMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL_SH')) {
      context.handle(
          _inscricaoMunicipalShMeta,
          inscricaoMunicipalSh.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL_SH']!, _inscricaoMunicipalShMeta));
    }
    if (data.containsKey('DENOMINACAO_SH')) {
      context.handle(
          _denominacaoShMeta,
          denominacaoSh.isAcceptableOrUnknown(
              data['DENOMINACAO_SH']!, _denominacaoShMeta));
    }
    if (data.containsKey('NOME_PAF_ECF')) {
      context.handle(
          _nomePafEcfMeta,
          nomePafEcf.isAcceptableOrUnknown(
              data['NOME_PAF_ECF']!, _nomePafEcfMeta));
    }
    if (data.containsKey('VERSAO_PAF_ECF')) {
      context.handle(
          _versaoPafEcfMeta,
          versaoPafEcf.isAcceptableOrUnknown(
              data['VERSAO_PAF_ECF']!, _versaoPafEcfMeta));
    }
    if (data.containsKey('MD5_PAF_ECF')) {
      context.handle(
          _md5PafEcfMeta,
          md5PafEcf.isAcceptableOrUnknown(
              data['MD5_PAF_ECF']!, _md5PafEcfMeta));
    }
    if (data.containsKey('DATA_INICIAL')) {
      context.handle(
          _dataInicialMeta,
          dataInicial.isAcceptableOrUnknown(
              data['DATA_INICIAL']!, _dataInicialMeta));
    }
    if (data.containsKey('DATA_FINAL')) {
      context.handle(_dataFinalMeta,
          dataFinal.isAcceptableOrUnknown(data['DATA_FINAL']!, _dataFinalMeta));
    }
    if (data.containsKey('VERSAO_ER')) {
      context.handle(_versaoErMeta,
          versaoEr.isAcceptableOrUnknown(data['VERSAO_ER']!, _versaoErMeta));
    }
    if (data.containsKey('NUMERO_LAUDO_PAF')) {
      context.handle(
          _numeroLaudoPafMeta,
          numeroLaudoPaf.isAcceptableOrUnknown(
              data['NUMERO_LAUDO_PAF']!, _numeroLaudoPafMeta));
    }
    if (data.containsKey('RAZAO_SOCIAL_SH')) {
      context.handle(
          _razaoSocialShMeta,
          razaoSocialSh.isAcceptableOrUnknown(
              data['RAZAO_SOCIAL_SH']!, _razaoSocialShMeta));
    }
    if (data.containsKey('ENDERECO_SH')) {
      context.handle(
          _enderecoShMeta,
          enderecoSh.isAcceptableOrUnknown(
              data['ENDERECO_SH']!, _enderecoShMeta));
    }
    if (data.containsKey('NUMERO_SH')) {
      context.handle(_numeroShMeta,
          numeroSh.isAcceptableOrUnknown(data['NUMERO_SH']!, _numeroShMeta));
    }
    if (data.containsKey('COMPLEMENTO_SH')) {
      context.handle(
          _complementoShMeta,
          complementoSh.isAcceptableOrUnknown(
              data['COMPLEMENTO_SH']!, _complementoShMeta));
    }
    if (data.containsKey('BAIRRO_SH')) {
      context.handle(_bairroShMeta,
          bairroSh.isAcceptableOrUnknown(data['BAIRRO_SH']!, _bairroShMeta));
    }
    if (data.containsKey('CIDADE_SH')) {
      context.handle(_cidadeShMeta,
          cidadeSh.isAcceptableOrUnknown(data['CIDADE_SH']!, _cidadeShMeta));
    }
    if (data.containsKey('CEP_SH')) {
      context.handle(
          _cepShMeta, cepSh.isAcceptableOrUnknown(data['CEP_SH']!, _cepShMeta));
    }
    if (data.containsKey('UF_SH')) {
      context.handle(
          _ufShMeta, ufSh.isAcceptableOrUnknown(data['UF_SH']!, _ufShMeta));
    }
    if (data.containsKey('TELEFONE_SH')) {
      context.handle(
          _telefoneShMeta,
          telefoneSh.isAcceptableOrUnknown(
              data['TELEFONE_SH']!, _telefoneShMeta));
    }
    if (data.containsKey('CONTATO_SH')) {
      context.handle(_contatoShMeta,
          contatoSh.isAcceptableOrUnknown(data['CONTATO_SH']!, _contatoShMeta));
    }
    if (data.containsKey('PRINCIPAL_EXECUTAVEL')) {
      context.handle(
          _principalExecutavelMeta,
          principalExecutavel.isAcceptableOrUnknown(
              data['PRINCIPAL_EXECUTAVEL']!, _principalExecutavelMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR01 map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfR01.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfR01sTable createAlias(String alias) {
    return $EcfR01sTable(attachedDatabase, alias);
  }
}

class EcfR02 extends DataClass implements Insertable<EcfR02> {
  final int? id;
  final int? idPdvOperador;
  final int? idEcfImpressora;
  final int? idEcfCaixa;
  final String? serieEcf;
  final int? crz;
  final int? coo;
  final int? cro;
  final DateTime? dataMovimento;
  final DateTime? dataEmissao;
  final String? horaEmissao;
  final double? vendaBruta;
  final double? grandeTotal;
  final String? hashRegistro;
  EcfR02(
      {this.id,
      this.idPdvOperador,
      this.idEcfImpressora,
      this.idEcfCaixa,
      this.serieEcf,
      this.crz,
      this.coo,
      this.cro,
      this.dataMovimento,
      this.dataEmissao,
      this.horaEmissao,
      this.vendaBruta,
      this.grandeTotal,
      this.hashRegistro});
  factory EcfR02.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfR02(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvOperador: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_OPERADOR']),
      idEcfImpressora: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
      idEcfCaixa: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_CAIXA']),
      serieEcf: ValueSqlType.stringType(data['${effectivePrefix}SERIE_ECF']),
      crz: ValueSqlType.intType(data['${effectivePrefix}CRZ']),
      coo: ValueSqlType.intType(data['${effectivePrefix}COO']),
      cro: ValueSqlType.intType(data['${effectivePrefix}CRO']),
      dataMovimento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_MOVIMENTO']),
      dataEmissao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_EMISSAO']),
      horaEmissao: ValueSqlType.stringType(data['${effectivePrefix}HORA_EMISSAO']),
      vendaBruta: ValueSqlType.doubleType(data['${effectivePrefix}VENDA_BRUTA']),
      grandeTotal: ValueSqlType.doubleType(data['${effectivePrefix}GRANDE_TOTAL']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvOperador != null) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador);
    }
    if (!nullToAbsent || idEcfImpressora != null) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora);
    }
    if (!nullToAbsent || idEcfCaixa != null) {
      map['ID_ECF_CAIXA'] = Variable<int>(idEcfCaixa);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || crz != null) {
      map['CRZ'] = Variable<int>(crz);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || cro != null) {
      map['CRO'] = Variable<int>(cro);
    }
    if (!nullToAbsent || dataMovimento != null) {
      map['DATA_MOVIMENTO'] = Variable<DateTime>(dataMovimento);
    }
    if (!nullToAbsent || dataEmissao != null) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao);
    }
    if (!nullToAbsent || horaEmissao != null) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao);
    }
    if (!nullToAbsent || vendaBruta != null) {
      map['VENDA_BRUTA'] = Variable<double>(vendaBruta);
    }
    if (!nullToAbsent || grandeTotal != null) {
      map['GRANDE_TOTAL'] = Variable<double>(grandeTotal);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR02sCompanion toCompanion(bool nullToAbsent) {
    return EcfR02sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvOperador: idPdvOperador == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvOperador),
      idEcfImpressora: idEcfImpressora == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfImpressora),
      idEcfCaixa: idEcfCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfCaixa),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      crz: crz == null && nullToAbsent ? const Value.absent() : Value(crz),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      cro: cro == null && nullToAbsent ? const Value.absent() : Value(cro),
      dataMovimento: dataMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataMovimento),
      dataEmissao: dataEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissao),
      horaEmissao: horaEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEmissao),
      vendaBruta: vendaBruta == null && nullToAbsent
          ? const Value.absent()
          : Value(vendaBruta),
      grandeTotal: grandeTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(grandeTotal),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR02.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfR02(
      id: serializer.fromJson<int?>(json['id']),
      idPdvOperador: serializer.fromJson<int?>(json['idPdvOperador']),
      idEcfImpressora: serializer.fromJson<int?>(json['idEcfImpressora']),
      idEcfCaixa: serializer.fromJson<int?>(json['idEcfCaixa']),
      serieEcf: serializer.fromJson<String?>(json['serieEcf']),
      crz: serializer.fromJson<int?>(json['crz']),
      coo: serializer.fromJson<int?>(json['coo']),
      cro: serializer.fromJson<int?>(json['cro']),
      dataMovimento: serializer.fromJson<DateTime?>(json['dataMovimento']),
      dataEmissao: serializer.fromJson<DateTime?>(json['dataEmissao']),
      horaEmissao: serializer.fromJson<String?>(json['horaEmissao']),
      vendaBruta: serializer.fromJson<double?>(json['vendaBruta']),
      grandeTotal: serializer.fromJson<double?>(json['grandeTotal']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvOperador': serializer.toJson<int?>(idPdvOperador),
      'idEcfImpressora': serializer.toJson<int?>(idEcfImpressora),
      'idEcfCaixa': serializer.toJson<int?>(idEcfCaixa),
      'serieEcf': serializer.toJson<String?>(serieEcf),
      'crz': serializer.toJson<int?>(crz),
      'coo': serializer.toJson<int?>(coo),
      'cro': serializer.toJson<int?>(cro),
      'dataMovimento': serializer.toJson<DateTime?>(dataMovimento),
      'dataEmissao': serializer.toJson<DateTime?>(dataEmissao),
      'horaEmissao': serializer.toJson<String?>(horaEmissao),
      'vendaBruta': serializer.toJson<double?>(vendaBruta),
      'grandeTotal': serializer.toJson<double?>(grandeTotal),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  EcfR02 copyWith(
          {int? id,
          int? idPdvOperador,
          int? idEcfImpressora,
          int? idEcfCaixa,
          String? serieEcf,
          int? crz,
          int? coo,
          int? cro,
          DateTime? dataMovimento,
          DateTime? dataEmissao,
          String? horaEmissao,
          double? vendaBruta,
          double? grandeTotal,
          String? hashRegistro}) =>
      EcfR02(
        id: id ?? this.id,
        idPdvOperador: idPdvOperador ?? this.idPdvOperador,
        idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
        idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
        serieEcf: serieEcf ?? this.serieEcf,
        crz: crz ?? this.crz,
        coo: coo ?? this.coo,
        cro: cro ?? this.cro,
        dataMovimento: dataMovimento ?? this.dataMovimento,
        dataEmissao: dataEmissao ?? this.dataEmissao,
        horaEmissao: horaEmissao ?? this.horaEmissao,
        vendaBruta: vendaBruta ?? this.vendaBruta,
        grandeTotal: grandeTotal ?? this.grandeTotal,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR02(')
          ..write('id: $id, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idEcfCaixa: $idEcfCaixa, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('crz: $crz, ')
          ..write('coo: $coo, ')
          ..write('cro: $cro, ')
          ..write('dataMovimento: $dataMovimento, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('vendaBruta: $vendaBruta, ')
          ..write('grandeTotal: $grandeTotal, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idPdvOperador,
      idEcfImpressora,
      idEcfCaixa,
      serieEcf,
      crz,
      coo,
      cro,
      dataMovimento,
      dataEmissao,
      horaEmissao,
      vendaBruta,
      grandeTotal,
      hashRegistro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfR02 &&
          other.id == this.id &&
          other.idPdvOperador == this.idPdvOperador &&
          other.idEcfImpressora == this.idEcfImpressora &&
          other.idEcfCaixa == this.idEcfCaixa &&
          other.serieEcf == this.serieEcf &&
          other.crz == this.crz &&
          other.coo == this.coo &&
          other.cro == this.cro &&
          other.dataMovimento == this.dataMovimento &&
          other.dataEmissao == this.dataEmissao &&
          other.horaEmissao == this.horaEmissao &&
          other.vendaBruta == this.vendaBruta &&
          other.grandeTotal == this.grandeTotal &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR02sCompanion extends UpdateCompanion<EcfR02> {
  final Value<int?> id;
  final Value<int?> idPdvOperador;
  final Value<int?> idEcfImpressora;
  final Value<int?> idEcfCaixa;
  final Value<String?> serieEcf;
  final Value<int?> crz;
  final Value<int?> coo;
  final Value<int?> cro;
  final Value<DateTime?> dataMovimento;
  final Value<DateTime?> dataEmissao;
  final Value<String?> horaEmissao;
  final Value<double?> vendaBruta;
  final Value<double?> grandeTotal;
  final Value<String?> hashRegistro;
  const EcfR02sCompanion({
    this.id = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idEcfCaixa = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.crz = const Value.absent(),
    this.coo = const Value.absent(),
    this.cro = const Value.absent(),
    this.dataMovimento = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.vendaBruta = const Value.absent(),
    this.grandeTotal = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR02sCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idEcfCaixa = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.crz = const Value.absent(),
    this.coo = const Value.absent(),
    this.cro = const Value.absent(),
    this.dataMovimento = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.vendaBruta = const Value.absent(),
    this.grandeTotal = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR02> custom({
    Expression<int>? id,
    Expression<int>? idPdvOperador,
    Expression<int>? idEcfImpressora,
    Expression<int>? idEcfCaixa,
    Expression<String>? serieEcf,
    Expression<int>? crz,
    Expression<int>? coo,
    Expression<int>? cro,
    Expression<DateTime>? dataMovimento,
    Expression<DateTime>? dataEmissao,
    Expression<String>? horaEmissao,
    Expression<double>? vendaBruta,
    Expression<double>? grandeTotal,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
      if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
      if (idEcfCaixa != null) 'ID_ECF_CAIXA': idEcfCaixa,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (crz != null) 'CRZ': crz,
      if (coo != null) 'COO': coo,
      if (cro != null) 'CRO': cro,
      if (dataMovimento != null) 'DATA_MOVIMENTO': dataMovimento,
      if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
      if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
      if (vendaBruta != null) 'VENDA_BRUTA': vendaBruta,
      if (grandeTotal != null) 'GRANDE_TOTAL': grandeTotal,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR02sCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvOperador,
      Value<int?>? idEcfImpressora,
      Value<int?>? idEcfCaixa,
      Value<String?>? serieEcf,
      Value<int?>? crz,
      Value<int?>? coo,
      Value<int?>? cro,
      Value<DateTime?>? dataMovimento,
      Value<DateTime?>? dataEmissao,
      Value<String?>? horaEmissao,
      Value<double?>? vendaBruta,
      Value<double?>? grandeTotal,
      Value<String?>? hashRegistro}) {
    return EcfR02sCompanion(
      id: id ?? this.id,
      idPdvOperador: idPdvOperador ?? this.idPdvOperador,
      idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
      idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
      serieEcf: serieEcf ?? this.serieEcf,
      crz: crz ?? this.crz,
      coo: coo ?? this.coo,
      cro: cro ?? this.cro,
      dataMovimento: dataMovimento ?? this.dataMovimento,
      dataEmissao: dataEmissao ?? this.dataEmissao,
      horaEmissao: horaEmissao ?? this.horaEmissao,
      vendaBruta: vendaBruta ?? this.vendaBruta,
      grandeTotal: grandeTotal ?? this.grandeTotal,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvOperador.present) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador.value);
    }
    if (idEcfImpressora.present) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora.value);
    }
    if (idEcfCaixa.present) {
      map['ID_ECF_CAIXA'] = Variable<int>(idEcfCaixa.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (crz.present) {
      map['CRZ'] = Variable<int>(crz.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (cro.present) {
      map['CRO'] = Variable<int>(cro.value);
    }
    if (dataMovimento.present) {
      map['DATA_MOVIMENTO'] = Variable<DateTime>(dataMovimento.value);
    }
    if (dataEmissao.present) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao.value);
    }
    if (horaEmissao.present) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao.value);
    }
    if (vendaBruta.present) {
      map['VENDA_BRUTA'] = Variable<double>(vendaBruta.value);
    }
    if (grandeTotal.present) {
      map['GRANDE_TOTAL'] = Variable<double>(grandeTotal.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR02sCompanion(')
          ..write('id: $id, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idEcfCaixa: $idEcfCaixa, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('crz: $crz, ')
          ..write('coo: $coo, ')
          ..write('cro: $cro, ')
          ..write('dataMovimento: $dataMovimento, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('vendaBruta: $vendaBruta, ')
          ..write('grandeTotal: $grandeTotal, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR02sTable extends EcfR02s with TableInfo<$EcfR02sTable, EcfR02> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfR02sTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvOperadorMeta =
      const VerificationMeta('idPdvOperador');
  @override
  late final GeneratedColumn<int> idPdvOperador = GeneratedColumn<int>(
      'ID_PDV_OPERADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
  final VerificationMeta _idEcfImpressoraMeta =
      const VerificationMeta('idEcfImpressora');
  @override
  late final GeneratedColumn<int> idEcfImpressora = GeneratedColumn<int>(
      'ID_ECF_IMPRESSORA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
  final VerificationMeta _idEcfCaixaMeta = const VerificationMeta('idEcfCaixa');
  @override
  late final GeneratedColumn<int> idEcfCaixa = GeneratedColumn<int>(
      'ID_ECF_CAIXA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_CAIXA(ID)');
  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  @override
  late final GeneratedColumn<String> serieEcf = GeneratedColumn<String>(
      'SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _crzMeta = const VerificationMeta('crz');
  @override
  late final GeneratedColumn<int> crz = GeneratedColumn<int>(
      'CRZ', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  @override
  late final GeneratedColumn<int> coo = GeneratedColumn<int>(
      'COO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _croMeta = const VerificationMeta('cro');
  @override
  late final GeneratedColumn<int> cro = GeneratedColumn<int>(
      'CRO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataMovimentoMeta =
      const VerificationMeta('dataMovimento');
  @override
  late final GeneratedColumn<DateTime> dataMovimento =
      GeneratedColumn<DateTime>('DATA_MOVIMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataEmissaoMeta =
      const VerificationMeta('dataEmissao');
  @override
  late final GeneratedColumn<DateTime> dataEmissao =
      GeneratedColumn<DateTime>('DATA_EMISSAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaEmissaoMeta =
      const VerificationMeta('horaEmissao');
  @override
  late final GeneratedColumn<String> horaEmissao = GeneratedColumn<String>(
      'HORA_EMISSAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _vendaBrutaMeta = const VerificationMeta('vendaBruta');
  @override
  late final GeneratedColumn<double> vendaBruta = GeneratedColumn<double>(
      'VENDA_BRUTA', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _grandeTotalMeta =
      const VerificationMeta('grandeTotal');
  @override
  late final GeneratedColumn<double> grandeTotal = GeneratedColumn<double>(
      'GRANDE_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvOperador,
        idEcfImpressora,
        idEcfCaixa,
        serieEcf,
        crz,
        coo,
        cro,
        dataMovimento,
        dataEmissao,
        horaEmissao,
        vendaBruta,
        grandeTotal,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_R02';
  @override
  String get actualTableName => 'ECF_R02';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR02> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_OPERADOR')) {
      context.handle(
          _idPdvOperadorMeta,
          idPdvOperador.isAcceptableOrUnknown(
              data['ID_PDV_OPERADOR']!, _idPdvOperadorMeta));
    }
    if (data.containsKey('ID_ECF_IMPRESSORA')) {
      context.handle(
          _idEcfImpressoraMeta,
          idEcfImpressora.isAcceptableOrUnknown(
              data['ID_ECF_IMPRESSORA']!, _idEcfImpressoraMeta));
    }
    if (data.containsKey('ID_ECF_CAIXA')) {
      context.handle(
          _idEcfCaixaMeta,
          idEcfCaixa.isAcceptableOrUnknown(
              data['ID_ECF_CAIXA']!, _idEcfCaixaMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
    }
    if (data.containsKey('CRZ')) {
      context.handle(
          _crzMeta, crz.isAcceptableOrUnknown(data['CRZ']!, _crzMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
    }
    if (data.containsKey('CRO')) {
      context.handle(
          _croMeta, cro.isAcceptableOrUnknown(data['CRO']!, _croMeta));
    }
    if (data.containsKey('DATA_MOVIMENTO')) {
      context.handle(
          _dataMovimentoMeta,
          dataMovimento.isAcceptableOrUnknown(
              data['DATA_MOVIMENTO']!, _dataMovimentoMeta));
    }
    if (data.containsKey('DATA_EMISSAO')) {
      context.handle(
          _dataEmissaoMeta,
          dataEmissao.isAcceptableOrUnknown(
              data['DATA_EMISSAO']!, _dataEmissaoMeta));
    }
    if (data.containsKey('HORA_EMISSAO')) {
      context.handle(
          _horaEmissaoMeta,
          horaEmissao.isAcceptableOrUnknown(
              data['HORA_EMISSAO']!, _horaEmissaoMeta));
    }
    if (data.containsKey('VENDA_BRUTA')) {
      context.handle(
          _vendaBrutaMeta,
          vendaBruta.isAcceptableOrUnknown(
              data['VENDA_BRUTA']!, _vendaBrutaMeta));
    }
    if (data.containsKey('GRANDE_TOTAL')) {
      context.handle(
          _grandeTotalMeta,
          grandeTotal.isAcceptableOrUnknown(
              data['GRANDE_TOTAL']!, _grandeTotalMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR02 map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfR02.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfR02sTable createAlias(String alias) {
    return $EcfR02sTable(attachedDatabase, alias);
  }
}

class EcfR03 extends DataClass implements Insertable<EcfR03> {
  final int? id;
  final int? idEcfR02;
  final String? serieEcf;
  final String? totalizadorParcial;
  final double? valorAcumulado;
  final int? crz;
  final String? hashRegistro;
  EcfR03(
      {this.id,
      this.idEcfR02,
      this.serieEcf,
      this.totalizadorParcial,
      this.valorAcumulado,
      this.crz,
      this.hashRegistro});
  factory EcfR03.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfR03(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idEcfR02: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_R02']),
      serieEcf: ValueSqlType.stringType(data['${effectivePrefix}SERIE_ECF']),
      totalizadorParcial: ValueSqlType.stringType(
          data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
      valorAcumulado: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ACUMULADO']),
      crz: ValueSqlType.intType(data['${effectivePrefix}CRZ']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfR02 != null) {
      map['ID_ECF_R02'] = Variable<int>(idEcfR02);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || totalizadorParcial != null) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial);
    }
    if (!nullToAbsent || valorAcumulado != null) {
      map['VALOR_ACUMULADO'] = Variable<double>(valorAcumulado);
    }
    if (!nullToAbsent || crz != null) {
      map['CRZ'] = Variable<int>(crz);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR03sCompanion toCompanion(bool nullToAbsent) {
    return EcfR03sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfR02: idEcfR02 == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfR02),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      totalizadorParcial: totalizadorParcial == null && nullToAbsent
          ? const Value.absent()
          : Value(totalizadorParcial),
      valorAcumulado: valorAcumulado == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAcumulado),
      crz: crz == null && nullToAbsent ? const Value.absent() : Value(crz),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR03.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfR03(
      id: serializer.fromJson<int?>(json['id']),
      idEcfR02: serializer.fromJson<int?>(json['idEcfR02']),
      serieEcf: serializer.fromJson<String?>(json['serieEcf']),
      totalizadorParcial:
          serializer.fromJson<String?>(json['totalizadorParcial']),
      valorAcumulado: serializer.fromJson<double?>(json['valorAcumulado']),
      crz: serializer.fromJson<int?>(json['crz']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idEcfR02': serializer.toJson<int?>(idEcfR02),
      'serieEcf': serializer.toJson<String?>(serieEcf),
      'totalizadorParcial': serializer.toJson<String?>(totalizadorParcial),
      'valorAcumulado': serializer.toJson<double?>(valorAcumulado),
      'crz': serializer.toJson<int?>(crz),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  EcfR03 copyWith(
          {int? id,
          int? idEcfR02,
          String? serieEcf,
          String? totalizadorParcial,
          double? valorAcumulado,
          int? crz,
          String? hashRegistro}) =>
      EcfR03(
        id: id ?? this.id,
        idEcfR02: idEcfR02 ?? this.idEcfR02,
        serieEcf: serieEcf ?? this.serieEcf,
        totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
        valorAcumulado: valorAcumulado ?? this.valorAcumulado,
        crz: crz ?? this.crz,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR03(')
          ..write('id: $id, ')
          ..write('idEcfR02: $idEcfR02, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('valorAcumulado: $valorAcumulado, ')
          ..write('crz: $crz, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idEcfR02, serieEcf, totalizadorParcial,
      valorAcumulado, crz, hashRegistro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfR03 &&
          other.id == this.id &&
          other.idEcfR02 == this.idEcfR02 &&
          other.serieEcf == this.serieEcf &&
          other.totalizadorParcial == this.totalizadorParcial &&
          other.valorAcumulado == this.valorAcumulado &&
          other.crz == this.crz &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR03sCompanion extends UpdateCompanion<EcfR03> {
  final Value<int?> id;
  final Value<int?> idEcfR02;
  final Value<String?> serieEcf;
  final Value<String?> totalizadorParcial;
  final Value<double?> valorAcumulado;
  final Value<int?> crz;
  final Value<String?> hashRegistro;
  const EcfR03sCompanion({
    this.id = const Value.absent(),
    this.idEcfR02 = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.valorAcumulado = const Value.absent(),
    this.crz = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR03sCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfR02 = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.valorAcumulado = const Value.absent(),
    this.crz = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR03> custom({
    Expression<int>? id,
    Expression<int>? idEcfR02,
    Expression<String>? serieEcf,
    Expression<String>? totalizadorParcial,
    Expression<double>? valorAcumulado,
    Expression<int>? crz,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfR02 != null) 'ID_ECF_R02': idEcfR02,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
      if (valorAcumulado != null) 'VALOR_ACUMULADO': valorAcumulado,
      if (crz != null) 'CRZ': crz,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR03sCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idEcfR02,
      Value<String?>? serieEcf,
      Value<String?>? totalizadorParcial,
      Value<double?>? valorAcumulado,
      Value<int?>? crz,
      Value<String?>? hashRegistro}) {
    return EcfR03sCompanion(
      id: id ?? this.id,
      idEcfR02: idEcfR02 ?? this.idEcfR02,
      serieEcf: serieEcf ?? this.serieEcf,
      totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
      valorAcumulado: valorAcumulado ?? this.valorAcumulado,
      crz: crz ?? this.crz,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfR02.present) {
      map['ID_ECF_R02'] = Variable<int>(idEcfR02.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (totalizadorParcial.present) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial.value);
    }
    if (valorAcumulado.present) {
      map['VALOR_ACUMULADO'] = Variable<double>(valorAcumulado.value);
    }
    if (crz.present) {
      map['CRZ'] = Variable<int>(crz.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR03sCompanion(')
          ..write('id: $id, ')
          ..write('idEcfR02: $idEcfR02, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('valorAcumulado: $valorAcumulado, ')
          ..write('crz: $crz, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR03sTable extends EcfR03s with TableInfo<$EcfR03sTable, EcfR03> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfR03sTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idEcfR02Meta = const VerificationMeta('idEcfR02');
  @override
  late final GeneratedColumn<int> idEcfR02 = GeneratedColumn<int>(
      'ID_ECF_R02', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_R02(ID)');
  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  @override
  late final GeneratedColumn<String> serieEcf = GeneratedColumn<String>(
      'SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _totalizadorParcialMeta =
      const VerificationMeta('totalizadorParcial');
  @override
  late final GeneratedColumn<String> totalizadorParcial =
      GeneratedColumn<String>(
          'TOTALIZADOR_PARCIAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 10),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _valorAcumuladoMeta =
      const VerificationMeta('valorAcumulado');
  @override
  late final GeneratedColumn<double> valorAcumulado = GeneratedColumn<double>(
      'VALOR_ACUMULADO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _crzMeta = const VerificationMeta('crz');
  @override
  late final GeneratedColumn<int> crz = GeneratedColumn<int>(
      'CRZ', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idEcfR02,
        serieEcf,
        totalizadorParcial,
        valorAcumulado,
        crz,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_R03';
  @override
  String get actualTableName => 'ECF_R03';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR03> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_ECF_R02')) {
      context.handle(_idEcfR02Meta,
          idEcfR02.isAcceptableOrUnknown(data['ID_ECF_R02']!, _idEcfR02Meta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
    }
    if (data.containsKey('TOTALIZADOR_PARCIAL')) {
      context.handle(
          _totalizadorParcialMeta,
          totalizadorParcial.isAcceptableOrUnknown(
              data['TOTALIZADOR_PARCIAL']!, _totalizadorParcialMeta));
    }
    if (data.containsKey('VALOR_ACUMULADO')) {
      context.handle(
          _valorAcumuladoMeta,
          valorAcumulado.isAcceptableOrUnknown(
              data['VALOR_ACUMULADO']!, _valorAcumuladoMeta));
    }
    if (data.containsKey('CRZ')) {
      context.handle(
          _crzMeta, crz.isAcceptableOrUnknown(data['CRZ']!, _crzMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR03 map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfR03.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfR03sTable createAlias(String alias) {
    return $EcfR03sTable(attachedDatabase, alias);
  }
}

class EcfR06 extends DataClass implements Insertable<EcfR06> {
  final int? id;
  final int? idPdvOperador;
  final int? idEcfImpressora;
  final int? idEcfCaixa;
  final String? serieEcf;
  final int? coo;
  final int? gnf;
  final int? grg;
  final int? cdc;
  final String? denominacao;
  final DateTime? dataEmissao;
  final String? horaEmissao;
  final String? hashRegistro;
  EcfR06(
      {this.id,
      this.idPdvOperador,
      this.idEcfImpressora,
      this.idEcfCaixa,
      this.serieEcf,
      this.coo,
      this.gnf,
      this.grg,
      this.cdc,
      this.denominacao,
      this.dataEmissao,
      this.horaEmissao,
      this.hashRegistro});
  factory EcfR06.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfR06(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvOperador: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_OPERADOR']),
      idEcfImpressora: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
      idEcfCaixa: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_CAIXA']),
      serieEcf: ValueSqlType.stringType(data['${effectivePrefix}SERIE_ECF']),
      coo: ValueSqlType.intType(data['${effectivePrefix}COO']),
      gnf: ValueSqlType.intType(data['${effectivePrefix}GNF']),
      grg: ValueSqlType.intType(data['${effectivePrefix}GRG']),
      cdc: ValueSqlType.intType(data['${effectivePrefix}CDC']),
      denominacao: ValueSqlType.stringType(data['${effectivePrefix}DENOMINACAO']),
      dataEmissao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_EMISSAO']),
      horaEmissao: ValueSqlType.stringType(data['${effectivePrefix}HORA_EMISSAO']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvOperador != null) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador);
    }
    if (!nullToAbsent || idEcfImpressora != null) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora);
    }
    if (!nullToAbsent || idEcfCaixa != null) {
      map['ID_ECF_CAIXA'] = Variable<int>(idEcfCaixa);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || gnf != null) {
      map['GNF'] = Variable<int>(gnf);
    }
    if (!nullToAbsent || grg != null) {
      map['GRG'] = Variable<int>(grg);
    }
    if (!nullToAbsent || cdc != null) {
      map['CDC'] = Variable<int>(cdc);
    }
    if (!nullToAbsent || denominacao != null) {
      map['DENOMINACAO'] = Variable<String>(denominacao);
    }
    if (!nullToAbsent || dataEmissao != null) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao);
    }
    if (!nullToAbsent || horaEmissao != null) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR06sCompanion toCompanion(bool nullToAbsent) {
    return EcfR06sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvOperador: idPdvOperador == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvOperador),
      idEcfImpressora: idEcfImpressora == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfImpressora),
      idEcfCaixa: idEcfCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfCaixa),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      gnf: gnf == null && nullToAbsent ? const Value.absent() : Value(gnf),
      grg: grg == null && nullToAbsent ? const Value.absent() : Value(grg),
      cdc: cdc == null && nullToAbsent ? const Value.absent() : Value(cdc),
      denominacao: denominacao == null && nullToAbsent
          ? const Value.absent()
          : Value(denominacao),
      dataEmissao: dataEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissao),
      horaEmissao: horaEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEmissao),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR06.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfR06(
      id: serializer.fromJson<int?>(json['id']),
      idPdvOperador: serializer.fromJson<int?>(json['idPdvOperador']),
      idEcfImpressora: serializer.fromJson<int?>(json['idEcfImpressora']),
      idEcfCaixa: serializer.fromJson<int?>(json['idEcfCaixa']),
      serieEcf: serializer.fromJson<String?>(json['serieEcf']),
      coo: serializer.fromJson<int?>(json['coo']),
      gnf: serializer.fromJson<int?>(json['gnf']),
      grg: serializer.fromJson<int?>(json['grg']),
      cdc: serializer.fromJson<int?>(json['cdc']),
      denominacao: serializer.fromJson<String?>(json['denominacao']),
      dataEmissao: serializer.fromJson<DateTime?>(json['dataEmissao']),
      horaEmissao: serializer.fromJson<String?>(json['horaEmissao']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvOperador': serializer.toJson<int?>(idPdvOperador),
      'idEcfImpressora': serializer.toJson<int?>(idEcfImpressora),
      'idEcfCaixa': serializer.toJson<int?>(idEcfCaixa),
      'serieEcf': serializer.toJson<String?>(serieEcf),
      'coo': serializer.toJson<int?>(coo),
      'gnf': serializer.toJson<int?>(gnf),
      'grg': serializer.toJson<int?>(grg),
      'cdc': serializer.toJson<int?>(cdc),
      'denominacao': serializer.toJson<String?>(denominacao),
      'dataEmissao': serializer.toJson<DateTime?>(dataEmissao),
      'horaEmissao': serializer.toJson<String?>(horaEmissao),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  EcfR06 copyWith(
          {int? id,
          int? idPdvOperador,
          int? idEcfImpressora,
          int? idEcfCaixa,
          String? serieEcf,
          int? coo,
          int? gnf,
          int? grg,
          int? cdc,
          String? denominacao,
          DateTime? dataEmissao,
          String? horaEmissao,
          String? hashRegistro}) =>
      EcfR06(
        id: id ?? this.id,
        idPdvOperador: idPdvOperador ?? this.idPdvOperador,
        idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
        idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
        serieEcf: serieEcf ?? this.serieEcf,
        coo: coo ?? this.coo,
        gnf: gnf ?? this.gnf,
        grg: grg ?? this.grg,
        cdc: cdc ?? this.cdc,
        denominacao: denominacao ?? this.denominacao,
        dataEmissao: dataEmissao ?? this.dataEmissao,
        horaEmissao: horaEmissao ?? this.horaEmissao,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR06(')
          ..write('id: $id, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idEcfCaixa: $idEcfCaixa, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('coo: $coo, ')
          ..write('gnf: $gnf, ')
          ..write('grg: $grg, ')
          ..write('cdc: $cdc, ')
          ..write('denominacao: $denominacao, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idPdvOperador,
      idEcfImpressora,
      idEcfCaixa,
      serieEcf,
      coo,
      gnf,
      grg,
      cdc,
      denominacao,
      dataEmissao,
      horaEmissao,
      hashRegistro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfR06 &&
          other.id == this.id &&
          other.idPdvOperador == this.idPdvOperador &&
          other.idEcfImpressora == this.idEcfImpressora &&
          other.idEcfCaixa == this.idEcfCaixa &&
          other.serieEcf == this.serieEcf &&
          other.coo == this.coo &&
          other.gnf == this.gnf &&
          other.grg == this.grg &&
          other.cdc == this.cdc &&
          other.denominacao == this.denominacao &&
          other.dataEmissao == this.dataEmissao &&
          other.horaEmissao == this.horaEmissao &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR06sCompanion extends UpdateCompanion<EcfR06> {
  final Value<int?> id;
  final Value<int?> idPdvOperador;
  final Value<int?> idEcfImpressora;
  final Value<int?> idEcfCaixa;
  final Value<String?> serieEcf;
  final Value<int?> coo;
  final Value<int?> gnf;
  final Value<int?> grg;
  final Value<int?> cdc;
  final Value<String?> denominacao;
  final Value<DateTime?> dataEmissao;
  final Value<String?> horaEmissao;
  final Value<String?> hashRegistro;
  const EcfR06sCompanion({
    this.id = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idEcfCaixa = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.gnf = const Value.absent(),
    this.grg = const Value.absent(),
    this.cdc = const Value.absent(),
    this.denominacao = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR06sCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idEcfCaixa = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.gnf = const Value.absent(),
    this.grg = const Value.absent(),
    this.cdc = const Value.absent(),
    this.denominacao = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR06> custom({
    Expression<int>? id,
    Expression<int>? idPdvOperador,
    Expression<int>? idEcfImpressora,
    Expression<int>? idEcfCaixa,
    Expression<String>? serieEcf,
    Expression<int>? coo,
    Expression<int>? gnf,
    Expression<int>? grg,
    Expression<int>? cdc,
    Expression<String>? denominacao,
    Expression<DateTime>? dataEmissao,
    Expression<String>? horaEmissao,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
      if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
      if (idEcfCaixa != null) 'ID_ECF_CAIXA': idEcfCaixa,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (coo != null) 'COO': coo,
      if (gnf != null) 'GNF': gnf,
      if (grg != null) 'GRG': grg,
      if (cdc != null) 'CDC': cdc,
      if (denominacao != null) 'DENOMINACAO': denominacao,
      if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
      if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR06sCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvOperador,
      Value<int?>? idEcfImpressora,
      Value<int?>? idEcfCaixa,
      Value<String?>? serieEcf,
      Value<int?>? coo,
      Value<int?>? gnf,
      Value<int?>? grg,
      Value<int?>? cdc,
      Value<String?>? denominacao,
      Value<DateTime?>? dataEmissao,
      Value<String?>? horaEmissao,
      Value<String?>? hashRegistro}) {
    return EcfR06sCompanion(
      id: id ?? this.id,
      idPdvOperador: idPdvOperador ?? this.idPdvOperador,
      idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
      idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
      serieEcf: serieEcf ?? this.serieEcf,
      coo: coo ?? this.coo,
      gnf: gnf ?? this.gnf,
      grg: grg ?? this.grg,
      cdc: cdc ?? this.cdc,
      denominacao: denominacao ?? this.denominacao,
      dataEmissao: dataEmissao ?? this.dataEmissao,
      horaEmissao: horaEmissao ?? this.horaEmissao,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvOperador.present) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador.value);
    }
    if (idEcfImpressora.present) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora.value);
    }
    if (idEcfCaixa.present) {
      map['ID_ECF_CAIXA'] = Variable<int>(idEcfCaixa.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (gnf.present) {
      map['GNF'] = Variable<int>(gnf.value);
    }
    if (grg.present) {
      map['GRG'] = Variable<int>(grg.value);
    }
    if (cdc.present) {
      map['CDC'] = Variable<int>(cdc.value);
    }
    if (denominacao.present) {
      map['DENOMINACAO'] = Variable<String>(denominacao.value);
    }
    if (dataEmissao.present) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao.value);
    }
    if (horaEmissao.present) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR06sCompanion(')
          ..write('id: $id, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idEcfCaixa: $idEcfCaixa, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('coo: $coo, ')
          ..write('gnf: $gnf, ')
          ..write('grg: $grg, ')
          ..write('cdc: $cdc, ')
          ..write('denominacao: $denominacao, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR06sTable extends EcfR06s with TableInfo<$EcfR06sTable, EcfR06> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfR06sTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvOperadorMeta =
      const VerificationMeta('idPdvOperador');
  @override
  late final GeneratedColumn<int> idPdvOperador = GeneratedColumn<int>(
      'ID_PDV_OPERADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
  final VerificationMeta _idEcfImpressoraMeta =
      const VerificationMeta('idEcfImpressora');
  @override
  late final GeneratedColumn<int> idEcfImpressora = GeneratedColumn<int>(
      'ID_ECF_IMPRESSORA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
  final VerificationMeta _idEcfCaixaMeta = const VerificationMeta('idEcfCaixa');
  @override
  late final GeneratedColumn<int> idEcfCaixa = GeneratedColumn<int>(
      'ID_ECF_CAIXA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_CAIXA(ID)');
  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  @override
  late final GeneratedColumn<String> serieEcf = GeneratedColumn<String>(
      'SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  @override
  late final GeneratedColumn<int> coo = GeneratedColumn<int>(
      'COO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _gnfMeta = const VerificationMeta('gnf');
  @override
  late final GeneratedColumn<int> gnf = GeneratedColumn<int>(
      'GNF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _grgMeta = const VerificationMeta('grg');
  @override
  late final GeneratedColumn<int> grg = GeneratedColumn<int>(
      'GRG', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _cdcMeta = const VerificationMeta('cdc');
  @override
  late final GeneratedColumn<int> cdc = GeneratedColumn<int>(
      'CDC', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _denominacaoMeta =
      const VerificationMeta('denominacao');
  @override
  late final GeneratedColumn<String> denominacao = GeneratedColumn<String>(
      'DENOMINACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataEmissaoMeta =
      const VerificationMeta('dataEmissao');
  @override
  late final GeneratedColumn<DateTime> dataEmissao =
      GeneratedColumn<DateTime>('DATA_EMISSAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaEmissaoMeta =
      const VerificationMeta('horaEmissao');
  @override
  late final GeneratedColumn<String> horaEmissao = GeneratedColumn<String>(
      'HORA_EMISSAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvOperador,
        idEcfImpressora,
        idEcfCaixa,
        serieEcf,
        coo,
        gnf,
        grg,
        cdc,
        denominacao,
        dataEmissao,
        horaEmissao,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_R06';
  @override
  String get actualTableName => 'ECF_R06';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR06> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_OPERADOR')) {
      context.handle(
          _idPdvOperadorMeta,
          idPdvOperador.isAcceptableOrUnknown(
              data['ID_PDV_OPERADOR']!, _idPdvOperadorMeta));
    }
    if (data.containsKey('ID_ECF_IMPRESSORA')) {
      context.handle(
          _idEcfImpressoraMeta,
          idEcfImpressora.isAcceptableOrUnknown(
              data['ID_ECF_IMPRESSORA']!, _idEcfImpressoraMeta));
    }
    if (data.containsKey('ID_ECF_CAIXA')) {
      context.handle(
          _idEcfCaixaMeta,
          idEcfCaixa.isAcceptableOrUnknown(
              data['ID_ECF_CAIXA']!, _idEcfCaixaMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF']!, _serieEcfMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
    }
    if (data.containsKey('GNF')) {
      context.handle(
          _gnfMeta, gnf.isAcceptableOrUnknown(data['GNF']!, _gnfMeta));
    }
    if (data.containsKey('GRG')) {
      context.handle(
          _grgMeta, grg.isAcceptableOrUnknown(data['GRG']!, _grgMeta));
    }
    if (data.containsKey('CDC')) {
      context.handle(
          _cdcMeta, cdc.isAcceptableOrUnknown(data['CDC']!, _cdcMeta));
    }
    if (data.containsKey('DENOMINACAO')) {
      context.handle(
          _denominacaoMeta,
          denominacao.isAcceptableOrUnknown(
              data['DENOMINACAO']!, _denominacaoMeta));
    }
    if (data.containsKey('DATA_EMISSAO')) {
      context.handle(
          _dataEmissaoMeta,
          dataEmissao.isAcceptableOrUnknown(
              data['DATA_EMISSAO']!, _dataEmissaoMeta));
    }
    if (data.containsKey('HORA_EMISSAO')) {
      context.handle(
          _horaEmissaoMeta,
          horaEmissao.isAcceptableOrUnknown(
              data['HORA_EMISSAO']!, _horaEmissaoMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR06 map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfR06.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfR06sTable createAlias(String alias) {
    return $EcfR06sTable(attachedDatabase, alias);
  }
}

class EcfR07 extends DataClass implements Insertable<EcfR07> {
  final int? id;
  final int? idEcfR06;
  final int? ccf;
  final String? meioPagamento;
  final double? valorPagamento;
  final String? estorno;
  final double? valorEstorno;
  final String? hashRegistro;
  EcfR07(
      {this.id,
      this.idEcfR06,
      this.ccf,
      this.meioPagamento,
      this.valorPagamento,
      this.estorno,
      this.valorEstorno,
      this.hashRegistro});
  factory EcfR07.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfR07(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idEcfR06: ValueSqlType.intType(data['${effectivePrefix}ID_ECF_R06']),
      ccf: ValueSqlType.intType(data['${effectivePrefix}CCF']),
      meioPagamento: ValueSqlType.stringType(data['${effectivePrefix}MEIO_PAGAMENTO']),
      valorPagamento: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PAGAMENTO']),
      estorno: ValueSqlType.stringType(data['${effectivePrefix}ESTORNO']),
      valorEstorno: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ESTORNO']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfR06 != null) {
      map['ID_ECF_R06'] = Variable<int>(idEcfR06);
    }
    if (!nullToAbsent || ccf != null) {
      map['CCF'] = Variable<int>(ccf);
    }
    if (!nullToAbsent || meioPagamento != null) {
      map['MEIO_PAGAMENTO'] = Variable<String>(meioPagamento);
    }
    if (!nullToAbsent || valorPagamento != null) {
      map['VALOR_PAGAMENTO'] = Variable<double>(valorPagamento);
    }
    if (!nullToAbsent || estorno != null) {
      map['ESTORNO'] = Variable<String>(estorno);
    }
    if (!nullToAbsent || valorEstorno != null) {
      map['VALOR_ESTORNO'] = Variable<double>(valorEstorno);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR07sCompanion toCompanion(bool nullToAbsent) {
    return EcfR07sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfR06: idEcfR06 == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfR06),
      ccf: ccf == null && nullToAbsent ? const Value.absent() : Value(ccf),
      meioPagamento: meioPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(meioPagamento),
      valorPagamento: valorPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPagamento),
      estorno: estorno == null && nullToAbsent
          ? const Value.absent()
          : Value(estorno),
      valorEstorno: valorEstorno == null && nullToAbsent
          ? const Value.absent()
          : Value(valorEstorno),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR07.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfR07(
      id: serializer.fromJson<int?>(json['id']),
      idEcfR06: serializer.fromJson<int?>(json['idEcfR06']),
      ccf: serializer.fromJson<int?>(json['ccf']),
      meioPagamento: serializer.fromJson<String?>(json['meioPagamento']),
      valorPagamento: serializer.fromJson<double?>(json['valorPagamento']),
      estorno: serializer.fromJson<String?>(json['estorno']),
      valorEstorno: serializer.fromJson<double?>(json['valorEstorno']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idEcfR06': serializer.toJson<int?>(idEcfR06),
      'ccf': serializer.toJson<int?>(ccf),
      'meioPagamento': serializer.toJson<String?>(meioPagamento),
      'valorPagamento': serializer.toJson<double?>(valorPagamento),
      'estorno': serializer.toJson<String?>(estorno),
      'valorEstorno': serializer.toJson<double?>(valorEstorno),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  EcfR07 copyWith(
          {int? id,
          int? idEcfR06,
          int? ccf,
          String? meioPagamento,
          double? valorPagamento,
          String? estorno,
          double? valorEstorno,
          String? hashRegistro}) =>
      EcfR07(
        id: id ?? this.id,
        idEcfR06: idEcfR06 ?? this.idEcfR06,
        ccf: ccf ?? this.ccf,
        meioPagamento: meioPagamento ?? this.meioPagamento,
        valorPagamento: valorPagamento ?? this.valorPagamento,
        estorno: estorno ?? this.estorno,
        valorEstorno: valorEstorno ?? this.valorEstorno,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR07(')
          ..write('id: $id, ')
          ..write('idEcfR06: $idEcfR06, ')
          ..write('ccf: $ccf, ')
          ..write('meioPagamento: $meioPagamento, ')
          ..write('valorPagamento: $valorPagamento, ')
          ..write('estorno: $estorno, ')
          ..write('valorEstorno: $valorEstorno, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idEcfR06, ccf, meioPagamento,
      valorPagamento, estorno, valorEstorno, hashRegistro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfR07 &&
          other.id == this.id &&
          other.idEcfR06 == this.idEcfR06 &&
          other.ccf == this.ccf &&
          other.meioPagamento == this.meioPagamento &&
          other.valorPagamento == this.valorPagamento &&
          other.estorno == this.estorno &&
          other.valorEstorno == this.valorEstorno &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR07sCompanion extends UpdateCompanion<EcfR07> {
  final Value<int?> id;
  final Value<int?> idEcfR06;
  final Value<int?> ccf;
  final Value<String?> meioPagamento;
  final Value<double?> valorPagamento;
  final Value<String?> estorno;
  final Value<double?> valorEstorno;
  final Value<String?> hashRegistro;
  const EcfR07sCompanion({
    this.id = const Value.absent(),
    this.idEcfR06 = const Value.absent(),
    this.ccf = const Value.absent(),
    this.meioPagamento = const Value.absent(),
    this.valorPagamento = const Value.absent(),
    this.estorno = const Value.absent(),
    this.valorEstorno = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR07sCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfR06 = const Value.absent(),
    this.ccf = const Value.absent(),
    this.meioPagamento = const Value.absent(),
    this.valorPagamento = const Value.absent(),
    this.estorno = const Value.absent(),
    this.valorEstorno = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR07> custom({
    Expression<int>? id,
    Expression<int>? idEcfR06,
    Expression<int>? ccf,
    Expression<String>? meioPagamento,
    Expression<double>? valorPagamento,
    Expression<String>? estorno,
    Expression<double>? valorEstorno,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfR06 != null) 'ID_ECF_R06': idEcfR06,
      if (ccf != null) 'CCF': ccf,
      if (meioPagamento != null) 'MEIO_PAGAMENTO': meioPagamento,
      if (valorPagamento != null) 'VALOR_PAGAMENTO': valorPagamento,
      if (estorno != null) 'ESTORNO': estorno,
      if (valorEstorno != null) 'VALOR_ESTORNO': valorEstorno,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR07sCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idEcfR06,
      Value<int?>? ccf,
      Value<String?>? meioPagamento,
      Value<double?>? valorPagamento,
      Value<String?>? estorno,
      Value<double?>? valorEstorno,
      Value<String?>? hashRegistro}) {
    return EcfR07sCompanion(
      id: id ?? this.id,
      idEcfR06: idEcfR06 ?? this.idEcfR06,
      ccf: ccf ?? this.ccf,
      meioPagamento: meioPagamento ?? this.meioPagamento,
      valorPagamento: valorPagamento ?? this.valorPagamento,
      estorno: estorno ?? this.estorno,
      valorEstorno: valorEstorno ?? this.valorEstorno,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfR06.present) {
      map['ID_ECF_R06'] = Variable<int>(idEcfR06.value);
    }
    if (ccf.present) {
      map['CCF'] = Variable<int>(ccf.value);
    }
    if (meioPagamento.present) {
      map['MEIO_PAGAMENTO'] = Variable<String>(meioPagamento.value);
    }
    if (valorPagamento.present) {
      map['VALOR_PAGAMENTO'] = Variable<double>(valorPagamento.value);
    }
    if (estorno.present) {
      map['ESTORNO'] = Variable<String>(estorno.value);
    }
    if (valorEstorno.present) {
      map['VALOR_ESTORNO'] = Variable<double>(valorEstorno.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR07sCompanion(')
          ..write('id: $id, ')
          ..write('idEcfR06: $idEcfR06, ')
          ..write('ccf: $ccf, ')
          ..write('meioPagamento: $meioPagamento, ')
          ..write('valorPagamento: $valorPagamento, ')
          ..write('estorno: $estorno, ')
          ..write('valorEstorno: $valorEstorno, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR07sTable extends EcfR07s with TableInfo<$EcfR07sTable, EcfR07> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfR07sTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idEcfR06Meta = const VerificationMeta('idEcfR06');
  @override
  late final GeneratedColumn<int> idEcfR06 = GeneratedColumn<int>(
      'ID_ECF_R06', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_R06(ID)');
  final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
  @override
  late final GeneratedColumn<int> ccf = GeneratedColumn<int>(
      'CCF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _meioPagamentoMeta =
      const VerificationMeta('meioPagamento');
  @override
  late final GeneratedColumn<String> meioPagamento = GeneratedColumn<String>(
      'MEIO_PAGAMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorPagamentoMeta =
      const VerificationMeta('valorPagamento');
  @override
  late final GeneratedColumn<double> valorPagamento = GeneratedColumn<double>(
      'VALOR_PAGAMENTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _estornoMeta = const VerificationMeta('estorno');
  @override
  late final GeneratedColumn<String> estorno = GeneratedColumn<String>(
      'ESTORNO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorEstornoMeta =
      const VerificationMeta('valorEstorno');
  @override
  late final GeneratedColumn<double> valorEstorno = GeneratedColumn<double>(
      'VALOR_ESTORNO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 32),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idEcfR06,
        ccf,
        meioPagamento,
        valorPagamento,
        estorno,
        valorEstorno,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_R07';
  @override
  String get actualTableName => 'ECF_R07';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR07> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_ECF_R06')) {
      context.handle(_idEcfR06Meta,
          idEcfR06.isAcceptableOrUnknown(data['ID_ECF_R06']!, _idEcfR06Meta));
    }
    if (data.containsKey('CCF')) {
      context.handle(
          _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF']!, _ccfMeta));
    }
    if (data.containsKey('MEIO_PAGAMENTO')) {
      context.handle(
          _meioPagamentoMeta,
          meioPagamento.isAcceptableOrUnknown(
              data['MEIO_PAGAMENTO']!, _meioPagamentoMeta));
    }
    if (data.containsKey('VALOR_PAGAMENTO')) {
      context.handle(
          _valorPagamentoMeta,
          valorPagamento.isAcceptableOrUnknown(
              data['VALOR_PAGAMENTO']!, _valorPagamentoMeta));
    }
    if (data.containsKey('ESTORNO')) {
      context.handle(_estornoMeta,
          estorno.isAcceptableOrUnknown(data['ESTORNO']!, _estornoMeta));
    }
    if (data.containsKey('VALOR_ESTORNO')) {
      context.handle(
          _valorEstornoMeta,
          valorEstorno.isAcceptableOrUnknown(
              data['VALOR_ESTORNO']!, _valorEstornoMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR07 map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfR07.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfR07sTable createAlias(String alias) {
    return $EcfR07sTable(attachedDatabase, alias);
  }
}

class EcfRecebimentoNaoFiscal extends DataClass
    implements Insertable<EcfRecebimentoNaoFiscal> {
  final int? id;
  final int? idPdvMovimento;
  final DateTime? dataRecebimento;
  final String? descricao;
  final double? valor;
  EcfRecebimentoNaoFiscal(
      {this.id,
      this.idPdvMovimento,
      this.dataRecebimento,
      this.descricao,
      this.valor});
  factory EcfRecebimentoNaoFiscal.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfRecebimentoNaoFiscal(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvMovimento: ValueSqlType.intType(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      dataRecebimento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_RECEBIMENTO']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || dataRecebimento != null) {
      map['DATA_RECEBIMENTO'] = Variable<DateTime>(dataRecebimento);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  EcfRecebimentoNaoFiscalsCompanion toCompanion(bool nullToAbsent) {
    return EcfRecebimentoNaoFiscalsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      dataRecebimento: dataRecebimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRecebimento),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory EcfRecebimentoNaoFiscal.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfRecebimentoNaoFiscal(
      id: serializer.fromJson<int?>(json['id']),
      idPdvMovimento: serializer.fromJson<int?>(json['idPdvMovimento']),
      dataRecebimento: serializer.fromJson<DateTime?>(json['dataRecebimento']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvMovimento': serializer.toJson<int?>(idPdvMovimento),
      'dataRecebimento': serializer.toJson<DateTime?>(dataRecebimento),
      'descricao': serializer.toJson<String?>(descricao),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  EcfRecebimentoNaoFiscal copyWith(
          {int? id,
          int? idPdvMovimento,
          DateTime? dataRecebimento,
          String? descricao,
          double? valor}) =>
      EcfRecebimentoNaoFiscal(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        dataRecebimento: dataRecebimento ?? this.dataRecebimento,
        descricao: descricao ?? this.descricao,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('EcfRecebimentoNaoFiscal(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataRecebimento: $dataRecebimento, ')
          ..write('descricao: $descricao, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idPdvMovimento, dataRecebimento, descricao, valor);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfRecebimentoNaoFiscal &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.dataRecebimento == this.dataRecebimento &&
          other.descricao == this.descricao &&
          other.valor == this.valor);
}

class EcfRecebimentoNaoFiscalsCompanion
    extends UpdateCompanion<EcfRecebimentoNaoFiscal> {
  final Value<int?> id;
  final Value<int?> idPdvMovimento;
  final Value<DateTime?> dataRecebimento;
  final Value<String?> descricao;
  final Value<double?> valor;
  const EcfRecebimentoNaoFiscalsCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataRecebimento = const Value.absent(),
    this.descricao = const Value.absent(),
    this.valor = const Value.absent(),
  });
  EcfRecebimentoNaoFiscalsCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataRecebimento = const Value.absent(),
    this.descricao = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<EcfRecebimentoNaoFiscal> custom({
    Expression<int>? id,
    Expression<int>? idPdvMovimento,
    Expression<DateTime>? dataRecebimento,
    Expression<String>? descricao,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (dataRecebimento != null) 'DATA_RECEBIMENTO': dataRecebimento,
      if (descricao != null) 'DESCRICAO': descricao,
      if (valor != null) 'VALOR': valor,
    });
  }

  EcfRecebimentoNaoFiscalsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvMovimento,
      Value<DateTime?>? dataRecebimento,
      Value<String?>? descricao,
      Value<double?>? valor}) {
    return EcfRecebimentoNaoFiscalsCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      dataRecebimento: dataRecebimento ?? this.dataRecebimento,
      descricao: descricao ?? this.descricao,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (dataRecebimento.present) {
      map['DATA_RECEBIMENTO'] = Variable<DateTime>(dataRecebimento.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfRecebimentoNaoFiscalsCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataRecebimento: $dataRecebimento, ')
          ..write('descricao: $descricao, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $EcfRecebimentoNaoFiscalsTable extends EcfRecebimentoNaoFiscals
    with TableInfo<$EcfRecebimentoNaoFiscalsTable, EcfRecebimentoNaoFiscal> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfRecebimentoNaoFiscalsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  @override
  late final GeneratedColumn<int> idPdvMovimento = GeneratedColumn<int>(
      'ID_PDV_MOVIMENTO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  final VerificationMeta _dataRecebimentoMeta =
      const VerificationMeta('dataRecebimento');
  @override
  late final GeneratedColumn<DateTime> dataRecebimento =
      GeneratedColumn<DateTime>('DATA_RECEBIMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, dataRecebimento, descricao, valor];
  @override
  String get aliasedName => _alias ?? 'ECF_RECEBIMENTO_NAO_FISCAL';
  @override
  String get actualTableName => 'ECF_RECEBIMENTO_NAO_FISCAL';
  @override
  VerificationContext validateIntegrity(
      Insertable<EcfRecebimentoNaoFiscal> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO']!, _idPdvMovimentoMeta));
    }
    if (data.containsKey('DATA_RECEBIMENTO')) {
      context.handle(
          _dataRecebimentoMeta,
          dataRecebimento.isAcceptableOrUnknown(
              data['DATA_RECEBIMENTO']!, _dataRecebimentoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfRecebimentoNaoFiscal map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return EcfRecebimentoNaoFiscal.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfRecebimentoNaoFiscalsTable createAlias(String alias) {
    return $EcfRecebimentoNaoFiscalsTable(attachedDatabase, alias);
  }
}

class EcfRelatorioGerencial extends DataClass
    implements Insertable<EcfRelatorioGerencial> {
  final int? id;
  final int? idPdvConfiguracao;
  final int? x;
  final int? meiosPagamento;
  final int? davEmitidos;
  final int? identificacaoPaf;
  final int? parametrosConfiguracao;
  final int? outros;
  EcfRelatorioGerencial(
      {this.id,
      this.idPdvConfiguracao,
      this.x,
      this.meiosPagamento,
      this.davEmitidos,
      this.identificacaoPaf,
      this.parametrosConfiguracao,
      this.outros});
  factory EcfRelatorioGerencial.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfRelatorioGerencial(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idPdvConfiguracao: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
      x: ValueSqlType.intType(data['${effectivePrefix}X']),
      meiosPagamento: ValueSqlType.intType(data['${effectivePrefix}MEIOS_PAGAMENTO']),
      davEmitidos: ValueSqlType.intType(data['${effectivePrefix}DAV_EMITIDOS']),
      identificacaoPaf: ValueSqlType.intType(data['${effectivePrefix}IDENTIFICACAO_PAF']),
      parametrosConfiguracao: ValueSqlType.intType(
          data['${effectivePrefix}PARAMETROS_CONFIGURACAO']),
      outros: ValueSqlType.intType(data['${effectivePrefix}OUTROS']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvConfiguracao != null) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao);
    }
    if (!nullToAbsent || x != null) {
      map['X'] = Variable<int>(x);
    }
    if (!nullToAbsent || meiosPagamento != null) {
      map['MEIOS_PAGAMENTO'] = Variable<int>(meiosPagamento);
    }
    if (!nullToAbsent || davEmitidos != null) {
      map['DAV_EMITIDOS'] = Variable<int>(davEmitidos);
    }
    if (!nullToAbsent || identificacaoPaf != null) {
      map['IDENTIFICACAO_PAF'] = Variable<int>(identificacaoPaf);
    }
    if (!nullToAbsent || parametrosConfiguracao != null) {
      map['PARAMETROS_CONFIGURACAO'] = Variable<int>(parametrosConfiguracao);
    }
    if (!nullToAbsent || outros != null) {
      map['OUTROS'] = Variable<int>(outros);
    }
    return map;
  }

  EcfRelatorioGerencialsCompanion toCompanion(bool nullToAbsent) {
    return EcfRelatorioGerencialsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvConfiguracao: idPdvConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvConfiguracao),
      x: x == null && nullToAbsent ? const Value.absent() : Value(x),
      meiosPagamento: meiosPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(meiosPagamento),
      davEmitidos: davEmitidos == null && nullToAbsent
          ? const Value.absent()
          : Value(davEmitidos),
      identificacaoPaf: identificacaoPaf == null && nullToAbsent
          ? const Value.absent()
          : Value(identificacaoPaf),
      parametrosConfiguracao: parametrosConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(parametrosConfiguracao),
      outros:
          outros == null && nullToAbsent ? const Value.absent() : Value(outros),
    );
  }

  factory EcfRelatorioGerencial.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfRelatorioGerencial(
      id: serializer.fromJson<int?>(json['id']),
      idPdvConfiguracao: serializer.fromJson<int?>(json['idPdvConfiguracao']),
      x: serializer.fromJson<int?>(json['x']),
      meiosPagamento: serializer.fromJson<int?>(json['meiosPagamento']),
      davEmitidos: serializer.fromJson<int?>(json['davEmitidos']),
      identificacaoPaf: serializer.fromJson<int?>(json['identificacaoPaf']),
      parametrosConfiguracao:
          serializer.fromJson<int?>(json['parametrosConfiguracao']),
      outros: serializer.fromJson<int?>(json['outros']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idPdvConfiguracao': serializer.toJson<int?>(idPdvConfiguracao),
      'x': serializer.toJson<int?>(x),
      'meiosPagamento': serializer.toJson<int?>(meiosPagamento),
      'davEmitidos': serializer.toJson<int?>(davEmitidos),
      'identificacaoPaf': serializer.toJson<int?>(identificacaoPaf),
      'parametrosConfiguracao': serializer.toJson<int?>(parametrosConfiguracao),
      'outros': serializer.toJson<int?>(outros),
    };
  }

  EcfRelatorioGerencial copyWith(
          {int? id,
          int? idPdvConfiguracao,
          int? x,
          int? meiosPagamento,
          int? davEmitidos,
          int? identificacaoPaf,
          int? parametrosConfiguracao,
          int? outros}) =>
      EcfRelatorioGerencial(
        id: id ?? this.id,
        idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
        x: x ?? this.x,
        meiosPagamento: meiosPagamento ?? this.meiosPagamento,
        davEmitidos: davEmitidos ?? this.davEmitidos,
        identificacaoPaf: identificacaoPaf ?? this.identificacaoPaf,
        parametrosConfiguracao:
            parametrosConfiguracao ?? this.parametrosConfiguracao,
        outros: outros ?? this.outros,
      );
  @override
  String toString() {
    return (StringBuffer('EcfRelatorioGerencial(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('x: $x, ')
          ..write('meiosPagamento: $meiosPagamento, ')
          ..write('davEmitidos: $davEmitidos, ')
          ..write('identificacaoPaf: $identificacaoPaf, ')
          ..write('parametrosConfiguracao: $parametrosConfiguracao, ')
          ..write('outros: $outros')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idPdvConfiguracao, x, meiosPagamento,
      davEmitidos, identificacaoPaf, parametrosConfiguracao, outros);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfRelatorioGerencial &&
          other.id == this.id &&
          other.idPdvConfiguracao == this.idPdvConfiguracao &&
          other.x == this.x &&
          other.meiosPagamento == this.meiosPagamento &&
          other.davEmitidos == this.davEmitidos &&
          other.identificacaoPaf == this.identificacaoPaf &&
          other.parametrosConfiguracao == this.parametrosConfiguracao &&
          other.outros == this.outros);
}

class EcfRelatorioGerencialsCompanion
    extends UpdateCompanion<EcfRelatorioGerencial> {
  final Value<int?> id;
  final Value<int?> idPdvConfiguracao;
  final Value<int?> x;
  final Value<int?> meiosPagamento;
  final Value<int?> davEmitidos;
  final Value<int?> identificacaoPaf;
  final Value<int?> parametrosConfiguracao;
  final Value<int?> outros;
  const EcfRelatorioGerencialsCompanion({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.x = const Value.absent(),
    this.meiosPagamento = const Value.absent(),
    this.davEmitidos = const Value.absent(),
    this.identificacaoPaf = const Value.absent(),
    this.parametrosConfiguracao = const Value.absent(),
    this.outros = const Value.absent(),
  });
  EcfRelatorioGerencialsCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.x = const Value.absent(),
    this.meiosPagamento = const Value.absent(),
    this.davEmitidos = const Value.absent(),
    this.identificacaoPaf = const Value.absent(),
    this.parametrosConfiguracao = const Value.absent(),
    this.outros = const Value.absent(),
  });
  static Insertable<EcfRelatorioGerencial> custom({
    Expression<int>? id,
    Expression<int>? idPdvConfiguracao,
    Expression<int>? x,
    Expression<int>? meiosPagamento,
    Expression<int>? davEmitidos,
    Expression<int>? identificacaoPaf,
    Expression<int>? parametrosConfiguracao,
    Expression<int>? outros,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
      if (x != null) 'X': x,
      if (meiosPagamento != null) 'MEIOS_PAGAMENTO': meiosPagamento,
      if (davEmitidos != null) 'DAV_EMITIDOS': davEmitidos,
      if (identificacaoPaf != null) 'IDENTIFICACAO_PAF': identificacaoPaf,
      if (parametrosConfiguracao != null)
        'PARAMETROS_CONFIGURACAO': parametrosConfiguracao,
      if (outros != null) 'OUTROS': outros,
    });
  }

  EcfRelatorioGerencialsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idPdvConfiguracao,
      Value<int?>? x,
      Value<int?>? meiosPagamento,
      Value<int?>? davEmitidos,
      Value<int?>? identificacaoPaf,
      Value<int?>? parametrosConfiguracao,
      Value<int?>? outros}) {
    return EcfRelatorioGerencialsCompanion(
      id: id ?? this.id,
      idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
      x: x ?? this.x,
      meiosPagamento: meiosPagamento ?? this.meiosPagamento,
      davEmitidos: davEmitidos ?? this.davEmitidos,
      identificacaoPaf: identificacaoPaf ?? this.identificacaoPaf,
      parametrosConfiguracao:
          parametrosConfiguracao ?? this.parametrosConfiguracao,
      outros: outros ?? this.outros,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvConfiguracao.present) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao.value);
    }
    if (x.present) {
      map['X'] = Variable<int>(x.value);
    }
    if (meiosPagamento.present) {
      map['MEIOS_PAGAMENTO'] = Variable<int>(meiosPagamento.value);
    }
    if (davEmitidos.present) {
      map['DAV_EMITIDOS'] = Variable<int>(davEmitidos.value);
    }
    if (identificacaoPaf.present) {
      map['IDENTIFICACAO_PAF'] = Variable<int>(identificacaoPaf.value);
    }
    if (parametrosConfiguracao.present) {
      map['PARAMETROS_CONFIGURACAO'] =
          Variable<int>(parametrosConfiguracao.value);
    }
    if (outros.present) {
      map['OUTROS'] = Variable<int>(outros.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfRelatorioGerencialsCompanion(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('x: $x, ')
          ..write('meiosPagamento: $meiosPagamento, ')
          ..write('davEmitidos: $davEmitidos, ')
          ..write('identificacaoPaf: $identificacaoPaf, ')
          ..write('parametrosConfiguracao: $parametrosConfiguracao, ')
          ..write('outros: $outros')
          ..write(')'))
        .toString();
  }
}

class $EcfRelatorioGerencialsTable extends EcfRelatorioGerencials
    with TableInfo<$EcfRelatorioGerencialsTable, EcfRelatorioGerencial> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfRelatorioGerencialsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idPdvConfiguracaoMeta =
      const VerificationMeta('idPdvConfiguracao');
  @override
  late final GeneratedColumn<int> idPdvConfiguracao = GeneratedColumn<int>(
      'ID_PDV_CONFIGURACAO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
  final VerificationMeta _xMeta = const VerificationMeta('x');
  @override
  late final GeneratedColumn<int> x = GeneratedColumn<int>(
      'X', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _meiosPagamentoMeta =
      const VerificationMeta('meiosPagamento');
  @override
  late final GeneratedColumn<int> meiosPagamento = GeneratedColumn<int>(
      'MEIOS_PAGAMENTO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _davEmitidosMeta =
      const VerificationMeta('davEmitidos');
  @override
  late final GeneratedColumn<int> davEmitidos = GeneratedColumn<int>(
      'DAV_EMITIDOS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _identificacaoPafMeta =
      const VerificationMeta('identificacaoPaf');
  @override
  late final GeneratedColumn<int> identificacaoPaf = GeneratedColumn<int>(
      'IDENTIFICACAO_PAF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _parametrosConfiguracaoMeta =
      const VerificationMeta('parametrosConfiguracao');
  @override
  late final GeneratedColumn<int> parametrosConfiguracao =
      GeneratedColumn<int>('PARAMETROS_CONFIGURACAO', aliasedName, true,
          type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _outrosMeta = const VerificationMeta('outros');
  @override
  late final GeneratedColumn<int> outros = GeneratedColumn<int>(
      'OUTROS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvConfiguracao,
        x,
        meiosPagamento,
        davEmitidos,
        identificacaoPaf,
        parametrosConfiguracao,
        outros
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_RELATORIO_GERENCIAL';
  @override
  String get actualTableName => 'ECF_RELATORIO_GERENCIAL';
  @override
  VerificationContext validateIntegrity(
      Insertable<EcfRelatorioGerencial> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_PDV_CONFIGURACAO')) {
      context.handle(
          _idPdvConfiguracaoMeta,
          idPdvConfiguracao.isAcceptableOrUnknown(
              data['ID_PDV_CONFIGURACAO']!, _idPdvConfiguracaoMeta));
    }
    if (data.containsKey('X')) {
      context.handle(_xMeta, x.isAcceptableOrUnknown(data['X']!, _xMeta));
    }
    if (data.containsKey('MEIOS_PAGAMENTO')) {
      context.handle(
          _meiosPagamentoMeta,
          meiosPagamento.isAcceptableOrUnknown(
              data['MEIOS_PAGAMENTO']!, _meiosPagamentoMeta));
    }
    if (data.containsKey('DAV_EMITIDOS')) {
      context.handle(
          _davEmitidosMeta,
          davEmitidos.isAcceptableOrUnknown(
              data['DAV_EMITIDOS']!, _davEmitidosMeta));
    }
    if (data.containsKey('IDENTIFICACAO_PAF')) {
      context.handle(
          _identificacaoPafMeta,
          identificacaoPaf.isAcceptableOrUnknown(
              data['IDENTIFICACAO_PAF']!, _identificacaoPafMeta));
    }
    if (data.containsKey('PARAMETROS_CONFIGURACAO')) {
      context.handle(
          _parametrosConfiguracaoMeta,
          parametrosConfiguracao.isAcceptableOrUnknown(
              data['PARAMETROS_CONFIGURACAO']!, _parametrosConfiguracaoMeta));
    }
    if (data.containsKey('OUTROS')) {
      context.handle(_outrosMeta,
          outros.isAcceptableOrUnknown(data['OUTROS']!, _outrosMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfRelatorioGerencial map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfRelatorioGerencial.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfRelatorioGerencialsTable createAlias(String alias) {
    return $EcfRelatorioGerencialsTable(attachedDatabase, alias);
  }
}

class EcfSintegra60A extends DataClass implements Insertable<EcfSintegra60A> {
  final int? id;
  final int? idEcfSintegra60M;
  final String? situacaoTributaria;
  final double? valor;
  EcfSintegra60A(
      {this.id, this.idEcfSintegra60M, this.situacaoTributaria, this.valor});
  factory EcfSintegra60A.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfSintegra60A(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idEcfSintegra60M: ValueSqlType.intType(
          data['${effectivePrefix}ID_ECF_SINTEGRA_60M']),
      situacaoTributaria: ValueSqlType.stringType(
          data['${effectivePrefix}SITUACAO_TRIBUTARIA']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfSintegra60M != null) {
      map['ID_ECF_SINTEGRA_60M'] = Variable<int>(idEcfSintegra60M);
    }
    if (!nullToAbsent || situacaoTributaria != null) {
      map['SITUACAO_TRIBUTARIA'] = Variable<String>(situacaoTributaria);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  EcfSintegra60AsCompanion toCompanion(bool nullToAbsent) {
    return EcfSintegra60AsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfSintegra60M: idEcfSintegra60M == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfSintegra60M),
      situacaoTributaria: situacaoTributaria == null && nullToAbsent
          ? const Value.absent()
          : Value(situacaoTributaria),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory EcfSintegra60A.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfSintegra60A(
      id: serializer.fromJson<int?>(json['id']),
      idEcfSintegra60M: serializer.fromJson<int?>(json['idEcfSintegra60M']),
      situacaoTributaria:
          serializer.fromJson<String?>(json['situacaoTributaria']),
      valor: serializer.fromJson<double?>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idEcfSintegra60M': serializer.toJson<int?>(idEcfSintegra60M),
      'situacaoTributaria': serializer.toJson<String?>(situacaoTributaria),
      'valor': serializer.toJson<double?>(valor),
    };
  }

  EcfSintegra60A copyWith(
          {int? id,
          int? idEcfSintegra60M,
          String? situacaoTributaria,
          double? valor}) =>
      EcfSintegra60A(
        id: id ?? this.id,
        idEcfSintegra60M: idEcfSintegra60M ?? this.idEcfSintegra60M,
        situacaoTributaria: situacaoTributaria ?? this.situacaoTributaria,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('EcfSintegra60A(')
          ..write('id: $id, ')
          ..write('idEcfSintegra60M: $idEcfSintegra60M, ')
          ..write('situacaoTributaria: $situacaoTributaria, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, idEcfSintegra60M, situacaoTributaria, valor);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfSintegra60A &&
          other.id == this.id &&
          other.idEcfSintegra60M == this.idEcfSintegra60M &&
          other.situacaoTributaria == this.situacaoTributaria &&
          other.valor == this.valor);
}

class EcfSintegra60AsCompanion extends UpdateCompanion<EcfSintegra60A> {
  final Value<int?> id;
  final Value<int?> idEcfSintegra60M;
  final Value<String?> situacaoTributaria;
  final Value<double?> valor;
  const EcfSintegra60AsCompanion({
    this.id = const Value.absent(),
    this.idEcfSintegra60M = const Value.absent(),
    this.situacaoTributaria = const Value.absent(),
    this.valor = const Value.absent(),
  });
  EcfSintegra60AsCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfSintegra60M = const Value.absent(),
    this.situacaoTributaria = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<EcfSintegra60A> custom({
    Expression<int>? id,
    Expression<int>? idEcfSintegra60M,
    Expression<String>? situacaoTributaria,
    Expression<double>? valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfSintegra60M != null) 'ID_ECF_SINTEGRA_60M': idEcfSintegra60M,
      if (situacaoTributaria != null) 'SITUACAO_TRIBUTARIA': situacaoTributaria,
      if (valor != null) 'VALOR': valor,
    });
  }

  EcfSintegra60AsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idEcfSintegra60M,
      Value<String?>? situacaoTributaria,
      Value<double?>? valor}) {
    return EcfSintegra60AsCompanion(
      id: id ?? this.id,
      idEcfSintegra60M: idEcfSintegra60M ?? this.idEcfSintegra60M,
      situacaoTributaria: situacaoTributaria ?? this.situacaoTributaria,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfSintegra60M.present) {
      map['ID_ECF_SINTEGRA_60M'] = Variable<int>(idEcfSintegra60M.value);
    }
    if (situacaoTributaria.present) {
      map['SITUACAO_TRIBUTARIA'] = Variable<String>(situacaoTributaria.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfSintegra60AsCompanion(')
          ..write('id: $id, ')
          ..write('idEcfSintegra60M: $idEcfSintegra60M, ')
          ..write('situacaoTributaria: $situacaoTributaria, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $EcfSintegra60AsTable extends EcfSintegra60As
    with TableInfo<$EcfSintegra60AsTable, EcfSintegra60A> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfSintegra60AsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idEcfSintegra60MMeta =
      const VerificationMeta('idEcfSintegra60M');
  @override
  late final GeneratedColumn<int> idEcfSintegra60M = GeneratedColumn<int>(
      'ID_ECF_SINTEGRA_60M', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ECF_SINTEGRA_60M(ID)');
  final VerificationMeta _situacaoTributariaMeta =
      const VerificationMeta('situacaoTributaria');
  @override
  late final GeneratedColumn<String> situacaoTributaria =
      GeneratedColumn<String>(
          'SITUACAO_TRIBUTARIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 4),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idEcfSintegra60M, situacaoTributaria, valor];
  @override
  String get aliasedName => _alias ?? 'ECF_SINTEGRA_60A';
  @override
  String get actualTableName => 'ECF_SINTEGRA_60A';
  @override
  VerificationContext validateIntegrity(Insertable<EcfSintegra60A> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_ECF_SINTEGRA_60M')) {
      context.handle(
          _idEcfSintegra60MMeta,
          idEcfSintegra60M.isAcceptableOrUnknown(
              data['ID_ECF_SINTEGRA_60M']!, _idEcfSintegra60MMeta));
    }
    if (data.containsKey('SITUACAO_TRIBUTARIA')) {
      context.handle(
          _situacaoTributariaMeta,
          situacaoTributaria.isAcceptableOrUnknown(
              data['SITUACAO_TRIBUTARIA']!, _situacaoTributariaMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfSintegra60A map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfSintegra60A.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfSintegra60AsTable createAlias(String alias) {
    return $EcfSintegra60AsTable(attachedDatabase, alias);
  }
}

class EcfSintegra60M extends DataClass implements Insertable<EcfSintegra60M> {
  final int? id;
  final DateTime? dataEmissao;
  final String? numeroSerieEcf;
  final int? numeroEquipamento;
  final String? modeloDocumentoFiscal;
  final int? cooInicial;
  final int? cooFinal;
  final int? crz;
  final int? cro;
  final double? valorVendaBruta;
  final double? valorGrandeTotal;
  EcfSintegra60M(
      {this.id,
      this.dataEmissao,
      this.numeroSerieEcf,
      this.numeroEquipamento,
      this.modeloDocumentoFiscal,
      this.cooInicial,
      this.cooFinal,
      this.crz,
      this.cro,
      this.valorVendaBruta,
      this.valorGrandeTotal});
  factory EcfSintegra60M.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EcfSintegra60M(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      dataEmissao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_EMISSAO']),
      numeroSerieEcf: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_SERIE_ECF']),
      numeroEquipamento: ValueSqlType.intType(
          data['${effectivePrefix}NUMERO_EQUIPAMENTO']),
      modeloDocumentoFiscal: ValueSqlType.stringType(
          data['${effectivePrefix}MODELO_DOCUMENTO_FISCAL']),
      cooInicial: ValueSqlType.intType(data['${effectivePrefix}COO_INICIAL']),
      cooFinal: ValueSqlType.intType(data['${effectivePrefix}COO_FINAL']),
      crz: ValueSqlType.intType(data['${effectivePrefix}CRZ']),
      cro: ValueSqlType.intType(data['${effectivePrefix}CRO']),
      valorVendaBruta: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_VENDA_BRUTA']),
      valorGrandeTotal: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_GRANDE_TOTAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || dataEmissao != null) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao);
    }
    if (!nullToAbsent || numeroSerieEcf != null) {
      map['NUMERO_SERIE_ECF'] = Variable<String>(numeroSerieEcf);
    }
    if (!nullToAbsent || numeroEquipamento != null) {
      map['NUMERO_EQUIPAMENTO'] = Variable<int>(numeroEquipamento);
    }
    if (!nullToAbsent || modeloDocumentoFiscal != null) {
      map['MODELO_DOCUMENTO_FISCAL'] = Variable<String>(modeloDocumentoFiscal);
    }
    if (!nullToAbsent || cooInicial != null) {
      map['COO_INICIAL'] = Variable<int>(cooInicial);
    }
    if (!nullToAbsent || cooFinal != null) {
      map['COO_FINAL'] = Variable<int>(cooFinal);
    }
    if (!nullToAbsent || crz != null) {
      map['CRZ'] = Variable<int>(crz);
    }
    if (!nullToAbsent || cro != null) {
      map['CRO'] = Variable<int>(cro);
    }
    if (!nullToAbsent || valorVendaBruta != null) {
      map['VALOR_VENDA_BRUTA'] = Variable<double>(valorVendaBruta);
    }
    if (!nullToAbsent || valorGrandeTotal != null) {
      map['VALOR_GRANDE_TOTAL'] = Variable<double>(valorGrandeTotal);
    }
    return map;
  }

  EcfSintegra60MsCompanion toCompanion(bool nullToAbsent) {
    return EcfSintegra60MsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      dataEmissao: dataEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissao),
      numeroSerieEcf: numeroSerieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSerieEcf),
      numeroEquipamento: numeroEquipamento == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroEquipamento),
      modeloDocumentoFiscal: modeloDocumentoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloDocumentoFiscal),
      cooInicial: cooInicial == null && nullToAbsent
          ? const Value.absent()
          : Value(cooInicial),
      cooFinal: cooFinal == null && nullToAbsent
          ? const Value.absent()
          : Value(cooFinal),
      crz: crz == null && nullToAbsent ? const Value.absent() : Value(crz),
      cro: cro == null && nullToAbsent ? const Value.absent() : Value(cro),
      valorVendaBruta: valorVendaBruta == null && nullToAbsent
          ? const Value.absent()
          : Value(valorVendaBruta),
      valorGrandeTotal: valorGrandeTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorGrandeTotal),
    );
  }

  factory EcfSintegra60M.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EcfSintegra60M(
      id: serializer.fromJson<int?>(json['id']),
      dataEmissao: serializer.fromJson<DateTime?>(json['dataEmissao']),
      numeroSerieEcf: serializer.fromJson<String?>(json['numeroSerieEcf']),
      numeroEquipamento: serializer.fromJson<int?>(json['numeroEquipamento']),
      modeloDocumentoFiscal:
          serializer.fromJson<String?>(json['modeloDocumentoFiscal']),
      cooInicial: serializer.fromJson<int?>(json['cooInicial']),
      cooFinal: serializer.fromJson<int?>(json['cooFinal']),
      crz: serializer.fromJson<int?>(json['crz']),
      cro: serializer.fromJson<int?>(json['cro']),
      valorVendaBruta: serializer.fromJson<double?>(json['valorVendaBruta']),
      valorGrandeTotal: serializer.fromJson<double?>(json['valorGrandeTotal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'dataEmissao': serializer.toJson<DateTime?>(dataEmissao),
      'numeroSerieEcf': serializer.toJson<String?>(numeroSerieEcf),
      'numeroEquipamento': serializer.toJson<int?>(numeroEquipamento),
      'modeloDocumentoFiscal':
          serializer.toJson<String?>(modeloDocumentoFiscal),
      'cooInicial': serializer.toJson<int?>(cooInicial),
      'cooFinal': serializer.toJson<int?>(cooFinal),
      'crz': serializer.toJson<int?>(crz),
      'cro': serializer.toJson<int?>(cro),
      'valorVendaBruta': serializer.toJson<double?>(valorVendaBruta),
      'valorGrandeTotal': serializer.toJson<double?>(valorGrandeTotal),
    };
  }

  EcfSintegra60M copyWith(
          {int? id,
          DateTime? dataEmissao,
          String? numeroSerieEcf,
          int? numeroEquipamento,
          String? modeloDocumentoFiscal,
          int? cooInicial,
          int? cooFinal,
          int? crz,
          int? cro,
          double? valorVendaBruta,
          double? valorGrandeTotal}) =>
      EcfSintegra60M(
        id: id ?? this.id,
        dataEmissao: dataEmissao ?? this.dataEmissao,
        numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
        numeroEquipamento: numeroEquipamento ?? this.numeroEquipamento,
        modeloDocumentoFiscal:
            modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
        cooInicial: cooInicial ?? this.cooInicial,
        cooFinal: cooFinal ?? this.cooFinal,
        crz: crz ?? this.crz,
        cro: cro ?? this.cro,
        valorVendaBruta: valorVendaBruta ?? this.valorVendaBruta,
        valorGrandeTotal: valorGrandeTotal ?? this.valorGrandeTotal,
      );
  @override
  String toString() {
    return (StringBuffer('EcfSintegra60M(')
          ..write('id: $id, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('numeroSerieEcf: $numeroSerieEcf, ')
          ..write('numeroEquipamento: $numeroEquipamento, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('cooInicial: $cooInicial, ')
          ..write('cooFinal: $cooFinal, ')
          ..write('crz: $crz, ')
          ..write('cro: $cro, ')
          ..write('valorVendaBruta: $valorVendaBruta, ')
          ..write('valorGrandeTotal: $valorGrandeTotal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      dataEmissao,
      numeroSerieEcf,
      numeroEquipamento,
      modeloDocumentoFiscal,
      cooInicial,
      cooFinal,
      crz,
      cro,
      valorVendaBruta,
      valorGrandeTotal);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EcfSintegra60M &&
          other.id == this.id &&
          other.dataEmissao == this.dataEmissao &&
          other.numeroSerieEcf == this.numeroSerieEcf &&
          other.numeroEquipamento == this.numeroEquipamento &&
          other.modeloDocumentoFiscal == this.modeloDocumentoFiscal &&
          other.cooInicial == this.cooInicial &&
          other.cooFinal == this.cooFinal &&
          other.crz == this.crz &&
          other.cro == this.cro &&
          other.valorVendaBruta == this.valorVendaBruta &&
          other.valorGrandeTotal == this.valorGrandeTotal);
}

class EcfSintegra60MsCompanion extends UpdateCompanion<EcfSintegra60M> {
  final Value<int?> id;
  final Value<DateTime?> dataEmissao;
  final Value<String?> numeroSerieEcf;
  final Value<int?> numeroEquipamento;
  final Value<String?> modeloDocumentoFiscal;
  final Value<int?> cooInicial;
  final Value<int?> cooFinal;
  final Value<int?> crz;
  final Value<int?> cro;
  final Value<double?> valorVendaBruta;
  final Value<double?> valorGrandeTotal;
  const EcfSintegra60MsCompanion({
    this.id = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.numeroSerieEcf = const Value.absent(),
    this.numeroEquipamento = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.cooInicial = const Value.absent(),
    this.cooFinal = const Value.absent(),
    this.crz = const Value.absent(),
    this.cro = const Value.absent(),
    this.valorVendaBruta = const Value.absent(),
    this.valorGrandeTotal = const Value.absent(),
  });
  EcfSintegra60MsCompanion.insert({
    this.id = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.numeroSerieEcf = const Value.absent(),
    this.numeroEquipamento = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.cooInicial = const Value.absent(),
    this.cooFinal = const Value.absent(),
    this.crz = const Value.absent(),
    this.cro = const Value.absent(),
    this.valorVendaBruta = const Value.absent(),
    this.valorGrandeTotal = const Value.absent(),
  });
  static Insertable<EcfSintegra60M> custom({
    Expression<int>? id,
    Expression<DateTime>? dataEmissao,
    Expression<String>? numeroSerieEcf,
    Expression<int>? numeroEquipamento,
    Expression<String>? modeloDocumentoFiscal,
    Expression<int>? cooInicial,
    Expression<int>? cooFinal,
    Expression<int>? crz,
    Expression<int>? cro,
    Expression<double>? valorVendaBruta,
    Expression<double>? valorGrandeTotal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
      if (numeroSerieEcf != null) 'NUMERO_SERIE_ECF': numeroSerieEcf,
      if (numeroEquipamento != null) 'NUMERO_EQUIPAMENTO': numeroEquipamento,
      if (modeloDocumentoFiscal != null)
        'MODELO_DOCUMENTO_FISCAL': modeloDocumentoFiscal,
      if (cooInicial != null) 'COO_INICIAL': cooInicial,
      if (cooFinal != null) 'COO_FINAL': cooFinal,
      if (crz != null) 'CRZ': crz,
      if (cro != null) 'CRO': cro,
      if (valorVendaBruta != null) 'VALOR_VENDA_BRUTA': valorVendaBruta,
      if (valorGrandeTotal != null) 'VALOR_GRANDE_TOTAL': valorGrandeTotal,
    });
  }

  EcfSintegra60MsCompanion copyWith(
      {Value<int?>? id,
      Value<DateTime?>? dataEmissao,
      Value<String?>? numeroSerieEcf,
      Value<int?>? numeroEquipamento,
      Value<String?>? modeloDocumentoFiscal,
      Value<int?>? cooInicial,
      Value<int?>? cooFinal,
      Value<int?>? crz,
      Value<int?>? cro,
      Value<double?>? valorVendaBruta,
      Value<double?>? valorGrandeTotal}) {
    return EcfSintegra60MsCompanion(
      id: id ?? this.id,
      dataEmissao: dataEmissao ?? this.dataEmissao,
      numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
      numeroEquipamento: numeroEquipamento ?? this.numeroEquipamento,
      modeloDocumentoFiscal:
          modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
      cooInicial: cooInicial ?? this.cooInicial,
      cooFinal: cooFinal ?? this.cooFinal,
      crz: crz ?? this.crz,
      cro: cro ?? this.cro,
      valorVendaBruta: valorVendaBruta ?? this.valorVendaBruta,
      valorGrandeTotal: valorGrandeTotal ?? this.valorGrandeTotal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (dataEmissao.present) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao.value);
    }
    if (numeroSerieEcf.present) {
      map['NUMERO_SERIE_ECF'] = Variable<String>(numeroSerieEcf.value);
    }
    if (numeroEquipamento.present) {
      map['NUMERO_EQUIPAMENTO'] = Variable<int>(numeroEquipamento.value);
    }
    if (modeloDocumentoFiscal.present) {
      map['MODELO_DOCUMENTO_FISCAL'] =
          Variable<String>(modeloDocumentoFiscal.value);
    }
    if (cooInicial.present) {
      map['COO_INICIAL'] = Variable<int>(cooInicial.value);
    }
    if (cooFinal.present) {
      map['COO_FINAL'] = Variable<int>(cooFinal.value);
    }
    if (crz.present) {
      map['CRZ'] = Variable<int>(crz.value);
    }
    if (cro.present) {
      map['CRO'] = Variable<int>(cro.value);
    }
    if (valorVendaBruta.present) {
      map['VALOR_VENDA_BRUTA'] = Variable<double>(valorVendaBruta.value);
    }
    if (valorGrandeTotal.present) {
      map['VALOR_GRANDE_TOTAL'] = Variable<double>(valorGrandeTotal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfSintegra60MsCompanion(')
          ..write('id: $id, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('numeroSerieEcf: $numeroSerieEcf, ')
          ..write('numeroEquipamento: $numeroEquipamento, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('cooInicial: $cooInicial, ')
          ..write('cooFinal: $cooFinal, ')
          ..write('crz: $crz, ')
          ..write('cro: $cro, ')
          ..write('valorVendaBruta: $valorVendaBruta, ')
          ..write('valorGrandeTotal: $valorGrandeTotal')
          ..write(')'))
        .toString();
  }
}

class $EcfSintegra60MsTable extends EcfSintegra60Ms
    with TableInfo<$EcfSintegra60MsTable, EcfSintegra60M> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EcfSintegra60MsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataEmissaoMeta =
      const VerificationMeta('dataEmissao');
  @override
  late final GeneratedColumn<DateTime> dataEmissao =
      GeneratedColumn<DateTime>('DATA_EMISSAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _numeroSerieEcfMeta =
      const VerificationMeta('numeroSerieEcf');
  @override
  late final GeneratedColumn<String> numeroSerieEcf = GeneratedColumn<String>(
      'NUMERO_SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroEquipamentoMeta =
      const VerificationMeta('numeroEquipamento');
  @override
  late final GeneratedColumn<int> numeroEquipamento = GeneratedColumn<int>(
      'NUMERO_EQUIPAMENTO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _modeloDocumentoFiscalMeta =
      const VerificationMeta('modeloDocumentoFiscal');
  @override
  late final GeneratedColumn<String> modeloDocumentoFiscal =
      GeneratedColumn<String>('MODELO_DOCUMENTO_FISCAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _cooInicialMeta = const VerificationMeta('cooInicial');
  @override
  late final GeneratedColumn<int> cooInicial = GeneratedColumn<int>(
      'COO_INICIAL', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _cooFinalMeta = const VerificationMeta('cooFinal');
  @override
  late final GeneratedColumn<int> cooFinal = GeneratedColumn<int>(
      'COO_FINAL', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _crzMeta = const VerificationMeta('crz');
  @override
  late final GeneratedColumn<int> crz = GeneratedColumn<int>(
      'CRZ', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _croMeta = const VerificationMeta('cro');
  @override
  late final GeneratedColumn<int> cro = GeneratedColumn<int>(
      'CRO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _valorVendaBrutaMeta =
      const VerificationMeta('valorVendaBruta');
  @override
  late final GeneratedColumn<double> valorVendaBruta =
      GeneratedColumn<double>('VALOR_VENDA_BRUTA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorGrandeTotalMeta =
      const VerificationMeta('valorGrandeTotal');
  @override
  late final GeneratedColumn<double> valorGrandeTotal =
      GeneratedColumn<double>('VALOR_GRANDE_TOTAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        dataEmissao,
        numeroSerieEcf,
        numeroEquipamento,
        modeloDocumentoFiscal,
        cooInicial,
        cooFinal,
        crz,
        cro,
        valorVendaBruta,
        valorGrandeTotal
      ];
  @override
  String get aliasedName => _alias ?? 'ECF_SINTEGRA_60M';
  @override
  String get actualTableName => 'ECF_SINTEGRA_60M';
  @override
  VerificationContext validateIntegrity(Insertable<EcfSintegra60M> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('DATA_EMISSAO')) {
      context.handle(
          _dataEmissaoMeta,
          dataEmissao.isAcceptableOrUnknown(
              data['DATA_EMISSAO']!, _dataEmissaoMeta));
    }
    if (data.containsKey('NUMERO_SERIE_ECF')) {
      context.handle(
          _numeroSerieEcfMeta,
          numeroSerieEcf.isAcceptableOrUnknown(
              data['NUMERO_SERIE_ECF']!, _numeroSerieEcfMeta));
    }
    if (data.containsKey('NUMERO_EQUIPAMENTO')) {
      context.handle(
          _numeroEquipamentoMeta,
          numeroEquipamento.isAcceptableOrUnknown(
              data['NUMERO_EQUIPAMENTO']!, _numeroEquipamentoMeta));
    }
    if (data.containsKey('MODELO_DOCUMENTO_FISCAL')) {
      context.handle(
          _modeloDocumentoFiscalMeta,
          modeloDocumentoFiscal.isAcceptableOrUnknown(
              data['MODELO_DOCUMENTO_FISCAL']!, _modeloDocumentoFiscalMeta));
    }
    if (data.containsKey('COO_INICIAL')) {
      context.handle(
          _cooInicialMeta,
          cooInicial.isAcceptableOrUnknown(
              data['COO_INICIAL']!, _cooInicialMeta));
    }
    if (data.containsKey('COO_FINAL')) {
      context.handle(_cooFinalMeta,
          cooFinal.isAcceptableOrUnknown(data['COO_FINAL']!, _cooFinalMeta));
    }
    if (data.containsKey('CRZ')) {
      context.handle(
          _crzMeta, crz.isAcceptableOrUnknown(data['CRZ']!, _crzMeta));
    }
    if (data.containsKey('CRO')) {
      context.handle(
          _croMeta, cro.isAcceptableOrUnknown(data['CRO']!, _croMeta));
    }
    if (data.containsKey('VALOR_VENDA_BRUTA')) {
      context.handle(
          _valorVendaBrutaMeta,
          valorVendaBruta.isAcceptableOrUnknown(
              data['VALOR_VENDA_BRUTA']!, _valorVendaBrutaMeta));
    }
    if (data.containsKey('VALOR_GRANDE_TOTAL')) {
      context.handle(
          _valorGrandeTotalMeta,
          valorGrandeTotal.isAcceptableOrUnknown(
              data['VALOR_GRANDE_TOTAL']!, _valorGrandeTotalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfSintegra60M map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EcfSintegra60M.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EcfSintegra60MsTable createAlias(String alias) {
    return $EcfSintegra60MsTable(attachedDatabase, alias);
  }
}

class Empresa extends DataClass implements Insertable<Empresa> {
  final int? id;
  final String? razaoSocial;
  final String? nomeFantasia;
  final String? cnpj;
  final String? inscricaoEstadual;
  final String? inscricaoMunicipal;
  final String? tipoRegime;
  final String? crt;
  final DateTime? dataConstituicao;
  final String? tipo;
  final String? email;
  final double? aliquotaPis;
  final double? aliquotaCofins;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? cep;
  final String? bairro;
  final String? cidade;
  final String? uf;
  final String? fone;
  final String? contato;
  final int? codigoIbgeCidade;
  final int? codigoIbgeUf;
  final Uint8List? logotipo;
  final bool? registrado;
  final String? naturezaJuridica;
  final String? emailPagamento;
  final bool? simei;
  final DateTime? dataRegistro;
  final String? horaRegistro;
  Empresa(
      {this.id,
      this.razaoSocial,
      this.nomeFantasia,
      this.cnpj,
      this.inscricaoEstadual,
      this.inscricaoMunicipal,
      this.tipoRegime,
      this.crt,
      this.dataConstituicao,
      this.tipo,
      this.email,
      this.aliquotaPis,
      this.aliquotaCofins,
      this.logradouro,
      this.numero,
      this.complemento,
      this.cep,
      this.bairro,
      this.cidade,
      this.uf,
      this.fone,
      this.contato,
      this.codigoIbgeCidade,
      this.codigoIbgeUf,
      this.logotipo,
      this.registrado,
      this.naturezaJuridica,
      this.emailPagamento,
      this.simei,
      this.dataRegistro,
      this.horaRegistro});
  factory Empresa.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Empresa(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      razaoSocial: ValueSqlType.stringType(data['${effectivePrefix}RAZAO_SOCIAL']),
      nomeFantasia: ValueSqlType.stringType(data['${effectivePrefix}NOME_FANTASIA']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      inscricaoMunicipal: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
      tipoRegime: ValueSqlType.stringType(data['${effectivePrefix}TIPO_REGIME']),
      crt: ValueSqlType.stringType(data['${effectivePrefix}CRT']),
      dataConstituicao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_CONSTITUICAO']),
      tipo: ValueSqlType.stringType(data['${effectivePrefix}TIPO']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
      aliquotaPis: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_PIS']),
      aliquotaCofins: ValueSqlType.doubleType(data['${effectivePrefix}ALIQUOTA_COFINS']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      cidade: ValueSqlType.stringType(data['${effectivePrefix}CIDADE']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      fone: ValueSqlType.stringType(data['${effectivePrefix}FONE']),
      contato: ValueSqlType.stringType(data['${effectivePrefix}CONTATO']),
      codigoIbgeCidade: ValueSqlType.intType(
          data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
      codigoIbgeUf: ValueSqlType.intType(data['${effectivePrefix}CODIGO_IBGE_UF']),
      logotipo: ValueSqlType.blobType(data['${effectivePrefix}LOGOTIPO']),
      registrado: ValueSqlType.boolType(data['${effectivePrefix}REGISTRADO']),
      naturezaJuridica: ValueSqlType.stringType(data['${effectivePrefix}NATUREZA_JURIDICA']),
      emailPagamento: ValueSqlType.stringType(data['${effectivePrefix}EMAIL_PAGAMENTO']),
      simei: ValueSqlType.boolType(data['${effectivePrefix}SIMEI']),
      dataRegistro: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_REGISTRO']),
      horaRegistro: ValueSqlType.stringType(data['${effectivePrefix}HORA_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || razaoSocial != null) {
      map['RAZAO_SOCIAL'] = Variable<String>(razaoSocial);
    }
    if (!nullToAbsent || nomeFantasia != null) {
      map['NOME_FANTASIA'] = Variable<String>(nomeFantasia);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || tipoRegime != null) {
      map['TIPO_REGIME'] = Variable<String>(tipoRegime);
    }
    if (!nullToAbsent || crt != null) {
      map['CRT'] = Variable<String>(crt);
    }
    if (!nullToAbsent || dataConstituicao != null) {
      map['DATA_CONSTITUICAO'] = Variable<DateTime>(dataConstituicao);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || aliquotaPis != null) {
      map['ALIQUOTA_PIS'] = Variable<double>(aliquotaPis);
    }
    if (!nullToAbsent || aliquotaCofins != null) {
      map['ALIQUOTA_COFINS'] = Variable<double>(aliquotaCofins);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || fone != null) {
      map['FONE'] = Variable<String>(fone);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || codigoIbgeCidade != null) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade);
    }
    if (!nullToAbsent || codigoIbgeUf != null) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf);
    }
    if (!nullToAbsent || logotipo != null) {
      map['LOGOTIPO'] = Variable<Uint8List>(logotipo);
    }
    if (!nullToAbsent || registrado != null) {
      map['REGISTRADO'] = Variable<bool>(registrado);
    }
    if (!nullToAbsent || naturezaJuridica != null) {
      map['NATUREZA_JURIDICA'] = Variable<String>(naturezaJuridica);
    }
    if (!nullToAbsent || emailPagamento != null) {
      map['EMAIL_PAGAMENTO'] = Variable<String>(emailPagamento);
    }
    if (!nullToAbsent || simei != null) {
      map['SIMEI'] = Variable<bool>(simei);
    }
    if (!nullToAbsent || dataRegistro != null) {
      map['DATA_REGISTRO'] = Variable<DateTime>(dataRegistro);
    }
    if (!nullToAbsent || horaRegistro != null) {
      map['HORA_REGISTRO'] = Variable<String>(horaRegistro);
    }
    return map;
  }

  EmpresasCompanion toCompanion(bool nullToAbsent) {
    return EmpresasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      razaoSocial: razaoSocial == null && nullToAbsent
          ? const Value.absent()
          : Value(razaoSocial),
      nomeFantasia: nomeFantasia == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeFantasia),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      inscricaoMunicipal: inscricaoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipal),
      tipoRegime: tipoRegime == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoRegime),
      crt: crt == null && nullToAbsent ? const Value.absent() : Value(crt),
      dataConstituicao: dataConstituicao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataConstituicao),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      aliquotaPis: aliquotaPis == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPis),
      aliquotaCofins: aliquotaCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaCofins),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      fone: fone == null && nullToAbsent ? const Value.absent() : Value(fone),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      codigoIbgeCidade: codigoIbgeCidade == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeCidade),
      codigoIbgeUf: codigoIbgeUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeUf),
      logotipo: logotipo == null && nullToAbsent
          ? const Value.absent()
          : Value(logotipo),
      registrado: registrado == null && nullToAbsent
          ? const Value.absent()
          : Value(registrado),
      naturezaJuridica: naturezaJuridica == null && nullToAbsent
          ? const Value.absent()
          : Value(naturezaJuridica),
      emailPagamento: emailPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(emailPagamento),
      simei:
          simei == null && nullToAbsent ? const Value.absent() : Value(simei),
      dataRegistro: dataRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRegistro),
      horaRegistro: horaRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(horaRegistro),
    );
  }

  factory Empresa.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Empresa(
      id: serializer.fromJson<int?>(json['id']),
      razaoSocial: serializer.fromJson<String?>(json['razaoSocial']),
      nomeFantasia: serializer.fromJson<String?>(json['nomeFantasia']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
      inscricaoMunicipal:
          serializer.fromJson<String?>(json['inscricaoMunicipal']),
      tipoRegime: serializer.fromJson<String?>(json['tipoRegime']),
      crt: serializer.fromJson<String?>(json['crt']),
      dataConstituicao:
          serializer.fromJson<DateTime?>(json['dataConstituicao']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      email: serializer.fromJson<String?>(json['email']),
      aliquotaPis: serializer.fromJson<double?>(json['aliquotaPis']),
      aliquotaCofins: serializer.fromJson<double?>(json['aliquotaCofins']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      cep: serializer.fromJson<String?>(json['cep']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      cidade: serializer.fromJson<String?>(json['cidade']),
      uf: serializer.fromJson<String?>(json['uf']),
      fone: serializer.fromJson<String?>(json['fone']),
      contato: serializer.fromJson<String?>(json['contato']),
      codigoIbgeCidade: serializer.fromJson<int?>(json['codigoIbgeCidade']),
      codigoIbgeUf: serializer.fromJson<int?>(json['codigoIbgeUf']),
      logotipo: serializer.fromJson<Uint8List?>(json['logotipo']),
      registrado: serializer.fromJson<bool?>(json['registrado']),
      naturezaJuridica: serializer.fromJson<String?>(json['naturezaJuridica']),
      emailPagamento: serializer.fromJson<String?>(json['emailPagamento']),
      simei: serializer.fromJson<bool?>(json['simei']),
      dataRegistro: serializer.fromJson<DateTime?>(json['dataRegistro']),
      horaRegistro: serializer.fromJson<String?>(json['horaRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'razaoSocial': serializer.toJson<String?>(razaoSocial),
      'nomeFantasia': serializer.toJson<String?>(nomeFantasia),
      'cnpj': serializer.toJson<String?>(cnpj),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'inscricaoMunicipal': serializer.toJson<String?>(inscricaoMunicipal),
      'tipoRegime': serializer.toJson<String?>(tipoRegime),
      'crt': serializer.toJson<String?>(crt),
      'dataConstituicao': serializer.toJson<DateTime?>(dataConstituicao),
      'tipo': serializer.toJson<String?>(tipo),
      'email': serializer.toJson<String?>(email),
      'aliquotaPis': serializer.toJson<double?>(aliquotaPis),
      'aliquotaCofins': serializer.toJson<double?>(aliquotaCofins),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'cep': serializer.toJson<String?>(cep),
      'bairro': serializer.toJson<String?>(bairro),
      'cidade': serializer.toJson<String?>(cidade),
      'uf': serializer.toJson<String?>(uf),
      'fone': serializer.toJson<String?>(fone),
      'contato': serializer.toJson<String?>(contato),
      'codigoIbgeCidade': serializer.toJson<int?>(codigoIbgeCidade),
      'codigoIbgeUf': serializer.toJson<int?>(codigoIbgeUf),
      'logotipo': serializer.toJson<Uint8List?>(logotipo),
      'registrado': serializer.toJson<bool?>(registrado),
      'naturezaJuridica': serializer.toJson<String?>(naturezaJuridica),
      'emailPagamento': serializer.toJson<String?>(emailPagamento),
      'simei': serializer.toJson<bool?>(simei),
      'dataRegistro': serializer.toJson<DateTime?>(dataRegistro),
      'horaRegistro': serializer.toJson<String?>(horaRegistro),
    };
  }

  Empresa copyWith(
          {int? id,
          String? razaoSocial,
          String? nomeFantasia,
          String? cnpj,
          String? inscricaoEstadual,
          String? inscricaoMunicipal,
          String? tipoRegime,
          String? crt,
          DateTime? dataConstituicao,
          String? tipo,
          String? email,
          double? aliquotaPis,
          double? aliquotaCofins,
          String? logradouro,
          String? numero,
          String? complemento,
          String? cep,
          String? bairro,
          String? cidade,
          String? uf,
          String? fone,
          String? contato,
          int? codigoIbgeCidade,
          int? codigoIbgeUf,
          Uint8List? logotipo,
          bool? registrado,
          String? naturezaJuridica,
          String? emailPagamento,
          bool? simei,
          DateTime? dataRegistro,
          String? horaRegistro}) =>
      Empresa(
        id: id ?? this.id,
        razaoSocial: razaoSocial ?? this.razaoSocial,
        nomeFantasia: nomeFantasia ?? this.nomeFantasia,
        cnpj: cnpj ?? this.cnpj,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
        tipoRegime: tipoRegime ?? this.tipoRegime,
        crt: crt ?? this.crt,
        dataConstituicao: dataConstituicao ?? this.dataConstituicao,
        tipo: tipo ?? this.tipo,
        email: email ?? this.email,
        aliquotaPis: aliquotaPis ?? this.aliquotaPis,
        aliquotaCofins: aliquotaCofins ?? this.aliquotaCofins,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        cep: cep ?? this.cep,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        fone: fone ?? this.fone,
        contato: contato ?? this.contato,
        codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
        codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
        logotipo: logotipo ?? this.logotipo,
        registrado: registrado ?? this.registrado,
        naturezaJuridica: naturezaJuridica ?? this.naturezaJuridica,
        emailPagamento: emailPagamento ?? this.emailPagamento,
        simei: simei ?? this.simei,
        dataRegistro: dataRegistro ?? this.dataRegistro,
        horaRegistro: horaRegistro ?? this.horaRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('Empresa(')
          ..write('id: $id, ')
          ..write('razaoSocial: $razaoSocial, ')
          ..write('nomeFantasia: $nomeFantasia, ')
          ..write('cnpj: $cnpj, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoRegime: $tipoRegime, ')
          ..write('crt: $crt, ')
          ..write('dataConstituicao: $dataConstituicao, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('aliquotaPis: $aliquotaPis, ')
          ..write('aliquotaCofins: $aliquotaCofins, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('fone: $fone, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf, ')
          ..write('logotipo: $logotipo, ')
          ..write('registrado: $registrado, ')
          ..write('naturezaJuridica: $naturezaJuridica, ')
          ..write('emailPagamento: $emailPagamento, ')
          ..write('simei: $simei, ')
          ..write('dataRegistro: $dataRegistro, ')
          ..write('horaRegistro: $horaRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        razaoSocial,
        nomeFantasia,
        cnpj,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoRegime,
        crt,
        dataConstituicao,
        tipo,
        email,
        aliquotaPis,
        aliquotaCofins,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        fone,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf,
        logotipo,
        registrado,
        naturezaJuridica,
        emailPagamento,
        simei,
        dataRegistro,
        horaRegistro
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Empresa &&
          other.id == this.id &&
          other.razaoSocial == this.razaoSocial &&
          other.nomeFantasia == this.nomeFantasia &&
          other.cnpj == this.cnpj &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.tipoRegime == this.tipoRegime &&
          other.crt == this.crt &&
          other.dataConstituicao == this.dataConstituicao &&
          other.tipo == this.tipo &&
          other.email == this.email &&
          other.aliquotaPis == this.aliquotaPis &&
          other.aliquotaCofins == this.aliquotaCofins &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.cep == this.cep &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.fone == this.fone &&
          other.contato == this.contato &&
          other.codigoIbgeCidade == this.codigoIbgeCidade &&
          other.codigoIbgeUf == this.codigoIbgeUf &&
          other.logotipo == this.logotipo &&
          other.registrado == this.registrado &&
          other.naturezaJuridica == this.naturezaJuridica &&
          other.emailPagamento == this.emailPagamento &&
          other.simei == this.simei &&
          other.dataRegistro == this.dataRegistro &&
          other.horaRegistro == this.horaRegistro);
}

class EmpresasCompanion extends UpdateCompanion<Empresa> {
  final Value<int?> id;
  final Value<String?> razaoSocial;
  final Value<String?> nomeFantasia;
  final Value<String?> cnpj;
  final Value<String?> inscricaoEstadual;
  final Value<String?> inscricaoMunicipal;
  final Value<String?> tipoRegime;
  final Value<String?> crt;
  final Value<DateTime?> dataConstituicao;
  final Value<String?> tipo;
  final Value<String?> email;
  final Value<double?> aliquotaPis;
  final Value<double?> aliquotaCofins;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> cep;
  final Value<String?> bairro;
  final Value<String?> cidade;
  final Value<String?> uf;
  final Value<String?> fone;
  final Value<String?> contato;
  final Value<int?> codigoIbgeCidade;
  final Value<int?> codigoIbgeUf;
  final Value<Uint8List?> logotipo;
  final Value<bool?> registrado;
  final Value<String?> naturezaJuridica;
  final Value<String?> emailPagamento;
  final Value<bool?> simei;
  final Value<DateTime?> dataRegistro;
  final Value<String?> horaRegistro;
  const EmpresasCompanion({
    this.id = const Value.absent(),
    this.razaoSocial = const Value.absent(),
    this.nomeFantasia = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoRegime = const Value.absent(),
    this.crt = const Value.absent(),
    this.dataConstituicao = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.aliquotaPis = const Value.absent(),
    this.aliquotaCofins = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.fone = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
    this.logotipo = const Value.absent(),
    this.registrado = const Value.absent(),
    this.naturezaJuridica = const Value.absent(),
    this.emailPagamento = const Value.absent(),
    this.simei = const Value.absent(),
    this.dataRegistro = const Value.absent(),
    this.horaRegistro = const Value.absent(),
  });
  EmpresasCompanion.insert({
    this.id = const Value.absent(),
    this.razaoSocial = const Value.absent(),
    this.nomeFantasia = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoRegime = const Value.absent(),
    this.crt = const Value.absent(),
    this.dataConstituicao = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.aliquotaPis = const Value.absent(),
    this.aliquotaCofins = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.fone = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
    this.logotipo = const Value.absent(),
    this.registrado = const Value.absent(),
    this.naturezaJuridica = const Value.absent(),
    this.emailPagamento = const Value.absent(),
    this.simei = const Value.absent(),
    this.dataRegistro = const Value.absent(),
    this.horaRegistro = const Value.absent(),
  });
  static Insertable<Empresa> custom({
    Expression<int>? id,
    Expression<String>? razaoSocial,
    Expression<String>? nomeFantasia,
    Expression<String>? cnpj,
    Expression<String>? inscricaoEstadual,
    Expression<String>? inscricaoMunicipal,
    Expression<String>? tipoRegime,
    Expression<String>? crt,
    Expression<DateTime>? dataConstituicao,
    Expression<String>? tipo,
    Expression<String>? email,
    Expression<double>? aliquotaPis,
    Expression<double>? aliquotaCofins,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? cep,
    Expression<String>? bairro,
    Expression<String>? cidade,
    Expression<String>? uf,
    Expression<String>? fone,
    Expression<String>? contato,
    Expression<int>? codigoIbgeCidade,
    Expression<int>? codigoIbgeUf,
    Expression<Uint8List>? logotipo,
    Expression<bool>? registrado,
    Expression<String>? naturezaJuridica,
    Expression<String>? emailPagamento,
    Expression<bool>? simei,
    Expression<DateTime>? dataRegistro,
    Expression<String>? horaRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (razaoSocial != null) 'RAZAO_SOCIAL': razaoSocial,
      if (nomeFantasia != null) 'NOME_FANTASIA': nomeFantasia,
      if (cnpj != null) 'CNPJ': cnpj,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
      if (tipoRegime != null) 'TIPO_REGIME': tipoRegime,
      if (crt != null) 'CRT': crt,
      if (dataConstituicao != null) 'DATA_CONSTITUICAO': dataConstituicao,
      if (tipo != null) 'TIPO': tipo,
      if (email != null) 'EMAIL': email,
      if (aliquotaPis != null) 'ALIQUOTA_PIS': aliquotaPis,
      if (aliquotaCofins != null) 'ALIQUOTA_COFINS': aliquotaCofins,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (cep != null) 'CEP': cep,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (fone != null) 'FONE': fone,
      if (contato != null) 'CONTATO': contato,
      if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
      if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
      if (logotipo != null) 'LOGOTIPO': logotipo,
      if (registrado != null) 'REGISTRADO': registrado,
      if (naturezaJuridica != null) 'NATUREZA_JURIDICA': naturezaJuridica,
      if (emailPagamento != null) 'EMAIL_PAGAMENTO': emailPagamento,
      if (simei != null) 'SIMEI': simei,
      if (dataRegistro != null) 'DATA_REGISTRO': dataRegistro,
      if (horaRegistro != null) 'HORA_REGISTRO': horaRegistro,
    });
  }

  EmpresasCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? razaoSocial,
      Value<String?>? nomeFantasia,
      Value<String?>? cnpj,
      Value<String?>? inscricaoEstadual,
      Value<String?>? inscricaoMunicipal,
      Value<String?>? tipoRegime,
      Value<String?>? crt,
      Value<DateTime?>? dataConstituicao,
      Value<String?>? tipo,
      Value<String?>? email,
      Value<double?>? aliquotaPis,
      Value<double?>? aliquotaCofins,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? cep,
      Value<String?>? bairro,
      Value<String?>? cidade,
      Value<String?>? uf,
      Value<String?>? fone,
      Value<String?>? contato,
      Value<int?>? codigoIbgeCidade,
      Value<int?>? codigoIbgeUf,
      Value<Uint8List?>? logotipo,
      Value<bool?>? registrado,
      Value<String?>? naturezaJuridica,
      Value<String?>? emailPagamento,
      Value<bool?>? simei,
      Value<DateTime?>? dataRegistro,
      Value<String?>? horaRegistro}) {
    return EmpresasCompanion(
      id: id ?? this.id,
      razaoSocial: razaoSocial ?? this.razaoSocial,
      nomeFantasia: nomeFantasia ?? this.nomeFantasia,
      cnpj: cnpj ?? this.cnpj,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      tipoRegime: tipoRegime ?? this.tipoRegime,
      crt: crt ?? this.crt,
      dataConstituicao: dataConstituicao ?? this.dataConstituicao,
      tipo: tipo ?? this.tipo,
      email: email ?? this.email,
      aliquotaPis: aliquotaPis ?? this.aliquotaPis,
      aliquotaCofins: aliquotaCofins ?? this.aliquotaCofins,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      cep: cep ?? this.cep,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      fone: fone ?? this.fone,
      contato: contato ?? this.contato,
      codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
      codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
      logotipo: logotipo ?? this.logotipo,
      registrado: registrado ?? this.registrado,
      naturezaJuridica: naturezaJuridica ?? this.naturezaJuridica,
      emailPagamento: emailPagamento ?? this.emailPagamento,
      simei: simei ?? this.simei,
      dataRegistro: dataRegistro ?? this.dataRegistro,
      horaRegistro: horaRegistro ?? this.horaRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (razaoSocial.present) {
      map['RAZAO_SOCIAL'] = Variable<String>(razaoSocial.value);
    }
    if (nomeFantasia.present) {
      map['NOME_FANTASIA'] = Variable<String>(nomeFantasia.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (inscricaoMunicipal.present) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (tipoRegime.present) {
      map['TIPO_REGIME'] = Variable<String>(tipoRegime.value);
    }
    if (crt.present) {
      map['CRT'] = Variable<String>(crt.value);
    }
    if (dataConstituicao.present) {
      map['DATA_CONSTITUICAO'] = Variable<DateTime>(dataConstituicao.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (aliquotaPis.present) {
      map['ALIQUOTA_PIS'] = Variable<double>(aliquotaPis.value);
    }
    if (aliquotaCofins.present) {
      map['ALIQUOTA_COFINS'] = Variable<double>(aliquotaCofins.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (fone.present) {
      map['FONE'] = Variable<String>(fone.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (codigoIbgeCidade.present) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade.value);
    }
    if (codigoIbgeUf.present) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf.value);
    }
    if (logotipo.present) {
      map['LOGOTIPO'] = Variable<Uint8List>(logotipo.value);
    }
    if (registrado.present) {
      map['REGISTRADO'] = Variable<bool>(registrado.value);
    }
    if (naturezaJuridica.present) {
      map['NATUREZA_JURIDICA'] = Variable<String>(naturezaJuridica.value);
    }
    if (emailPagamento.present) {
      map['EMAIL_PAGAMENTO'] = Variable<String>(emailPagamento.value);
    }
    if (simei.present) {
      map['SIMEI'] = Variable<bool>(simei.value);
    }
    if (dataRegistro.present) {
      map['DATA_REGISTRO'] = Variable<DateTime>(dataRegistro.value);
    }
    if (horaRegistro.present) {
      map['HORA_REGISTRO'] = Variable<String>(horaRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EmpresasCompanion(')
          ..write('id: $id, ')
          ..write('razaoSocial: $razaoSocial, ')
          ..write('nomeFantasia: $nomeFantasia, ')
          ..write('cnpj: $cnpj, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoRegime: $tipoRegime, ')
          ..write('crt: $crt, ')
          ..write('dataConstituicao: $dataConstituicao, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('aliquotaPis: $aliquotaPis, ')
          ..write('aliquotaCofins: $aliquotaCofins, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('fone: $fone, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf, ')
          ..write('logotipo: $logotipo, ')
          ..write('registrado: $registrado, ')
          ..write('naturezaJuridica: $naturezaJuridica, ')
          ..write('emailPagamento: $emailPagamento, ')
          ..write('simei: $simei, ')
          ..write('dataRegistro: $dataRegistro, ')
          ..write('horaRegistro: $horaRegistro')
          ..write(')'))
        .toString();
  }
}

class $EmpresasTable extends Empresas with TableInfo<$EmpresasTable, Empresa> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EmpresasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _razaoSocialMeta =
      const VerificationMeta('razaoSocial');
  @override
  late final GeneratedColumn<String> razaoSocial = GeneratedColumn<String>(
      'RAZAO_SOCIAL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nomeFantasiaMeta =
      const VerificationMeta('nomeFantasia');
  @override
  late final GeneratedColumn<String> nomeFantasia = GeneratedColumn<String>(
      'NOME_FANTASIA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 30),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  @override
  late final GeneratedColumn<String> inscricaoMunicipal =
      GeneratedColumn<String>(
          'INSCRICAO_MUNICIPAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 30),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _tipoRegimeMeta = const VerificationMeta('tipoRegime');
  @override
  late final GeneratedColumn<String> tipoRegime = GeneratedColumn<String>(
      'TIPO_REGIME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _crtMeta = const VerificationMeta('crt');
  @override
  late final GeneratedColumn<String> crt = GeneratedColumn<String>(
      'CRT', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataConstituicaoMeta =
      const VerificationMeta('dataConstituicao');
  @override
  late final GeneratedColumn<DateTime> dataConstituicao =
      GeneratedColumn<DateTime>('DATA_CONSTITUICAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
      'TIPO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _aliquotaPisMeta =
      const VerificationMeta('aliquotaPis');
  @override
  late final GeneratedColumn<double> aliquotaPis = GeneratedColumn<double>(
      'ALIQUOTA_PIS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _aliquotaCofinsMeta =
      const VerificationMeta('aliquotaCofins');
  @override
  late final GeneratedColumn<double> aliquotaCofins = GeneratedColumn<double>(
      'ALIQUOTA_COFINS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  @override
  late final GeneratedColumn<String> cidade = GeneratedColumn<String>(
      'CIDADE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _foneMeta = const VerificationMeta('fone');
  @override
  late final GeneratedColumn<String> fone = GeneratedColumn<String>(
      'FONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  @override
  late final GeneratedColumn<String> contato = GeneratedColumn<String>(
      'CONTATO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 30),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoIbgeCidadeMeta =
      const VerificationMeta('codigoIbgeCidade');
  @override
  late final GeneratedColumn<int> codigoIbgeCidade = GeneratedColumn<int>(
      'CODIGO_IBGE_CIDADE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoIbgeUfMeta =
      const VerificationMeta('codigoIbgeUf');
  @override
  late final GeneratedColumn<int> codigoIbgeUf = GeneratedColumn<int>(
      'CODIGO_IBGE_UF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _logotipoMeta = const VerificationMeta('logotipo');
  @override
  late final GeneratedColumn<Uint8List> logotipo = GeneratedColumn<Uint8List>(
      'LOGOTIPO', aliasedName, true,
      type: DriftSqlType.blob, requiredDuringInsert: false);
  final VerificationMeta _registradoMeta = const VerificationMeta('registrado');
  @override
  late final GeneratedColumn<bool> registrado = GeneratedColumn<bool>(
      'REGISTRADO', aliasedName, true,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: (context) {
        // todo 'CHECK (REGISTRADO IN (0, 1))'
      },
  );
  final VerificationMeta _naturezaJuridicaMeta =
      const VerificationMeta('naturezaJuridica');
  @override
  late final GeneratedColumn<String> naturezaJuridica =
      GeneratedColumn<String>('NATUREZA_JURIDICA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 200),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _emailPagamentoMeta =
      const VerificationMeta('emailPagamento');
  @override
  late final GeneratedColumn<String> emailPagamento = GeneratedColumn<String>(
      'EMAIL_PAGAMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _simeiMeta = const VerificationMeta('simei');
  @override
  late final GeneratedColumn<bool> simei = GeneratedColumn<bool>(
      'SIMEI', aliasedName, true,
      type: DriftSqlType.bool,
      requiredDuringInsert: false,
      defaultConstraints: (context) {
        // todo 'CHECK (SIMEI IN (0, 1))'
      },
  );
  final VerificationMeta _dataRegistroMeta =
      const VerificationMeta('dataRegistro');
  @override
  late final GeneratedColumn<DateTime> dataRegistro =
      GeneratedColumn<DateTime>('DATA_REGISTRO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaRegistroMeta =
      const VerificationMeta('horaRegistro');
  @override
  late final GeneratedColumn<String> horaRegistro = GeneratedColumn<String>(
      'HORA_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        razaoSocial,
        nomeFantasia,
        cnpj,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoRegime,
        crt,
        dataConstituicao,
        tipo,
        email,
        aliquotaPis,
        aliquotaCofins,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        fone,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf,
        logotipo,
        registrado,
        naturezaJuridica,
        emailPagamento,
        simei,
        dataRegistro,
        horaRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'EMPRESA';
  @override
  String get actualTableName => 'EMPRESA';
  @override
  VerificationContext validateIntegrity(Insertable<Empresa> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('RAZAO_SOCIAL')) {
      context.handle(
          _razaoSocialMeta,
          razaoSocial.isAcceptableOrUnknown(
              data['RAZAO_SOCIAL']!, _razaoSocialMeta));
    }
    if (data.containsKey('NOME_FANTASIA')) {
      context.handle(
          _nomeFantasiaMeta,
          nomeFantasia.isAcceptableOrUnknown(
              data['NOME_FANTASIA']!, _nomeFantasiaMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL')) {
      context.handle(
          _inscricaoMunicipalMeta,
          inscricaoMunicipal.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
    }
    if (data.containsKey('TIPO_REGIME')) {
      context.handle(
          _tipoRegimeMeta,
          tipoRegime.isAcceptableOrUnknown(
              data['TIPO_REGIME']!, _tipoRegimeMeta));
    }
    if (data.containsKey('CRT')) {
      context.handle(
          _crtMeta, crt.isAcceptableOrUnknown(data['CRT']!, _crtMeta));
    }
    if (data.containsKey('DATA_CONSTITUICAO')) {
      context.handle(
          _dataConstituicaoMeta,
          dataConstituicao.isAcceptableOrUnknown(
              data['DATA_CONSTITUICAO']!, _dataConstituicaoMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    if (data.containsKey('ALIQUOTA_PIS')) {
      context.handle(
          _aliquotaPisMeta,
          aliquotaPis.isAcceptableOrUnknown(
              data['ALIQUOTA_PIS']!, _aliquotaPisMeta));
    }
    if (data.containsKey('ALIQUOTA_COFINS')) {
      context.handle(
          _aliquotaCofinsMeta,
          aliquotaCofins.isAcceptableOrUnknown(
              data['ALIQUOTA_COFINS']!, _aliquotaCofinsMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('FONE')) {
      context.handle(
          _foneMeta, fone.isAcceptableOrUnknown(data['FONE']!, _foneMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
    }
    if (data.containsKey('CODIGO_IBGE_CIDADE')) {
      context.handle(
          _codigoIbgeCidadeMeta,
          codigoIbgeCidade.isAcceptableOrUnknown(
              data['CODIGO_IBGE_CIDADE']!, _codigoIbgeCidadeMeta));
    }
    if (data.containsKey('CODIGO_IBGE_UF')) {
      context.handle(
          _codigoIbgeUfMeta,
          codigoIbgeUf.isAcceptableOrUnknown(
              data['CODIGO_IBGE_UF']!, _codigoIbgeUfMeta));
    }
    if (data.containsKey('LOGOTIPO')) {
      context.handle(_logotipoMeta,
          logotipo.isAcceptableOrUnknown(data['LOGOTIPO']!, _logotipoMeta));
    }
    if (data.containsKey('REGISTRADO')) {
      context.handle(
          _registradoMeta,
          registrado.isAcceptableOrUnknown(
              data['REGISTRADO']!, _registradoMeta));
    }
    if (data.containsKey('NATUREZA_JURIDICA')) {
      context.handle(
          _naturezaJuridicaMeta,
          naturezaJuridica.isAcceptableOrUnknown(
              data['NATUREZA_JURIDICA']!, _naturezaJuridicaMeta));
    }
    if (data.containsKey('EMAIL_PAGAMENTO')) {
      context.handle(
          _emailPagamentoMeta,
          emailPagamento.isAcceptableOrUnknown(
              data['EMAIL_PAGAMENTO']!, _emailPagamentoMeta));
    }
    if (data.containsKey('SIMEI')) {
      context.handle(
          _simeiMeta, simei.isAcceptableOrUnknown(data['SIMEI']!, _simeiMeta));
    }
    if (data.containsKey('DATA_REGISTRO')) {
      context.handle(
          _dataRegistroMeta,
          dataRegistro.isAcceptableOrUnknown(
              data['DATA_REGISTRO']!, _dataRegistroMeta));
    }
    if (data.containsKey('HORA_REGISTRO')) {
      context.handle(
          _horaRegistroMeta,
          horaRegistro.isAcceptableOrUnknown(
              data['HORA_REGISTRO']!, _horaRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Empresa map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Empresa.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EmpresasTable createAlias(String alias) {
    return $EmpresasTable(attachedDatabase, alias);
  }
}

class EmpresaCnae extends DataClass implements Insertable<EmpresaCnae> {
  final int? id;
  final String? codigo;
  final String? principal;
  final String? descricao;
  EmpresaCnae({this.id, this.codigo, this.principal, this.descricao});
  factory EmpresaCnae.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EmpresaCnae(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      codigo: ValueSqlType.stringType(data['${effectivePrefix}CODIGO']),
      principal: ValueSqlType.stringType(data['${effectivePrefix}PRINCIPAL']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<String>(codigo);
    }
    if (!nullToAbsent || principal != null) {
      map['PRINCIPAL'] = Variable<String>(principal);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    return map;
  }

  EmpresaCnaesCompanion toCompanion(bool nullToAbsent) {
    return EmpresaCnaesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      principal: principal == null && nullToAbsent
          ? const Value.absent()
          : Value(principal),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
    );
  }

  factory EmpresaCnae.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EmpresaCnae(
      id: serializer.fromJson<int?>(json['id']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      principal: serializer.fromJson<String?>(json['principal']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'codigo': serializer.toJson<String?>(codigo),
      'principal': serializer.toJson<String?>(principal),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  EmpresaCnae copyWith(
          {int? id, String? codigo, String? principal, String? descricao}) =>
      EmpresaCnae(
        id: id ?? this.id,
        codigo: codigo ?? this.codigo,
        principal: principal ?? this.principal,
        descricao: descricao ?? this.descricao,
      );
  @override
  String toString() {
    return (StringBuffer('EmpresaCnae(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('principal: $principal, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, codigo, principal, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EmpresaCnae &&
          other.id == this.id &&
          other.codigo == this.codigo &&
          other.principal == this.principal &&
          other.descricao == this.descricao);
}

class EmpresaCnaesCompanion extends UpdateCompanion<EmpresaCnae> {
  final Value<int?> id;
  final Value<String?> codigo;
  final Value<String?> principal;
  final Value<String?> descricao;
  const EmpresaCnaesCompanion({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.principal = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  EmpresaCnaesCompanion.insert({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.principal = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<EmpresaCnae> custom({
    Expression<int>? id,
    Expression<String>? codigo,
    Expression<String>? principal,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigo != null) 'CODIGO': codigo,
      if (principal != null) 'PRINCIPAL': principal,
      if (descricao != null) 'DESCRICAO': descricao,
    });
  }

  EmpresaCnaesCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? codigo,
      Value<String?>? principal,
      Value<String?>? descricao}) {
    return EmpresaCnaesCompanion(
      id: id ?? this.id,
      codigo: codigo ?? this.codigo,
      principal: principal ?? this.principal,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<String>(codigo.value);
    }
    if (principal.present) {
      map['PRINCIPAL'] = Variable<String>(principal.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EmpresaCnaesCompanion(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('principal: $principal, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $EmpresaCnaesTable extends EmpresaCnaes
    with TableInfo<$EmpresaCnaesTable, EmpresaCnae> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EmpresaCnaesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  @override
  late final GeneratedColumn<String> codigo = GeneratedColumn<String>(
      'CODIGO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 7),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _principalMeta = const VerificationMeta('principal');
  @override
  late final GeneratedColumn<String> principal = GeneratedColumn<String>(
      'PRINCIPAL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, codigo, principal, descricao];
  @override
  String get aliasedName => _alias ?? 'EMPRESA_CNAE';
  @override
  String get actualTableName => 'EMPRESA_CNAE';
  @override
  VerificationContext validateIntegrity(Insertable<EmpresaCnae> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
    }
    if (data.containsKey('PRINCIPAL')) {
      context.handle(_principalMeta,
          principal.isAcceptableOrUnknown(data['PRINCIPAL']!, _principalMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EmpresaCnae map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EmpresaCnae.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EmpresaCnaesTable createAlias(String alias) {
    return $EmpresaCnaesTable(attachedDatabase, alias);
  }
}

class EmpresaDeliveryPedido extends DataClass
    implements Insertable<EmpresaDeliveryPedido> {
  final int? id;
  final String? codigoPedidoEmpresa;
  final String? conteudoJson;
  final String? observacao;
  final DateTime? dataSolicitacao;
  final String? horaSolicitacao;
  EmpresaDeliveryPedido(
      {this.id,
      this.codigoPedidoEmpresa,
      this.conteudoJson,
      this.observacao,
      this.dataSolicitacao,
      this.horaSolicitacao});
  factory EmpresaDeliveryPedido.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EmpresaDeliveryPedido(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      codigoPedidoEmpresa: ValueSqlType.stringType(
          data['${effectivePrefix}CODIGO_PEDIDO_EMPRESA']),
      conteudoJson: ValueSqlType.stringType(data['${effectivePrefix}CONTEUDO_JSON']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
      dataSolicitacao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_SOLICITACAO']),
      horaSolicitacao: ValueSqlType.stringType(data['${effectivePrefix}HORA_SOLICITACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigoPedidoEmpresa != null) {
      map['CODIGO_PEDIDO_EMPRESA'] = Variable<String>(codigoPedidoEmpresa);
    }
    if (!nullToAbsent || conteudoJson != null) {
      map['CONTEUDO_JSON'] = Variable<String>(conteudoJson);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    if (!nullToAbsent || dataSolicitacao != null) {
      map['DATA_SOLICITACAO'] = Variable<DateTime>(dataSolicitacao);
    }
    if (!nullToAbsent || horaSolicitacao != null) {
      map['HORA_SOLICITACAO'] = Variable<String>(horaSolicitacao);
    }
    return map;
  }

  EmpresaDeliveryPedidosCompanion toCompanion(bool nullToAbsent) {
    return EmpresaDeliveryPedidosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigoPedidoEmpresa: codigoPedidoEmpresa == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoPedidoEmpresa),
      conteudoJson: conteudoJson == null && nullToAbsent
          ? const Value.absent()
          : Value(conteudoJson),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
      dataSolicitacao: dataSolicitacao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataSolicitacao),
      horaSolicitacao: horaSolicitacao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaSolicitacao),
    );
  }

  factory EmpresaDeliveryPedido.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EmpresaDeliveryPedido(
      id: serializer.fromJson<int?>(json['id']),
      codigoPedidoEmpresa:
          serializer.fromJson<String?>(json['codigoPedidoEmpresa']),
      conteudoJson: serializer.fromJson<String?>(json['conteudoJson']),
      observacao: serializer.fromJson<String?>(json['observacao']),
      dataSolicitacao: serializer.fromJson<DateTime?>(json['dataSolicitacao']),
      horaSolicitacao: serializer.fromJson<String?>(json['horaSolicitacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'codigoPedidoEmpresa': serializer.toJson<String?>(codigoPedidoEmpresa),
      'conteudoJson': serializer.toJson<String?>(conteudoJson),
      'observacao': serializer.toJson<String?>(observacao),
      'dataSolicitacao': serializer.toJson<DateTime?>(dataSolicitacao),
      'horaSolicitacao': serializer.toJson<String?>(horaSolicitacao),
    };
  }

  EmpresaDeliveryPedido copyWith(
          {int? id,
          String? codigoPedidoEmpresa,
          String? conteudoJson,
          String? observacao,
          DateTime? dataSolicitacao,
          String? horaSolicitacao}) =>
      EmpresaDeliveryPedido(
        id: id ?? this.id,
        codigoPedidoEmpresa: codigoPedidoEmpresa ?? this.codigoPedidoEmpresa,
        conteudoJson: conteudoJson ?? this.conteudoJson,
        observacao: observacao ?? this.observacao,
        dataSolicitacao: dataSolicitacao ?? this.dataSolicitacao,
        horaSolicitacao: horaSolicitacao ?? this.horaSolicitacao,
      );
  @override
  String toString() {
    return (StringBuffer('EmpresaDeliveryPedido(')
          ..write('id: $id, ')
          ..write('codigoPedidoEmpresa: $codigoPedidoEmpresa, ')
          ..write('conteudoJson: $conteudoJson, ')
          ..write('observacao: $observacao, ')
          ..write('dataSolicitacao: $dataSolicitacao, ')
          ..write('horaSolicitacao: $horaSolicitacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, codigoPedidoEmpresa, conteudoJson,
      observacao, dataSolicitacao, horaSolicitacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EmpresaDeliveryPedido &&
          other.id == this.id &&
          other.codigoPedidoEmpresa == this.codigoPedidoEmpresa &&
          other.conteudoJson == this.conteudoJson &&
          other.observacao == this.observacao &&
          other.dataSolicitacao == this.dataSolicitacao &&
          other.horaSolicitacao == this.horaSolicitacao);
}

class EmpresaDeliveryPedidosCompanion
    extends UpdateCompanion<EmpresaDeliveryPedido> {
  final Value<int?> id;
  final Value<String?> codigoPedidoEmpresa;
  final Value<String?> conteudoJson;
  final Value<String?> observacao;
  final Value<DateTime?> dataSolicitacao;
  final Value<String?> horaSolicitacao;
  const EmpresaDeliveryPedidosCompanion({
    this.id = const Value.absent(),
    this.codigoPedidoEmpresa = const Value.absent(),
    this.conteudoJson = const Value.absent(),
    this.observacao = const Value.absent(),
    this.dataSolicitacao = const Value.absent(),
    this.horaSolicitacao = const Value.absent(),
  });
  EmpresaDeliveryPedidosCompanion.insert({
    this.id = const Value.absent(),
    this.codigoPedidoEmpresa = const Value.absent(),
    this.conteudoJson = const Value.absent(),
    this.observacao = const Value.absent(),
    this.dataSolicitacao = const Value.absent(),
    this.horaSolicitacao = const Value.absent(),
  });
  static Insertable<EmpresaDeliveryPedido> custom({
    Expression<int>? id,
    Expression<String>? codigoPedidoEmpresa,
    Expression<String>? conteudoJson,
    Expression<String>? observacao,
    Expression<DateTime>? dataSolicitacao,
    Expression<String>? horaSolicitacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigoPedidoEmpresa != null)
        'CODIGO_PEDIDO_EMPRESA': codigoPedidoEmpresa,
      if (conteudoJson != null) 'CONTEUDO_JSON': conteudoJson,
      if (observacao != null) 'OBSERVACAO': observacao,
      if (dataSolicitacao != null) 'DATA_SOLICITACAO': dataSolicitacao,
      if (horaSolicitacao != null) 'HORA_SOLICITACAO': horaSolicitacao,
    });
  }

  EmpresaDeliveryPedidosCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? codigoPedidoEmpresa,
      Value<String?>? conteudoJson,
      Value<String?>? observacao,
      Value<DateTime?>? dataSolicitacao,
      Value<String?>? horaSolicitacao}) {
    return EmpresaDeliveryPedidosCompanion(
      id: id ?? this.id,
      codigoPedidoEmpresa: codigoPedidoEmpresa ?? this.codigoPedidoEmpresa,
      conteudoJson: conteudoJson ?? this.conteudoJson,
      observacao: observacao ?? this.observacao,
      dataSolicitacao: dataSolicitacao ?? this.dataSolicitacao,
      horaSolicitacao: horaSolicitacao ?? this.horaSolicitacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigoPedidoEmpresa.present) {
      map['CODIGO_PEDIDO_EMPRESA'] =
          Variable<String>(codigoPedidoEmpresa.value);
    }
    if (conteudoJson.present) {
      map['CONTEUDO_JSON'] = Variable<String>(conteudoJson.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    if (dataSolicitacao.present) {
      map['DATA_SOLICITACAO'] = Variable<DateTime>(dataSolicitacao.value);
    }
    if (horaSolicitacao.present) {
      map['HORA_SOLICITACAO'] = Variable<String>(horaSolicitacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EmpresaDeliveryPedidosCompanion(')
          ..write('id: $id, ')
          ..write('codigoPedidoEmpresa: $codigoPedidoEmpresa, ')
          ..write('conteudoJson: $conteudoJson, ')
          ..write('observacao: $observacao, ')
          ..write('dataSolicitacao: $dataSolicitacao, ')
          ..write('horaSolicitacao: $horaSolicitacao')
          ..write(')'))
        .toString();
  }
}

class $EmpresaDeliveryPedidosTable extends EmpresaDeliveryPedidos
    with TableInfo<$EmpresaDeliveryPedidosTable, EmpresaDeliveryPedido> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EmpresaDeliveryPedidosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoPedidoEmpresaMeta =
      const VerificationMeta('codigoPedidoEmpresa');
  @override
  late final GeneratedColumn<String> codigoPedidoEmpresa =
      GeneratedColumn<String>('CODIGO_PEDIDO_EMPRESA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _conteudoJsonMeta =
      const VerificationMeta('conteudoJson');
  @override
  late final GeneratedColumn<String> conteudoJson = GeneratedColumn<String>(
      'CONTEUDO_JSON', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataSolicitacaoMeta =
      const VerificationMeta('dataSolicitacao');
  @override
  late final GeneratedColumn<DateTime> dataSolicitacao =
      GeneratedColumn<DateTime>('DATA_SOLICITACAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaSolicitacaoMeta =
      const VerificationMeta('horaSolicitacao');
  @override
  late final GeneratedColumn<String> horaSolicitacao =
      GeneratedColumn<String>('HORA_SOLICITACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 8),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        codigoPedidoEmpresa,
        conteudoJson,
        observacao,
        dataSolicitacao,
        horaSolicitacao
      ];
  @override
  String get aliasedName => _alias ?? 'EMPRESA_DELIVERY_PEDIDO';
  @override
  String get actualTableName => 'EMPRESA_DELIVERY_PEDIDO';
  @override
  VerificationContext validateIntegrity(
      Insertable<EmpresaDeliveryPedido> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CODIGO_PEDIDO_EMPRESA')) {
      context.handle(
          _codigoPedidoEmpresaMeta,
          codigoPedidoEmpresa.isAcceptableOrUnknown(
              data['CODIGO_PEDIDO_EMPRESA']!, _codigoPedidoEmpresaMeta));
    }
    if (data.containsKey('CONTEUDO_JSON')) {
      context.handle(
          _conteudoJsonMeta,
          conteudoJson.isAcceptableOrUnknown(
              data['CONTEUDO_JSON']!, _conteudoJsonMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    if (data.containsKey('DATA_SOLICITACAO')) {
      context.handle(
          _dataSolicitacaoMeta,
          dataSolicitacao.isAcceptableOrUnknown(
              data['DATA_SOLICITACAO']!, _dataSolicitacaoMeta));
    }
    if (data.containsKey('HORA_SOLICITACAO')) {
      context.handle(
          _horaSolicitacaoMeta,
          horaSolicitacao.isAcceptableOrUnknown(
              data['HORA_SOLICITACAO']!, _horaSolicitacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EmpresaDeliveryPedido map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EmpresaDeliveryPedido.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EmpresaDeliveryPedidosTable createAlias(String alias) {
    return $EmpresaDeliveryPedidosTable(attachedDatabase, alias);
  }
}

class EmpresaSegmento extends DataClass implements Insertable<EmpresaSegmento> {
  final int? id;
  final String? codigo;
  final String? denominacao;
  final String? divisoes;
  EmpresaSegmento({this.id, this.codigo, this.denominacao, this.divisoes});
  factory EmpresaSegmento.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EmpresaSegmento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      codigo: ValueSqlType.stringType(data['${effectivePrefix}CODIGO']),
      denominacao: ValueSqlType.stringType(data['${effectivePrefix}DENOMINACAO']),
      divisoes: ValueSqlType.stringType(data['${effectivePrefix}DIVISOES']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<String>(codigo);
    }
    if (!nullToAbsent || denominacao != null) {
      map['DENOMINACAO'] = Variable<String>(denominacao);
    }
    if (!nullToAbsent || divisoes != null) {
      map['DIVISOES'] = Variable<String>(divisoes);
    }
    return map;
  }

  EmpresaSegmentosCompanion toCompanion(bool nullToAbsent) {
    return EmpresaSegmentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      denominacao: denominacao == null && nullToAbsent
          ? const Value.absent()
          : Value(denominacao),
      divisoes: divisoes == null && nullToAbsent
          ? const Value.absent()
          : Value(divisoes),
    );
  }

  factory EmpresaSegmento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EmpresaSegmento(
      id: serializer.fromJson<int?>(json['id']),
      codigo: serializer.fromJson<String?>(json['codigo']),
      denominacao: serializer.fromJson<String?>(json['denominacao']),
      divisoes: serializer.fromJson<String?>(json['divisoes']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'codigo': serializer.toJson<String?>(codigo),
      'denominacao': serializer.toJson<String?>(denominacao),
      'divisoes': serializer.toJson<String?>(divisoes),
    };
  }

  EmpresaSegmento copyWith(
          {int? id, String? codigo, String? denominacao, String? divisoes}) =>
      EmpresaSegmento(
        id: id ?? this.id,
        codigo: codigo ?? this.codigo,
        denominacao: denominacao ?? this.denominacao,
        divisoes: divisoes ?? this.divisoes,
      );
  @override
  String toString() {
    return (StringBuffer('EmpresaSegmento(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('denominacao: $denominacao, ')
          ..write('divisoes: $divisoes')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, codigo, denominacao, divisoes);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EmpresaSegmento &&
          other.id == this.id &&
          other.codigo == this.codigo &&
          other.denominacao == this.denominacao &&
          other.divisoes == this.divisoes);
}

class EmpresaSegmentosCompanion extends UpdateCompanion<EmpresaSegmento> {
  final Value<int?> id;
  final Value<String?> codigo;
  final Value<String?> denominacao;
  final Value<String?> divisoes;
  const EmpresaSegmentosCompanion({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.denominacao = const Value.absent(),
    this.divisoes = const Value.absent(),
  });
  EmpresaSegmentosCompanion.insert({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.denominacao = const Value.absent(),
    this.divisoes = const Value.absent(),
  });
  static Insertable<EmpresaSegmento> custom({
    Expression<int>? id,
    Expression<String>? codigo,
    Expression<String>? denominacao,
    Expression<String>? divisoes,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigo != null) 'CODIGO': codigo,
      if (denominacao != null) 'DENOMINACAO': denominacao,
      if (divisoes != null) 'DIVISOES': divisoes,
    });
  }

  EmpresaSegmentosCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? codigo,
      Value<String?>? denominacao,
      Value<String?>? divisoes}) {
    return EmpresaSegmentosCompanion(
      id: id ?? this.id,
      codigo: codigo ?? this.codigo,
      denominacao: denominacao ?? this.denominacao,
      divisoes: divisoes ?? this.divisoes,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<String>(codigo.value);
    }
    if (denominacao.present) {
      map['DENOMINACAO'] = Variable<String>(denominacao.value);
    }
    if (divisoes.present) {
      map['DIVISOES'] = Variable<String>(divisoes.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EmpresaSegmentosCompanion(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('denominacao: $denominacao, ')
          ..write('divisoes: $divisoes')
          ..write(')'))
        .toString();
  }
}

class $EmpresaSegmentosTable extends EmpresaSegmentos
    with TableInfo<$EmpresaSegmentosTable, EmpresaSegmento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EmpresaSegmentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  @override
  late final GeneratedColumn<String> codigo = GeneratedColumn<String>(
      'CODIGO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _denominacaoMeta =
      const VerificationMeta('denominacao');
  @override
  late final GeneratedColumn<String> denominacao = GeneratedColumn<String>(
      'DENOMINACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _divisoesMeta = const VerificationMeta('divisoes');
  @override
  late final GeneratedColumn<String> divisoes = GeneratedColumn<String>(
      'DIVISOES', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, codigo, denominacao, divisoes];
  @override
  String get aliasedName => _alias ?? 'EMPRESA_SEGMENTO';
  @override
  String get actualTableName => 'EMPRESA_SEGMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<EmpresaSegmento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO']!, _codigoMeta));
    }
    if (data.containsKey('DENOMINACAO')) {
      context.handle(
          _denominacaoMeta,
          denominacao.isAcceptableOrUnknown(
              data['DENOMINACAO']!, _denominacaoMeta));
    }
    if (data.containsKey('DIVISOES')) {
      context.handle(_divisoesMeta,
          divisoes.isAcceptableOrUnknown(data['DIVISOES']!, _divisoesMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EmpresaSegmento map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EmpresaSegmento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EmpresaSegmentosTable createAlias(String alias) {
    return $EmpresaSegmentosTable(attachedDatabase, alias);
  }
}

class EntregadorRota extends DataClass implements Insertable<EntregadorRota> {
  final int? id;
  final int? idColaborador;
  final DateTime? dataRota;
  final String? horaSaida;
  final int? estimativaMinutos;
  final String? horaPrevistoRetorno;
  EntregadorRota(
      {this.id,
      this.idColaborador,
      this.dataRota,
      this.horaSaida,
      this.estimativaMinutos,
      this.horaPrevistoRetorno});
  factory EntregadorRota.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EntregadorRota(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idColaborador: ValueSqlType.intType(data['${effectivePrefix}ID_COLABORADOR']),
      dataRota: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_ROTA']),
      horaSaida: ValueSqlType.stringType(data['${effectivePrefix}HORA_SAIDA']),
      estimativaMinutos: ValueSqlType.intType(
          data['${effectivePrefix}ESTIMATIVA_MINUTOS']),
      horaPrevistoRetorno: ValueSqlType.stringType(
          data['${effectivePrefix}HORA_PREVISTO_RETORNO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || dataRota != null) {
      map['DATA_ROTA'] = Variable<DateTime>(dataRota);
    }
    if (!nullToAbsent || horaSaida != null) {
      map['HORA_SAIDA'] = Variable<String>(horaSaida);
    }
    if (!nullToAbsent || estimativaMinutos != null) {
      map['ESTIMATIVA_MINUTOS'] = Variable<int>(estimativaMinutos);
    }
    if (!nullToAbsent || horaPrevistoRetorno != null) {
      map['HORA_PREVISTO_RETORNO'] = Variable<String>(horaPrevistoRetorno);
    }
    return map;
  }

  EntregadorRotasCompanion toCompanion(bool nullToAbsent) {
    return EntregadorRotasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      dataRota: dataRota == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRota),
      horaSaida: horaSaida == null && nullToAbsent
          ? const Value.absent()
          : Value(horaSaida),
      estimativaMinutos: estimativaMinutos == null && nullToAbsent
          ? const Value.absent()
          : Value(estimativaMinutos),
      horaPrevistoRetorno: horaPrevistoRetorno == null && nullToAbsent
          ? const Value.absent()
          : Value(horaPrevistoRetorno),
    );
  }

  factory EntregadorRota.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EntregadorRota(
      id: serializer.fromJson<int?>(json['id']),
      idColaborador: serializer.fromJson<int?>(json['idColaborador']),
      dataRota: serializer.fromJson<DateTime?>(json['dataRota']),
      horaSaida: serializer.fromJson<String?>(json['horaSaida']),
      estimativaMinutos: serializer.fromJson<int?>(json['estimativaMinutos']),
      horaPrevistoRetorno:
          serializer.fromJson<String?>(json['horaPrevistoRetorno']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idColaborador': serializer.toJson<int?>(idColaborador),
      'dataRota': serializer.toJson<DateTime?>(dataRota),
      'horaSaida': serializer.toJson<String?>(horaSaida),
      'estimativaMinutos': serializer.toJson<int?>(estimativaMinutos),
      'horaPrevistoRetorno': serializer.toJson<String?>(horaPrevistoRetorno),
    };
  }

  EntregadorRota copyWith(
          {int? id,
          int? idColaborador,
          DateTime? dataRota,
          String? horaSaida,
          int? estimativaMinutos,
          String? horaPrevistoRetorno}) =>
      EntregadorRota(
        id: id ?? this.id,
        idColaborador: idColaborador ?? this.idColaborador,
        dataRota: dataRota ?? this.dataRota,
        horaSaida: horaSaida ?? this.horaSaida,
        estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
        horaPrevistoRetorno: horaPrevistoRetorno ?? this.horaPrevistoRetorno,
      );
  @override
  String toString() {
    return (StringBuffer('EntregadorRota(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('dataRota: $dataRota, ')
          ..write('horaSaida: $horaSaida, ')
          ..write('estimativaMinutos: $estimativaMinutos, ')
          ..write('horaPrevistoRetorno: $horaPrevistoRetorno')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idColaborador, dataRota, horaSaida,
      estimativaMinutos, horaPrevistoRetorno);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EntregadorRota &&
          other.id == this.id &&
          other.idColaborador == this.idColaborador &&
          other.dataRota == this.dataRota &&
          other.horaSaida == this.horaSaida &&
          other.estimativaMinutos == this.estimativaMinutos &&
          other.horaPrevistoRetorno == this.horaPrevistoRetorno);
}

class EntregadorRotasCompanion extends UpdateCompanion<EntregadorRota> {
  final Value<int?> id;
  final Value<int?> idColaborador;
  final Value<DateTime?> dataRota;
  final Value<String?> horaSaida;
  final Value<int?> estimativaMinutos;
  final Value<String?> horaPrevistoRetorno;
  const EntregadorRotasCompanion({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.dataRota = const Value.absent(),
    this.horaSaida = const Value.absent(),
    this.estimativaMinutos = const Value.absent(),
    this.horaPrevistoRetorno = const Value.absent(),
  });
  EntregadorRotasCompanion.insert({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.dataRota = const Value.absent(),
    this.horaSaida = const Value.absent(),
    this.estimativaMinutos = const Value.absent(),
    this.horaPrevistoRetorno = const Value.absent(),
  });
  static Insertable<EntregadorRota> custom({
    Expression<int>? id,
    Expression<int>? idColaborador,
    Expression<DateTime>? dataRota,
    Expression<String>? horaSaida,
    Expression<int>? estimativaMinutos,
    Expression<String>? horaPrevistoRetorno,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (dataRota != null) 'DATA_ROTA': dataRota,
      if (horaSaida != null) 'HORA_SAIDA': horaSaida,
      if (estimativaMinutos != null) 'ESTIMATIVA_MINUTOS': estimativaMinutos,
      if (horaPrevistoRetorno != null)
        'HORA_PREVISTO_RETORNO': horaPrevistoRetorno,
    });
  }

  EntregadorRotasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idColaborador,
      Value<DateTime?>? dataRota,
      Value<String?>? horaSaida,
      Value<int?>? estimativaMinutos,
      Value<String?>? horaPrevistoRetorno}) {
    return EntregadorRotasCompanion(
      id: id ?? this.id,
      idColaborador: idColaborador ?? this.idColaborador,
      dataRota: dataRota ?? this.dataRota,
      horaSaida: horaSaida ?? this.horaSaida,
      estimativaMinutos: estimativaMinutos ?? this.estimativaMinutos,
      horaPrevistoRetorno: horaPrevistoRetorno ?? this.horaPrevistoRetorno,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (dataRota.present) {
      map['DATA_ROTA'] = Variable<DateTime>(dataRota.value);
    }
    if (horaSaida.present) {
      map['HORA_SAIDA'] = Variable<String>(horaSaida.value);
    }
    if (estimativaMinutos.present) {
      map['ESTIMATIVA_MINUTOS'] = Variable<int>(estimativaMinutos.value);
    }
    if (horaPrevistoRetorno.present) {
      map['HORA_PREVISTO_RETORNO'] =
          Variable<String>(horaPrevistoRetorno.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EntregadorRotasCompanion(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('dataRota: $dataRota, ')
          ..write('horaSaida: $horaSaida, ')
          ..write('estimativaMinutos: $estimativaMinutos, ')
          ..write('horaPrevistoRetorno: $horaPrevistoRetorno')
          ..write(')'))
        .toString();
  }
}

class $EntregadorRotasTable extends EntregadorRotas
    with TableInfo<$EntregadorRotasTable, EntregadorRota> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EntregadorRotasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  @override
  late final GeneratedColumn<int> idColaborador = GeneratedColumn<int>(
      'ID_COLABORADOR', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  final VerificationMeta _dataRotaMeta = const VerificationMeta('dataRota');
  @override
  late final GeneratedColumn<DateTime> dataRota = GeneratedColumn<DateTime>(
      'DATA_ROTA', aliasedName, true,
      type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaSaidaMeta = const VerificationMeta('horaSaida');
  @override
  late final GeneratedColumn<String> horaSaida = GeneratedColumn<String>(
      'HORA_SAIDA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _estimativaMinutosMeta =
      const VerificationMeta('estimativaMinutos');
  @override
  late final GeneratedColumn<int> estimativaMinutos = GeneratedColumn<int>(
      'ESTIMATIVA_MINUTOS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _horaPrevistoRetornoMeta =
      const VerificationMeta('horaPrevistoRetorno');
  @override
  late final GeneratedColumn<String> horaPrevistoRetorno =
      GeneratedColumn<String>('HORA_PREVISTO_RETORNO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 8),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idColaborador,
        dataRota,
        horaSaida,
        estimativaMinutos,
        horaPrevistoRetorno
      ];
  @override
  String get aliasedName => _alias ?? 'ENTREGADOR_ROTA';
  @override
  String get actualTableName => 'ENTREGADOR_ROTA';
  @override
  VerificationContext validateIntegrity(Insertable<EntregadorRota> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR']!, _idColaboradorMeta));
    }
    if (data.containsKey('DATA_ROTA')) {
      context.handle(_dataRotaMeta,
          dataRota.isAcceptableOrUnknown(data['DATA_ROTA']!, _dataRotaMeta));
    }
    if (data.containsKey('HORA_SAIDA')) {
      context.handle(_horaSaidaMeta,
          horaSaida.isAcceptableOrUnknown(data['HORA_SAIDA']!, _horaSaidaMeta));
    }
    if (data.containsKey('ESTIMATIVA_MINUTOS')) {
      context.handle(
          _estimativaMinutosMeta,
          estimativaMinutos.isAcceptableOrUnknown(
              data['ESTIMATIVA_MINUTOS']!, _estimativaMinutosMeta));
    }
    if (data.containsKey('HORA_PREVISTO_RETORNO')) {
      context.handle(
          _horaPrevistoRetornoMeta,
          horaPrevistoRetorno.isAcceptableOrUnknown(
              data['HORA_PREVISTO_RETORNO']!, _horaPrevistoRetornoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EntregadorRota map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EntregadorRota.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EntregadorRotasTable createAlias(String alias) {
    return $EntregadorRotasTable(attachedDatabase, alias);
  }
}

class EntregadorRotaDetalhe extends DataClass
    implements Insertable<EntregadorRotaDetalhe> {
  final int? id;
  final int? idEntregadorRota;
  final int? idDelivery;
  final int? posicaoNaFila;
  final int? latitude;
  final int? longitude;
  EntregadorRotaDetalhe(
      {this.id,
      this.idEntregadorRota,
      this.idDelivery,
      this.posicaoNaFila,
      this.latitude,
      this.longitude});
  factory EntregadorRotaDetalhe.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return EntregadorRotaDetalhe(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idEntregadorRota: ValueSqlType.intType(
          data['${effectivePrefix}ID_ENTREGADOR_ROTA']),
      idDelivery: ValueSqlType.intType(data['${effectivePrefix}ID_DELIVERY']),
      posicaoNaFila: ValueSqlType.intType(data['${effectivePrefix}POSICAO_NA_FILA']),
      latitude: ValueSqlType.intType(data['${effectivePrefix}LATITUDE']),
      longitude: ValueSqlType.intType(data['${effectivePrefix}LONGITUDE']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEntregadorRota != null) {
      map['ID_ENTREGADOR_ROTA'] = Variable<int>(idEntregadorRota);
    }
    if (!nullToAbsent || idDelivery != null) {
      map['ID_DELIVERY'] = Variable<int>(idDelivery);
    }
    if (!nullToAbsent || posicaoNaFila != null) {
      map['POSICAO_NA_FILA'] = Variable<int>(posicaoNaFila);
    }
    if (!nullToAbsent || latitude != null) {
      map['LATITUDE'] = Variable<int>(latitude);
    }
    if (!nullToAbsent || longitude != null) {
      map['LONGITUDE'] = Variable<int>(longitude);
    }
    return map;
  }

  EntregadorRotaDetalhesCompanion toCompanion(bool nullToAbsent) {
    return EntregadorRotaDetalhesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEntregadorRota: idEntregadorRota == null && nullToAbsent
          ? const Value.absent()
          : Value(idEntregadorRota),
      idDelivery: idDelivery == null && nullToAbsent
          ? const Value.absent()
          : Value(idDelivery),
      posicaoNaFila: posicaoNaFila == null && nullToAbsent
          ? const Value.absent()
          : Value(posicaoNaFila),
      latitude: latitude == null && nullToAbsent
          ? const Value.absent()
          : Value(latitude),
      longitude: longitude == null && nullToAbsent
          ? const Value.absent()
          : Value(longitude),
    );
  }

  factory EntregadorRotaDetalhe.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return EntregadorRotaDetalhe(
      id: serializer.fromJson<int?>(json['id']),
      idEntregadorRota: serializer.fromJson<int?>(json['idEntregadorRota']),
      idDelivery: serializer.fromJson<int?>(json['idDelivery']),
      posicaoNaFila: serializer.fromJson<int?>(json['posicaoNaFila']),
      latitude: serializer.fromJson<int?>(json['latitude']),
      longitude: serializer.fromJson<int?>(json['longitude']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idEntregadorRota': serializer.toJson<int?>(idEntregadorRota),
      'idDelivery': serializer.toJson<int?>(idDelivery),
      'posicaoNaFila': serializer.toJson<int?>(posicaoNaFila),
      'latitude': serializer.toJson<int?>(latitude),
      'longitude': serializer.toJson<int?>(longitude),
    };
  }

  EntregadorRotaDetalhe copyWith(
          {int? id,
          int? idEntregadorRota,
          int? idDelivery,
          int? posicaoNaFila,
          int? latitude,
          int? longitude}) =>
      EntregadorRotaDetalhe(
        id: id ?? this.id,
        idEntregadorRota: idEntregadorRota ?? this.idEntregadorRota,
        idDelivery: idDelivery ?? this.idDelivery,
        posicaoNaFila: posicaoNaFila ?? this.posicaoNaFila,
        latitude: latitude ?? this.latitude,
        longitude: longitude ?? this.longitude,
      );
  @override
  String toString() {
    return (StringBuffer('EntregadorRotaDetalhe(')
          ..write('id: $id, ')
          ..write('idEntregadorRota: $idEntregadorRota, ')
          ..write('idDelivery: $idDelivery, ')
          ..write('posicaoNaFila: $posicaoNaFila, ')
          ..write('latitude: $latitude, ')
          ..write('longitude: $longitude')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, idEntregadorRota, idDelivery, posicaoNaFila, latitude, longitude);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is EntregadorRotaDetalhe &&
          other.id == this.id &&
          other.idEntregadorRota == this.idEntregadorRota &&
          other.idDelivery == this.idDelivery &&
          other.posicaoNaFila == this.posicaoNaFila &&
          other.latitude == this.latitude &&
          other.longitude == this.longitude);
}

class EntregadorRotaDetalhesCompanion
    extends UpdateCompanion<EntregadorRotaDetalhe> {
  final Value<int?> id;
  final Value<int?> idEntregadorRota;
  final Value<int?> idDelivery;
  final Value<int?> posicaoNaFila;
  final Value<int?> latitude;
  final Value<int?> longitude;
  const EntregadorRotaDetalhesCompanion({
    this.id = const Value.absent(),
    this.idEntregadorRota = const Value.absent(),
    this.idDelivery = const Value.absent(),
    this.posicaoNaFila = const Value.absent(),
    this.latitude = const Value.absent(),
    this.longitude = const Value.absent(),
  });
  EntregadorRotaDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idEntregadorRota = const Value.absent(),
    this.idDelivery = const Value.absent(),
    this.posicaoNaFila = const Value.absent(),
    this.latitude = const Value.absent(),
    this.longitude = const Value.absent(),
  });
  static Insertable<EntregadorRotaDetalhe> custom({
    Expression<int>? id,
    Expression<int>? idEntregadorRota,
    Expression<int>? idDelivery,
    Expression<int>? posicaoNaFila,
    Expression<int>? latitude,
    Expression<int>? longitude,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEntregadorRota != null) 'ID_ENTREGADOR_ROTA': idEntregadorRota,
      if (idDelivery != null) 'ID_DELIVERY': idDelivery,
      if (posicaoNaFila != null) 'POSICAO_NA_FILA': posicaoNaFila,
      if (latitude != null) 'LATITUDE': latitude,
      if (longitude != null) 'LONGITUDE': longitude,
    });
  }

  EntregadorRotaDetalhesCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idEntregadorRota,
      Value<int?>? idDelivery,
      Value<int?>? posicaoNaFila,
      Value<int?>? latitude,
      Value<int?>? longitude}) {
    return EntregadorRotaDetalhesCompanion(
      id: id ?? this.id,
      idEntregadorRota: idEntregadorRota ?? this.idEntregadorRota,
      idDelivery: idDelivery ?? this.idDelivery,
      posicaoNaFila: posicaoNaFila ?? this.posicaoNaFila,
      latitude: latitude ?? this.latitude,
      longitude: longitude ?? this.longitude,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEntregadorRota.present) {
      map['ID_ENTREGADOR_ROTA'] = Variable<int>(idEntregadorRota.value);
    }
    if (idDelivery.present) {
      map['ID_DELIVERY'] = Variable<int>(idDelivery.value);
    }
    if (posicaoNaFila.present) {
      map['POSICAO_NA_FILA'] = Variable<int>(posicaoNaFila.value);
    }
    if (latitude.present) {
      map['LATITUDE'] = Variable<int>(latitude.value);
    }
    if (longitude.present) {
      map['LONGITUDE'] = Variable<int>(longitude.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EntregadorRotaDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idEntregadorRota: $idEntregadorRota, ')
          ..write('idDelivery: $idDelivery, ')
          ..write('posicaoNaFila: $posicaoNaFila, ')
          ..write('latitude: $latitude, ')
          ..write('longitude: $longitude')
          ..write(')'))
        .toString();
  }
}

class $EntregadorRotaDetalhesTable extends EntregadorRotaDetalhes
    with TableInfo<$EntregadorRotaDetalhesTable, EntregadorRotaDetalhe> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $EntregadorRotaDetalhesTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idEntregadorRotaMeta =
      const VerificationMeta('idEntregadorRota');
  @override
  late final GeneratedColumn<int> idEntregadorRota = GeneratedColumn<int>(
      'ID_ENTREGADOR_ROTA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES ENTREGADOR_ROTA(ID)');
  final VerificationMeta _idDeliveryMeta = const VerificationMeta('idDelivery');
  @override
  late final GeneratedColumn<int> idDelivery = GeneratedColumn<int>(
      'ID_DELIVERY', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES DELIVERY(ID)');
  final VerificationMeta _posicaoNaFilaMeta =
      const VerificationMeta('posicaoNaFila');
  @override
  late final GeneratedColumn<int> posicaoNaFila = GeneratedColumn<int>(
      'POSICAO_NA_FILA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _latitudeMeta = const VerificationMeta('latitude');
  @override
  late final GeneratedColumn<int> latitude = GeneratedColumn<int>(
      'LATITUDE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _longitudeMeta = const VerificationMeta('longitude');
  @override
  late final GeneratedColumn<int> longitude = GeneratedColumn<int>(
      'LONGITUDE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idEntregadorRota, idDelivery, posicaoNaFila, latitude, longitude];
  @override
  String get aliasedName => _alias ?? 'ENTREGADOR_ROTA_DETALHE';
  @override
  String get actualTableName => 'ENTREGADOR_ROTA_DETALHE';
  @override
  VerificationContext validateIntegrity(
      Insertable<EntregadorRotaDetalhe> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_ENTREGADOR_ROTA')) {
      context.handle(
          _idEntregadorRotaMeta,
          idEntregadorRota.isAcceptableOrUnknown(
              data['ID_ENTREGADOR_ROTA']!, _idEntregadorRotaMeta));
    }
    if (data.containsKey('ID_DELIVERY')) {
      context.handle(
          _idDeliveryMeta,
          idDelivery.isAcceptableOrUnknown(
              data['ID_DELIVERY']!, _idDeliveryMeta));
    }
    if (data.containsKey('POSICAO_NA_FILA')) {
      context.handle(
          _posicaoNaFilaMeta,
          posicaoNaFila.isAcceptableOrUnknown(
              data['POSICAO_NA_FILA']!, _posicaoNaFilaMeta));
    }
    if (data.containsKey('LATITUDE')) {
      context.handle(_latitudeMeta,
          latitude.isAcceptableOrUnknown(data['LATITUDE']!, _latitudeMeta));
    }
    if (data.containsKey('LONGITUDE')) {
      context.handle(_longitudeMeta,
          longitude.isAcceptableOrUnknown(data['LONGITUDE']!, _longitudeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EntregadorRotaDetalhe map(Map<String, dynamic> data, {String? tablePrefix}) {
    return EntregadorRotaDetalhe.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $EntregadorRotaDetalhesTable createAlias(String alias) {
    return $EntregadorRotaDetalhesTable(attachedDatabase, alias);
  }
}

class FidelidadeHistorico extends DataClass
    implements Insertable<FidelidadeHistorico> {
  final int? id;
  final int? idCliente;
  final int? idFidelidadeUtilizado;
  final DateTime? dataConsumo;
  final String? horaConsumo;
  final double? valorConsumo;
  FidelidadeHistorico(
      {this.id,
      this.idCliente,
      this.idFidelidadeUtilizado,
      this.dataConsumo,
      this.horaConsumo,
      this.valorConsumo});
  factory FidelidadeHistorico.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return FidelidadeHistorico(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idCliente: ValueSqlType.intType(data['${effectivePrefix}ID_CLIENTE']),
      idFidelidadeUtilizado: ValueSqlType.intType(
          data['${effectivePrefix}ID_FIDELIDADE_UTILIZADO']),
      dataConsumo: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_CONSUMO']),
      horaConsumo: ValueSqlType.stringType(data['${effectivePrefix}HORA_CONSUMO']),
      valorConsumo: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_CONSUMO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCliente != null) {
      map['ID_CLIENTE'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || idFidelidadeUtilizado != null) {
      map['ID_FIDELIDADE_UTILIZADO'] = Variable<int>(idFidelidadeUtilizado);
    }
    if (!nullToAbsent || dataConsumo != null) {
      map['DATA_CONSUMO'] = Variable<DateTime>(dataConsumo);
    }
    if (!nullToAbsent || horaConsumo != null) {
      map['HORA_CONSUMO'] = Variable<String>(horaConsumo);
    }
    if (!nullToAbsent || valorConsumo != null) {
      map['VALOR_CONSUMO'] = Variable<double>(valorConsumo);
    }
    return map;
  }

  FidelidadeHistoricosCompanion toCompanion(bool nullToAbsent) {
    return FidelidadeHistoricosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCliente: idCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(idCliente),
      idFidelidadeUtilizado: idFidelidadeUtilizado == null && nullToAbsent
          ? const Value.absent()
          : Value(idFidelidadeUtilizado),
      dataConsumo: dataConsumo == null && nullToAbsent
          ? const Value.absent()
          : Value(dataConsumo),
      horaConsumo: horaConsumo == null && nullToAbsent
          ? const Value.absent()
          : Value(horaConsumo),
      valorConsumo: valorConsumo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorConsumo),
    );
  }

  factory FidelidadeHistorico.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FidelidadeHistorico(
      id: serializer.fromJson<int?>(json['id']),
      idCliente: serializer.fromJson<int?>(json['idCliente']),
      idFidelidadeUtilizado:
          serializer.fromJson<int?>(json['idFidelidadeUtilizado']),
      dataConsumo: serializer.fromJson<DateTime?>(json['dataConsumo']),
      horaConsumo: serializer.fromJson<String?>(json['horaConsumo']),
      valorConsumo: serializer.fromJson<double?>(json['valorConsumo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idCliente': serializer.toJson<int?>(idCliente),
      'idFidelidadeUtilizado': serializer.toJson<int?>(idFidelidadeUtilizado),
      'dataConsumo': serializer.toJson<DateTime?>(dataConsumo),
      'horaConsumo': serializer.toJson<String?>(horaConsumo),
      'valorConsumo': serializer.toJson<double?>(valorConsumo),
    };
  }

  FidelidadeHistorico copyWith(
          {int? id,
          int? idCliente,
          int? idFidelidadeUtilizado,
          DateTime? dataConsumo,
          String? horaConsumo,
          double? valorConsumo}) =>
      FidelidadeHistorico(
        id: id ?? this.id,
        idCliente: idCliente ?? this.idCliente,
        idFidelidadeUtilizado:
            idFidelidadeUtilizado ?? this.idFidelidadeUtilizado,
        dataConsumo: dataConsumo ?? this.dataConsumo,
        horaConsumo: horaConsumo ?? this.horaConsumo,
        valorConsumo: valorConsumo ?? this.valorConsumo,
      );
  @override
  String toString() {
    return (StringBuffer('FidelidadeHistorico(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idFidelidadeUtilizado: $idFidelidadeUtilizado, ')
          ..write('dataConsumo: $dataConsumo, ')
          ..write('horaConsumo: $horaConsumo, ')
          ..write('valorConsumo: $valorConsumo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idCliente, idFidelidadeUtilizado,
      dataConsumo, horaConsumo, valorConsumo);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FidelidadeHistorico &&
          other.id == this.id &&
          other.idCliente == this.idCliente &&
          other.idFidelidadeUtilizado == this.idFidelidadeUtilizado &&
          other.dataConsumo == this.dataConsumo &&
          other.horaConsumo == this.horaConsumo &&
          other.valorConsumo == this.valorConsumo);
}

class FidelidadeHistoricosCompanion
    extends UpdateCompanion<FidelidadeHistorico> {
  final Value<int?> id;
  final Value<int?> idCliente;
  final Value<int?> idFidelidadeUtilizado;
  final Value<DateTime?> dataConsumo;
  final Value<String?> horaConsumo;
  final Value<double?> valorConsumo;
  const FidelidadeHistoricosCompanion({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idFidelidadeUtilizado = const Value.absent(),
    this.dataConsumo = const Value.absent(),
    this.horaConsumo = const Value.absent(),
    this.valorConsumo = const Value.absent(),
  });
  FidelidadeHistoricosCompanion.insert({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idFidelidadeUtilizado = const Value.absent(),
    this.dataConsumo = const Value.absent(),
    this.horaConsumo = const Value.absent(),
    this.valorConsumo = const Value.absent(),
  });
  static Insertable<FidelidadeHistorico> custom({
    Expression<int>? id,
    Expression<int>? idCliente,
    Expression<int>? idFidelidadeUtilizado,
    Expression<DateTime>? dataConsumo,
    Expression<String>? horaConsumo,
    Expression<double>? valorConsumo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCliente != null) 'ID_CLIENTE': idCliente,
      if (idFidelidadeUtilizado != null)
        'ID_FIDELIDADE_UTILIZADO': idFidelidadeUtilizado,
      if (dataConsumo != null) 'DATA_CONSUMO': dataConsumo,
      if (horaConsumo != null) 'HORA_CONSUMO': horaConsumo,
      if (valorConsumo != null) 'VALOR_CONSUMO': valorConsumo,
    });
  }

  FidelidadeHistoricosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idCliente,
      Value<int?>? idFidelidadeUtilizado,
      Value<DateTime?>? dataConsumo,
      Value<String?>? horaConsumo,
      Value<double?>? valorConsumo}) {
    return FidelidadeHistoricosCompanion(
      id: id ?? this.id,
      idCliente: idCliente ?? this.idCliente,
      idFidelidadeUtilizado:
          idFidelidadeUtilizado ?? this.idFidelidadeUtilizado,
      dataConsumo: dataConsumo ?? this.dataConsumo,
      horaConsumo: horaConsumo ?? this.horaConsumo,
      valorConsumo: valorConsumo ?? this.valorConsumo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCliente.present) {
      map['ID_CLIENTE'] = Variable<int>(idCliente.value);
    }
    if (idFidelidadeUtilizado.present) {
      map['ID_FIDELIDADE_UTILIZADO'] =
          Variable<int>(idFidelidadeUtilizado.value);
    }
    if (dataConsumo.present) {
      map['DATA_CONSUMO'] = Variable<DateTime>(dataConsumo.value);
    }
    if (horaConsumo.present) {
      map['HORA_CONSUMO'] = Variable<String>(horaConsumo.value);
    }
    if (valorConsumo.present) {
      map['VALOR_CONSUMO'] = Variable<double>(valorConsumo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FidelidadeHistoricosCompanion(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idFidelidadeUtilizado: $idFidelidadeUtilizado, ')
          ..write('dataConsumo: $dataConsumo, ')
          ..write('horaConsumo: $horaConsumo, ')
          ..write('valorConsumo: $valorConsumo')
          ..write(')'))
        .toString();
  }
}

class $FidelidadeHistoricosTable extends FidelidadeHistoricos
    with TableInfo<$FidelidadeHistoricosTable, FidelidadeHistorico> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $FidelidadeHistoricosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
  @override
  late final GeneratedColumn<int> idCliente = GeneratedColumn<int>(
      'ID_CLIENTE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
  final VerificationMeta _idFidelidadeUtilizadoMeta =
      const VerificationMeta('idFidelidadeUtilizado');
  @override
  late final GeneratedColumn<int> idFidelidadeUtilizado =
      GeneratedColumn<int>('ID_FIDELIDADE_UTILIZADO', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES FIDELIDADE_UTILIZADO(ID)');
  final VerificationMeta _dataConsumoMeta =
      const VerificationMeta('dataConsumo');
  @override
  late final GeneratedColumn<DateTime> dataConsumo =
      GeneratedColumn<DateTime>('DATA_CONSUMO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaConsumoMeta =
      const VerificationMeta('horaConsumo');
  @override
  late final GeneratedColumn<String> horaConsumo = GeneratedColumn<String>(
      'HORA_CONSUMO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorConsumoMeta =
      const VerificationMeta('valorConsumo');
  @override
  late final GeneratedColumn<double> valorConsumo = GeneratedColumn<double>(
      'VALOR_CONSUMO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCliente,
        idFidelidadeUtilizado,
        dataConsumo,
        horaConsumo,
        valorConsumo
      ];
  @override
  String get aliasedName => _alias ?? 'FIDELIDADE_HISTORICO';
  @override
  String get actualTableName => 'FIDELIDADE_HISTORICO';
  @override
  VerificationContext validateIntegrity(
      Insertable<FidelidadeHistorico> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_CLIENTE')) {
      context.handle(_idClienteMeta,
          idCliente.isAcceptableOrUnknown(data['ID_CLIENTE']!, _idClienteMeta));
    }
    if (data.containsKey('ID_FIDELIDADE_UTILIZADO')) {
      context.handle(
          _idFidelidadeUtilizadoMeta,
          idFidelidadeUtilizado.isAcceptableOrUnknown(
              data['ID_FIDELIDADE_UTILIZADO']!, _idFidelidadeUtilizadoMeta));
    }
    if (data.containsKey('DATA_CONSUMO')) {
      context.handle(
          _dataConsumoMeta,
          dataConsumo.isAcceptableOrUnknown(
              data['DATA_CONSUMO']!, _dataConsumoMeta));
    }
    if (data.containsKey('HORA_CONSUMO')) {
      context.handle(
          _horaConsumoMeta,
          horaConsumo.isAcceptableOrUnknown(
              data['HORA_CONSUMO']!, _horaConsumoMeta));
    }
    if (data.containsKey('VALOR_CONSUMO')) {
      context.handle(
          _valorConsumoMeta,
          valorConsumo.isAcceptableOrUnknown(
              data['VALOR_CONSUMO']!, _valorConsumoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FidelidadeHistorico map(Map<String, dynamic> data, {String? tablePrefix}) {
    return FidelidadeHistorico.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FidelidadeHistoricosTable createAlias(String alias) {
    return $FidelidadeHistoricosTable(attachedDatabase, alias);
  }
}

class FidelidadeUtilizado extends DataClass
    implements Insertable<FidelidadeUtilizado> {
  final int? id;
  final DateTime? dataUtilizacao;
  final String? horaUtilizacao;
  final double? valorUtilizado;
  FidelidadeUtilizado(
      {this.id, this.dataUtilizacao, this.horaUtilizacao, this.valorUtilizado});
  factory FidelidadeUtilizado.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return FidelidadeUtilizado(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      dataUtilizacao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_UTILIZACAO']),
      horaUtilizacao: ValueSqlType.stringType(data['${effectivePrefix}HORA_UTILIZACAO']),
      valorUtilizado: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_UTILIZADO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || dataUtilizacao != null) {
      map['DATA_UTILIZACAO'] = Variable<DateTime>(dataUtilizacao);
    }
    if (!nullToAbsent || horaUtilizacao != null) {
      map['HORA_UTILIZACAO'] = Variable<String>(horaUtilizacao);
    }
    if (!nullToAbsent || valorUtilizado != null) {
      map['VALOR_UTILIZADO'] = Variable<double>(valorUtilizado);
    }
    return map;
  }

  FidelidadeUtilizadosCompanion toCompanion(bool nullToAbsent) {
    return FidelidadeUtilizadosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      dataUtilizacao: dataUtilizacao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataUtilizacao),
      horaUtilizacao: horaUtilizacao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaUtilizacao),
      valorUtilizado: valorUtilizado == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUtilizado),
    );
  }

  factory FidelidadeUtilizado.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return FidelidadeUtilizado(
      id: serializer.fromJson<int?>(json['id']),
      dataUtilizacao: serializer.fromJson<DateTime?>(json['dataUtilizacao']),
      horaUtilizacao: serializer.fromJson<String?>(json['horaUtilizacao']),
      valorUtilizado: serializer.fromJson<double?>(json['valorUtilizado']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'dataUtilizacao': serializer.toJson<DateTime?>(dataUtilizacao),
      'horaUtilizacao': serializer.toJson<String?>(horaUtilizacao),
      'valorUtilizado': serializer.toJson<double?>(valorUtilizado),
    };
  }

  FidelidadeUtilizado copyWith(
          {int? id,
          DateTime? dataUtilizacao,
          String? horaUtilizacao,
          double? valorUtilizado}) =>
      FidelidadeUtilizado(
        id: id ?? this.id,
        dataUtilizacao: dataUtilizacao ?? this.dataUtilizacao,
        horaUtilizacao: horaUtilizacao ?? this.horaUtilizacao,
        valorUtilizado: valorUtilizado ?? this.valorUtilizado,
      );
  @override
  String toString() {
    return (StringBuffer('FidelidadeUtilizado(')
          ..write('id: $id, ')
          ..write('dataUtilizacao: $dataUtilizacao, ')
          ..write('horaUtilizacao: $horaUtilizacao, ')
          ..write('valorUtilizado: $valorUtilizado')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, dataUtilizacao, horaUtilizacao, valorUtilizado);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is FidelidadeUtilizado &&
          other.id == this.id &&
          other.dataUtilizacao == this.dataUtilizacao &&
          other.horaUtilizacao == this.horaUtilizacao &&
          other.valorUtilizado == this.valorUtilizado);
}

class FidelidadeUtilizadosCompanion
    extends UpdateCompanion<FidelidadeUtilizado> {
  final Value<int?> id;
  final Value<DateTime?> dataUtilizacao;
  final Value<String?> horaUtilizacao;
  final Value<double?> valorUtilizado;
  const FidelidadeUtilizadosCompanion({
    this.id = const Value.absent(),
    this.dataUtilizacao = const Value.absent(),
    this.horaUtilizacao = const Value.absent(),
    this.valorUtilizado = const Value.absent(),
  });
  FidelidadeUtilizadosCompanion.insert({
    this.id = const Value.absent(),
    this.dataUtilizacao = const Value.absent(),
    this.horaUtilizacao = const Value.absent(),
    this.valorUtilizado = const Value.absent(),
  });
  static Insertable<FidelidadeUtilizado> custom({
    Expression<int>? id,
    Expression<DateTime>? dataUtilizacao,
    Expression<String>? horaUtilizacao,
    Expression<double>? valorUtilizado,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (dataUtilizacao != null) 'DATA_UTILIZACAO': dataUtilizacao,
      if (horaUtilizacao != null) 'HORA_UTILIZACAO': horaUtilizacao,
      if (valorUtilizado != null) 'VALOR_UTILIZADO': valorUtilizado,
    });
  }

  FidelidadeUtilizadosCompanion copyWith(
      {Value<int?>? id,
      Value<DateTime?>? dataUtilizacao,
      Value<String?>? horaUtilizacao,
      Value<double?>? valorUtilizado}) {
    return FidelidadeUtilizadosCompanion(
      id: id ?? this.id,
      dataUtilizacao: dataUtilizacao ?? this.dataUtilizacao,
      horaUtilizacao: horaUtilizacao ?? this.horaUtilizacao,
      valorUtilizado: valorUtilizado ?? this.valorUtilizado,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (dataUtilizacao.present) {
      map['DATA_UTILIZACAO'] = Variable<DateTime>(dataUtilizacao.value);
    }
    if (horaUtilizacao.present) {
      map['HORA_UTILIZACAO'] = Variable<String>(horaUtilizacao.value);
    }
    if (valorUtilizado.present) {
      map['VALOR_UTILIZADO'] = Variable<double>(valorUtilizado.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FidelidadeUtilizadosCompanion(')
          ..write('id: $id, ')
          ..write('dataUtilizacao: $dataUtilizacao, ')
          ..write('horaUtilizacao: $horaUtilizacao, ')
          ..write('valorUtilizado: $valorUtilizado')
          ..write(')'))
        .toString();
  }
}

class $FidelidadeUtilizadosTable extends FidelidadeUtilizados
    with TableInfo<$FidelidadeUtilizadosTable, FidelidadeUtilizado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $FidelidadeUtilizadosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataUtilizacaoMeta =
      const VerificationMeta('dataUtilizacao');
  @override
  late final GeneratedColumn<DateTime> dataUtilizacao =
      GeneratedColumn<DateTime>('DATA_UTILIZACAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaUtilizacaoMeta =
      const VerificationMeta('horaUtilizacao');
  @override
  late final GeneratedColumn<String> horaUtilizacao = GeneratedColumn<String>(
      'HORA_UTILIZACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorUtilizadoMeta =
      const VerificationMeta('valorUtilizado');
  @override
  late final GeneratedColumn<double> valorUtilizado = GeneratedColumn<double>(
      'VALOR_UTILIZADO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, dataUtilizacao, horaUtilizacao, valorUtilizado];
  @override
  String get aliasedName => _alias ?? 'FIDELIDADE_UTILIZADO';
  @override
  String get actualTableName => 'FIDELIDADE_UTILIZADO';
  @override
  VerificationContext validateIntegrity(
      Insertable<FidelidadeUtilizado> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('DATA_UTILIZACAO')) {
      context.handle(
          _dataUtilizacaoMeta,
          dataUtilizacao.isAcceptableOrUnknown(
              data['DATA_UTILIZACAO']!, _dataUtilizacaoMeta));
    }
    if (data.containsKey('HORA_UTILIZACAO')) {
      context.handle(
          _horaUtilizacaoMeta,
          horaUtilizacao.isAcceptableOrUnknown(
              data['HORA_UTILIZACAO']!, _horaUtilizacaoMeta));
    }
    if (data.containsKey('VALOR_UTILIZADO')) {
      context.handle(
          _valorUtilizadoMeta,
          valorUtilizado.isAcceptableOrUnknown(
              data['VALOR_UTILIZADO']!, _valorUtilizadoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  FidelidadeUtilizado map(Map<String, dynamic> data, {String? tablePrefix}) {
    return FidelidadeUtilizado.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FidelidadeUtilizadosTable createAlias(String alias) {
    return $FidelidadeUtilizadosTable(attachedDatabase, alias);
  }
}

class Fornecedor extends DataClass implements Insertable<Fornecedor> {
  final int? id;
  final String? nome;
  final String? fantasia;
  final String? email;
  final String? url;
  final String? cpfCnpj;
  final String? rg;
  final String? orgaoRg;
  final DateTime? dataEmissaoRg;
  final String? sexo;
  final String? inscricaoEstadual;
  final String? inscricaoMunicipal;
  final String? tipoPessoa;
  final DateTime? dataCadastro;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? cep;
  final String? bairro;
  final String? cidade;
  final String? uf;
  final String? telefone;
  final String? celular;
  final String? contato;
  final int? codigoIbgeCidade;
  final int? codigoIbgeUf;
  Fornecedor(
      {this.id,
      this.nome,
      this.fantasia,
      this.email,
      this.url,
      this.cpfCnpj,
      this.rg,
      this.orgaoRg,
      this.dataEmissaoRg,
      this.sexo,
      this.inscricaoEstadual,
      this.inscricaoMunicipal,
      this.tipoPessoa,
      this.dataCadastro,
      this.logradouro,
      this.numero,
      this.complemento,
      this.cep,
      this.bairro,
      this.cidade,
      this.uf,
      this.telefone,
      this.celular,
      this.contato,
      this.codigoIbgeCidade,
      this.codigoIbgeUf});
  factory Fornecedor.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Fornecedor(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      fantasia: ValueSqlType.stringType(data['${effectivePrefix}FANTASIA']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
      url: ValueSqlType.stringType(data['${effectivePrefix}URL']),
      cpfCnpj: ValueSqlType.stringType(data['${effectivePrefix}CPF_CNPJ']),
      rg: ValueSqlType.stringType(data['${effectivePrefix}RG']),
      orgaoRg: ValueSqlType.stringType(data['${effectivePrefix}ORGAO_RG']),
      dataEmissaoRg: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_EMISSAO_RG']),
      sexo: ValueSqlType.stringType(data['${effectivePrefix}SEXO']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      inscricaoMunicipal: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
      tipoPessoa: ValueSqlType.stringType(data['${effectivePrefix}TIPO_PESSOA']),
      dataCadastro: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_CADASTRO']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      cidade: ValueSqlType.stringType(data['${effectivePrefix}CIDADE']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      celular: ValueSqlType.stringType(data['${effectivePrefix}CELULAR']),
      contato: ValueSqlType.stringType(data['${effectivePrefix}CONTATO']),
      codigoIbgeCidade: ValueSqlType.intType(
          data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
      codigoIbgeUf: ValueSqlType.intType(data['${effectivePrefix}CODIGO_IBGE_UF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || fantasia != null) {
      map['FANTASIA'] = Variable<String>(fantasia);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || url != null) {
      map['URL'] = Variable<String>(url);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['CPF_CNPJ'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rg != null) {
      map['RG'] = Variable<String>(rg);
    }
    if (!nullToAbsent || orgaoRg != null) {
      map['ORGAO_RG'] = Variable<String>(orgaoRg);
    }
    if (!nullToAbsent || dataEmissaoRg != null) {
      map['DATA_EMISSAO_RG'] = Variable<DateTime>(dataEmissaoRg);
    }
    if (!nullToAbsent || sexo != null) {
      map['SEXO'] = Variable<String>(sexo);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || tipoPessoa != null) {
      map['TIPO_PESSOA'] = Variable<String>(tipoPessoa);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || codigoIbgeCidade != null) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade);
    }
    if (!nullToAbsent || codigoIbgeUf != null) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf);
    }
    return map;
  }

  FornecedorsCompanion toCompanion(bool nullToAbsent) {
    return FornecedorsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      fantasia: fantasia == null && nullToAbsent
          ? const Value.absent()
          : Value(fantasia),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      url: url == null && nullToAbsent ? const Value.absent() : Value(url),
      cpfCnpj: cpfCnpj == null && nullToAbsent
          ? const Value.absent()
          : Value(cpfCnpj),
      rg: rg == null && nullToAbsent ? const Value.absent() : Value(rg),
      orgaoRg: orgaoRg == null && nullToAbsent
          ? const Value.absent()
          : Value(orgaoRg),
      dataEmissaoRg: dataEmissaoRg == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissaoRg),
      sexo: sexo == null && nullToAbsent ? const Value.absent() : Value(sexo),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      inscricaoMunicipal: inscricaoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipal),
      tipoPessoa: tipoPessoa == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoPessoa),
      dataCadastro: dataCadastro == null && nullToAbsent
          ? const Value.absent()
          : Value(dataCadastro),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      codigoIbgeCidade: codigoIbgeCidade == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeCidade),
      codigoIbgeUf: codigoIbgeUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeUf),
    );
  }

  factory Fornecedor.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Fornecedor(
      id: serializer.fromJson<int?>(json['id']),
      nome: serializer.fromJson<String?>(json['nome']),
      fantasia: serializer.fromJson<String?>(json['fantasia']),
      email: serializer.fromJson<String?>(json['email']),
      url: serializer.fromJson<String?>(json['url']),
      cpfCnpj: serializer.fromJson<String?>(json['cpfCnpj']),
      rg: serializer.fromJson<String?>(json['rg']),
      orgaoRg: serializer.fromJson<String?>(json['orgaoRg']),
      dataEmissaoRg: serializer.fromJson<DateTime?>(json['dataEmissaoRg']),
      sexo: serializer.fromJson<String?>(json['sexo']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
      inscricaoMunicipal:
          serializer.fromJson<String?>(json['inscricaoMunicipal']),
      tipoPessoa: serializer.fromJson<String?>(json['tipoPessoa']),
      dataCadastro: serializer.fromJson<DateTime?>(json['dataCadastro']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      cep: serializer.fromJson<String?>(json['cep']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      cidade: serializer.fromJson<String?>(json['cidade']),
      uf: serializer.fromJson<String?>(json['uf']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      celular: serializer.fromJson<String?>(json['celular']),
      contato: serializer.fromJson<String?>(json['contato']),
      codigoIbgeCidade: serializer.fromJson<int?>(json['codigoIbgeCidade']),
      codigoIbgeUf: serializer.fromJson<int?>(json['codigoIbgeUf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'nome': serializer.toJson<String?>(nome),
      'fantasia': serializer.toJson<String?>(fantasia),
      'email': serializer.toJson<String?>(email),
      'url': serializer.toJson<String?>(url),
      'cpfCnpj': serializer.toJson<String?>(cpfCnpj),
      'rg': serializer.toJson<String?>(rg),
      'orgaoRg': serializer.toJson<String?>(orgaoRg),
      'dataEmissaoRg': serializer.toJson<DateTime?>(dataEmissaoRg),
      'sexo': serializer.toJson<String?>(sexo),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'inscricaoMunicipal': serializer.toJson<String?>(inscricaoMunicipal),
      'tipoPessoa': serializer.toJson<String?>(tipoPessoa),
      'dataCadastro': serializer.toJson<DateTime?>(dataCadastro),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'cep': serializer.toJson<String?>(cep),
      'bairro': serializer.toJson<String?>(bairro),
      'cidade': serializer.toJson<String?>(cidade),
      'uf': serializer.toJson<String?>(uf),
      'telefone': serializer.toJson<String?>(telefone),
      'celular': serializer.toJson<String?>(celular),
      'contato': serializer.toJson<String?>(contato),
      'codigoIbgeCidade': serializer.toJson<int?>(codigoIbgeCidade),
      'codigoIbgeUf': serializer.toJson<int?>(codigoIbgeUf),
    };
  }

  Fornecedor copyWith(
          {int? id,
          String? nome,
          String? fantasia,
          String? email,
          String? url,
          String? cpfCnpj,
          String? rg,
          String? orgaoRg,
          DateTime? dataEmissaoRg,
          String? sexo,
          String? inscricaoEstadual,
          String? inscricaoMunicipal,
          String? tipoPessoa,
          DateTime? dataCadastro,
          String? logradouro,
          String? numero,
          String? complemento,
          String? cep,
          String? bairro,
          String? cidade,
          String? uf,
          String? telefone,
          String? celular,
          String? contato,
          int? codigoIbgeCidade,
          int? codigoIbgeUf}) =>
      Fornecedor(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        fantasia: fantasia ?? this.fantasia,
        email: email ?? this.email,
        url: url ?? this.url,
        cpfCnpj: cpfCnpj ?? this.cpfCnpj,
        rg: rg ?? this.rg,
        orgaoRg: orgaoRg ?? this.orgaoRg,
        dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
        sexo: sexo ?? this.sexo,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
        tipoPessoa: tipoPessoa ?? this.tipoPessoa,
        dataCadastro: dataCadastro ?? this.dataCadastro,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        cep: cep ?? this.cep,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        telefone: telefone ?? this.telefone,
        celular: celular ?? this.celular,
        contato: contato ?? this.contato,
        codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
        codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
      );
  @override
  String toString() {
    return (StringBuffer('Fornecedor(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('email: $email, ')
          ..write('url: $url, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rg: $rg, ')
          ..write('orgaoRg: $orgaoRg, ')
          ..write('dataEmissaoRg: $dataEmissaoRg, ')
          ..write('sexo: $sexo, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoPessoa: $tipoPessoa, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        nome,
        fantasia,
        email,
        url,
        cpfCnpj,
        rg,
        orgaoRg,
        dataEmissaoRg,
        sexo,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoPessoa,
        dataCadastro,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        telefone,
        celular,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Fornecedor &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.fantasia == this.fantasia &&
          other.email == this.email &&
          other.url == this.url &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rg == this.rg &&
          other.orgaoRg == this.orgaoRg &&
          other.dataEmissaoRg == this.dataEmissaoRg &&
          other.sexo == this.sexo &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.tipoPessoa == this.tipoPessoa &&
          other.dataCadastro == this.dataCadastro &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.cep == this.cep &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.telefone == this.telefone &&
          other.celular == this.celular &&
          other.contato == this.contato &&
          other.codigoIbgeCidade == this.codigoIbgeCidade &&
          other.codigoIbgeUf == this.codigoIbgeUf);
}

class FornecedorsCompanion extends UpdateCompanion<Fornecedor> {
  final Value<int?> id;
  final Value<String?> nome;
  final Value<String?> fantasia;
  final Value<String?> email;
  final Value<String?> url;
  final Value<String?> cpfCnpj;
  final Value<String?> rg;
  final Value<String?> orgaoRg;
  final Value<DateTime?> dataEmissaoRg;
  final Value<String?> sexo;
  final Value<String?> inscricaoEstadual;
  final Value<String?> inscricaoMunicipal;
  final Value<String?> tipoPessoa;
  final Value<DateTime?> dataCadastro;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> cep;
  final Value<String?> bairro;
  final Value<String?> cidade;
  final Value<String?> uf;
  final Value<String?> telefone;
  final Value<String?> celular;
  final Value<String?> contato;
  final Value<int?> codigoIbgeCidade;
  final Value<int?> codigoIbgeUf;
  const FornecedorsCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.email = const Value.absent(),
    this.url = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rg = const Value.absent(),
    this.orgaoRg = const Value.absent(),
    this.dataEmissaoRg = const Value.absent(),
    this.sexo = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoPessoa = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  FornecedorsCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.email = const Value.absent(),
    this.url = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rg = const Value.absent(),
    this.orgaoRg = const Value.absent(),
    this.dataEmissaoRg = const Value.absent(),
    this.sexo = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoPessoa = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  static Insertable<Fornecedor> custom({
    Expression<int>? id,
    Expression<String>? nome,
    Expression<String>? fantasia,
    Expression<String>? email,
    Expression<String>? url,
    Expression<String>? cpfCnpj,
    Expression<String>? rg,
    Expression<String>? orgaoRg,
    Expression<DateTime>? dataEmissaoRg,
    Expression<String>? sexo,
    Expression<String>? inscricaoEstadual,
    Expression<String>? inscricaoMunicipal,
    Expression<String>? tipoPessoa,
    Expression<DateTime>? dataCadastro,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? cep,
    Expression<String>? bairro,
    Expression<String>? cidade,
    Expression<String>? uf,
    Expression<String>? telefone,
    Expression<String>? celular,
    Expression<String>? contato,
    Expression<int>? codigoIbgeCidade,
    Expression<int>? codigoIbgeUf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (fantasia != null) 'FANTASIA': fantasia,
      if (email != null) 'EMAIL': email,
      if (url != null) 'URL': url,
      if (cpfCnpj != null) 'CPF_CNPJ': cpfCnpj,
      if (rg != null) 'RG': rg,
      if (orgaoRg != null) 'ORGAO_RG': orgaoRg,
      if (dataEmissaoRg != null) 'DATA_EMISSAO_RG': dataEmissaoRg,
      if (sexo != null) 'SEXO': sexo,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
      if (tipoPessoa != null) 'TIPO_PESSOA': tipoPessoa,
      if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (cep != null) 'CEP': cep,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (telefone != null) 'TELEFONE': telefone,
      if (celular != null) 'CELULAR': celular,
      if (contato != null) 'CONTATO': contato,
      if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
      if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
    });
  }

  FornecedorsCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? nome,
      Value<String?>? fantasia,
      Value<String?>? email,
      Value<String?>? url,
      Value<String?>? cpfCnpj,
      Value<String?>? rg,
      Value<String?>? orgaoRg,
      Value<DateTime?>? dataEmissaoRg,
      Value<String?>? sexo,
      Value<String?>? inscricaoEstadual,
      Value<String?>? inscricaoMunicipal,
      Value<String?>? tipoPessoa,
      Value<DateTime?>? dataCadastro,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? cep,
      Value<String?>? bairro,
      Value<String?>? cidade,
      Value<String?>? uf,
      Value<String?>? telefone,
      Value<String?>? celular,
      Value<String?>? contato,
      Value<int?>? codigoIbgeCidade,
      Value<int?>? codigoIbgeUf}) {
    return FornecedorsCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      fantasia: fantasia ?? this.fantasia,
      email: email ?? this.email,
      url: url ?? this.url,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rg: rg ?? this.rg,
      orgaoRg: orgaoRg ?? this.orgaoRg,
      dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
      sexo: sexo ?? this.sexo,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      tipoPessoa: tipoPessoa ?? this.tipoPessoa,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      cep: cep ?? this.cep,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      telefone: telefone ?? this.telefone,
      celular: celular ?? this.celular,
      contato: contato ?? this.contato,
      codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
      codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (fantasia.present) {
      map['FANTASIA'] = Variable<String>(fantasia.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (url.present) {
      map['URL'] = Variable<String>(url.value);
    }
    if (cpfCnpj.present) {
      map['CPF_CNPJ'] = Variable<String>(cpfCnpj.value);
    }
    if (rg.present) {
      map['RG'] = Variable<String>(rg.value);
    }
    if (orgaoRg.present) {
      map['ORGAO_RG'] = Variable<String>(orgaoRg.value);
    }
    if (dataEmissaoRg.present) {
      map['DATA_EMISSAO_RG'] = Variable<DateTime>(dataEmissaoRg.value);
    }
    if (sexo.present) {
      map['SEXO'] = Variable<String>(sexo.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (inscricaoMunicipal.present) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (tipoPessoa.present) {
      map['TIPO_PESSOA'] = Variable<String>(tipoPessoa.value);
    }
    if (dataCadastro.present) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (codigoIbgeCidade.present) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade.value);
    }
    if (codigoIbgeUf.present) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FornecedorsCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('email: $email, ')
          ..write('url: $url, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rg: $rg, ')
          ..write('orgaoRg: $orgaoRg, ')
          ..write('dataEmissaoRg: $dataEmissaoRg, ')
          ..write('sexo: $sexo, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoPessoa: $tipoPessoa, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }
}

class $FornecedorsTable extends Fornecedors
    with TableInfo<$FornecedorsTable, Fornecedor> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $FornecedorsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _fantasiaMeta = const VerificationMeta('fantasia');
  @override
  late final GeneratedColumn<String> fantasia = GeneratedColumn<String>(
      'FANTASIA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 150),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _urlMeta = const VerificationMeta('url');
  @override
  late final GeneratedColumn<String> url = GeneratedColumn<String>(
      'URL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfCnpjMeta = const VerificationMeta('cpfCnpj');
  @override
  late final GeneratedColumn<String> cpfCnpj = GeneratedColumn<String>(
      'CPF_CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _rgMeta = const VerificationMeta('rg');
  @override
  late final GeneratedColumn<String> rg = GeneratedColumn<String>(
      'RG', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _orgaoRgMeta = const VerificationMeta('orgaoRg');
  @override
  late final GeneratedColumn<String> orgaoRg = GeneratedColumn<String>(
      'ORGAO_RG', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 20),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataEmissaoRgMeta =
      const VerificationMeta('dataEmissaoRg');
  @override
  late final GeneratedColumn<DateTime> dataEmissaoRg =
      GeneratedColumn<DateTime>('DATA_EMISSAO_RG', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _sexoMeta = const VerificationMeta('sexo');
  @override
  late final GeneratedColumn<String> sexo = GeneratedColumn<String>(
      'SEXO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 30),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  @override
  late final GeneratedColumn<String> inscricaoMunicipal =
      GeneratedColumn<String>(
          'INSCRICAO_MUNICIPAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 30),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _tipoPessoaMeta = const VerificationMeta('tipoPessoa');
  @override
  late final GeneratedColumn<String> tipoPessoa = GeneratedColumn<String>(
      'TIPO_PESSOA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataCadastroMeta =
      const VerificationMeta('dataCadastro');
  @override
  late final GeneratedColumn<DateTime> dataCadastro =
      GeneratedColumn<DateTime>('DATA_CADASTRO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  @override
  late final GeneratedColumn<String> cidade = GeneratedColumn<String>(
      'CIDADE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  @override
  late final GeneratedColumn<String> celular = GeneratedColumn<String>(
      'CELULAR', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  @override
  late final GeneratedColumn<String> contato = GeneratedColumn<String>(
      'CONTATO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 50),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoIbgeCidadeMeta =
      const VerificationMeta('codigoIbgeCidade');
  @override
  late final GeneratedColumn<int> codigoIbgeCidade = GeneratedColumn<int>(
      'CODIGO_IBGE_CIDADE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoIbgeUfMeta =
      const VerificationMeta('codigoIbgeUf');
  @override
  late final GeneratedColumn<int> codigoIbgeUf = GeneratedColumn<int>(
      'CODIGO_IBGE_UF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        nome,
        fantasia,
        email,
        url,
        cpfCnpj,
        rg,
        orgaoRg,
        dataEmissaoRg,
        sexo,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoPessoa,
        dataCadastro,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        telefone,
        celular,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf
      ];
  @override
  String get aliasedName => _alias ?? 'FORNECEDOR';
  @override
  String get actualTableName => 'FORNECEDOR';
  @override
  VerificationContext validateIntegrity(Insertable<Fornecedor> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('FANTASIA')) {
      context.handle(_fantasiaMeta,
          fantasia.isAcceptableOrUnknown(data['FANTASIA']!, _fantasiaMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    if (data.containsKey('URL')) {
      context.handle(
          _urlMeta, url.isAcceptableOrUnknown(data['URL']!, _urlMeta));
    }
    if (data.containsKey('CPF_CNPJ')) {
      context.handle(_cpfCnpjMeta,
          cpfCnpj.isAcceptableOrUnknown(data['CPF_CNPJ']!, _cpfCnpjMeta));
    }
    if (data.containsKey('RG')) {
      context.handle(_rgMeta, rg.isAcceptableOrUnknown(data['RG']!, _rgMeta));
    }
    if (data.containsKey('ORGAO_RG')) {
      context.handle(_orgaoRgMeta,
          orgaoRg.isAcceptableOrUnknown(data['ORGAO_RG']!, _orgaoRgMeta));
    }
    if (data.containsKey('DATA_EMISSAO_RG')) {
      context.handle(
          _dataEmissaoRgMeta,
          dataEmissaoRg.isAcceptableOrUnknown(
              data['DATA_EMISSAO_RG']!, _dataEmissaoRgMeta));
    }
    if (data.containsKey('SEXO')) {
      context.handle(
          _sexoMeta, sexo.isAcceptableOrUnknown(data['SEXO']!, _sexoMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL')) {
      context.handle(
          _inscricaoMunicipalMeta,
          inscricaoMunicipal.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
    }
    if (data.containsKey('TIPO_PESSOA')) {
      context.handle(
          _tipoPessoaMeta,
          tipoPessoa.isAcceptableOrUnknown(
              data['TIPO_PESSOA']!, _tipoPessoaMeta));
    }
    if (data.containsKey('DATA_CADASTRO')) {
      context.handle(
          _dataCadastroMeta,
          dataCadastro.isAcceptableOrUnknown(
              data['DATA_CADASTRO']!, _dataCadastroMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE']!, _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR']!, _celularMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO']!, _contatoMeta));
    }
    if (data.containsKey('CODIGO_IBGE_CIDADE')) {
      context.handle(
          _codigoIbgeCidadeMeta,
          codigoIbgeCidade.isAcceptableOrUnknown(
              data['CODIGO_IBGE_CIDADE']!, _codigoIbgeCidadeMeta));
    }
    if (data.containsKey('CODIGO_IBGE_UF')) {
      context.handle(
          _codigoIbgeUfMeta,
          codigoIbgeUf.isAcceptableOrUnknown(
              data['CODIGO_IBGE_UF']!, _codigoIbgeUfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Fornecedor map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Fornecedor.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $FornecedorsTable createAlias(String alias) {
    return $FornecedorsTable(attachedDatabase, alias);
  }
}

class Ibpt extends DataClass implements Insertable<Ibpt> {
  final int? id;
  final String? ncm;
  final String? ex;
  final String? tipo;
  final String? descricao;
  final double? nacionalFederal;
  final double? importadosFederal;
  final double? estadual;
  final double? municipal;
  final DateTime? vigenciaInicio;
  final DateTime? vigenciaFim;
  final String? chave;
  final String? versao;
  final String? fonte;
  Ibpt(
      {this.id,
      this.ncm,
      this.ex,
      this.tipo,
      this.descricao,
      this.nacionalFederal,
      this.importadosFederal,
      this.estadual,
      this.municipal,
      this.vigenciaInicio,
      this.vigenciaFim,
      this.chave,
      this.versao,
      this.fonte});
  factory Ibpt.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Ibpt(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      ncm: ValueSqlType.stringType(data['${effectivePrefix}NCM']),
      ex: ValueSqlType.stringType(data['${effectivePrefix}EX']),
      tipo: ValueSqlType.stringType(data['${effectivePrefix}TIPO']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
      nacionalFederal: ValueSqlType.doubleType(data['${effectivePrefix}NACIONAL_FEDERAL']),
      importadosFederal: ValueSqlType.doubleType(
          data['${effectivePrefix}IMPORTADOS_FEDERAL']),
      estadual: ValueSqlType.doubleType(data['${effectivePrefix}ESTADUAL']),
      municipal: ValueSqlType.doubleType(data['${effectivePrefix}MUNICIPAL']),
      vigenciaInicio: ValueSqlType.dateTimeType(data['${effectivePrefix}VIGENCIA_INICIO']),
      vigenciaFim: ValueSqlType.dateTimeType(data['${effectivePrefix}VIGENCIA_FIM']),
      chave: ValueSqlType.stringType(data['${effectivePrefix}CHAVE']),
      versao: ValueSqlType.stringType(data['${effectivePrefix}VERSAO']),
      fonte: ValueSqlType.stringType(data['${effectivePrefix}FONTE']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || ncm != null) {
      map['NCM'] = Variable<String>(ncm);
    }
    if (!nullToAbsent || ex != null) {
      map['EX'] = Variable<String>(ex);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || nacionalFederal != null) {
      map['NACIONAL_FEDERAL'] = Variable<double>(nacionalFederal);
    }
    if (!nullToAbsent || importadosFederal != null) {
      map['IMPORTADOS_FEDERAL'] = Variable<double>(importadosFederal);
    }
    if (!nullToAbsent || estadual != null) {
      map['ESTADUAL'] = Variable<double>(estadual);
    }
    if (!nullToAbsent || municipal != null) {
      map['MUNICIPAL'] = Variable<double>(municipal);
    }
    if (!nullToAbsent || vigenciaInicio != null) {
      map['VIGENCIA_INICIO'] = Variable<DateTime>(vigenciaInicio);
    }
    if (!nullToAbsent || vigenciaFim != null) {
      map['VIGENCIA_FIM'] = Variable<DateTime>(vigenciaFim);
    }
    if (!nullToAbsent || chave != null) {
      map['CHAVE'] = Variable<String>(chave);
    }
    if (!nullToAbsent || versao != null) {
      map['VERSAO'] = Variable<String>(versao);
    }
    if (!nullToAbsent || fonte != null) {
      map['FONTE'] = Variable<String>(fonte);
    }
    return map;
  }

  IbptsCompanion toCompanion(bool nullToAbsent) {
    return IbptsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      ncm: ncm == null && nullToAbsent ? const Value.absent() : Value(ncm),
      ex: ex == null && nullToAbsent ? const Value.absent() : Value(ex),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      nacionalFederal: nacionalFederal == null && nullToAbsent
          ? const Value.absent()
          : Value(nacionalFederal),
      importadosFederal: importadosFederal == null && nullToAbsent
          ? const Value.absent()
          : Value(importadosFederal),
      estadual: estadual == null && nullToAbsent
          ? const Value.absent()
          : Value(estadual),
      municipal: municipal == null && nullToAbsent
          ? const Value.absent()
          : Value(municipal),
      vigenciaInicio: vigenciaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(vigenciaInicio),
      vigenciaFim: vigenciaFim == null && nullToAbsent
          ? const Value.absent()
          : Value(vigenciaFim),
      chave:
          chave == null && nullToAbsent ? const Value.absent() : Value(chave),
      versao:
          versao == null && nullToAbsent ? const Value.absent() : Value(versao),
      fonte:
          fonte == null && nullToAbsent ? const Value.absent() : Value(fonte),
    );
  }

  factory Ibpt.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Ibpt(
      id: serializer.fromJson<int?>(json['id']),
      ncm: serializer.fromJson<String?>(json['ncm']),
      ex: serializer.fromJson<String?>(json['ex']),
      tipo: serializer.fromJson<String?>(json['tipo']),
      descricao: serializer.fromJson<String?>(json['descricao']),
      nacionalFederal: serializer.fromJson<double?>(json['nacionalFederal']),
      importadosFederal:
          serializer.fromJson<double?>(json['importadosFederal']),
      estadual: serializer.fromJson<double?>(json['estadual']),
      municipal: serializer.fromJson<double?>(json['municipal']),
      vigenciaInicio: serializer.fromJson<DateTime?>(json['vigenciaInicio']),
      vigenciaFim: serializer.fromJson<DateTime?>(json['vigenciaFim']),
      chave: serializer.fromJson<String?>(json['chave']),
      versao: serializer.fromJson<String?>(json['versao']),
      fonte: serializer.fromJson<String?>(json['fonte']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'ncm': serializer.toJson<String?>(ncm),
      'ex': serializer.toJson<String?>(ex),
      'tipo': serializer.toJson<String?>(tipo),
      'descricao': serializer.toJson<String?>(descricao),
      'nacionalFederal': serializer.toJson<double?>(nacionalFederal),
      'importadosFederal': serializer.toJson<double?>(importadosFederal),
      'estadual': serializer.toJson<double?>(estadual),
      'municipal': serializer.toJson<double?>(municipal),
      'vigenciaInicio': serializer.toJson<DateTime?>(vigenciaInicio),
      'vigenciaFim': serializer.toJson<DateTime?>(vigenciaFim),
      'chave': serializer.toJson<String?>(chave),
      'versao': serializer.toJson<String?>(versao),
      'fonte': serializer.toJson<String?>(fonte),
    };
  }

  Ibpt copyWith(
          {int? id,
          String? ncm,
          String? ex,
          String? tipo,
          String? descricao,
          double? nacionalFederal,
          double? importadosFederal,
          double? estadual,
          double? municipal,
          DateTime? vigenciaInicio,
          DateTime? vigenciaFim,
          String? chave,
          String? versao,
          String? fonte}) =>
      Ibpt(
        id: id ?? this.id,
        ncm: ncm ?? this.ncm,
        ex: ex ?? this.ex,
        tipo: tipo ?? this.tipo,
        descricao: descricao ?? this.descricao,
        nacionalFederal: nacionalFederal ?? this.nacionalFederal,
        importadosFederal: importadosFederal ?? this.importadosFederal,
        estadual: estadual ?? this.estadual,
        municipal: municipal ?? this.municipal,
        vigenciaInicio: vigenciaInicio ?? this.vigenciaInicio,
        vigenciaFim: vigenciaFim ?? this.vigenciaFim,
        chave: chave ?? this.chave,
        versao: versao ?? this.versao,
        fonte: fonte ?? this.fonte,
      );
  @override
  String toString() {
    return (StringBuffer('Ibpt(')
          ..write('id: $id, ')
          ..write('ncm: $ncm, ')
          ..write('ex: $ex, ')
          ..write('tipo: $tipo, ')
          ..write('descricao: $descricao, ')
          ..write('nacionalFederal: $nacionalFederal, ')
          ..write('importadosFederal: $importadosFederal, ')
          ..write('estadual: $estadual, ')
          ..write('municipal: $municipal, ')
          ..write('vigenciaInicio: $vigenciaInicio, ')
          ..write('vigenciaFim: $vigenciaFim, ')
          ..write('chave: $chave, ')
          ..write('versao: $versao, ')
          ..write('fonte: $fonte')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      ncm,
      ex,
      tipo,
      descricao,
      nacionalFederal,
      importadosFederal,
      estadual,
      municipal,
      vigenciaInicio,
      vigenciaFim,
      chave,
      versao,
      fonte);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Ibpt &&
          other.id == this.id &&
          other.ncm == this.ncm &&
          other.ex == this.ex &&
          other.tipo == this.tipo &&
          other.descricao == this.descricao &&
          other.nacionalFederal == this.nacionalFederal &&
          other.importadosFederal == this.importadosFederal &&
          other.estadual == this.estadual &&
          other.municipal == this.municipal &&
          other.vigenciaInicio == this.vigenciaInicio &&
          other.vigenciaFim == this.vigenciaFim &&
          other.chave == this.chave &&
          other.versao == this.versao &&
          other.fonte == this.fonte);
}

class IbptsCompanion extends UpdateCompanion<Ibpt> {
  final Value<int?> id;
  final Value<String?> ncm;
  final Value<String?> ex;
  final Value<String?> tipo;
  final Value<String?> descricao;
  final Value<double?> nacionalFederal;
  final Value<double?> importadosFederal;
  final Value<double?> estadual;
  final Value<double?> municipal;
  final Value<DateTime?> vigenciaInicio;
  final Value<DateTime?> vigenciaFim;
  final Value<String?> chave;
  final Value<String?> versao;
  final Value<String?> fonte;
  const IbptsCompanion({
    this.id = const Value.absent(),
    this.ncm = const Value.absent(),
    this.ex = const Value.absent(),
    this.tipo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.nacionalFederal = const Value.absent(),
    this.importadosFederal = const Value.absent(),
    this.estadual = const Value.absent(),
    this.municipal = const Value.absent(),
    this.vigenciaInicio = const Value.absent(),
    this.vigenciaFim = const Value.absent(),
    this.chave = const Value.absent(),
    this.versao = const Value.absent(),
    this.fonte = const Value.absent(),
  });
  IbptsCompanion.insert({
    this.id = const Value.absent(),
    this.ncm = const Value.absent(),
    this.ex = const Value.absent(),
    this.tipo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.nacionalFederal = const Value.absent(),
    this.importadosFederal = const Value.absent(),
    this.estadual = const Value.absent(),
    this.municipal = const Value.absent(),
    this.vigenciaInicio = const Value.absent(),
    this.vigenciaFim = const Value.absent(),
    this.chave = const Value.absent(),
    this.versao = const Value.absent(),
    this.fonte = const Value.absent(),
  });
  static Insertable<Ibpt> custom({
    Expression<int>? id,
    Expression<String>? ncm,
    Expression<String>? ex,
    Expression<String>? tipo,
    Expression<String>? descricao,
    Expression<double>? nacionalFederal,
    Expression<double>? importadosFederal,
    Expression<double>? estadual,
    Expression<double>? municipal,
    Expression<DateTime>? vigenciaInicio,
    Expression<DateTime>? vigenciaFim,
    Expression<String>? chave,
    Expression<String>? versao,
    Expression<String>? fonte,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (ncm != null) 'NCM': ncm,
      if (ex != null) 'EX': ex,
      if (tipo != null) 'TIPO': tipo,
      if (descricao != null) 'DESCRICAO': descricao,
      if (nacionalFederal != null) 'NACIONAL_FEDERAL': nacionalFederal,
      if (importadosFederal != null) 'IMPORTADOS_FEDERAL': importadosFederal,
      if (estadual != null) 'ESTADUAL': estadual,
      if (municipal != null) 'MUNICIPAL': municipal,
      if (vigenciaInicio != null) 'VIGENCIA_INICIO': vigenciaInicio,
      if (vigenciaFim != null) 'VIGENCIA_FIM': vigenciaFim,
      if (chave != null) 'CHAVE': chave,
      if (versao != null) 'VERSAO': versao,
      if (fonte != null) 'FONTE': fonte,
    });
  }

  IbptsCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? ncm,
      Value<String?>? ex,
      Value<String?>? tipo,
      Value<String?>? descricao,
      Value<double?>? nacionalFederal,
      Value<double?>? importadosFederal,
      Value<double?>? estadual,
      Value<double?>? municipal,
      Value<DateTime?>? vigenciaInicio,
      Value<DateTime?>? vigenciaFim,
      Value<String?>? chave,
      Value<String?>? versao,
      Value<String?>? fonte}) {
    return IbptsCompanion(
      id: id ?? this.id,
      ncm: ncm ?? this.ncm,
      ex: ex ?? this.ex,
      tipo: tipo ?? this.tipo,
      descricao: descricao ?? this.descricao,
      nacionalFederal: nacionalFederal ?? this.nacionalFederal,
      importadosFederal: importadosFederal ?? this.importadosFederal,
      estadual: estadual ?? this.estadual,
      municipal: municipal ?? this.municipal,
      vigenciaInicio: vigenciaInicio ?? this.vigenciaInicio,
      vigenciaFim: vigenciaFim ?? this.vigenciaFim,
      chave: chave ?? this.chave,
      versao: versao ?? this.versao,
      fonte: fonte ?? this.fonte,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (ncm.present) {
      map['NCM'] = Variable<String>(ncm.value);
    }
    if (ex.present) {
      map['EX'] = Variable<String>(ex.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (nacionalFederal.present) {
      map['NACIONAL_FEDERAL'] = Variable<double>(nacionalFederal.value);
    }
    if (importadosFederal.present) {
      map['IMPORTADOS_FEDERAL'] = Variable<double>(importadosFederal.value);
    }
    if (estadual.present) {
      map['ESTADUAL'] = Variable<double>(estadual.value);
    }
    if (municipal.present) {
      map['MUNICIPAL'] = Variable<double>(municipal.value);
    }
    if (vigenciaInicio.present) {
      map['VIGENCIA_INICIO'] = Variable<DateTime>(vigenciaInicio.value);
    }
    if (vigenciaFim.present) {
      map['VIGENCIA_FIM'] = Variable<DateTime>(vigenciaFim.value);
    }
    if (chave.present) {
      map['CHAVE'] = Variable<String>(chave.value);
    }
    if (versao.present) {
      map['VERSAO'] = Variable<String>(versao.value);
    }
    if (fonte.present) {
      map['FONTE'] = Variable<String>(fonte.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('IbptsCompanion(')
          ..write('id: $id, ')
          ..write('ncm: $ncm, ')
          ..write('ex: $ex, ')
          ..write('tipo: $tipo, ')
          ..write('descricao: $descricao, ')
          ..write('nacionalFederal: $nacionalFederal, ')
          ..write('importadosFederal: $importadosFederal, ')
          ..write('estadual: $estadual, ')
          ..write('municipal: $municipal, ')
          ..write('vigenciaInicio: $vigenciaInicio, ')
          ..write('vigenciaFim: $vigenciaFim, ')
          ..write('chave: $chave, ')
          ..write('versao: $versao, ')
          ..write('fonte: $fonte')
          ..write(')'))
        .toString();
  }
}

class $IbptsTable extends Ibpts with TableInfo<$IbptsTable, Ibpt> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $IbptsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _ncmMeta = const VerificationMeta('ncm');
  @override
  late final GeneratedColumn<String> ncm = GeneratedColumn<String>(
      'NCM', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _exMeta = const VerificationMeta('ex');
  @override
  late final GeneratedColumn<String> ex = GeneratedColumn<String>(
      'EX', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  @override
  late final GeneratedColumn<String> tipo = GeneratedColumn<String>(
      'TIPO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nacionalFederalMeta =
      const VerificationMeta('nacionalFederal');
  @override
  late final GeneratedColumn<double> nacionalFederal =
      GeneratedColumn<double>('NACIONAL_FEDERAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _importadosFederalMeta =
      const VerificationMeta('importadosFederal');
  @override
  late final GeneratedColumn<double> importadosFederal =
      GeneratedColumn<double>('IMPORTADOS_FEDERAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _estadualMeta = const VerificationMeta('estadual');
  @override
  late final GeneratedColumn<double> estadual = GeneratedColumn<double>(
      'ESTADUAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _municipalMeta = const VerificationMeta('municipal');
  @override
  late final GeneratedColumn<double> municipal = GeneratedColumn<double>(
      'MUNICIPAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _vigenciaInicioMeta =
      const VerificationMeta('vigenciaInicio');
  @override
  late final GeneratedColumn<DateTime> vigenciaInicio =
      GeneratedColumn<DateTime>('VIGENCIA_INICIO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _vigenciaFimMeta =
      const VerificationMeta('vigenciaFim');
  @override
  late final GeneratedColumn<DateTime> vigenciaFim =
      GeneratedColumn<DateTime>('VIGENCIA_FIM', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _chaveMeta = const VerificationMeta('chave');
  @override
  late final GeneratedColumn<String> chave = GeneratedColumn<String>(
      'CHAVE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _versaoMeta = const VerificationMeta('versao');
  @override
  late final GeneratedColumn<String> versao = GeneratedColumn<String>(
      'VERSAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _fonteMeta = const VerificationMeta('fonte');
  @override
  late final GeneratedColumn<String> fonte = GeneratedColumn<String>(
      'FONTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 34),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        ncm,
        ex,
        tipo,
        descricao,
        nacionalFederal,
        importadosFederal,
        estadual,
        municipal,
        vigenciaInicio,
        vigenciaFim,
        chave,
        versao,
        fonte
      ];
  @override
  String get aliasedName => _alias ?? 'IBPT';
  @override
  String get actualTableName => 'IBPT';
  @override
  VerificationContext validateIntegrity(Insertable<Ibpt> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NCM')) {
      context.handle(
          _ncmMeta, ncm.isAcceptableOrUnknown(data['NCM']!, _ncmMeta));
    }
    if (data.containsKey('EX')) {
      context.handle(_exMeta, ex.isAcceptableOrUnknown(data['EX']!, _exMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO']!, _tipoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    if (data.containsKey('NACIONAL_FEDERAL')) {
      context.handle(
          _nacionalFederalMeta,
          nacionalFederal.isAcceptableOrUnknown(
              data['NACIONAL_FEDERAL']!, _nacionalFederalMeta));
    }
    if (data.containsKey('IMPORTADOS_FEDERAL')) {
      context.handle(
          _importadosFederalMeta,
          importadosFederal.isAcceptableOrUnknown(
              data['IMPORTADOS_FEDERAL']!, _importadosFederalMeta));
    }
    if (data.containsKey('ESTADUAL')) {
      context.handle(_estadualMeta,
          estadual.isAcceptableOrUnknown(data['ESTADUAL']!, _estadualMeta));
    }
    if (data.containsKey('MUNICIPAL')) {
      context.handle(_municipalMeta,
          municipal.isAcceptableOrUnknown(data['MUNICIPAL']!, _municipalMeta));
    }
    if (data.containsKey('VIGENCIA_INICIO')) {
      context.handle(
          _vigenciaInicioMeta,
          vigenciaInicio.isAcceptableOrUnknown(
              data['VIGENCIA_INICIO']!, _vigenciaInicioMeta));
    }
    if (data.containsKey('VIGENCIA_FIM')) {
      context.handle(
          _vigenciaFimMeta,
          vigenciaFim.isAcceptableOrUnknown(
              data['VIGENCIA_FIM']!, _vigenciaFimMeta));
    }
    if (data.containsKey('CHAVE')) {
      context.handle(
          _chaveMeta, chave.isAcceptableOrUnknown(data['CHAVE']!, _chaveMeta));
    }
    if (data.containsKey('VERSAO')) {
      context.handle(_versaoMeta,
          versao.isAcceptableOrUnknown(data['VERSAO']!, _versaoMeta));
    }
    if (data.containsKey('FONTE')) {
      context.handle(
          _fonteMeta, fonte.isAcceptableOrUnknown(data['FONTE']!, _fonteMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Ibpt map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Ibpt.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $IbptsTable createAlias(String alias) {
    return $IbptsTable(attachedDatabase, alias);
  }
}

class LogImportacao extends DataClass implements Insertable<LogImportacao> {
  final int? id;
  final DateTime? dataImportacao;
  final String? horaImportacao;
  final String? erro;
  final String? registro;
  LogImportacao(
      {this.id,
      this.dataImportacao,
      this.horaImportacao,
      this.erro,
      this.registro});
  factory LogImportacao.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return LogImportacao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      dataImportacao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_IMPORTACAO']),
      horaImportacao: ValueSqlType.stringType(data['${effectivePrefix}HORA_IMPORTACAO']),
      erro: ValueSqlType.stringType(data['${effectivePrefix}ERRO']),
      registro: ValueSqlType.stringType(data['${effectivePrefix}REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || dataImportacao != null) {
      map['DATA_IMPORTACAO'] = Variable<DateTime>(dataImportacao);
    }
    if (!nullToAbsent || horaImportacao != null) {
      map['HORA_IMPORTACAO'] = Variable<String>(horaImportacao);
    }
    if (!nullToAbsent || erro != null) {
      map['ERRO'] = Variable<String>(erro);
    }
    if (!nullToAbsent || registro != null) {
      map['REGISTRO'] = Variable<String>(registro);
    }
    return map;
  }

  LogImportacaosCompanion toCompanion(bool nullToAbsent) {
    return LogImportacaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      dataImportacao: dataImportacao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataImportacao),
      horaImportacao: horaImportacao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaImportacao),
      erro: erro == null && nullToAbsent ? const Value.absent() : Value(erro),
      registro: registro == null && nullToAbsent
          ? const Value.absent()
          : Value(registro),
    );
  }

  factory LogImportacao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return LogImportacao(
      id: serializer.fromJson<int?>(json['id']),
      dataImportacao: serializer.fromJson<DateTime?>(json['dataImportacao']),
      horaImportacao: serializer.fromJson<String?>(json['horaImportacao']),
      erro: serializer.fromJson<String?>(json['erro']),
      registro: serializer.fromJson<String?>(json['registro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'dataImportacao': serializer.toJson<DateTime?>(dataImportacao),
      'horaImportacao': serializer.toJson<String?>(horaImportacao),
      'erro': serializer.toJson<String?>(erro),
      'registro': serializer.toJson<String?>(registro),
    };
  }

  LogImportacao copyWith(
          {int? id,
          DateTime? dataImportacao,
          String? horaImportacao,
          String? erro,
          String? registro}) =>
      LogImportacao(
        id: id ?? this.id,
        dataImportacao: dataImportacao ?? this.dataImportacao,
        horaImportacao: horaImportacao ?? this.horaImportacao,
        erro: erro ?? this.erro,
        registro: registro ?? this.registro,
      );
  @override
  String toString() {
    return (StringBuffer('LogImportacao(')
          ..write('id: $id, ')
          ..write('dataImportacao: $dataImportacao, ')
          ..write('horaImportacao: $horaImportacao, ')
          ..write('erro: $erro, ')
          ..write('registro: $registro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      Object.hash(id, dataImportacao, horaImportacao, erro, registro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is LogImportacao &&
          other.id == this.id &&
          other.dataImportacao == this.dataImportacao &&
          other.horaImportacao == this.horaImportacao &&
          other.erro == this.erro &&
          other.registro == this.registro);
}

class LogImportacaosCompanion extends UpdateCompanion<LogImportacao> {
  final Value<int?> id;
  final Value<DateTime?> dataImportacao;
  final Value<String?> horaImportacao;
  final Value<String?> erro;
  final Value<String?> registro;
  const LogImportacaosCompanion({
    this.id = const Value.absent(),
    this.dataImportacao = const Value.absent(),
    this.horaImportacao = const Value.absent(),
    this.erro = const Value.absent(),
    this.registro = const Value.absent(),
  });
  LogImportacaosCompanion.insert({
    this.id = const Value.absent(),
    this.dataImportacao = const Value.absent(),
    this.horaImportacao = const Value.absent(),
    this.erro = const Value.absent(),
    this.registro = const Value.absent(),
  });
  static Insertable<LogImportacao> custom({
    Expression<int>? id,
    Expression<DateTime>? dataImportacao,
    Expression<String>? horaImportacao,
    Expression<String>? erro,
    Expression<String>? registro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (dataImportacao != null) 'DATA_IMPORTACAO': dataImportacao,
      if (horaImportacao != null) 'HORA_IMPORTACAO': horaImportacao,
      if (erro != null) 'ERRO': erro,
      if (registro != null) 'REGISTRO': registro,
    });
  }

  LogImportacaosCompanion copyWith(
      {Value<int?>? id,
      Value<DateTime?>? dataImportacao,
      Value<String?>? horaImportacao,
      Value<String?>? erro,
      Value<String?>? registro}) {
    return LogImportacaosCompanion(
      id: id ?? this.id,
      dataImportacao: dataImportacao ?? this.dataImportacao,
      horaImportacao: horaImportacao ?? this.horaImportacao,
      erro: erro ?? this.erro,
      registro: registro ?? this.registro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (dataImportacao.present) {
      map['DATA_IMPORTACAO'] = Variable<DateTime>(dataImportacao.value);
    }
    if (horaImportacao.present) {
      map['HORA_IMPORTACAO'] = Variable<String>(horaImportacao.value);
    }
    if (erro.present) {
      map['ERRO'] = Variable<String>(erro.value);
    }
    if (registro.present) {
      map['REGISTRO'] = Variable<String>(registro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('LogImportacaosCompanion(')
          ..write('id: $id, ')
          ..write('dataImportacao: $dataImportacao, ')
          ..write('horaImportacao: $horaImportacao, ')
          ..write('erro: $erro, ')
          ..write('registro: $registro')
          ..write(')'))
        .toString();
  }
}

class $LogImportacaosTable extends LogImportacaos
    with TableInfo<$LogImportacaosTable, LogImportacao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $LogImportacaosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataImportacaoMeta =
      const VerificationMeta('dataImportacao');
  @override
  late final GeneratedColumn<DateTime> dataImportacao =
      GeneratedColumn<DateTime>('DATA_IMPORTACAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _horaImportacaoMeta =
      const VerificationMeta('horaImportacao');
  @override
  late final GeneratedColumn<String> horaImportacao = GeneratedColumn<String>(
      'HORA_IMPORTACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _erroMeta = const VerificationMeta('erro');
  @override
  late final GeneratedColumn<String> erro = GeneratedColumn<String>(
      'ERRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _registroMeta = const VerificationMeta('registro');
  @override
  late final GeneratedColumn<String> registro = GeneratedColumn<String>(
      'REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, dataImportacao, horaImportacao, erro, registro];
  @override
  String get aliasedName => _alias ?? 'LOG_IMPORTACAO';
  @override
  String get actualTableName => 'LOG_IMPORTACAO';
  @override
  VerificationContext validateIntegrity(Insertable<LogImportacao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('DATA_IMPORTACAO')) {
      context.handle(
          _dataImportacaoMeta,
          dataImportacao.isAcceptableOrUnknown(
              data['DATA_IMPORTACAO']!, _dataImportacaoMeta));
    }
    if (data.containsKey('HORA_IMPORTACAO')) {
      context.handle(
          _horaImportacaoMeta,
          horaImportacao.isAcceptableOrUnknown(
              data['HORA_IMPORTACAO']!, _horaImportacaoMeta));
    }
    if (data.containsKey('ERRO')) {
      context.handle(
          _erroMeta, erro.isAcceptableOrUnknown(data['ERRO']!, _erroMeta));
    }
    if (data.containsKey('REGISTRO')) {
      context.handle(_registroMeta,
          registro.isAcceptableOrUnknown(data['REGISTRO']!, _registroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  LogImportacao map(Map<String, dynamic> data, {String? tablePrefix}) {
    return LogImportacao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $LogImportacaosTable createAlias(String alias) {
    return $LogImportacaosTable(attachedDatabase, alias);
  }
}

class Mesa extends DataClass implements Insertable<Mesa> {
  final int? id;
  final String? numero;
  final int? quantidadeCadeiras;
  final int? quantidadeCadeirasCrianca;
  final String? disponivel;
  final String? observacao;
  Mesa(
      {this.id,
      this.numero,
      this.quantidadeCadeiras,
      this.quantidadeCadeirasCrianca,
      this.disponivel,
      this.observacao});
  factory Mesa.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return Mesa(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      quantidadeCadeiras: ValueSqlType.intType(
          data['${effectivePrefix}QUANTIDADE_CADEIRAS']),
      quantidadeCadeirasCrianca: ValueSqlType.intType(
          data['${effectivePrefix}QUANTIDADE_CADEIRAS_CRIANCA']),
      disponivel: ValueSqlType.stringType(data['${effectivePrefix}DISPONIVEL']),
      observacao: ValueSqlType.stringType(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || quantidadeCadeiras != null) {
      map['QUANTIDADE_CADEIRAS'] = Variable<int>(quantidadeCadeiras);
    }
    if (!nullToAbsent || quantidadeCadeirasCrianca != null) {
      map['QUANTIDADE_CADEIRAS_CRIANCA'] =
          Variable<int>(quantidadeCadeirasCrianca);
    }
    if (!nullToAbsent || disponivel != null) {
      map['DISPONIVEL'] = Variable<String>(disponivel);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  MesasCompanion toCompanion(bool nullToAbsent) {
    return MesasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      quantidadeCadeiras: quantidadeCadeiras == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeCadeiras),
      quantidadeCadeirasCrianca:
          quantidadeCadeirasCrianca == null && nullToAbsent
              ? const Value.absent()
              : Value(quantidadeCadeirasCrianca),
      disponivel: disponivel == null && nullToAbsent
          ? const Value.absent()
          : Value(disponivel),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory Mesa.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return Mesa(
      id: serializer.fromJson<int?>(json['id']),
      numero: serializer.fromJson<String?>(json['numero']),
      quantidadeCadeiras: serializer.fromJson<int?>(json['quantidadeCadeiras']),
      quantidadeCadeirasCrianca:
          serializer.fromJson<int?>(json['quantidadeCadeirasCrianca']),
      disponivel: serializer.fromJson<String?>(json['disponivel']),
      observacao: serializer.fromJson<String?>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'numero': serializer.toJson<String?>(numero),
      'quantidadeCadeiras': serializer.toJson<int?>(quantidadeCadeiras),
      'quantidadeCadeirasCrianca':
          serializer.toJson<int?>(quantidadeCadeirasCrianca),
      'disponivel': serializer.toJson<String?>(disponivel),
      'observacao': serializer.toJson<String?>(observacao),
    };
  }

  Mesa copyWith(
          {int? id,
          String? numero,
          int? quantidadeCadeiras,
          int? quantidadeCadeirasCrianca,
          String? disponivel,
          String? observacao}) =>
      Mesa(
        id: id ?? this.id,
        numero: numero ?? this.numero,
        quantidadeCadeiras: quantidadeCadeiras ?? this.quantidadeCadeiras,
        quantidadeCadeirasCrianca:
            quantidadeCadeirasCrianca ?? this.quantidadeCadeirasCrianca,
        disponivel: disponivel ?? this.disponivel,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('Mesa(')
          ..write('id: $id, ')
          ..write('numero: $numero, ')
          ..write('quantidadeCadeiras: $quantidadeCadeiras, ')
          ..write('quantidadeCadeirasCrianca: $quantidadeCadeirasCrianca, ')
          ..write('disponivel: $disponivel, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, numero, quantidadeCadeiras,
      quantidadeCadeirasCrianca, disponivel, observacao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is Mesa &&
          other.id == this.id &&
          other.numero == this.numero &&
          other.quantidadeCadeiras == this.quantidadeCadeiras &&
          other.quantidadeCadeirasCrianca == this.quantidadeCadeirasCrianca &&
          other.disponivel == this.disponivel &&
          other.observacao == this.observacao);
}

class MesasCompanion extends UpdateCompanion<Mesa> {
  final Value<int?> id;
  final Value<String?> numero;
  final Value<int?> quantidadeCadeiras;
  final Value<int?> quantidadeCadeirasCrianca;
  final Value<String?> disponivel;
  final Value<String?> observacao;
  const MesasCompanion({
    this.id = const Value.absent(),
    this.numero = const Value.absent(),
    this.quantidadeCadeiras = const Value.absent(),
    this.quantidadeCadeirasCrianca = const Value.absent(),
    this.disponivel = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  MesasCompanion.insert({
    this.id = const Value.absent(),
    this.numero = const Value.absent(),
    this.quantidadeCadeiras = const Value.absent(),
    this.quantidadeCadeirasCrianca = const Value.absent(),
    this.disponivel = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<Mesa> custom({
    Expression<int>? id,
    Expression<String>? numero,
    Expression<int>? quantidadeCadeiras,
    Expression<int>? quantidadeCadeirasCrianca,
    Expression<String>? disponivel,
    Expression<String>? observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (numero != null) 'NUMERO': numero,
      if (quantidadeCadeiras != null) 'QUANTIDADE_CADEIRAS': quantidadeCadeiras,
      if (quantidadeCadeirasCrianca != null)
        'QUANTIDADE_CADEIRAS_CRIANCA': quantidadeCadeirasCrianca,
      if (disponivel != null) 'DISPONIVEL': disponivel,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  MesasCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? numero,
      Value<int?>? quantidadeCadeiras,
      Value<int?>? quantidadeCadeirasCrianca,
      Value<String?>? disponivel,
      Value<String?>? observacao}) {
    return MesasCompanion(
      id: id ?? this.id,
      numero: numero ?? this.numero,
      quantidadeCadeiras: quantidadeCadeiras ?? this.quantidadeCadeiras,
      quantidadeCadeirasCrianca:
          quantidadeCadeirasCrianca ?? this.quantidadeCadeirasCrianca,
      disponivel: disponivel ?? this.disponivel,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (quantidadeCadeiras.present) {
      map['QUANTIDADE_CADEIRAS'] = Variable<int>(quantidadeCadeiras.value);
    }
    if (quantidadeCadeirasCrianca.present) {
      map['QUANTIDADE_CADEIRAS_CRIANCA'] =
          Variable<int>(quantidadeCadeirasCrianca.value);
    }
    if (disponivel.present) {
      map['DISPONIVEL'] = Variable<String>(disponivel.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('MesasCompanion(')
          ..write('id: $id, ')
          ..write('numero: $numero, ')
          ..write('quantidadeCadeiras: $quantidadeCadeiras, ')
          ..write('quantidadeCadeirasCrianca: $quantidadeCadeirasCrianca, ')
          ..write('disponivel: $disponivel, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $MesasTable extends Mesas with TableInfo<$MesasTable, Mesa> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $MesasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 10),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadeCadeirasMeta =
      const VerificationMeta('quantidadeCadeiras');
  @override
  late final GeneratedColumn<int> quantidadeCadeiras = GeneratedColumn<int>(
      'QUANTIDADE_CADEIRAS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _quantidadeCadeirasCriancaMeta =
      const VerificationMeta('quantidadeCadeirasCrianca');
  @override
  late final GeneratedColumn<int> quantidadeCadeirasCrianca =
      GeneratedColumn<int>('QUANTIDADE_CADEIRAS_CRIANCA', aliasedName, true,
          type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _disponivelMeta = const VerificationMeta('disponivel');
  @override
  late final GeneratedColumn<String> disponivel = GeneratedColumn<String>(
      'DISPONIVEL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  @override
  late final GeneratedColumn<String> observacao = GeneratedColumn<String>(
      'OBSERVACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        numero,
        quantidadeCadeiras,
        quantidadeCadeirasCrianca,
        disponivel,
        observacao
      ];
  @override
  String get aliasedName => _alias ?? 'MESA';
  @override
  String get actualTableName => 'MESA';
  @override
  VerificationContext validateIntegrity(Insertable<Mesa> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('QUANTIDADE_CADEIRAS')) {
      context.handle(
          _quantidadeCadeirasMeta,
          quantidadeCadeiras.isAcceptableOrUnknown(
              data['QUANTIDADE_CADEIRAS']!, _quantidadeCadeirasMeta));
    }
    if (data.containsKey('QUANTIDADE_CADEIRAS_CRIANCA')) {
      context.handle(
          _quantidadeCadeirasCriancaMeta,
          quantidadeCadeirasCrianca.isAcceptableOrUnknown(
              data['QUANTIDADE_CADEIRAS_CRIANCA']!,
              _quantidadeCadeirasCriancaMeta));
    }
    if (data.containsKey('DISPONIVEL')) {
      context.handle(
          _disponivelMeta,
          disponivel.isAcceptableOrUnknown(
              data['DISPONIVEL']!, _disponivelMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO']!, _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Mesa map(Map<String, dynamic> data, {String? tablePrefix}) {
    return Mesa.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $MesasTable createAlias(String alias) {
    return $MesasTable(attachedDatabase, alias);
  }
}

class NfcePlanoPagamento extends DataClass
    implements Insertable<NfcePlanoPagamento> {
  final int? id;
  final DateTime? dataSolicitacao;
  final DateTime? dataPagamento;
  final String? tipoPlano;
  final double? valor;
  final String? statusPagamento;
  final String? codigoTransacao;
  final String? metodoPagamento;
  final String? codigoTipoPagamento;
  final DateTime? dataPlanoExpira;
  final String? hashRegistro;
  NfcePlanoPagamento(
      {this.id,
      this.dataSolicitacao,
      this.dataPagamento,
      this.tipoPlano,
      this.valor,
      this.statusPagamento,
      this.codigoTransacao,
      this.metodoPagamento,
      this.codigoTipoPagamento,
      this.dataPlanoExpira,
      this.hashRegistro});
  factory NfcePlanoPagamento.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfcePlanoPagamento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      dataSolicitacao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_SOLICITACAO']),
      dataPagamento: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_PAGAMENTO']),
      tipoPlano: ValueSqlType.stringType(data['${effectivePrefix}TIPO_PLANO']),
      valor: ValueSqlType.doubleType(data['${effectivePrefix}VALOR']),
      statusPagamento: ValueSqlType.stringType(data['${effectivePrefix}STATUS_PAGAMENTO']),
      codigoTransacao: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_TRANSACAO']),
      metodoPagamento: ValueSqlType.stringType(data['${effectivePrefix}METODO_PAGAMENTO']),
      codigoTipoPagamento: ValueSqlType.stringType(
          data['${effectivePrefix}CODIGO_TIPO_PAGAMENTO']),
      dataPlanoExpira: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_PLANO_EXPIRA']),
      hashRegistro: ValueSqlType.stringType(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || dataSolicitacao != null) {
      map['DATA_SOLICITACAO'] = Variable<DateTime>(dataSolicitacao);
    }
    if (!nullToAbsent || dataPagamento != null) {
      map['DATA_PAGAMENTO'] = Variable<DateTime>(dataPagamento);
    }
    if (!nullToAbsent || tipoPlano != null) {
      map['TIPO_PLANO'] = Variable<String>(tipoPlano);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || statusPagamento != null) {
      map['STATUS_PAGAMENTO'] = Variable<String>(statusPagamento);
    }
    if (!nullToAbsent || codigoTransacao != null) {
      map['CODIGO_TRANSACAO'] = Variable<String>(codigoTransacao);
    }
    if (!nullToAbsent || metodoPagamento != null) {
      map['METODO_PAGAMENTO'] = Variable<String>(metodoPagamento);
    }
    if (!nullToAbsent || codigoTipoPagamento != null) {
      map['CODIGO_TIPO_PAGAMENTO'] = Variable<String>(codigoTipoPagamento);
    }
    if (!nullToAbsent || dataPlanoExpira != null) {
      map['DATA_PLANO_EXPIRA'] = Variable<DateTime>(dataPlanoExpira);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  NfcePlanoPagamentosCompanion toCompanion(bool nullToAbsent) {
    return NfcePlanoPagamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      dataSolicitacao: dataSolicitacao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataSolicitacao),
      dataPagamento: dataPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPagamento),
      tipoPlano: tipoPlano == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoPlano),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      statusPagamento: statusPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(statusPagamento),
      codigoTransacao: codigoTransacao == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoTransacao),
      metodoPagamento: metodoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(metodoPagamento),
      codigoTipoPagamento: codigoTipoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoTipoPagamento),
      dataPlanoExpira: dataPlanoExpira == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPlanoExpira),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory NfcePlanoPagamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfcePlanoPagamento(
      id: serializer.fromJson<int?>(json['id']),
      dataSolicitacao: serializer.fromJson<DateTime?>(json['dataSolicitacao']),
      dataPagamento: serializer.fromJson<DateTime?>(json['dataPagamento']),
      tipoPlano: serializer.fromJson<String?>(json['tipoPlano']),
      valor: serializer.fromJson<double?>(json['valor']),
      statusPagamento: serializer.fromJson<String?>(json['statusPagamento']),
      codigoTransacao: serializer.fromJson<String?>(json['codigoTransacao']),
      metodoPagamento: serializer.fromJson<String?>(json['metodoPagamento']),
      codigoTipoPagamento:
          serializer.fromJson<String?>(json['codigoTipoPagamento']),
      dataPlanoExpira: serializer.fromJson<DateTime?>(json['dataPlanoExpira']),
      hashRegistro: serializer.fromJson<String?>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'dataSolicitacao': serializer.toJson<DateTime?>(dataSolicitacao),
      'dataPagamento': serializer.toJson<DateTime?>(dataPagamento),
      'tipoPlano': serializer.toJson<String?>(tipoPlano),
      'valor': serializer.toJson<double?>(valor),
      'statusPagamento': serializer.toJson<String?>(statusPagamento),
      'codigoTransacao': serializer.toJson<String?>(codigoTransacao),
      'metodoPagamento': serializer.toJson<String?>(metodoPagamento),
      'codigoTipoPagamento': serializer.toJson<String?>(codigoTipoPagamento),
      'dataPlanoExpira': serializer.toJson<DateTime?>(dataPlanoExpira),
      'hashRegistro': serializer.toJson<String?>(hashRegistro),
    };
  }

  NfcePlanoPagamento copyWith(
          {int? id,
          DateTime? dataSolicitacao,
          DateTime? dataPagamento,
          String? tipoPlano,
          double? valor,
          String? statusPagamento,
          String? codigoTransacao,
          String? metodoPagamento,
          String? codigoTipoPagamento,
          DateTime? dataPlanoExpira,
          String? hashRegistro}) =>
      NfcePlanoPagamento(
        id: id ?? this.id,
        dataSolicitacao: dataSolicitacao ?? this.dataSolicitacao,
        dataPagamento: dataPagamento ?? this.dataPagamento,
        tipoPlano: tipoPlano ?? this.tipoPlano,
        valor: valor ?? this.valor,
        statusPagamento: statusPagamento ?? this.statusPagamento,
        codigoTransacao: codigoTransacao ?? this.codigoTransacao,
        metodoPagamento: metodoPagamento ?? this.metodoPagamento,
        codigoTipoPagamento: codigoTipoPagamento ?? this.codigoTipoPagamento,
        dataPlanoExpira: dataPlanoExpira ?? this.dataPlanoExpira,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('NfcePlanoPagamento(')
          ..write('id: $id, ')
          ..write('dataSolicitacao: $dataSolicitacao, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('tipoPlano: $tipoPlano, ')
          ..write('valor: $valor, ')
          ..write('statusPagamento: $statusPagamento, ')
          ..write('codigoTransacao: $codigoTransacao, ')
          ..write('metodoPagamento: $metodoPagamento, ')
          ..write('codigoTipoPagamento: $codigoTipoPagamento, ')
          ..write('dataPlanoExpira: $dataPlanoExpira, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      dataSolicitacao,
      dataPagamento,
      tipoPlano,
      valor,
      statusPagamento,
      codigoTransacao,
      metodoPagamento,
      codigoTipoPagamento,
      dataPlanoExpira,
      hashRegistro);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfcePlanoPagamento &&
          other.id == this.id &&
          other.dataSolicitacao == this.dataSolicitacao &&
          other.dataPagamento == this.dataPagamento &&
          other.tipoPlano == this.tipoPlano &&
          other.valor == this.valor &&
          other.statusPagamento == this.statusPagamento &&
          other.codigoTransacao == this.codigoTransacao &&
          other.metodoPagamento == this.metodoPagamento &&
          other.codigoTipoPagamento == this.codigoTipoPagamento &&
          other.dataPlanoExpira == this.dataPlanoExpira &&
          other.hashRegistro == this.hashRegistro);
}

class NfcePlanoPagamentosCompanion extends UpdateCompanion<NfcePlanoPagamento> {
  final Value<int?> id;
  final Value<DateTime?> dataSolicitacao;
  final Value<DateTime?> dataPagamento;
  final Value<String?> tipoPlano;
  final Value<double?> valor;
  final Value<String?> statusPagamento;
  final Value<String?> codigoTransacao;
  final Value<String?> metodoPagamento;
  final Value<String?> codigoTipoPagamento;
  final Value<DateTime?> dataPlanoExpira;
  final Value<String?> hashRegistro;
  const NfcePlanoPagamentosCompanion({
    this.id = const Value.absent(),
    this.dataSolicitacao = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.tipoPlano = const Value.absent(),
    this.valor = const Value.absent(),
    this.statusPagamento = const Value.absent(),
    this.codigoTransacao = const Value.absent(),
    this.metodoPagamento = const Value.absent(),
    this.codigoTipoPagamento = const Value.absent(),
    this.dataPlanoExpira = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  NfcePlanoPagamentosCompanion.insert({
    this.id = const Value.absent(),
    this.dataSolicitacao = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.tipoPlano = const Value.absent(),
    this.valor = const Value.absent(),
    this.statusPagamento = const Value.absent(),
    this.codigoTransacao = const Value.absent(),
    this.metodoPagamento = const Value.absent(),
    this.codigoTipoPagamento = const Value.absent(),
    this.dataPlanoExpira = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<NfcePlanoPagamento> custom({
    Expression<int>? id,
    Expression<DateTime>? dataSolicitacao,
    Expression<DateTime>? dataPagamento,
    Expression<String>? tipoPlano,
    Expression<double>? valor,
    Expression<String>? statusPagamento,
    Expression<String>? codigoTransacao,
    Expression<String>? metodoPagamento,
    Expression<String>? codigoTipoPagamento,
    Expression<DateTime>? dataPlanoExpira,
    Expression<String>? hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (dataSolicitacao != null) 'DATA_SOLICITACAO': dataSolicitacao,
      if (dataPagamento != null) 'DATA_PAGAMENTO': dataPagamento,
      if (tipoPlano != null) 'TIPO_PLANO': tipoPlano,
      if (valor != null) 'VALOR': valor,
      if (statusPagamento != null) 'STATUS_PAGAMENTO': statusPagamento,
      if (codigoTransacao != null) 'CODIGO_TRANSACAO': codigoTransacao,
      if (metodoPagamento != null) 'METODO_PAGAMENTO': metodoPagamento,
      if (codigoTipoPagamento != null)
        'CODIGO_TIPO_PAGAMENTO': codigoTipoPagamento,
      if (dataPlanoExpira != null) 'DATA_PLANO_EXPIRA': dataPlanoExpira,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  NfcePlanoPagamentosCompanion copyWith(
      {Value<int?>? id,
      Value<DateTime?>? dataSolicitacao,
      Value<DateTime?>? dataPagamento,
      Value<String?>? tipoPlano,
      Value<double?>? valor,
      Value<String?>? statusPagamento,
      Value<String?>? codigoTransacao,
      Value<String?>? metodoPagamento,
      Value<String?>? codigoTipoPagamento,
      Value<DateTime?>? dataPlanoExpira,
      Value<String?>? hashRegistro}) {
    return NfcePlanoPagamentosCompanion(
      id: id ?? this.id,
      dataSolicitacao: dataSolicitacao ?? this.dataSolicitacao,
      dataPagamento: dataPagamento ?? this.dataPagamento,
      tipoPlano: tipoPlano ?? this.tipoPlano,
      valor: valor ?? this.valor,
      statusPagamento: statusPagamento ?? this.statusPagamento,
      codigoTransacao: codigoTransacao ?? this.codigoTransacao,
      metodoPagamento: metodoPagamento ?? this.metodoPagamento,
      codigoTipoPagamento: codigoTipoPagamento ?? this.codigoTipoPagamento,
      dataPlanoExpira: dataPlanoExpira ?? this.dataPlanoExpira,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (dataSolicitacao.present) {
      map['DATA_SOLICITACAO'] = Variable<DateTime>(dataSolicitacao.value);
    }
    if (dataPagamento.present) {
      map['DATA_PAGAMENTO'] = Variable<DateTime>(dataPagamento.value);
    }
    if (tipoPlano.present) {
      map['TIPO_PLANO'] = Variable<String>(tipoPlano.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (statusPagamento.present) {
      map['STATUS_PAGAMENTO'] = Variable<String>(statusPagamento.value);
    }
    if (codigoTransacao.present) {
      map['CODIGO_TRANSACAO'] = Variable<String>(codigoTransacao.value);
    }
    if (metodoPagamento.present) {
      map['METODO_PAGAMENTO'] = Variable<String>(metodoPagamento.value);
    }
    if (codigoTipoPagamento.present) {
      map['CODIGO_TIPO_PAGAMENTO'] =
          Variable<String>(codigoTipoPagamento.value);
    }
    if (dataPlanoExpira.present) {
      map['DATA_PLANO_EXPIRA'] = Variable<DateTime>(dataPlanoExpira.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfcePlanoPagamentosCompanion(')
          ..write('id: $id, ')
          ..write('dataSolicitacao: $dataSolicitacao, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('tipoPlano: $tipoPlano, ')
          ..write('valor: $valor, ')
          ..write('statusPagamento: $statusPagamento, ')
          ..write('codigoTransacao: $codigoTransacao, ')
          ..write('metodoPagamento: $metodoPagamento, ')
          ..write('codigoTipoPagamento: $codigoTipoPagamento, ')
          ..write('dataPlanoExpira: $dataPlanoExpira, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $NfcePlanoPagamentosTable extends NfcePlanoPagamentos
    with TableInfo<$NfcePlanoPagamentosTable, NfcePlanoPagamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfcePlanoPagamentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataSolicitacaoMeta =
      const VerificationMeta('dataSolicitacao');
  @override
  late final GeneratedColumn<DateTime> dataSolicitacao =
      GeneratedColumn<DateTime>('DATA_SOLICITACAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataPagamentoMeta =
      const VerificationMeta('dataPagamento');
  @override
  late final GeneratedColumn<DateTime> dataPagamento =
      GeneratedColumn<DateTime>('DATA_PAGAMENTO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _tipoPlanoMeta = const VerificationMeta('tipoPlano');
  @override
  late final GeneratedColumn<String> tipoPlano = GeneratedColumn<String>(
      'TIPO_PLANO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  @override
  late final GeneratedColumn<double> valor = GeneratedColumn<double>(
      'VALOR', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _statusPagamentoMeta =
      const VerificationMeta('statusPagamento');
  @override
  late final GeneratedColumn<String> statusPagamento =
      GeneratedColumn<String>('STATUS_PAGAMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _codigoTransacaoMeta =
      const VerificationMeta('codigoTransacao');
  @override
  late final GeneratedColumn<String> codigoTransacao =
      GeneratedColumn<String>('CODIGO_TRANSACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _metodoPagamentoMeta =
      const VerificationMeta('metodoPagamento');
  @override
  late final GeneratedColumn<String> metodoPagamento =
      GeneratedColumn<String>('METODO_PAGAMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _codigoTipoPagamentoMeta =
      const VerificationMeta('codigoTipoPagamento');
  @override
  late final GeneratedColumn<String> codigoTipoPagamento =
      GeneratedColumn<String>('CODIGO_TIPO_PAGAMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 3),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _dataPlanoExpiraMeta =
      const VerificationMeta('dataPlanoExpira');
  @override
  late final GeneratedColumn<DateTime> dataPlanoExpira =
      GeneratedColumn<DateTime>('DATA_PLANO_EXPIRA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  @override
  late final GeneratedColumn<String> hashRegistro = GeneratedColumn<String>(
      'HASH_REGISTRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        dataSolicitacao,
        dataPagamento,
        tipoPlano,
        valor,
        statusPagamento,
        codigoTransacao,
        metodoPagamento,
        codigoTipoPagamento,
        dataPlanoExpira,
        hashRegistro
      ];
  @override
  String get aliasedName => _alias ?? 'NFCE_PLANO_PAGAMENTO';
  @override
  String get actualTableName => 'NFCE_PLANO_PAGAMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<NfcePlanoPagamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('DATA_SOLICITACAO')) {
      context.handle(
          _dataSolicitacaoMeta,
          dataSolicitacao.isAcceptableOrUnknown(
              data['DATA_SOLICITACAO']!, _dataSolicitacaoMeta));
    }
    if (data.containsKey('DATA_PAGAMENTO')) {
      context.handle(
          _dataPagamentoMeta,
          dataPagamento.isAcceptableOrUnknown(
              data['DATA_PAGAMENTO']!, _dataPagamentoMeta));
    }
    if (data.containsKey('TIPO_PLANO')) {
      context.handle(_tipoPlanoMeta,
          tipoPlano.isAcceptableOrUnknown(data['TIPO_PLANO']!, _tipoPlanoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR']!, _valorMeta));
    }
    if (data.containsKey('STATUS_PAGAMENTO')) {
      context.handle(
          _statusPagamentoMeta,
          statusPagamento.isAcceptableOrUnknown(
              data['STATUS_PAGAMENTO']!, _statusPagamentoMeta));
    }
    if (data.containsKey('CODIGO_TRANSACAO')) {
      context.handle(
          _codigoTransacaoMeta,
          codigoTransacao.isAcceptableOrUnknown(
              data['CODIGO_TRANSACAO']!, _codigoTransacaoMeta));
    }
    if (data.containsKey('METODO_PAGAMENTO')) {
      context.handle(
          _metodoPagamentoMeta,
          metodoPagamento.isAcceptableOrUnknown(
              data['METODO_PAGAMENTO']!, _metodoPagamentoMeta));
    }
    if (data.containsKey('CODIGO_TIPO_PAGAMENTO')) {
      context.handle(
          _codigoTipoPagamentoMeta,
          codigoTipoPagamento.isAcceptableOrUnknown(
              data['CODIGO_TIPO_PAGAMENTO']!, _codigoTipoPagamentoMeta));
    }
    if (data.containsKey('DATA_PLANO_EXPIRA')) {
      context.handle(
          _dataPlanoExpiraMeta,
          dataPlanoExpira.isAcceptableOrUnknown(
              data['DATA_PLANO_EXPIRA']!, _dataPlanoExpiraMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO']!, _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfcePlanoPagamento map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfcePlanoPagamento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfcePlanoPagamentosTable createAlias(String alias) {
    return $NfcePlanoPagamentosTable(attachedDatabase, alias);
  }
}

class NfeAcessoXml extends DataClass implements Insertable<NfeAcessoXml> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  NfeAcessoXml({this.id, this.idNfeCabecalho, this.cnpj, this.cpf});
  factory NfeAcessoXml.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeAcessoXml(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    return map;
  }

  NfeAcessoXmlsCompanion toCompanion(bool nullToAbsent) {
    return NfeAcessoXmlsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
    );
  }

  factory NfeAcessoXml.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeAcessoXml(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
    };
  }

  NfeAcessoXml copyWith(
          {int? id, int? idNfeCabecalho, String? cnpj, String? cpf}) =>
      NfeAcessoXml(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        cnpj: cnpj ?? this.cnpj,
        cpf: cpf ?? this.cpf,
      );
  @override
  String toString() {
    return (StringBuffer('NfeAcessoXml(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, cnpj, cpf);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeAcessoXml &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf);
}

class NfeAcessoXmlsCompanion extends UpdateCompanion<NfeAcessoXml> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  const NfeAcessoXmlsCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
  });
  NfeAcessoXmlsCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
  });
  static Insertable<NfeAcessoXml> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (cnpj != null) 'CNPJ': cnpj,
      if (cpf != null) 'CPF': cpf,
    });
  }

  NfeAcessoXmlsCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? cnpj,
      Value<String?>? cpf}) {
    return NfeAcessoXmlsCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeAcessoXmlsCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf')
          ..write(')'))
        .toString();
  }
}

class $NfeAcessoXmlsTable extends NfeAcessoXmls
    with TableInfo<$NfeAcessoXmlsTable, NfeAcessoXml> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeAcessoXmlsTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, idNfeCabecalho, cnpj, cpf];
  @override
  String get aliasedName => _alias ?? 'NFE_ACESSO_XML';
  @override
  String get actualTableName => 'NFE_ACESSO_XML';
  @override
  VerificationContext validateIntegrity(Insertable<NfeAcessoXml> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeAcessoXml map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeAcessoXml.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeAcessoXmlsTable createAlias(String alias) {
    return $NfeAcessoXmlsTable(attachedDatabase, alias);
  }
}

class NfeCabecalho extends DataClass implements Insertable<NfeCabecalho> {
  final int? id;
  final int? idTributOperacaoFiscal;
  final int? ufEmitente;
  final String? codigoNumerico;
  final String? naturezaOperacao;
  final String? codigoModelo;
  final String? serie;
  final String? numero;
  final DateTime? dataHoraEmissao;
  final DateTime? dataHoraEntradaSaida;
  final String? tipoOperacao;
  final String? localDestino;
  final int? codigoMunicipio;
  final String? formatoImpressaoDanfe;
  final String? tipoEmissao;
  final String? chaveAcesso;
  final String? digitoChaveAcesso;
  final String? ambiente;
  final String? finalidadeEmissao;
  final String? consumidorOperacao;
  final String? consumidorPresenca;
  final String? processoEmissao;
  final String? versaoProcessoEmissao;
  final DateTime? dataEntradaContingencia;
  final String? justificativaContingencia;
  final double? baseCalculoIcms;
  final double? valorIcms;
  final double? valorIcmsDesonerado;
  final double? totalIcmsFcpUfDestino;
  final double? totalIcmsInterestadualUfDestino;
  final double? totalIcmsInterestadualUfRemetente;
  final double? valorTotalFcp;
  final double? baseCalculoIcmsSt;
  final double? valorIcmsSt;
  final double? valorTotalFcpSt;
  final double? valorTotalFcpStRetido;
  final double? valorTotalProdutos;
  final double? valorFrete;
  final double? valorSeguro;
  final double? valorDesconto;
  final double? valorImpostoImportacao;
  final double? valorIpi;
  final double? valorIpiDevolvido;
  final double? valorPis;
  final double? valorCofins;
  final double? valorDespesasAcessorias;
  final double? valorTotal;
  final double? valorTotalTributos;
  final double? valorServicos;
  final double? baseCalculoIssqn;
  final double? valorIssqn;
  final double? valorPisIssqn;
  final double? valorCofinsIssqn;
  final DateTime? dataPrestacaoServico;
  final double? valorDeducaoIssqn;
  final double? outrasRetencoesIssqn;
  final double? descontoIncondicionadoIssqn;
  final double? descontoCondicionadoIssqn;
  final double? totalRetencaoIssqn;
  final String? regimeEspecialTributacao;
  final double? valorRetidoPis;
  final double? valorRetidoCofins;
  final double? valorRetidoCsll;
  final double? baseCalculoIrrf;
  final double? valorRetidoIrrf;
  final double? baseCalculoPrevidencia;
  final double? valorRetidoPrevidencia;
  final String? informacoesAddFisco;
  final String? informacoesAddContribuinte;
  final String? comexUfEmbarque;
  final String? comexLocalEmbarque;
  final String? comexLocalDespacho;
  final String? compraNotaEmpenho;
  final String? compraPedido;
  final String? compraContrato;
  final String? qrcode;
  final String? urlChave;
  final String? statusNota;
  final int? idPdvVendaCabecalho;
  NfeCabecalho(
      {this.id,
      this.idTributOperacaoFiscal,
      this.ufEmitente,
      this.codigoNumerico,
      this.naturezaOperacao,
      this.codigoModelo,
      this.serie,
      this.numero,
      this.dataHoraEmissao,
      this.dataHoraEntradaSaida,
      this.tipoOperacao,
      this.localDestino,
      this.codigoMunicipio,
      this.formatoImpressaoDanfe,
      this.tipoEmissao,
      this.chaveAcesso,
      this.digitoChaveAcesso,
      this.ambiente,
      this.finalidadeEmissao,
      this.consumidorOperacao,
      this.consumidorPresenca,
      this.processoEmissao,
      this.versaoProcessoEmissao,
      this.dataEntradaContingencia,
      this.justificativaContingencia,
      this.baseCalculoIcms,
      this.valorIcms,
      this.valorIcmsDesonerado,
      this.totalIcmsFcpUfDestino,
      this.totalIcmsInterestadualUfDestino,
      this.totalIcmsInterestadualUfRemetente,
      this.valorTotalFcp,
      this.baseCalculoIcmsSt,
      this.valorIcmsSt,
      this.valorTotalFcpSt,
      this.valorTotalFcpStRetido,
      this.valorTotalProdutos,
      this.valorFrete,
      this.valorSeguro,
      this.valorDesconto,
      this.valorImpostoImportacao,
      this.valorIpi,
      this.valorIpiDevolvido,
      this.valorPis,
      this.valorCofins,
      this.valorDespesasAcessorias,
      this.valorTotal,
      this.valorTotalTributos,
      this.valorServicos,
      this.baseCalculoIssqn,
      this.valorIssqn,
      this.valorPisIssqn,
      this.valorCofinsIssqn,
      this.dataPrestacaoServico,
      this.valorDeducaoIssqn,
      this.outrasRetencoesIssqn,
      this.descontoIncondicionadoIssqn,
      this.descontoCondicionadoIssqn,
      this.totalRetencaoIssqn,
      this.regimeEspecialTributacao,
      this.valorRetidoPis,
      this.valorRetidoCofins,
      this.valorRetidoCsll,
      this.baseCalculoIrrf,
      this.valorRetidoIrrf,
      this.baseCalculoPrevidencia,
      this.valorRetidoPrevidencia,
      this.informacoesAddFisco,
      this.informacoesAddContribuinte,
      this.comexUfEmbarque,
      this.comexLocalEmbarque,
      this.comexLocalDespacho,
      this.compraNotaEmpenho,
      this.compraPedido,
      this.compraContrato,
      this.qrcode,
      this.urlChave,
      this.statusNota,
      this.idPdvVendaCabecalho});
  factory NfeCabecalho.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeCabecalho(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idTributOperacaoFiscal: ValueSqlType.intType(
          data['${effectivePrefix}ID_TRIBUT_OPERACAO_FISCAL']),
      ufEmitente: ValueSqlType.intType(data['${effectivePrefix}UF_EMITENTE']),
      codigoNumerico: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_NUMERICO']),
      naturezaOperacao: ValueSqlType.stringType(data['${effectivePrefix}NATUREZA_OPERACAO']),
      codigoModelo: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_MODELO']),
      serie: ValueSqlType.stringType(data['${effectivePrefix}SERIE']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      dataHoraEmissao: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_HORA_EMISSAO']),
      dataHoraEntradaSaida: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_HORA_ENTRADA_SAIDA']),
      tipoOperacao: ValueSqlType.stringType(data['${effectivePrefix}TIPO_OPERACAO']),
      localDestino: ValueSqlType.stringType(data['${effectivePrefix}LOCAL_DESTINO']),
      codigoMunicipio: ValueSqlType.intType(data['${effectivePrefix}CODIGO_MUNICIPIO']),
      formatoImpressaoDanfe: ValueSqlType.stringType(
          data['${effectivePrefix}FORMATO_IMPRESSAO_DANFE']),
      tipoEmissao: ValueSqlType.stringType(data['${effectivePrefix}TIPO_EMISSAO']),
      chaveAcesso: ValueSqlType.stringType(data['${effectivePrefix}CHAVE_ACESSO']),
      digitoChaveAcesso: ValueSqlType.stringType(
          data['${effectivePrefix}DIGITO_CHAVE_ACESSO']),
      ambiente: ValueSqlType.stringType(data['${effectivePrefix}AMBIENTE']),
      finalidadeEmissao: ValueSqlType.stringType(
          data['${effectivePrefix}FINALIDADE_EMISSAO']),
      consumidorOperacao: ValueSqlType.stringType(
          data['${effectivePrefix}CONSUMIDOR_OPERACAO']),
      consumidorPresenca: ValueSqlType.stringType(
          data['${effectivePrefix}CONSUMIDOR_PRESENCA']),
      processoEmissao: ValueSqlType.stringType(data['${effectivePrefix}PROCESSO_EMISSAO']),
      versaoProcessoEmissao: ValueSqlType.stringType(
          data['${effectivePrefix}VERSAO_PROCESSO_EMISSAO']),
      dataEntradaContingencia: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_ENTRADA_CONTINGENCIA']),
      justificativaContingencia: ValueSqlType.stringType(
          data['${effectivePrefix}JUSTIFICATIVA_CONTINGENCIA']),
      baseCalculoIcms: ValueSqlType.doubleType(data['${effectivePrefix}BASE_CALCULO_ICMS']),
      valorIcms: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ICMS']),
      valorIcmsDesonerado: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_ICMS_DESONERADO']),
      totalIcmsFcpUfDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}TOTAL_ICMS_FCP_UF_DESTINO']),
      totalIcmsInterestadualUfDestino: ValueSqlType.doubleType(
          data['${effectivePrefix}TOTAL_ICMS_INTERESTADUAL_UF_DESTINO']),
      totalIcmsInterestadualUfRemetente: ValueSqlType.doubleType(
              data['${effectivePrefix}TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE']),
      valorTotalFcp: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL_FCP']),
      baseCalculoIcmsSt: ValueSqlType.doubleType(
          data['${effectivePrefix}BASE_CALCULO_ICMS_ST']),
      valorIcmsSt: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ICMS_ST']),
      valorTotalFcpSt: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_FCP_ST']),
      valorTotalFcpStRetido: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_FCP_ST_RETIDO']),
      valorTotalProdutos: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_PRODUTOS']),
      valorFrete: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_FRETE']),
      valorSeguro: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_SEGURO']),
      valorDesconto: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DESCONTO']),
      valorImpostoImportacao: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_IMPOSTO_IMPORTACAO']),
      valorIpi: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_IPI']),
      valorIpiDevolvido: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_IPI_DEVOLVIDO']),
      valorPis: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PIS']),
      valorCofins: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_COFINS']),
      valorDespesasAcessorias: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_DESPESAS_ACESSORIAS']),
      valorTotal: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_TOTAL']),
      valorTotalTributos: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_TRIBUTOS']),
      valorServicos: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_SERVICOS']),
      baseCalculoIssqn: ValueSqlType.doubleType(
          data['${effectivePrefix}BASE_CALCULO_ISSQN']),
      valorIssqn: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_ISSQN']),
      valorPisIssqn: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PIS_ISSQN']),
      valorCofinsIssqn: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_COFINS_ISSQN']),
      dataPrestacaoServico: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_PRESTACAO_SERVICO']),
      valorDeducaoIssqn: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_DEDUCAO_ISSQN']),
      outrasRetencoesIssqn: ValueSqlType.doubleType(
          data['${effectivePrefix}OUTRAS_RETENCOES_ISSQN']),
      descontoIncondicionadoIssqn: ValueSqlType.doubleType(
          data['${effectivePrefix}DESCONTO_INCONDICIONADO_ISSQN']),
      descontoCondicionadoIssqn: ValueSqlType.doubleType(
          data['${effectivePrefix}DESCONTO_CONDICIONADO_ISSQN']),
      totalRetencaoIssqn: ValueSqlType.doubleType(
          data['${effectivePrefix}TOTAL_RETENCAO_ISSQN']),
      regimeEspecialTributacao: ValueSqlType.stringType(
          data['${effectivePrefix}REGIME_ESPECIAL_TRIBUTACAO']),
      valorRetidoPis: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_RETIDO_PIS']),
      valorRetidoCofins: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_RETIDO_COFINS']),
      valorRetidoCsll: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_RETIDO_CSLL']),
      baseCalculoIrrf: ValueSqlType.doubleType(data['${effectivePrefix}BASE_CALCULO_IRRF']),
      valorRetidoIrrf: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_RETIDO_IRRF']),
      baseCalculoPrevidencia: ValueSqlType.doubleType(
          data['${effectivePrefix}BASE_CALCULO_PREVIDENCIA']),
      valorRetidoPrevidencia: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_RETIDO_PREVIDENCIA']),
      informacoesAddFisco: ValueSqlType.stringType(
          data['${effectivePrefix}INFORMACOES_ADD_FISCO']),
      informacoesAddContribuinte: ValueSqlType.stringType(
          data['${effectivePrefix}INFORMACOES_ADD_CONTRIBUINTE']),
      comexUfEmbarque: ValueSqlType.stringType(data['${effectivePrefix}COMEX_UF_EMBARQUE']),
      comexLocalEmbarque: ValueSqlType.stringType(
          data['${effectivePrefix}COMEX_LOCAL_EMBARQUE']),
      comexLocalDespacho: ValueSqlType.stringType(
          data['${effectivePrefix}COMEX_LOCAL_DESPACHO']),
      compraNotaEmpenho: ValueSqlType.stringType(
          data['${effectivePrefix}COMPRA_NOTA_EMPENHO']),
      compraPedido: ValueSqlType.stringType(data['${effectivePrefix}COMPRA_PEDIDO']),
      compraContrato: ValueSqlType.stringType(data['${effectivePrefix}COMPRA_CONTRATO']),
      qrcode: ValueSqlType.stringType(data['${effectivePrefix}QRCODE']),
      urlChave: ValueSqlType.stringType(data['${effectivePrefix}URL_CHAVE']),
      statusNota: ValueSqlType.stringType(data['${effectivePrefix}STATUS_NOTA']),
      idPdvVendaCabecalho: ValueSqlType.intType(
          data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idTributOperacaoFiscal != null) {
      map['ID_TRIBUT_OPERACAO_FISCAL'] = Variable<int>(idTributOperacaoFiscal);
    }
    if (!nullToAbsent || ufEmitente != null) {
      map['UF_EMITENTE'] = Variable<int>(ufEmitente);
    }
    if (!nullToAbsent || codigoNumerico != null) {
      map['CODIGO_NUMERICO'] = Variable<String>(codigoNumerico);
    }
    if (!nullToAbsent || naturezaOperacao != null) {
      map['NATUREZA_OPERACAO'] = Variable<String>(naturezaOperacao);
    }
    if (!nullToAbsent || codigoModelo != null) {
      map['CODIGO_MODELO'] = Variable<String>(codigoModelo);
    }
    if (!nullToAbsent || serie != null) {
      map['SERIE'] = Variable<String>(serie);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || dataHoraEmissao != null) {
      map['DATA_HORA_EMISSAO'] = Variable<DateTime>(dataHoraEmissao);
    }
    if (!nullToAbsent || dataHoraEntradaSaida != null) {
      map['DATA_HORA_ENTRADA_SAIDA'] =
          Variable<DateTime>(dataHoraEntradaSaida);
    }
    if (!nullToAbsent || tipoOperacao != null) {
      map['TIPO_OPERACAO'] = Variable<String>(tipoOperacao);
    }
    if (!nullToAbsent || localDestino != null) {
      map['LOCAL_DESTINO'] = Variable<String>(localDestino);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || formatoImpressaoDanfe != null) {
      map['FORMATO_IMPRESSAO_DANFE'] = Variable<String>(formatoImpressaoDanfe);
    }
    if (!nullToAbsent || tipoEmissao != null) {
      map['TIPO_EMISSAO'] = Variable<String>(tipoEmissao);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['CHAVE_ACESSO'] = Variable<String>(chaveAcesso);
    }
    if (!nullToAbsent || digitoChaveAcesso != null) {
      map['DIGITO_CHAVE_ACESSO'] = Variable<String>(digitoChaveAcesso);
    }
    if (!nullToAbsent || ambiente != null) {
      map['AMBIENTE'] = Variable<String>(ambiente);
    }
    if (!nullToAbsent || finalidadeEmissao != null) {
      map['FINALIDADE_EMISSAO'] = Variable<String>(finalidadeEmissao);
    }
    if (!nullToAbsent || consumidorOperacao != null) {
      map['CONSUMIDOR_OPERACAO'] = Variable<String>(consumidorOperacao);
    }
    if (!nullToAbsent || consumidorPresenca != null) {
      map['CONSUMIDOR_PRESENCA'] = Variable<String>(consumidorPresenca);
    }
    if (!nullToAbsent || processoEmissao != null) {
      map['PROCESSO_EMISSAO'] = Variable<String>(processoEmissao);
    }
    if (!nullToAbsent || versaoProcessoEmissao != null) {
      map['VERSAO_PROCESSO_EMISSAO'] = Variable<String>(versaoProcessoEmissao);
    }
    if (!nullToAbsent || dataEntradaContingencia != null) {
      map['DATA_ENTRADA_CONTINGENCIA'] =
          Variable<DateTime>(dataEntradaContingencia);
    }
    if (!nullToAbsent || justificativaContingencia != null) {
      map['JUSTIFICATIVA_CONTINGENCIA'] =
          Variable<String>(justificativaContingencia);
    }
    if (!nullToAbsent || baseCalculoIcms != null) {
      map['BASE_CALCULO_ICMS'] = Variable<double>(baseCalculoIcms);
    }
    if (!nullToAbsent || valorIcms != null) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms);
    }
    if (!nullToAbsent || valorIcmsDesonerado != null) {
      map['VALOR_ICMS_DESONERADO'] = Variable<double>(valorIcmsDesonerado);
    }
    if (!nullToAbsent || totalIcmsFcpUfDestino != null) {
      map['TOTAL_ICMS_FCP_UF_DESTINO'] =
          Variable<double>(totalIcmsFcpUfDestino);
    }
    if (!nullToAbsent || totalIcmsInterestadualUfDestino != null) {
      map['TOTAL_ICMS_INTERESTADUAL_UF_DESTINO'] =
          Variable<double>(totalIcmsInterestadualUfDestino);
    }
    if (!nullToAbsent || totalIcmsInterestadualUfRemetente != null) {
      map['TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE'] =
          Variable<double>(totalIcmsInterestadualUfRemetente);
    }
    if (!nullToAbsent || valorTotalFcp != null) {
      map['VALOR_TOTAL_FCP'] = Variable<double>(valorTotalFcp);
    }
    if (!nullToAbsent || baseCalculoIcmsSt != null) {
      map['BASE_CALCULO_ICMS_ST'] = Variable<double>(baseCalculoIcmsSt);
    }
    if (!nullToAbsent || valorIcmsSt != null) {
      map['VALOR_ICMS_ST'] = Variable<double>(valorIcmsSt);
    }
    if (!nullToAbsent || valorTotalFcpSt != null) {
      map['VALOR_TOTAL_FCP_ST'] = Variable<double>(valorTotalFcpSt);
    }
    if (!nullToAbsent || valorTotalFcpStRetido != null) {
      map['VALOR_TOTAL_FCP_ST_RETIDO'] =
          Variable<double>(valorTotalFcpStRetido);
    }
    if (!nullToAbsent || valorTotalProdutos != null) {
      map['VALOR_TOTAL_PRODUTOS'] = Variable<double>(valorTotalProdutos);
    }
    if (!nullToAbsent || valorFrete != null) {
      map['VALOR_FRETE'] = Variable<double>(valorFrete);
    }
    if (!nullToAbsent || valorSeguro != null) {
      map['VALOR_SEGURO'] = Variable<double>(valorSeguro);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorImpostoImportacao != null) {
      map['VALOR_IMPOSTO_IMPORTACAO'] =
          Variable<double>(valorImpostoImportacao);
    }
    if (!nullToAbsent || valorIpi != null) {
      map['VALOR_IPI'] = Variable<double>(valorIpi);
    }
    if (!nullToAbsent || valorIpiDevolvido != null) {
      map['VALOR_IPI_DEVOLVIDO'] = Variable<double>(valorIpiDevolvido);
    }
    if (!nullToAbsent || valorPis != null) {
      map['VALOR_PIS'] = Variable<double>(valorPis);
    }
    if (!nullToAbsent || valorCofins != null) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins);
    }
    if (!nullToAbsent || valorDespesasAcessorias != null) {
      map['VALOR_DESPESAS_ACESSORIAS'] =
          Variable<double>(valorDespesasAcessorias);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || valorTotalTributos != null) {
      map['VALOR_TOTAL_TRIBUTOS'] = Variable<double>(valorTotalTributos);
    }
    if (!nullToAbsent || valorServicos != null) {
      map['VALOR_SERVICOS'] = Variable<double>(valorServicos);
    }
    if (!nullToAbsent || baseCalculoIssqn != null) {
      map['BASE_CALCULO_ISSQN'] = Variable<double>(baseCalculoIssqn);
    }
    if (!nullToAbsent || valorIssqn != null) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn);
    }
    if (!nullToAbsent || valorPisIssqn != null) {
      map['VALOR_PIS_ISSQN'] = Variable<double>(valorPisIssqn);
    }
    if (!nullToAbsent || valorCofinsIssqn != null) {
      map['VALOR_COFINS_ISSQN'] = Variable<double>(valorCofinsIssqn);
    }
    if (!nullToAbsent || dataPrestacaoServico != null) {
      map['DATA_PRESTACAO_SERVICO'] = Variable<DateTime>(dataPrestacaoServico);
    }
    if (!nullToAbsent || valorDeducaoIssqn != null) {
      map['VALOR_DEDUCAO_ISSQN'] = Variable<double>(valorDeducaoIssqn);
    }
    if (!nullToAbsent || outrasRetencoesIssqn != null) {
      map['OUTRAS_RETENCOES_ISSQN'] = Variable<double>(outrasRetencoesIssqn);
    }
    if (!nullToAbsent || descontoIncondicionadoIssqn != null) {
      map['DESCONTO_INCONDICIONADO_ISSQN'] =
          Variable<double>(descontoIncondicionadoIssqn);
    }
    if (!nullToAbsent || descontoCondicionadoIssqn != null) {
      map['DESCONTO_CONDICIONADO_ISSQN'] =
          Variable<double>(descontoCondicionadoIssqn);
    }
    if (!nullToAbsent || totalRetencaoIssqn != null) {
      map['TOTAL_RETENCAO_ISSQN'] = Variable<double>(totalRetencaoIssqn);
    }
    if (!nullToAbsent || regimeEspecialTributacao != null) {
      map['REGIME_ESPECIAL_TRIBUTACAO'] =
          Variable<String>(regimeEspecialTributacao);
    }
    if (!nullToAbsent || valorRetidoPis != null) {
      map['VALOR_RETIDO_PIS'] = Variable<double>(valorRetidoPis);
    }
    if (!nullToAbsent || valorRetidoCofins != null) {
      map['VALOR_RETIDO_COFINS'] = Variable<double>(valorRetidoCofins);
    }
    if (!nullToAbsent || valorRetidoCsll != null) {
      map['VALOR_RETIDO_CSLL'] = Variable<double>(valorRetidoCsll);
    }
    if (!nullToAbsent || baseCalculoIrrf != null) {
      map['BASE_CALCULO_IRRF'] = Variable<double>(baseCalculoIrrf);
    }
    if (!nullToAbsent || valorRetidoIrrf != null) {
      map['VALOR_RETIDO_IRRF'] = Variable<double>(valorRetidoIrrf);
    }
    if (!nullToAbsent || baseCalculoPrevidencia != null) {
      map['BASE_CALCULO_PREVIDENCIA'] =
          Variable<double>(baseCalculoPrevidencia);
    }
    if (!nullToAbsent || valorRetidoPrevidencia != null) {
      map['VALOR_RETIDO_PREVIDENCIA'] =
          Variable<double>(valorRetidoPrevidencia);
    }
    if (!nullToAbsent || informacoesAddFisco != null) {
      map['INFORMACOES_ADD_FISCO'] = Variable<String>(informacoesAddFisco);
    }
    if (!nullToAbsent || informacoesAddContribuinte != null) {
      map['INFORMACOES_ADD_CONTRIBUINTE'] =
          Variable<String>(informacoesAddContribuinte);
    }
    if (!nullToAbsent || comexUfEmbarque != null) {
      map['COMEX_UF_EMBARQUE'] = Variable<String>(comexUfEmbarque);
    }
    if (!nullToAbsent || comexLocalEmbarque != null) {
      map['COMEX_LOCAL_EMBARQUE'] = Variable<String>(comexLocalEmbarque);
    }
    if (!nullToAbsent || comexLocalDespacho != null) {
      map['COMEX_LOCAL_DESPACHO'] = Variable<String>(comexLocalDespacho);
    }
    if (!nullToAbsent || compraNotaEmpenho != null) {
      map['COMPRA_NOTA_EMPENHO'] = Variable<String>(compraNotaEmpenho);
    }
    if (!nullToAbsent || compraPedido != null) {
      map['COMPRA_PEDIDO'] = Variable<String>(compraPedido);
    }
    if (!nullToAbsent || compraContrato != null) {
      map['COMPRA_CONTRATO'] = Variable<String>(compraContrato);
    }
    if (!nullToAbsent || qrcode != null) {
      map['QRCODE'] = Variable<String>(qrcode);
    }
    if (!nullToAbsent || urlChave != null) {
      map['URL_CHAVE'] = Variable<String>(urlChave);
    }
    if (!nullToAbsent || statusNota != null) {
      map['STATUS_NOTA'] = Variable<String>(statusNota);
    }
    if (!nullToAbsent || idPdvVendaCabecalho != null) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho);
    }
    return map;
  }

  NfeCabecalhosCompanion toCompanion(bool nullToAbsent) {
    return NfeCabecalhosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idTributOperacaoFiscal: idTributOperacaoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(idTributOperacaoFiscal),
      ufEmitente: ufEmitente == null && nullToAbsent
          ? const Value.absent()
          : Value(ufEmitente),
      codigoNumerico: codigoNumerico == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoNumerico),
      naturezaOperacao: naturezaOperacao == null && nullToAbsent
          ? const Value.absent()
          : Value(naturezaOperacao),
      codigoModelo: codigoModelo == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoModelo),
      serie:
          serie == null && nullToAbsent ? const Value.absent() : Value(serie),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      dataHoraEmissao: dataHoraEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataHoraEmissao),
      dataHoraEntradaSaida: dataHoraEntradaSaida == null && nullToAbsent
          ? const Value.absent()
          : Value(dataHoraEntradaSaida),
      tipoOperacao: tipoOperacao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoOperacao),
      localDestino: localDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(localDestino),
      codigoMunicipio: codigoMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoMunicipio),
      formatoImpressaoDanfe: formatoImpressaoDanfe == null && nullToAbsent
          ? const Value.absent()
          : Value(formatoImpressaoDanfe),
      tipoEmissao: tipoEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoEmissao),
      chaveAcesso: chaveAcesso == null && nullToAbsent
          ? const Value.absent()
          : Value(chaveAcesso),
      digitoChaveAcesso: digitoChaveAcesso == null && nullToAbsent
          ? const Value.absent()
          : Value(digitoChaveAcesso),
      ambiente: ambiente == null && nullToAbsent
          ? const Value.absent()
          : Value(ambiente),
      finalidadeEmissao: finalidadeEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(finalidadeEmissao),
      consumidorOperacao: consumidorOperacao == null && nullToAbsent
          ? const Value.absent()
          : Value(consumidorOperacao),
      consumidorPresenca: consumidorPresenca == null && nullToAbsent
          ? const Value.absent()
          : Value(consumidorPresenca),
      processoEmissao: processoEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(processoEmissao),
      versaoProcessoEmissao: versaoProcessoEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(versaoProcessoEmissao),
      dataEntradaContingencia: dataEntradaContingencia == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEntradaContingencia),
      justificativaContingencia:
          justificativaContingencia == null && nullToAbsent
              ? const Value.absent()
              : Value(justificativaContingencia),
      baseCalculoIcms: baseCalculoIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoIcms),
      valorIcms: valorIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcms),
      valorIcmsDesonerado: valorIcmsDesonerado == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsDesonerado),
      totalIcmsFcpUfDestino: totalIcmsFcpUfDestino == null && nullToAbsent
          ? const Value.absent()
          : Value(totalIcmsFcpUfDestino),
      totalIcmsInterestadualUfDestino:
          totalIcmsInterestadualUfDestino == null && nullToAbsent
              ? const Value.absent()
              : Value(totalIcmsInterestadualUfDestino),
      totalIcmsInterestadualUfRemetente:
          totalIcmsInterestadualUfRemetente == null && nullToAbsent
              ? const Value.absent()
              : Value(totalIcmsInterestadualUfRemetente),
      valorTotalFcp: valorTotalFcp == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalFcp),
      baseCalculoIcmsSt: baseCalculoIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoIcmsSt),
      valorIcmsSt: valorIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsSt),
      valorTotalFcpSt: valorTotalFcpSt == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalFcpSt),
      valorTotalFcpStRetido: valorTotalFcpStRetido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalFcpStRetido),
      valorTotalProdutos: valorTotalProdutos == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalProdutos),
      valorFrete: valorFrete == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFrete),
      valorSeguro: valorSeguro == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSeguro),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorImpostoImportacao: valorImpostoImportacao == null && nullToAbsent
          ? const Value.absent()
          : Value(valorImpostoImportacao),
      valorIpi: valorIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIpi),
      valorIpiDevolvido: valorIpiDevolvido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIpiDevolvido),
      valorPis: valorPis == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPis),
      valorCofins: valorCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCofins),
      valorDespesasAcessorias: valorDespesasAcessorias == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDespesasAcessorias),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      valorTotalTributos: valorTotalTributos == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalTributos),
      valorServicos: valorServicos == null && nullToAbsent
          ? const Value.absent()
          : Value(valorServicos),
      baseCalculoIssqn: baseCalculoIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoIssqn),
      valorIssqn: valorIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIssqn),
      valorPisIssqn: valorPisIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPisIssqn),
      valorCofinsIssqn: valorCofinsIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCofinsIssqn),
      dataPrestacaoServico: dataPrestacaoServico == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPrestacaoServico),
      valorDeducaoIssqn: valorDeducaoIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDeducaoIssqn),
      outrasRetencoesIssqn: outrasRetencoesIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(outrasRetencoesIssqn),
      descontoIncondicionadoIssqn:
          descontoIncondicionadoIssqn == null && nullToAbsent
              ? const Value.absent()
              : Value(descontoIncondicionadoIssqn),
      descontoCondicionadoIssqn:
          descontoCondicionadoIssqn == null && nullToAbsent
              ? const Value.absent()
              : Value(descontoCondicionadoIssqn),
      totalRetencaoIssqn: totalRetencaoIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(totalRetencaoIssqn),
      regimeEspecialTributacao: regimeEspecialTributacao == null && nullToAbsent
          ? const Value.absent()
          : Value(regimeEspecialTributacao),
      valorRetidoPis: valorRetidoPis == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRetidoPis),
      valorRetidoCofins: valorRetidoCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRetidoCofins),
      valorRetidoCsll: valorRetidoCsll == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRetidoCsll),
      baseCalculoIrrf: baseCalculoIrrf == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoIrrf),
      valorRetidoIrrf: valorRetidoIrrf == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRetidoIrrf),
      baseCalculoPrevidencia: baseCalculoPrevidencia == null && nullToAbsent
          ? const Value.absent()
          : Value(baseCalculoPrevidencia),
      valorRetidoPrevidencia: valorRetidoPrevidencia == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRetidoPrevidencia),
      informacoesAddFisco: informacoesAddFisco == null && nullToAbsent
          ? const Value.absent()
          : Value(informacoesAddFisco),
      informacoesAddContribuinte:
          informacoesAddContribuinte == null && nullToAbsent
              ? const Value.absent()
              : Value(informacoesAddContribuinte),
      comexUfEmbarque: comexUfEmbarque == null && nullToAbsent
          ? const Value.absent()
          : Value(comexUfEmbarque),
      comexLocalEmbarque: comexLocalEmbarque == null && nullToAbsent
          ? const Value.absent()
          : Value(comexLocalEmbarque),
      comexLocalDespacho: comexLocalDespacho == null && nullToAbsent
          ? const Value.absent()
          : Value(comexLocalDespacho),
      compraNotaEmpenho: compraNotaEmpenho == null && nullToAbsent
          ? const Value.absent()
          : Value(compraNotaEmpenho),
      compraPedido: compraPedido == null && nullToAbsent
          ? const Value.absent()
          : Value(compraPedido),
      compraContrato: compraContrato == null && nullToAbsent
          ? const Value.absent()
          : Value(compraContrato),
      qrcode:
          qrcode == null && nullToAbsent ? const Value.absent() : Value(qrcode),
      urlChave: urlChave == null && nullToAbsent
          ? const Value.absent()
          : Value(urlChave),
      statusNota: statusNota == null && nullToAbsent
          ? const Value.absent()
          : Value(statusNota),
      idPdvVendaCabecalho: idPdvVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvVendaCabecalho),
    );
  }

  factory NfeCabecalho.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCabecalho(
      id: serializer.fromJson<int?>(json['id']),
      idTributOperacaoFiscal:
          serializer.fromJson<int?>(json['idTributOperacaoFiscal']),
      ufEmitente: serializer.fromJson<int?>(json['ufEmitente']),
      codigoNumerico: serializer.fromJson<String?>(json['codigoNumerico']),
      naturezaOperacao: serializer.fromJson<String?>(json['naturezaOperacao']),
      codigoModelo: serializer.fromJson<String?>(json['codigoModelo']),
      serie: serializer.fromJson<String?>(json['serie']),
      numero: serializer.fromJson<String?>(json['numero']),
      dataHoraEmissao: serializer.fromJson<DateTime?>(json['dataHoraEmissao']),
      dataHoraEntradaSaida:
          serializer.fromJson<DateTime?>(json['dataHoraEntradaSaida']),
      tipoOperacao: serializer.fromJson<String?>(json['tipoOperacao']),
      localDestino: serializer.fromJson<String?>(json['localDestino']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      formatoImpressaoDanfe:
          serializer.fromJson<String?>(json['formatoImpressaoDanfe']),
      tipoEmissao: serializer.fromJson<String?>(json['tipoEmissao']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
      digitoChaveAcesso:
          serializer.fromJson<String?>(json['digitoChaveAcesso']),
      ambiente: serializer.fromJson<String?>(json['ambiente']),
      finalidadeEmissao:
          serializer.fromJson<String?>(json['finalidadeEmissao']),
      consumidorOperacao:
          serializer.fromJson<String?>(json['consumidorOperacao']),
      consumidorPresenca:
          serializer.fromJson<String?>(json['consumidorPresenca']),
      processoEmissao: serializer.fromJson<String?>(json['processoEmissao']),
      versaoProcessoEmissao:
          serializer.fromJson<String?>(json['versaoProcessoEmissao']),
      dataEntradaContingencia:
          serializer.fromJson<DateTime?>(json['dataEntradaContingencia']),
      justificativaContingencia:
          serializer.fromJson<String?>(json['justificativaContingencia']),
      baseCalculoIcms: serializer.fromJson<double?>(json['baseCalculoIcms']),
      valorIcms: serializer.fromJson<double?>(json['valorIcms']),
      valorIcmsDesonerado:
          serializer.fromJson<double?>(json['valorIcmsDesonerado']),
      totalIcmsFcpUfDestino:
          serializer.fromJson<double?>(json['totalIcmsFcpUfDestino']),
      totalIcmsInterestadualUfDestino:
          serializer.fromJson<double?>(json['totalIcmsInterestadualUfDestino']),
      totalIcmsInterestadualUfRemetente: serializer
          .fromJson<double?>(json['totalIcmsInterestadualUfRemetente']),
      valorTotalFcp: serializer.fromJson<double?>(json['valorTotalFcp']),
      baseCalculoIcmsSt:
          serializer.fromJson<double?>(json['baseCalculoIcmsSt']),
      valorIcmsSt: serializer.fromJson<double?>(json['valorIcmsSt']),
      valorTotalFcpSt: serializer.fromJson<double?>(json['valorTotalFcpSt']),
      valorTotalFcpStRetido:
          serializer.fromJson<double?>(json['valorTotalFcpStRetido']),
      valorTotalProdutos:
          serializer.fromJson<double?>(json['valorTotalProdutos']),
      valorFrete: serializer.fromJson<double?>(json['valorFrete']),
      valorSeguro: serializer.fromJson<double?>(json['valorSeguro']),
      valorDesconto: serializer.fromJson<double?>(json['valorDesconto']),
      valorImpostoImportacao:
          serializer.fromJson<double?>(json['valorImpostoImportacao']),
      valorIpi: serializer.fromJson<double?>(json['valorIpi']),
      valorIpiDevolvido:
          serializer.fromJson<double?>(json['valorIpiDevolvido']),
      valorPis: serializer.fromJson<double?>(json['valorPis']),
      valorCofins: serializer.fromJson<double?>(json['valorCofins']),
      valorDespesasAcessorias:
          serializer.fromJson<double?>(json['valorDespesasAcessorias']),
      valorTotal: serializer.fromJson<double?>(json['valorTotal']),
      valorTotalTributos:
          serializer.fromJson<double?>(json['valorTotalTributos']),
      valorServicos: serializer.fromJson<double?>(json['valorServicos']),
      baseCalculoIssqn: serializer.fromJson<double?>(json['baseCalculoIssqn']),
      valorIssqn: serializer.fromJson<double?>(json['valorIssqn']),
      valorPisIssqn: serializer.fromJson<double?>(json['valorPisIssqn']),
      valorCofinsIssqn: serializer.fromJson<double?>(json['valorCofinsIssqn']),
      dataPrestacaoServico:
          serializer.fromJson<DateTime?>(json['dataPrestacaoServico']),
      valorDeducaoIssqn:
          serializer.fromJson<double?>(json['valorDeducaoIssqn']),
      outrasRetencoesIssqn:
          serializer.fromJson<double?>(json['outrasRetencoesIssqn']),
      descontoIncondicionadoIssqn:
          serializer.fromJson<double?>(json['descontoIncondicionadoIssqn']),
      descontoCondicionadoIssqn:
          serializer.fromJson<double?>(json['descontoCondicionadoIssqn']),
      totalRetencaoIssqn:
          serializer.fromJson<double?>(json['totalRetencaoIssqn']),
      regimeEspecialTributacao:
          serializer.fromJson<String?>(json['regimeEspecialTributacao']),
      valorRetidoPis: serializer.fromJson<double?>(json['valorRetidoPis']),
      valorRetidoCofins:
          serializer.fromJson<double?>(json['valorRetidoCofins']),
      valorRetidoCsll: serializer.fromJson<double?>(json['valorRetidoCsll']),
      baseCalculoIrrf: serializer.fromJson<double?>(json['baseCalculoIrrf']),
      valorRetidoIrrf: serializer.fromJson<double?>(json['valorRetidoIrrf']),
      baseCalculoPrevidencia:
          serializer.fromJson<double?>(json['baseCalculoPrevidencia']),
      valorRetidoPrevidencia:
          serializer.fromJson<double?>(json['valorRetidoPrevidencia']),
      informacoesAddFisco:
          serializer.fromJson<String?>(json['informacoesAddFisco']),
      informacoesAddContribuinte:
          serializer.fromJson<String?>(json['informacoesAddContribuinte']),
      comexUfEmbarque: serializer.fromJson<String?>(json['comexUfEmbarque']),
      comexLocalEmbarque:
          serializer.fromJson<String?>(json['comexLocalEmbarque']),
      comexLocalDespacho:
          serializer.fromJson<String?>(json['comexLocalDespacho']),
      compraNotaEmpenho:
          serializer.fromJson<String?>(json['compraNotaEmpenho']),
      compraPedido: serializer.fromJson<String?>(json['compraPedido']),
      compraContrato: serializer.fromJson<String?>(json['compraContrato']),
      qrcode: serializer.fromJson<String?>(json['qrcode']),
      urlChave: serializer.fromJson<String?>(json['urlChave']),
      statusNota: serializer.fromJson<String?>(json['statusNota']),
      idPdvVendaCabecalho:
          serializer.fromJson<int?>(json['idPdvVendaCabecalho']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idTributOperacaoFiscal': serializer.toJson<int?>(idTributOperacaoFiscal),
      'ufEmitente': serializer.toJson<int?>(ufEmitente),
      'codigoNumerico': serializer.toJson<String?>(codigoNumerico),
      'naturezaOperacao': serializer.toJson<String?>(naturezaOperacao),
      'codigoModelo': serializer.toJson<String?>(codigoModelo),
      'serie': serializer.toJson<String?>(serie),
      'numero': serializer.toJson<String?>(numero),
      'dataHoraEmissao': serializer.toJson<DateTime?>(dataHoraEmissao),
      'dataHoraEntradaSaida':
          serializer.toJson<DateTime?>(dataHoraEntradaSaida),
      'tipoOperacao': serializer.toJson<String?>(tipoOperacao),
      'localDestino': serializer.toJson<String?>(localDestino),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'formatoImpressaoDanfe':
          serializer.toJson<String?>(formatoImpressaoDanfe),
      'tipoEmissao': serializer.toJson<String?>(tipoEmissao),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
      'digitoChaveAcesso': serializer.toJson<String?>(digitoChaveAcesso),
      'ambiente': serializer.toJson<String?>(ambiente),
      'finalidadeEmissao': serializer.toJson<String?>(finalidadeEmissao),
      'consumidorOperacao': serializer.toJson<String?>(consumidorOperacao),
      'consumidorPresenca': serializer.toJson<String?>(consumidorPresenca),
      'processoEmissao': serializer.toJson<String?>(processoEmissao),
      'versaoProcessoEmissao':
          serializer.toJson<String?>(versaoProcessoEmissao),
      'dataEntradaContingencia':
          serializer.toJson<DateTime?>(dataEntradaContingencia),
      'justificativaContingencia':
          serializer.toJson<String?>(justificativaContingencia),
      'baseCalculoIcms': serializer.toJson<double?>(baseCalculoIcms),
      'valorIcms': serializer.toJson<double?>(valorIcms),
      'valorIcmsDesonerado': serializer.toJson<double?>(valorIcmsDesonerado),
      'totalIcmsFcpUfDestino':
          serializer.toJson<double?>(totalIcmsFcpUfDestino),
      'totalIcmsInterestadualUfDestino':
          serializer.toJson<double?>(totalIcmsInterestadualUfDestino),
      'totalIcmsInterestadualUfRemetente':
          serializer.toJson<double?>(totalIcmsInterestadualUfRemetente),
      'valorTotalFcp': serializer.toJson<double?>(valorTotalFcp),
      'baseCalculoIcmsSt': serializer.toJson<double?>(baseCalculoIcmsSt),
      'valorIcmsSt': serializer.toJson<double?>(valorIcmsSt),
      'valorTotalFcpSt': serializer.toJson<double?>(valorTotalFcpSt),
      'valorTotalFcpStRetido':
          serializer.toJson<double?>(valorTotalFcpStRetido),
      'valorTotalProdutos': serializer.toJson<double?>(valorTotalProdutos),
      'valorFrete': serializer.toJson<double?>(valorFrete),
      'valorSeguro': serializer.toJson<double?>(valorSeguro),
      'valorDesconto': serializer.toJson<double?>(valorDesconto),
      'valorImpostoImportacao':
          serializer.toJson<double?>(valorImpostoImportacao),
      'valorIpi': serializer.toJson<double?>(valorIpi),
      'valorIpiDevolvido': serializer.toJson<double?>(valorIpiDevolvido),
      'valorPis': serializer.toJson<double?>(valorPis),
      'valorCofins': serializer.toJson<double?>(valorCofins),
      'valorDespesasAcessorias':
          serializer.toJson<double?>(valorDespesasAcessorias),
      'valorTotal': serializer.toJson<double?>(valorTotal),
      'valorTotalTributos': serializer.toJson<double?>(valorTotalTributos),
      'valorServicos': serializer.toJson<double?>(valorServicos),
      'baseCalculoIssqn': serializer.toJson<double?>(baseCalculoIssqn),
      'valorIssqn': serializer.toJson<double?>(valorIssqn),
      'valorPisIssqn': serializer.toJson<double?>(valorPisIssqn),
      'valorCofinsIssqn': serializer.toJson<double?>(valorCofinsIssqn),
      'dataPrestacaoServico':
          serializer.toJson<DateTime?>(dataPrestacaoServico),
      'valorDeducaoIssqn': serializer.toJson<double?>(valorDeducaoIssqn),
      'outrasRetencoesIssqn': serializer.toJson<double?>(outrasRetencoesIssqn),
      'descontoIncondicionadoIssqn':
          serializer.toJson<double?>(descontoIncondicionadoIssqn),
      'descontoCondicionadoIssqn':
          serializer.toJson<double?>(descontoCondicionadoIssqn),
      'totalRetencaoIssqn': serializer.toJson<double?>(totalRetencaoIssqn),
      'regimeEspecialTributacao':
          serializer.toJson<String?>(regimeEspecialTributacao),
      'valorRetidoPis': serializer.toJson<double?>(valorRetidoPis),
      'valorRetidoCofins': serializer.toJson<double?>(valorRetidoCofins),
      'valorRetidoCsll': serializer.toJson<double?>(valorRetidoCsll),
      'baseCalculoIrrf': serializer.toJson<double?>(baseCalculoIrrf),
      'valorRetidoIrrf': serializer.toJson<double?>(valorRetidoIrrf),
      'baseCalculoPrevidencia':
          serializer.toJson<double?>(baseCalculoPrevidencia),
      'valorRetidoPrevidencia':
          serializer.toJson<double?>(valorRetidoPrevidencia),
      'informacoesAddFisco': serializer.toJson<String?>(informacoesAddFisco),
      'informacoesAddContribuinte':
          serializer.toJson<String?>(informacoesAddContribuinte),
      'comexUfEmbarque': serializer.toJson<String?>(comexUfEmbarque),
      'comexLocalEmbarque': serializer.toJson<String?>(comexLocalEmbarque),
      'comexLocalDespacho': serializer.toJson<String?>(comexLocalDespacho),
      'compraNotaEmpenho': serializer.toJson<String?>(compraNotaEmpenho),
      'compraPedido': serializer.toJson<String?>(compraPedido),
      'compraContrato': serializer.toJson<String?>(compraContrato),
      'qrcode': serializer.toJson<String?>(qrcode),
      'urlChave': serializer.toJson<String?>(urlChave),
      'statusNota': serializer.toJson<String?>(statusNota),
      'idPdvVendaCabecalho': serializer.toJson<int?>(idPdvVendaCabecalho),
    };
  }

  NfeCabecalho copyWith(
          {int? id,
          int? idTributOperacaoFiscal,
          int? ufEmitente,
          String? codigoNumerico,
          String? naturezaOperacao,
          String? codigoModelo,
          String? serie,
          String? numero,
          DateTime? dataHoraEmissao,
          DateTime? dataHoraEntradaSaida,
          String? tipoOperacao,
          String? localDestino,
          int? codigoMunicipio,
          String? formatoImpressaoDanfe,
          String? tipoEmissao,
          String? chaveAcesso,
          String? digitoChaveAcesso,
          String? ambiente,
          String? finalidadeEmissao,
          String? consumidorOperacao,
          String? consumidorPresenca,
          String? processoEmissao,
          String? versaoProcessoEmissao,
          DateTime? dataEntradaContingencia,
          String? justificativaContingencia,
          double? baseCalculoIcms,
          double? valorIcms,
          double? valorIcmsDesonerado,
          double? totalIcmsFcpUfDestino,
          double? totalIcmsInterestadualUfDestino,
          double? totalIcmsInterestadualUfRemetente,
          double? valorTotalFcp,
          double? baseCalculoIcmsSt,
          double? valorIcmsSt,
          double? valorTotalFcpSt,
          double? valorTotalFcpStRetido,
          double? valorTotalProdutos,
          double? valorFrete,
          double? valorSeguro,
          double? valorDesconto,
          double? valorImpostoImportacao,
          double? valorIpi,
          double? valorIpiDevolvido,
          double? valorPis,
          double? valorCofins,
          double? valorDespesasAcessorias,
          double? valorTotal,
          double? valorTotalTributos,
          double? valorServicos,
          double? baseCalculoIssqn,
          double? valorIssqn,
          double? valorPisIssqn,
          double? valorCofinsIssqn,
          DateTime? dataPrestacaoServico,
          double? valorDeducaoIssqn,
          double? outrasRetencoesIssqn,
          double? descontoIncondicionadoIssqn,
          double? descontoCondicionadoIssqn,
          double? totalRetencaoIssqn,
          String? regimeEspecialTributacao,
          double? valorRetidoPis,
          double? valorRetidoCofins,
          double? valorRetidoCsll,
          double? baseCalculoIrrf,
          double? valorRetidoIrrf,
          double? baseCalculoPrevidencia,
          double? valorRetidoPrevidencia,
          String? informacoesAddFisco,
          String? informacoesAddContribuinte,
          String? comexUfEmbarque,
          String? comexLocalEmbarque,
          String? comexLocalDespacho,
          String? compraNotaEmpenho,
          String? compraPedido,
          String? compraContrato,
          String? qrcode,
          String? urlChave,
          String? statusNota,
          int? idPdvVendaCabecalho}) =>
      NfeCabecalho(
        id: id ?? this.id,
        idTributOperacaoFiscal:
            idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
        ufEmitente: ufEmitente ?? this.ufEmitente,
        codigoNumerico: codigoNumerico ?? this.codigoNumerico,
        naturezaOperacao: naturezaOperacao ?? this.naturezaOperacao,
        codigoModelo: codigoModelo ?? this.codigoModelo,
        serie: serie ?? this.serie,
        numero: numero ?? this.numero,
        dataHoraEmissao: dataHoraEmissao ?? this.dataHoraEmissao,
        dataHoraEntradaSaida: dataHoraEntradaSaida ?? this.dataHoraEntradaSaida,
        tipoOperacao: tipoOperacao ?? this.tipoOperacao,
        localDestino: localDestino ?? this.localDestino,
        codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
        formatoImpressaoDanfe:
            formatoImpressaoDanfe ?? this.formatoImpressaoDanfe,
        tipoEmissao: tipoEmissao ?? this.tipoEmissao,
        chaveAcesso: chaveAcesso ?? this.chaveAcesso,
        digitoChaveAcesso: digitoChaveAcesso ?? this.digitoChaveAcesso,
        ambiente: ambiente ?? this.ambiente,
        finalidadeEmissao: finalidadeEmissao ?? this.finalidadeEmissao,
        consumidorOperacao: consumidorOperacao ?? this.consumidorOperacao,
        consumidorPresenca: consumidorPresenca ?? this.consumidorPresenca,
        processoEmissao: processoEmissao ?? this.processoEmissao,
        versaoProcessoEmissao:
            versaoProcessoEmissao ?? this.versaoProcessoEmissao,
        dataEntradaContingencia:
            dataEntradaContingencia ?? this.dataEntradaContingencia,
        justificativaContingencia:
            justificativaContingencia ?? this.justificativaContingencia,
        baseCalculoIcms: baseCalculoIcms ?? this.baseCalculoIcms,
        valorIcms: valorIcms ?? this.valorIcms,
        valorIcmsDesonerado: valorIcmsDesonerado ?? this.valorIcmsDesonerado,
        totalIcmsFcpUfDestino:
            totalIcmsFcpUfDestino ?? this.totalIcmsFcpUfDestino,
        totalIcmsInterestadualUfDestino: totalIcmsInterestadualUfDestino ??
            this.totalIcmsInterestadualUfDestino,
        totalIcmsInterestadualUfRemetente: totalIcmsInterestadualUfRemetente ??
            this.totalIcmsInterestadualUfRemetente,
        valorTotalFcp: valorTotalFcp ?? this.valorTotalFcp,
        baseCalculoIcmsSt: baseCalculoIcmsSt ?? this.baseCalculoIcmsSt,
        valorIcmsSt: valorIcmsSt ?? this.valorIcmsSt,
        valorTotalFcpSt: valorTotalFcpSt ?? this.valorTotalFcpSt,
        valorTotalFcpStRetido:
            valorTotalFcpStRetido ?? this.valorTotalFcpStRetido,
        valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
        valorFrete: valorFrete ?? this.valorFrete,
        valorSeguro: valorSeguro ?? this.valorSeguro,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorImpostoImportacao:
            valorImpostoImportacao ?? this.valorImpostoImportacao,
        valorIpi: valorIpi ?? this.valorIpi,
        valorIpiDevolvido: valorIpiDevolvido ?? this.valorIpiDevolvido,
        valorPis: valorPis ?? this.valorPis,
        valorCofins: valorCofins ?? this.valorCofins,
        valorDespesasAcessorias:
            valorDespesasAcessorias ?? this.valorDespesasAcessorias,
        valorTotal: valorTotal ?? this.valorTotal,
        valorTotalTributos: valorTotalTributos ?? this.valorTotalTributos,
        valorServicos: valorServicos ?? this.valorServicos,
        baseCalculoIssqn: baseCalculoIssqn ?? this.baseCalculoIssqn,
        valorIssqn: valorIssqn ?? this.valorIssqn,
        valorPisIssqn: valorPisIssqn ?? this.valorPisIssqn,
        valorCofinsIssqn: valorCofinsIssqn ?? this.valorCofinsIssqn,
        dataPrestacaoServico: dataPrestacaoServico ?? this.dataPrestacaoServico,
        valorDeducaoIssqn: valorDeducaoIssqn ?? this.valorDeducaoIssqn,
        outrasRetencoesIssqn: outrasRetencoesIssqn ?? this.outrasRetencoesIssqn,
        descontoIncondicionadoIssqn:
            descontoIncondicionadoIssqn ?? this.descontoIncondicionadoIssqn,
        descontoCondicionadoIssqn:
            descontoCondicionadoIssqn ?? this.descontoCondicionadoIssqn,
        totalRetencaoIssqn: totalRetencaoIssqn ?? this.totalRetencaoIssqn,
        regimeEspecialTributacao:
            regimeEspecialTributacao ?? this.regimeEspecialTributacao,
        valorRetidoPis: valorRetidoPis ?? this.valorRetidoPis,
        valorRetidoCofins: valorRetidoCofins ?? this.valorRetidoCofins,
        valorRetidoCsll: valorRetidoCsll ?? this.valorRetidoCsll,
        baseCalculoIrrf: baseCalculoIrrf ?? this.baseCalculoIrrf,
        valorRetidoIrrf: valorRetidoIrrf ?? this.valorRetidoIrrf,
        baseCalculoPrevidencia:
            baseCalculoPrevidencia ?? this.baseCalculoPrevidencia,
        valorRetidoPrevidencia:
            valorRetidoPrevidencia ?? this.valorRetidoPrevidencia,
        informacoesAddFisco: informacoesAddFisco ?? this.informacoesAddFisco,
        informacoesAddContribuinte:
            informacoesAddContribuinte ?? this.informacoesAddContribuinte,
        comexUfEmbarque: comexUfEmbarque ?? this.comexUfEmbarque,
        comexLocalEmbarque: comexLocalEmbarque ?? this.comexLocalEmbarque,
        comexLocalDespacho: comexLocalDespacho ?? this.comexLocalDespacho,
        compraNotaEmpenho: compraNotaEmpenho ?? this.compraNotaEmpenho,
        compraPedido: compraPedido ?? this.compraPedido,
        compraContrato: compraContrato ?? this.compraContrato,
        qrcode: qrcode ?? this.qrcode,
        urlChave: urlChave ?? this.urlChave,
        statusNota: statusNota ?? this.statusNota,
        idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
      );
  @override
  String toString() {
    return (StringBuffer('NfeCabecalho(')
          ..write('id: $id, ')
          ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal, ')
          ..write('ufEmitente: $ufEmitente, ')
          ..write('codigoNumerico: $codigoNumerico, ')
          ..write('naturezaOperacao: $naturezaOperacao, ')
          ..write('codigoModelo: $codigoModelo, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero, ')
          ..write('dataHoraEmissao: $dataHoraEmissao, ')
          ..write('dataHoraEntradaSaida: $dataHoraEntradaSaida, ')
          ..write('tipoOperacao: $tipoOperacao, ')
          ..write('localDestino: $localDestino, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
          ..write('tipoEmissao: $tipoEmissao, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('digitoChaveAcesso: $digitoChaveAcesso, ')
          ..write('ambiente: $ambiente, ')
          ..write('finalidadeEmissao: $finalidadeEmissao, ')
          ..write('consumidorOperacao: $consumidorOperacao, ')
          ..write('consumidorPresenca: $consumidorPresenca, ')
          ..write('processoEmissao: $processoEmissao, ')
          ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
          ..write('dataEntradaContingencia: $dataEntradaContingencia, ')
          ..write('justificativaContingencia: $justificativaContingencia, ')
          ..write('baseCalculoIcms: $baseCalculoIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
          ..write('totalIcmsFcpUfDestino: $totalIcmsFcpUfDestino, ')
          ..write(
              'totalIcmsInterestadualUfDestino: $totalIcmsInterestadualUfDestino, ')
          ..write(
              'totalIcmsInterestadualUfRemetente: $totalIcmsInterestadualUfRemetente, ')
          ..write('valorTotalFcp: $valorTotalFcp, ')
          ..write('baseCalculoIcmsSt: $baseCalculoIcmsSt, ')
          ..write('valorIcmsSt: $valorIcmsSt, ')
          ..write('valorTotalFcpSt: $valorTotalFcpSt, ')
          ..write('valorTotalFcpStRetido: $valorTotalFcpStRetido, ')
          ..write('valorTotalProdutos: $valorTotalProdutos, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
          ..write('valorIpi: $valorIpi, ')
          ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
          ..write('valorPis: $valorPis, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('valorDespesasAcessorias: $valorDespesasAcessorias, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalTributos: $valorTotalTributos, ')
          ..write('valorServicos: $valorServicos, ')
          ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('valorPisIssqn: $valorPisIssqn, ')
          ..write('valorCofinsIssqn: $valorCofinsIssqn, ')
          ..write('dataPrestacaoServico: $dataPrestacaoServico, ')
          ..write('valorDeducaoIssqn: $valorDeducaoIssqn, ')
          ..write('outrasRetencoesIssqn: $outrasRetencoesIssqn, ')
          ..write('descontoIncondicionadoIssqn: $descontoIncondicionadoIssqn, ')
          ..write('descontoCondicionadoIssqn: $descontoCondicionadoIssqn, ')
          ..write('totalRetencaoIssqn: $totalRetencaoIssqn, ')
          ..write('regimeEspecialTributacao: $regimeEspecialTributacao, ')
          ..write('valorRetidoPis: $valorRetidoPis, ')
          ..write('valorRetidoCofins: $valorRetidoCofins, ')
          ..write('valorRetidoCsll: $valorRetidoCsll, ')
          ..write('baseCalculoIrrf: $baseCalculoIrrf, ')
          ..write('valorRetidoIrrf: $valorRetidoIrrf, ')
          ..write('baseCalculoPrevidencia: $baseCalculoPrevidencia, ')
          ..write('valorRetidoPrevidencia: $valorRetidoPrevidencia, ')
          ..write('informacoesAddFisco: $informacoesAddFisco, ')
          ..write('informacoesAddContribuinte: $informacoesAddContribuinte, ')
          ..write('comexUfEmbarque: $comexUfEmbarque, ')
          ..write('comexLocalEmbarque: $comexLocalEmbarque, ')
          ..write('comexLocalDespacho: $comexLocalDespacho, ')
          ..write('compraNotaEmpenho: $compraNotaEmpenho, ')
          ..write('compraPedido: $compraPedido, ')
          ..write('compraContrato: $compraContrato, ')
          ..write('qrcode: $qrcode, ')
          ..write('urlChave: $urlChave, ')
          ..write('statusNota: $statusNota, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idTributOperacaoFiscal,
        ufEmitente,
        codigoNumerico,
        naturezaOperacao,
        codigoModelo,
        serie,
        numero,
        dataHoraEmissao,
        dataHoraEntradaSaida,
        tipoOperacao,
        localDestino,
        codigoMunicipio,
        formatoImpressaoDanfe,
        tipoEmissao,
        chaveAcesso,
        digitoChaveAcesso,
        ambiente,
        finalidadeEmissao,
        consumidorOperacao,
        consumidorPresenca,
        processoEmissao,
        versaoProcessoEmissao,
        dataEntradaContingencia,
        justificativaContingencia,
        baseCalculoIcms,
        valorIcms,
        valorIcmsDesonerado,
        totalIcmsFcpUfDestino,
        totalIcmsInterestadualUfDestino,
        totalIcmsInterestadualUfRemetente,
        valorTotalFcp,
        baseCalculoIcmsSt,
        valorIcmsSt,
        valorTotalFcpSt,
        valorTotalFcpStRetido,
        valorTotalProdutos,
        valorFrete,
        valorSeguro,
        valorDesconto,
        valorImpostoImportacao,
        valorIpi,
        valorIpiDevolvido,
        valorPis,
        valorCofins,
        valorDespesasAcessorias,
        valorTotal,
        valorTotalTributos,
        valorServicos,
        baseCalculoIssqn,
        valorIssqn,
        valorPisIssqn,
        valorCofinsIssqn,
        dataPrestacaoServico,
        valorDeducaoIssqn,
        outrasRetencoesIssqn,
        descontoIncondicionadoIssqn,
        descontoCondicionadoIssqn,
        totalRetencaoIssqn,
        regimeEspecialTributacao,
        valorRetidoPis,
        valorRetidoCofins,
        valorRetidoCsll,
        baseCalculoIrrf,
        valorRetidoIrrf,
        baseCalculoPrevidencia,
        valorRetidoPrevidencia,
        informacoesAddFisco,
        informacoesAddContribuinte,
        comexUfEmbarque,
        comexLocalEmbarque,
        comexLocalDespacho,
        compraNotaEmpenho,
        compraPedido,
        compraContrato,
        qrcode,
        urlChave,
        statusNota,
        idPdvVendaCabecalho
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCabecalho &&
          other.id == this.id &&
          other.idTributOperacaoFiscal == this.idTributOperacaoFiscal &&
          other.ufEmitente == this.ufEmitente &&
          other.codigoNumerico == this.codigoNumerico &&
          other.naturezaOperacao == this.naturezaOperacao &&
          other.codigoModelo == this.codigoModelo &&
          other.serie == this.serie &&
          other.numero == this.numero &&
          other.dataHoraEmissao == this.dataHoraEmissao &&
          other.dataHoraEntradaSaida == this.dataHoraEntradaSaida &&
          other.tipoOperacao == this.tipoOperacao &&
          other.localDestino == this.localDestino &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.formatoImpressaoDanfe == this.formatoImpressaoDanfe &&
          other.tipoEmissao == this.tipoEmissao &&
          other.chaveAcesso == this.chaveAcesso &&
          other.digitoChaveAcesso == this.digitoChaveAcesso &&
          other.ambiente == this.ambiente &&
          other.finalidadeEmissao == this.finalidadeEmissao &&
          other.consumidorOperacao == this.consumidorOperacao &&
          other.consumidorPresenca == this.consumidorPresenca &&
          other.processoEmissao == this.processoEmissao &&
          other.versaoProcessoEmissao == this.versaoProcessoEmissao &&
          other.dataEntradaContingencia == this.dataEntradaContingencia &&
          other.justificativaContingencia == this.justificativaContingencia &&
          other.baseCalculoIcms == this.baseCalculoIcms &&
          other.valorIcms == this.valorIcms &&
          other.valorIcmsDesonerado == this.valorIcmsDesonerado &&
          other.totalIcmsFcpUfDestino == this.totalIcmsFcpUfDestino &&
          other.totalIcmsInterestadualUfDestino ==
              this.totalIcmsInterestadualUfDestino &&
          other.totalIcmsInterestadualUfRemetente ==
              this.totalIcmsInterestadualUfRemetente &&
          other.valorTotalFcp == this.valorTotalFcp &&
          other.baseCalculoIcmsSt == this.baseCalculoIcmsSt &&
          other.valorIcmsSt == this.valorIcmsSt &&
          other.valorTotalFcpSt == this.valorTotalFcpSt &&
          other.valorTotalFcpStRetido == this.valorTotalFcpStRetido &&
          other.valorTotalProdutos == this.valorTotalProdutos &&
          other.valorFrete == this.valorFrete &&
          other.valorSeguro == this.valorSeguro &&
          other.valorDesconto == this.valorDesconto &&
          other.valorImpostoImportacao == this.valorImpostoImportacao &&
          other.valorIpi == this.valorIpi &&
          other.valorIpiDevolvido == this.valorIpiDevolvido &&
          other.valorPis == this.valorPis &&
          other.valorCofins == this.valorCofins &&
          other.valorDespesasAcessorias == this.valorDespesasAcessorias &&
          other.valorTotal == this.valorTotal &&
          other.valorTotalTributos == this.valorTotalTributos &&
          other.valorServicos == this.valorServicos &&
          other.baseCalculoIssqn == this.baseCalculoIssqn &&
          other.valorIssqn == this.valorIssqn &&
          other.valorPisIssqn == this.valorPisIssqn &&
          other.valorCofinsIssqn == this.valorCofinsIssqn &&
          other.dataPrestacaoServico == this.dataPrestacaoServico &&
          other.valorDeducaoIssqn == this.valorDeducaoIssqn &&
          other.outrasRetencoesIssqn == this.outrasRetencoesIssqn &&
          other.descontoIncondicionadoIssqn ==
              this.descontoIncondicionadoIssqn &&
          other.descontoCondicionadoIssqn == this.descontoCondicionadoIssqn &&
          other.totalRetencaoIssqn == this.totalRetencaoIssqn &&
          other.regimeEspecialTributacao == this.regimeEspecialTributacao &&
          other.valorRetidoPis == this.valorRetidoPis &&
          other.valorRetidoCofins == this.valorRetidoCofins &&
          other.valorRetidoCsll == this.valorRetidoCsll &&
          other.baseCalculoIrrf == this.baseCalculoIrrf &&
          other.valorRetidoIrrf == this.valorRetidoIrrf &&
          other.baseCalculoPrevidencia == this.baseCalculoPrevidencia &&
          other.valorRetidoPrevidencia == this.valorRetidoPrevidencia &&
          other.informacoesAddFisco == this.informacoesAddFisco &&
          other.informacoesAddContribuinte == this.informacoesAddContribuinte &&
          other.comexUfEmbarque == this.comexUfEmbarque &&
          other.comexLocalEmbarque == this.comexLocalEmbarque &&
          other.comexLocalDespacho == this.comexLocalDespacho &&
          other.compraNotaEmpenho == this.compraNotaEmpenho &&
          other.compraPedido == this.compraPedido &&
          other.compraContrato == this.compraContrato &&
          other.qrcode == this.qrcode &&
          other.urlChave == this.urlChave &&
          other.statusNota == this.statusNota &&
          other.idPdvVendaCabecalho == this.idPdvVendaCabecalho);
}

class NfeCabecalhosCompanion extends UpdateCompanion<NfeCabecalho> {
  final Value<int?> id;
  final Value<int?> idTributOperacaoFiscal;
  final Value<int?> ufEmitente;
  final Value<String?> codigoNumerico;
  final Value<String?> naturezaOperacao;
  final Value<String?> codigoModelo;
  final Value<String?> serie;
  final Value<String?> numero;
  final Value<DateTime?> dataHoraEmissao;
  final Value<DateTime?> dataHoraEntradaSaida;
  final Value<String?> tipoOperacao;
  final Value<String?> localDestino;
  final Value<int?> codigoMunicipio;
  final Value<String?> formatoImpressaoDanfe;
  final Value<String?> tipoEmissao;
  final Value<String?> chaveAcesso;
  final Value<String?> digitoChaveAcesso;
  final Value<String?> ambiente;
  final Value<String?> finalidadeEmissao;
  final Value<String?> consumidorOperacao;
  final Value<String?> consumidorPresenca;
  final Value<String?> processoEmissao;
  final Value<String?> versaoProcessoEmissao;
  final Value<DateTime?> dataEntradaContingencia;
  final Value<String?> justificativaContingencia;
  final Value<double?> baseCalculoIcms;
  final Value<double?> valorIcms;
  final Value<double?> valorIcmsDesonerado;
  final Value<double?> totalIcmsFcpUfDestino;
  final Value<double?> totalIcmsInterestadualUfDestino;
  final Value<double?> totalIcmsInterestadualUfRemetente;
  final Value<double?> valorTotalFcp;
  final Value<double?> baseCalculoIcmsSt;
  final Value<double?> valorIcmsSt;
  final Value<double?> valorTotalFcpSt;
  final Value<double?> valorTotalFcpStRetido;
  final Value<double?> valorTotalProdutos;
  final Value<double?> valorFrete;
  final Value<double?> valorSeguro;
  final Value<double?> valorDesconto;
  final Value<double?> valorImpostoImportacao;
  final Value<double?> valorIpi;
  final Value<double?> valorIpiDevolvido;
  final Value<double?> valorPis;
  final Value<double?> valorCofins;
  final Value<double?> valorDespesasAcessorias;
  final Value<double?> valorTotal;
  final Value<double?> valorTotalTributos;
  final Value<double?> valorServicos;
  final Value<double?> baseCalculoIssqn;
  final Value<double?> valorIssqn;
  final Value<double?> valorPisIssqn;
  final Value<double?> valorCofinsIssqn;
  final Value<DateTime?> dataPrestacaoServico;
  final Value<double?> valorDeducaoIssqn;
  final Value<double?> outrasRetencoesIssqn;
  final Value<double?> descontoIncondicionadoIssqn;
  final Value<double?> descontoCondicionadoIssqn;
  final Value<double?> totalRetencaoIssqn;
  final Value<String?> regimeEspecialTributacao;
  final Value<double?> valorRetidoPis;
  final Value<double?> valorRetidoCofins;
  final Value<double?> valorRetidoCsll;
  final Value<double?> baseCalculoIrrf;
  final Value<double?> valorRetidoIrrf;
  final Value<double?> baseCalculoPrevidencia;
  final Value<double?> valorRetidoPrevidencia;
  final Value<String?> informacoesAddFisco;
  final Value<String?> informacoesAddContribuinte;
  final Value<String?> comexUfEmbarque;
  final Value<String?> comexLocalEmbarque;
  final Value<String?> comexLocalDespacho;
  final Value<String?> compraNotaEmpenho;
  final Value<String?> compraPedido;
  final Value<String?> compraContrato;
  final Value<String?> qrcode;
  final Value<String?> urlChave;
  final Value<String?> statusNota;
  final Value<int?> idPdvVendaCabecalho;
  const NfeCabecalhosCompanion({
    this.id = const Value.absent(),
    this.idTributOperacaoFiscal = const Value.absent(),
    this.ufEmitente = const Value.absent(),
    this.codigoNumerico = const Value.absent(),
    this.naturezaOperacao = const Value.absent(),
    this.codigoModelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataHoraEmissao = const Value.absent(),
    this.dataHoraEntradaSaida = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
    this.localDestino = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.formatoImpressaoDanfe = const Value.absent(),
    this.tipoEmissao = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.digitoChaveAcesso = const Value.absent(),
    this.ambiente = const Value.absent(),
    this.finalidadeEmissao = const Value.absent(),
    this.consumidorOperacao = const Value.absent(),
    this.consumidorPresenca = const Value.absent(),
    this.processoEmissao = const Value.absent(),
    this.versaoProcessoEmissao = const Value.absent(),
    this.dataEntradaContingencia = const Value.absent(),
    this.justificativaContingencia = const Value.absent(),
    this.baseCalculoIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.valorIcmsDesonerado = const Value.absent(),
    this.totalIcmsFcpUfDestino = const Value.absent(),
    this.totalIcmsInterestadualUfDestino = const Value.absent(),
    this.totalIcmsInterestadualUfRemetente = const Value.absent(),
    this.valorTotalFcp = const Value.absent(),
    this.baseCalculoIcmsSt = const Value.absent(),
    this.valorIcmsSt = const Value.absent(),
    this.valorTotalFcpSt = const Value.absent(),
    this.valorTotalFcpStRetido = const Value.absent(),
    this.valorTotalProdutos = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorImpostoImportacao = const Value.absent(),
    this.valorIpi = const Value.absent(),
    this.valorIpiDevolvido = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.valorDespesasAcessorias = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalTributos = const Value.absent(),
    this.valorServicos = const Value.absent(),
    this.baseCalculoIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.valorPisIssqn = const Value.absent(),
    this.valorCofinsIssqn = const Value.absent(),
    this.dataPrestacaoServico = const Value.absent(),
    this.valorDeducaoIssqn = const Value.absent(),
    this.outrasRetencoesIssqn = const Value.absent(),
    this.descontoIncondicionadoIssqn = const Value.absent(),
    this.descontoCondicionadoIssqn = const Value.absent(),
    this.totalRetencaoIssqn = const Value.absent(),
    this.regimeEspecialTributacao = const Value.absent(),
    this.valorRetidoPis = const Value.absent(),
    this.valorRetidoCofins = const Value.absent(),
    this.valorRetidoCsll = const Value.absent(),
    this.baseCalculoIrrf = const Value.absent(),
    this.valorRetidoIrrf = const Value.absent(),
    this.baseCalculoPrevidencia = const Value.absent(),
    this.valorRetidoPrevidencia = const Value.absent(),
    this.informacoesAddFisco = const Value.absent(),
    this.informacoesAddContribuinte = const Value.absent(),
    this.comexUfEmbarque = const Value.absent(),
    this.comexLocalEmbarque = const Value.absent(),
    this.comexLocalDespacho = const Value.absent(),
    this.compraNotaEmpenho = const Value.absent(),
    this.compraPedido = const Value.absent(),
    this.compraContrato = const Value.absent(),
    this.qrcode = const Value.absent(),
    this.urlChave = const Value.absent(),
    this.statusNota = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
  });
  NfeCabecalhosCompanion.insert({
    this.id = const Value.absent(),
    this.idTributOperacaoFiscal = const Value.absent(),
    this.ufEmitente = const Value.absent(),
    this.codigoNumerico = const Value.absent(),
    this.naturezaOperacao = const Value.absent(),
    this.codigoModelo = const Value.absent(),
    this.serie = const Value.absent(),
    this.numero = const Value.absent(),
    this.dataHoraEmissao = const Value.absent(),
    this.dataHoraEntradaSaida = const Value.absent(),
    this.tipoOperacao = const Value.absent(),
    this.localDestino = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.formatoImpressaoDanfe = const Value.absent(),
    this.tipoEmissao = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
    this.digitoChaveAcesso = const Value.absent(),
    this.ambiente = const Value.absent(),
    this.finalidadeEmissao = const Value.absent(),
    this.consumidorOperacao = const Value.absent(),
    this.consumidorPresenca = const Value.absent(),
    this.processoEmissao = const Value.absent(),
    this.versaoProcessoEmissao = const Value.absent(),
    this.dataEntradaContingencia = const Value.absent(),
    this.justificativaContingencia = const Value.absent(),
    this.baseCalculoIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.valorIcmsDesonerado = const Value.absent(),
    this.totalIcmsFcpUfDestino = const Value.absent(),
    this.totalIcmsInterestadualUfDestino = const Value.absent(),
    this.totalIcmsInterestadualUfRemetente = const Value.absent(),
    this.valorTotalFcp = const Value.absent(),
    this.baseCalculoIcmsSt = const Value.absent(),
    this.valorIcmsSt = const Value.absent(),
    this.valorTotalFcpSt = const Value.absent(),
    this.valorTotalFcpStRetido = const Value.absent(),
    this.valorTotalProdutos = const Value.absent(),
    this.valorFrete = const Value.absent(),
    this.valorSeguro = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorImpostoImportacao = const Value.absent(),
    this.valorIpi = const Value.absent(),
    this.valorIpiDevolvido = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.valorDespesasAcessorias = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalTributos = const Value.absent(),
    this.valorServicos = const Value.absent(),
    this.baseCalculoIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.valorPisIssqn = const Value.absent(),
    this.valorCofinsIssqn = const Value.absent(),
    this.dataPrestacaoServico = const Value.absent(),
    this.valorDeducaoIssqn = const Value.absent(),
    this.outrasRetencoesIssqn = const Value.absent(),
    this.descontoIncondicionadoIssqn = const Value.absent(),
    this.descontoCondicionadoIssqn = const Value.absent(),
    this.totalRetencaoIssqn = const Value.absent(),
    this.regimeEspecialTributacao = const Value.absent(),
    this.valorRetidoPis = const Value.absent(),
    this.valorRetidoCofins = const Value.absent(),
    this.valorRetidoCsll = const Value.absent(),
    this.baseCalculoIrrf = const Value.absent(),
    this.valorRetidoIrrf = const Value.absent(),
    this.baseCalculoPrevidencia = const Value.absent(),
    this.valorRetidoPrevidencia = const Value.absent(),
    this.informacoesAddFisco = const Value.absent(),
    this.informacoesAddContribuinte = const Value.absent(),
    this.comexUfEmbarque = const Value.absent(),
    this.comexLocalEmbarque = const Value.absent(),
    this.comexLocalDespacho = const Value.absent(),
    this.compraNotaEmpenho = const Value.absent(),
    this.compraPedido = const Value.absent(),
    this.compraContrato = const Value.absent(),
    this.qrcode = const Value.absent(),
    this.urlChave = const Value.absent(),
    this.statusNota = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
  });
  static Insertable<NfeCabecalho> custom({
    Expression<int>? id,
    Expression<int>? idTributOperacaoFiscal,
    Expression<int>? ufEmitente,
    Expression<String>? codigoNumerico,
    Expression<String>? naturezaOperacao,
    Expression<String>? codigoModelo,
    Expression<String>? serie,
    Expression<String>? numero,
    Expression<DateTime>? dataHoraEmissao,
    Expression<DateTime>? dataHoraEntradaSaida,
    Expression<String>? tipoOperacao,
    Expression<String>? localDestino,
    Expression<int>? codigoMunicipio,
    Expression<String>? formatoImpressaoDanfe,
    Expression<String>? tipoEmissao,
    Expression<String>? chaveAcesso,
    Expression<String>? digitoChaveAcesso,
    Expression<String>? ambiente,
    Expression<String>? finalidadeEmissao,
    Expression<String>? consumidorOperacao,
    Expression<String>? consumidorPresenca,
    Expression<String>? processoEmissao,
    Expression<String>? versaoProcessoEmissao,
    Expression<DateTime>? dataEntradaContingencia,
    Expression<String>? justificativaContingencia,
    Expression<double>? baseCalculoIcms,
    Expression<double>? valorIcms,
    Expression<double>? valorIcmsDesonerado,
    Expression<double>? totalIcmsFcpUfDestino,
    Expression<double>? totalIcmsInterestadualUfDestino,
    Expression<double>? totalIcmsInterestadualUfRemetente,
    Expression<double>? valorTotalFcp,
    Expression<double>? baseCalculoIcmsSt,
    Expression<double>? valorIcmsSt,
    Expression<double>? valorTotalFcpSt,
    Expression<double>? valorTotalFcpStRetido,
    Expression<double>? valorTotalProdutos,
    Expression<double>? valorFrete,
    Expression<double>? valorSeguro,
    Expression<double>? valorDesconto,
    Expression<double>? valorImpostoImportacao,
    Expression<double>? valorIpi,
    Expression<double>? valorIpiDevolvido,
    Expression<double>? valorPis,
    Expression<double>? valorCofins,
    Expression<double>? valorDespesasAcessorias,
    Expression<double>? valorTotal,
    Expression<double>? valorTotalTributos,
    Expression<double>? valorServicos,
    Expression<double>? baseCalculoIssqn,
    Expression<double>? valorIssqn,
    Expression<double>? valorPisIssqn,
    Expression<double>? valorCofinsIssqn,
    Expression<DateTime>? dataPrestacaoServico,
    Expression<double>? valorDeducaoIssqn,
    Expression<double>? outrasRetencoesIssqn,
    Expression<double>? descontoIncondicionadoIssqn,
    Expression<double>? descontoCondicionadoIssqn,
    Expression<double>? totalRetencaoIssqn,
    Expression<String>? regimeEspecialTributacao,
    Expression<double>? valorRetidoPis,
    Expression<double>? valorRetidoCofins,
    Expression<double>? valorRetidoCsll,
    Expression<double>? baseCalculoIrrf,
    Expression<double>? valorRetidoIrrf,
    Expression<double>? baseCalculoPrevidencia,
    Expression<double>? valorRetidoPrevidencia,
    Expression<String>? informacoesAddFisco,
    Expression<String>? informacoesAddContribuinte,
    Expression<String>? comexUfEmbarque,
    Expression<String>? comexLocalEmbarque,
    Expression<String>? comexLocalDespacho,
    Expression<String>? compraNotaEmpenho,
    Expression<String>? compraPedido,
    Expression<String>? compraContrato,
    Expression<String>? qrcode,
    Expression<String>? urlChave,
    Expression<String>? statusNota,
    Expression<int>? idPdvVendaCabecalho,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idTributOperacaoFiscal != null)
        'ID_TRIBUT_OPERACAO_FISCAL': idTributOperacaoFiscal,
      if (ufEmitente != null) 'UF_EMITENTE': ufEmitente,
      if (codigoNumerico != null) 'CODIGO_NUMERICO': codigoNumerico,
      if (naturezaOperacao != null) 'NATUREZA_OPERACAO': naturezaOperacao,
      if (codigoModelo != null) 'CODIGO_MODELO': codigoModelo,
      if (serie != null) 'SERIE': serie,
      if (numero != null) 'NUMERO': numero,
      if (dataHoraEmissao != null) 'DATA_HORA_EMISSAO': dataHoraEmissao,
      if (dataHoraEntradaSaida != null)
        'DATA_HORA_ENTRADA_SAIDA': dataHoraEntradaSaida,
      if (tipoOperacao != null) 'TIPO_OPERACAO': tipoOperacao,
      if (localDestino != null) 'LOCAL_DESTINO': localDestino,
      if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
      if (formatoImpressaoDanfe != null)
        'FORMATO_IMPRESSAO_DANFE': formatoImpressaoDanfe,
      if (tipoEmissao != null) 'TIPO_EMISSAO': tipoEmissao,
      if (chaveAcesso != null) 'CHAVE_ACESSO': chaveAcesso,
      if (digitoChaveAcesso != null) 'DIGITO_CHAVE_ACESSO': digitoChaveAcesso,
      if (ambiente != null) 'AMBIENTE': ambiente,
      if (finalidadeEmissao != null) 'FINALIDADE_EMISSAO': finalidadeEmissao,
      if (consumidorOperacao != null) 'CONSUMIDOR_OPERACAO': consumidorOperacao,
      if (consumidorPresenca != null) 'CONSUMIDOR_PRESENCA': consumidorPresenca,
      if (processoEmissao != null) 'PROCESSO_EMISSAO': processoEmissao,
      if (versaoProcessoEmissao != null)
        'VERSAO_PROCESSO_EMISSAO': versaoProcessoEmissao,
      if (dataEntradaContingencia != null)
        'DATA_ENTRADA_CONTINGENCIA': dataEntradaContingencia,
      if (justificativaContingencia != null)
        'JUSTIFICATIVA_CONTINGENCIA': justificativaContingencia,
      if (baseCalculoIcms != null) 'BASE_CALCULO_ICMS': baseCalculoIcms,
      if (valorIcms != null) 'VALOR_ICMS': valorIcms,
      if (valorIcmsDesonerado != null)
        'VALOR_ICMS_DESONERADO': valorIcmsDesonerado,
      if (totalIcmsFcpUfDestino != null)
        'TOTAL_ICMS_FCP_UF_DESTINO': totalIcmsFcpUfDestino,
      if (totalIcmsInterestadualUfDestino != null)
        'TOTAL_ICMS_INTERESTADUAL_UF_DESTINO': totalIcmsInterestadualUfDestino,
      if (totalIcmsInterestadualUfRemetente != null)
        'TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE':
            totalIcmsInterestadualUfRemetente,
      if (valorTotalFcp != null) 'VALOR_TOTAL_FCP': valorTotalFcp,
      if (baseCalculoIcmsSt != null) 'BASE_CALCULO_ICMS_ST': baseCalculoIcmsSt,
      if (valorIcmsSt != null) 'VALOR_ICMS_ST': valorIcmsSt,
      if (valorTotalFcpSt != null) 'VALOR_TOTAL_FCP_ST': valorTotalFcpSt,
      if (valorTotalFcpStRetido != null)
        'VALOR_TOTAL_FCP_ST_RETIDO': valorTotalFcpStRetido,
      if (valorTotalProdutos != null)
        'VALOR_TOTAL_PRODUTOS': valorTotalProdutos,
      if (valorFrete != null) 'VALOR_FRETE': valorFrete,
      if (valorSeguro != null) 'VALOR_SEGURO': valorSeguro,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorImpostoImportacao != null)
        'VALOR_IMPOSTO_IMPORTACAO': valorImpostoImportacao,
      if (valorIpi != null) 'VALOR_IPI': valorIpi,
      if (valorIpiDevolvido != null) 'VALOR_IPI_DEVOLVIDO': valorIpiDevolvido,
      if (valorPis != null) 'VALOR_PIS': valorPis,
      if (valorCofins != null) 'VALOR_COFINS': valorCofins,
      if (valorDespesasAcessorias != null)
        'VALOR_DESPESAS_ACESSORIAS': valorDespesasAcessorias,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (valorTotalTributos != null)
        'VALOR_TOTAL_TRIBUTOS': valorTotalTributos,
      if (valorServicos != null) 'VALOR_SERVICOS': valorServicos,
      if (baseCalculoIssqn != null) 'BASE_CALCULO_ISSQN': baseCalculoIssqn,
      if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
      if (valorPisIssqn != null) 'VALOR_PIS_ISSQN': valorPisIssqn,
      if (valorCofinsIssqn != null) 'VALOR_COFINS_ISSQN': valorCofinsIssqn,
      if (dataPrestacaoServico != null)
        'DATA_PRESTACAO_SERVICO': dataPrestacaoServico,
      if (valorDeducaoIssqn != null) 'VALOR_DEDUCAO_ISSQN': valorDeducaoIssqn,
      if (outrasRetencoesIssqn != null)
        'OUTRAS_RETENCOES_ISSQN': outrasRetencoesIssqn,
      if (descontoIncondicionadoIssqn != null)
        'DESCONTO_INCONDICIONADO_ISSQN': descontoIncondicionadoIssqn,
      if (descontoCondicionadoIssqn != null)
        'DESCONTO_CONDICIONADO_ISSQN': descontoCondicionadoIssqn,
      if (totalRetencaoIssqn != null)
        'TOTAL_RETENCAO_ISSQN': totalRetencaoIssqn,
      if (regimeEspecialTributacao != null)
        'REGIME_ESPECIAL_TRIBUTACAO': regimeEspecialTributacao,
      if (valorRetidoPis != null) 'VALOR_RETIDO_PIS': valorRetidoPis,
      if (valorRetidoCofins != null) 'VALOR_RETIDO_COFINS': valorRetidoCofins,
      if (valorRetidoCsll != null) 'VALOR_RETIDO_CSLL': valorRetidoCsll,
      if (baseCalculoIrrf != null) 'BASE_CALCULO_IRRF': baseCalculoIrrf,
      if (valorRetidoIrrf != null) 'VALOR_RETIDO_IRRF': valorRetidoIrrf,
      if (baseCalculoPrevidencia != null)
        'BASE_CALCULO_PREVIDENCIA': baseCalculoPrevidencia,
      if (valorRetidoPrevidencia != null)
        'VALOR_RETIDO_PREVIDENCIA': valorRetidoPrevidencia,
      if (informacoesAddFisco != null)
        'INFORMACOES_ADD_FISCO': informacoesAddFisco,
      if (informacoesAddContribuinte != null)
        'INFORMACOES_ADD_CONTRIBUINTE': informacoesAddContribuinte,
      if (comexUfEmbarque != null) 'COMEX_UF_EMBARQUE': comexUfEmbarque,
      if (comexLocalEmbarque != null)
        'COMEX_LOCAL_EMBARQUE': comexLocalEmbarque,
      if (comexLocalDespacho != null)
        'COMEX_LOCAL_DESPACHO': comexLocalDespacho,
      if (compraNotaEmpenho != null) 'COMPRA_NOTA_EMPENHO': compraNotaEmpenho,
      if (compraPedido != null) 'COMPRA_PEDIDO': compraPedido,
      if (compraContrato != null) 'COMPRA_CONTRATO': compraContrato,
      if (qrcode != null) 'QRCODE': qrcode,
      if (urlChave != null) 'URL_CHAVE': urlChave,
      if (statusNota != null) 'STATUS_NOTA': statusNota,
      if (idPdvVendaCabecalho != null)
        'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
    });
  }

  NfeCabecalhosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idTributOperacaoFiscal,
      Value<int?>? ufEmitente,
      Value<String?>? codigoNumerico,
      Value<String?>? naturezaOperacao,
      Value<String?>? codigoModelo,
      Value<String?>? serie,
      Value<String?>? numero,
      Value<DateTime?>? dataHoraEmissao,
      Value<DateTime?>? dataHoraEntradaSaida,
      Value<String?>? tipoOperacao,
      Value<String?>? localDestino,
      Value<int?>? codigoMunicipio,
      Value<String?>? formatoImpressaoDanfe,
      Value<String?>? tipoEmissao,
      Value<String?>? chaveAcesso,
      Value<String?>? digitoChaveAcesso,
      Value<String?>? ambiente,
      Value<String?>? finalidadeEmissao,
      Value<String?>? consumidorOperacao,
      Value<String?>? consumidorPresenca,
      Value<String?>? processoEmissao,
      Value<String?>? versaoProcessoEmissao,
      Value<DateTime?>? dataEntradaContingencia,
      Value<String?>? justificativaContingencia,
      Value<double?>? baseCalculoIcms,
      Value<double?>? valorIcms,
      Value<double?>? valorIcmsDesonerado,
      Value<double?>? totalIcmsFcpUfDestino,
      Value<double?>? totalIcmsInterestadualUfDestino,
      Value<double?>? totalIcmsInterestadualUfRemetente,
      Value<double?>? valorTotalFcp,
      Value<double?>? baseCalculoIcmsSt,
      Value<double?>? valorIcmsSt,
      Value<double?>? valorTotalFcpSt,
      Value<double?>? valorTotalFcpStRetido,
      Value<double?>? valorTotalProdutos,
      Value<double?>? valorFrete,
      Value<double?>? valorSeguro,
      Value<double?>? valorDesconto,
      Value<double?>? valorImpostoImportacao,
      Value<double?>? valorIpi,
      Value<double?>? valorIpiDevolvido,
      Value<double?>? valorPis,
      Value<double?>? valorCofins,
      Value<double?>? valorDespesasAcessorias,
      Value<double?>? valorTotal,
      Value<double?>? valorTotalTributos,
      Value<double?>? valorServicos,
      Value<double?>? baseCalculoIssqn,
      Value<double?>? valorIssqn,
      Value<double?>? valorPisIssqn,
      Value<double?>? valorCofinsIssqn,
      Value<DateTime?>? dataPrestacaoServico,
      Value<double?>? valorDeducaoIssqn,
      Value<double?>? outrasRetencoesIssqn,
      Value<double?>? descontoIncondicionadoIssqn,
      Value<double?>? descontoCondicionadoIssqn,
      Value<double?>? totalRetencaoIssqn,
      Value<String?>? regimeEspecialTributacao,
      Value<double?>? valorRetidoPis,
      Value<double?>? valorRetidoCofins,
      Value<double?>? valorRetidoCsll,
      Value<double?>? baseCalculoIrrf,
      Value<double?>? valorRetidoIrrf,
      Value<double?>? baseCalculoPrevidencia,
      Value<double?>? valorRetidoPrevidencia,
      Value<String?>? informacoesAddFisco,
      Value<String?>? informacoesAddContribuinte,
      Value<String?>? comexUfEmbarque,
      Value<String?>? comexLocalEmbarque,
      Value<String?>? comexLocalDespacho,
      Value<String?>? compraNotaEmpenho,
      Value<String?>? compraPedido,
      Value<String?>? compraContrato,
      Value<String?>? qrcode,
      Value<String?>? urlChave,
      Value<String?>? statusNota,
      Value<int?>? idPdvVendaCabecalho}) {
    return NfeCabecalhosCompanion(
      id: id ?? this.id,
      idTributOperacaoFiscal:
          idTributOperacaoFiscal ?? this.idTributOperacaoFiscal,
      ufEmitente: ufEmitente ?? this.ufEmitente,
      codigoNumerico: codigoNumerico ?? this.codigoNumerico,
      naturezaOperacao: naturezaOperacao ?? this.naturezaOperacao,
      codigoModelo: codigoModelo ?? this.codigoModelo,
      serie: serie ?? this.serie,
      numero: numero ?? this.numero,
      dataHoraEmissao: dataHoraEmissao ?? this.dataHoraEmissao,
      dataHoraEntradaSaida: dataHoraEntradaSaida ?? this.dataHoraEntradaSaida,
      tipoOperacao: tipoOperacao ?? this.tipoOperacao,
      localDestino: localDestino ?? this.localDestino,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      formatoImpressaoDanfe:
          formatoImpressaoDanfe ?? this.formatoImpressaoDanfe,
      tipoEmissao: tipoEmissao ?? this.tipoEmissao,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
      digitoChaveAcesso: digitoChaveAcesso ?? this.digitoChaveAcesso,
      ambiente: ambiente ?? this.ambiente,
      finalidadeEmissao: finalidadeEmissao ?? this.finalidadeEmissao,
      consumidorOperacao: consumidorOperacao ?? this.consumidorOperacao,
      consumidorPresenca: consumidorPresenca ?? this.consumidorPresenca,
      processoEmissao: processoEmissao ?? this.processoEmissao,
      versaoProcessoEmissao:
          versaoProcessoEmissao ?? this.versaoProcessoEmissao,
      dataEntradaContingencia:
          dataEntradaContingencia ?? this.dataEntradaContingencia,
      justificativaContingencia:
          justificativaContingencia ?? this.justificativaContingencia,
      baseCalculoIcms: baseCalculoIcms ?? this.baseCalculoIcms,
      valorIcms: valorIcms ?? this.valorIcms,
      valorIcmsDesonerado: valorIcmsDesonerado ?? this.valorIcmsDesonerado,
      totalIcmsFcpUfDestino:
          totalIcmsFcpUfDestino ?? this.totalIcmsFcpUfDestino,
      totalIcmsInterestadualUfDestino: totalIcmsInterestadualUfDestino ??
          this.totalIcmsInterestadualUfDestino,
      totalIcmsInterestadualUfRemetente: totalIcmsInterestadualUfRemetente ??
          this.totalIcmsInterestadualUfRemetente,
      valorTotalFcp: valorTotalFcp ?? this.valorTotalFcp,
      baseCalculoIcmsSt: baseCalculoIcmsSt ?? this.baseCalculoIcmsSt,
      valorIcmsSt: valorIcmsSt ?? this.valorIcmsSt,
      valorTotalFcpSt: valorTotalFcpSt ?? this.valorTotalFcpSt,
      valorTotalFcpStRetido:
          valorTotalFcpStRetido ?? this.valorTotalFcpStRetido,
      valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
      valorFrete: valorFrete ?? this.valorFrete,
      valorSeguro: valorSeguro ?? this.valorSeguro,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorImpostoImportacao:
          valorImpostoImportacao ?? this.valorImpostoImportacao,
      valorIpi: valorIpi ?? this.valorIpi,
      valorIpiDevolvido: valorIpiDevolvido ?? this.valorIpiDevolvido,
      valorPis: valorPis ?? this.valorPis,
      valorCofins: valorCofins ?? this.valorCofins,
      valorDespesasAcessorias:
          valorDespesasAcessorias ?? this.valorDespesasAcessorias,
      valorTotal: valorTotal ?? this.valorTotal,
      valorTotalTributos: valorTotalTributos ?? this.valorTotalTributos,
      valorServicos: valorServicos ?? this.valorServicos,
      baseCalculoIssqn: baseCalculoIssqn ?? this.baseCalculoIssqn,
      valorIssqn: valorIssqn ?? this.valorIssqn,
      valorPisIssqn: valorPisIssqn ?? this.valorPisIssqn,
      valorCofinsIssqn: valorCofinsIssqn ?? this.valorCofinsIssqn,
      dataPrestacaoServico: dataPrestacaoServico ?? this.dataPrestacaoServico,
      valorDeducaoIssqn: valorDeducaoIssqn ?? this.valorDeducaoIssqn,
      outrasRetencoesIssqn: outrasRetencoesIssqn ?? this.outrasRetencoesIssqn,
      descontoIncondicionadoIssqn:
          descontoIncondicionadoIssqn ?? this.descontoIncondicionadoIssqn,
      descontoCondicionadoIssqn:
          descontoCondicionadoIssqn ?? this.descontoCondicionadoIssqn,
      totalRetencaoIssqn: totalRetencaoIssqn ?? this.totalRetencaoIssqn,
      regimeEspecialTributacao:
          regimeEspecialTributacao ?? this.regimeEspecialTributacao,
      valorRetidoPis: valorRetidoPis ?? this.valorRetidoPis,
      valorRetidoCofins: valorRetidoCofins ?? this.valorRetidoCofins,
      valorRetidoCsll: valorRetidoCsll ?? this.valorRetidoCsll,
      baseCalculoIrrf: baseCalculoIrrf ?? this.baseCalculoIrrf,
      valorRetidoIrrf: valorRetidoIrrf ?? this.valorRetidoIrrf,
      baseCalculoPrevidencia:
          baseCalculoPrevidencia ?? this.baseCalculoPrevidencia,
      valorRetidoPrevidencia:
          valorRetidoPrevidencia ?? this.valorRetidoPrevidencia,
      informacoesAddFisco: informacoesAddFisco ?? this.informacoesAddFisco,
      informacoesAddContribuinte:
          informacoesAddContribuinte ?? this.informacoesAddContribuinte,
      comexUfEmbarque: comexUfEmbarque ?? this.comexUfEmbarque,
      comexLocalEmbarque: comexLocalEmbarque ?? this.comexLocalEmbarque,
      comexLocalDespacho: comexLocalDespacho ?? this.comexLocalDespacho,
      compraNotaEmpenho: compraNotaEmpenho ?? this.compraNotaEmpenho,
      compraPedido: compraPedido ?? this.compraPedido,
      compraContrato: compraContrato ?? this.compraContrato,
      qrcode: qrcode ?? this.qrcode,
      urlChave: urlChave ?? this.urlChave,
      statusNota: statusNota ?? this.statusNota,
      idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idTributOperacaoFiscal.present) {
      map['ID_TRIBUT_OPERACAO_FISCAL'] =
          Variable<int>(idTributOperacaoFiscal.value);
    }
    if (ufEmitente.present) {
      map['UF_EMITENTE'] = Variable<int>(ufEmitente.value);
    }
    if (codigoNumerico.present) {
      map['CODIGO_NUMERICO'] = Variable<String>(codigoNumerico.value);
    }
    if (naturezaOperacao.present) {
      map['NATUREZA_OPERACAO'] = Variable<String>(naturezaOperacao.value);
    }
    if (codigoModelo.present) {
      map['CODIGO_MODELO'] = Variable<String>(codigoModelo.value);
    }
    if (serie.present) {
      map['SERIE'] = Variable<String>(serie.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (dataHoraEmissao.present) {
      map['DATA_HORA_EMISSAO'] = Variable<DateTime>(dataHoraEmissao.value);
    }
    if (dataHoraEntradaSaida.present) {
      map['DATA_HORA_ENTRADA_SAIDA'] =
          Variable<DateTime>(dataHoraEntradaSaida.value);
    }
    if (tipoOperacao.present) {
      map['TIPO_OPERACAO'] = Variable<String>(tipoOperacao.value);
    }
    if (localDestino.present) {
      map['LOCAL_DESTINO'] = Variable<String>(localDestino.value);
    }
    if (codigoMunicipio.present) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio.value);
    }
    if (formatoImpressaoDanfe.present) {
      map['FORMATO_IMPRESSAO_DANFE'] =
          Variable<String>(formatoImpressaoDanfe.value);
    }
    if (tipoEmissao.present) {
      map['TIPO_EMISSAO'] = Variable<String>(tipoEmissao.value);
    }
    if (chaveAcesso.present) {
      map['CHAVE_ACESSO'] = Variable<String>(chaveAcesso.value);
    }
    if (digitoChaveAcesso.present) {
      map['DIGITO_CHAVE_ACESSO'] = Variable<String>(digitoChaveAcesso.value);
    }
    if (ambiente.present) {
      map['AMBIENTE'] = Variable<String>(ambiente.value);
    }
    if (finalidadeEmissao.present) {
      map['FINALIDADE_EMISSAO'] = Variable<String>(finalidadeEmissao.value);
    }
    if (consumidorOperacao.present) {
      map['CONSUMIDOR_OPERACAO'] = Variable<String>(consumidorOperacao.value);
    }
    if (consumidorPresenca.present) {
      map['CONSUMIDOR_PRESENCA'] = Variable<String>(consumidorPresenca.value);
    }
    if (processoEmissao.present) {
      map['PROCESSO_EMISSAO'] = Variable<String>(processoEmissao.value);
    }
    if (versaoProcessoEmissao.present) {
      map['VERSAO_PROCESSO_EMISSAO'] =
          Variable<String>(versaoProcessoEmissao.value);
    }
    if (dataEntradaContingencia.present) {
      map['DATA_ENTRADA_CONTINGENCIA'] =
          Variable<DateTime>(dataEntradaContingencia.value);
    }
    if (justificativaContingencia.present) {
      map['JUSTIFICATIVA_CONTINGENCIA'] =
          Variable<String>(justificativaContingencia.value);
    }
    if (baseCalculoIcms.present) {
      map['BASE_CALCULO_ICMS'] = Variable<double>(baseCalculoIcms.value);
    }
    if (valorIcms.present) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms.value);
    }
    if (valorIcmsDesonerado.present) {
      map['VALOR_ICMS_DESONERADO'] =
          Variable<double>(valorIcmsDesonerado.value);
    }
    if (totalIcmsFcpUfDestino.present) {
      map['TOTAL_ICMS_FCP_UF_DESTINO'] =
          Variable<double>(totalIcmsFcpUfDestino.value);
    }
    if (totalIcmsInterestadualUfDestino.present) {
      map['TOTAL_ICMS_INTERESTADUAL_UF_DESTINO'] =
          Variable<double>(totalIcmsInterestadualUfDestino.value);
    }
    if (totalIcmsInterestadualUfRemetente.present) {
      map['TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE'] =
          Variable<double>(totalIcmsInterestadualUfRemetente.value);
    }
    if (valorTotalFcp.present) {
      map['VALOR_TOTAL_FCP'] = Variable<double>(valorTotalFcp.value);
    }
    if (baseCalculoIcmsSt.present) {
      map['BASE_CALCULO_ICMS_ST'] = Variable<double>(baseCalculoIcmsSt.value);
    }
    if (valorIcmsSt.present) {
      map['VALOR_ICMS_ST'] = Variable<double>(valorIcmsSt.value);
    }
    if (valorTotalFcpSt.present) {
      map['VALOR_TOTAL_FCP_ST'] = Variable<double>(valorTotalFcpSt.value);
    }
    if (valorTotalFcpStRetido.present) {
      map['VALOR_TOTAL_FCP_ST_RETIDO'] =
          Variable<double>(valorTotalFcpStRetido.value);
    }
    if (valorTotalProdutos.present) {
      map['VALOR_TOTAL_PRODUTOS'] = Variable<double>(valorTotalProdutos.value);
    }
    if (valorFrete.present) {
      map['VALOR_FRETE'] = Variable<double>(valorFrete.value);
    }
    if (valorSeguro.present) {
      map['VALOR_SEGURO'] = Variable<double>(valorSeguro.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorImpostoImportacao.present) {
      map['VALOR_IMPOSTO_IMPORTACAO'] =
          Variable<double>(valorImpostoImportacao.value);
    }
    if (valorIpi.present) {
      map['VALOR_IPI'] = Variable<double>(valorIpi.value);
    }
    if (valorIpiDevolvido.present) {
      map['VALOR_IPI_DEVOLVIDO'] = Variable<double>(valorIpiDevolvido.value);
    }
    if (valorPis.present) {
      map['VALOR_PIS'] = Variable<double>(valorPis.value);
    }
    if (valorCofins.present) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins.value);
    }
    if (valorDespesasAcessorias.present) {
      map['VALOR_DESPESAS_ACESSORIAS'] =
          Variable<double>(valorDespesasAcessorias.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (valorTotalTributos.present) {
      map['VALOR_TOTAL_TRIBUTOS'] = Variable<double>(valorTotalTributos.value);
    }
    if (valorServicos.present) {
      map['VALOR_SERVICOS'] = Variable<double>(valorServicos.value);
    }
    if (baseCalculoIssqn.present) {
      map['BASE_CALCULO_ISSQN'] = Variable<double>(baseCalculoIssqn.value);
    }
    if (valorIssqn.present) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn.value);
    }
    if (valorPisIssqn.present) {
      map['VALOR_PIS_ISSQN'] = Variable<double>(valorPisIssqn.value);
    }
    if (valorCofinsIssqn.present) {
      map['VALOR_COFINS_ISSQN'] = Variable<double>(valorCofinsIssqn.value);
    }
    if (dataPrestacaoServico.present) {
      map['DATA_PRESTACAO_SERVICO'] =
          Variable<DateTime>(dataPrestacaoServico.value);
    }
    if (valorDeducaoIssqn.present) {
      map['VALOR_DEDUCAO_ISSQN'] = Variable<double>(valorDeducaoIssqn.value);
    }
    if (outrasRetencoesIssqn.present) {
      map['OUTRAS_RETENCOES_ISSQN'] =
          Variable<double>(outrasRetencoesIssqn.value);
    }
    if (descontoIncondicionadoIssqn.present) {
      map['DESCONTO_INCONDICIONADO_ISSQN'] =
          Variable<double>(descontoIncondicionadoIssqn.value);
    }
    if (descontoCondicionadoIssqn.present) {
      map['DESCONTO_CONDICIONADO_ISSQN'] =
          Variable<double>(descontoCondicionadoIssqn.value);
    }
    if (totalRetencaoIssqn.present) {
      map['TOTAL_RETENCAO_ISSQN'] = Variable<double>(totalRetencaoIssqn.value);
    }
    if (regimeEspecialTributacao.present) {
      map['REGIME_ESPECIAL_TRIBUTACAO'] =
          Variable<String>(regimeEspecialTributacao.value);
    }
    if (valorRetidoPis.present) {
      map['VALOR_RETIDO_PIS'] = Variable<double>(valorRetidoPis.value);
    }
    if (valorRetidoCofins.present) {
      map['VALOR_RETIDO_COFINS'] = Variable<double>(valorRetidoCofins.value);
    }
    if (valorRetidoCsll.present) {
      map['VALOR_RETIDO_CSLL'] = Variable<double>(valorRetidoCsll.value);
    }
    if (baseCalculoIrrf.present) {
      map['BASE_CALCULO_IRRF'] = Variable<double>(baseCalculoIrrf.value);
    }
    if (valorRetidoIrrf.present) {
      map['VALOR_RETIDO_IRRF'] = Variable<double>(valorRetidoIrrf.value);
    }
    if (baseCalculoPrevidencia.present) {
      map['BASE_CALCULO_PREVIDENCIA'] =
          Variable<double>(baseCalculoPrevidencia.value);
    }
    if (valorRetidoPrevidencia.present) {
      map['VALOR_RETIDO_PREVIDENCIA'] =
          Variable<double>(valorRetidoPrevidencia.value);
    }
    if (informacoesAddFisco.present) {
      map['INFORMACOES_ADD_FISCO'] =
          Variable<String>(informacoesAddFisco.value);
    }
    if (informacoesAddContribuinte.present) {
      map['INFORMACOES_ADD_CONTRIBUINTE'] =
          Variable<String>(informacoesAddContribuinte.value);
    }
    if (comexUfEmbarque.present) {
      map['COMEX_UF_EMBARQUE'] = Variable<String>(comexUfEmbarque.value);
    }
    if (comexLocalEmbarque.present) {
      map['COMEX_LOCAL_EMBARQUE'] = Variable<String>(comexLocalEmbarque.value);
    }
    if (comexLocalDespacho.present) {
      map['COMEX_LOCAL_DESPACHO'] = Variable<String>(comexLocalDespacho.value);
    }
    if (compraNotaEmpenho.present) {
      map['COMPRA_NOTA_EMPENHO'] = Variable<String>(compraNotaEmpenho.value);
    }
    if (compraPedido.present) {
      map['COMPRA_PEDIDO'] = Variable<String>(compraPedido.value);
    }
    if (compraContrato.present) {
      map['COMPRA_CONTRATO'] = Variable<String>(compraContrato.value);
    }
    if (qrcode.present) {
      map['QRCODE'] = Variable<String>(qrcode.value);
    }
    if (urlChave.present) {
      map['URL_CHAVE'] = Variable<String>(urlChave.value);
    }
    if (statusNota.present) {
      map['STATUS_NOTA'] = Variable<String>(statusNota.value);
    }
    if (idPdvVendaCabecalho.present) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCabecalhosCompanion(')
          ..write('id: $id, ')
          ..write('idTributOperacaoFiscal: $idTributOperacaoFiscal, ')
          ..write('ufEmitente: $ufEmitente, ')
          ..write('codigoNumerico: $codigoNumerico, ')
          ..write('naturezaOperacao: $naturezaOperacao, ')
          ..write('codigoModelo: $codigoModelo, ')
          ..write('serie: $serie, ')
          ..write('numero: $numero, ')
          ..write('dataHoraEmissao: $dataHoraEmissao, ')
          ..write('dataHoraEntradaSaida: $dataHoraEntradaSaida, ')
          ..write('tipoOperacao: $tipoOperacao, ')
          ..write('localDestino: $localDestino, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
          ..write('tipoEmissao: $tipoEmissao, ')
          ..write('chaveAcesso: $chaveAcesso, ')
          ..write('digitoChaveAcesso: $digitoChaveAcesso, ')
          ..write('ambiente: $ambiente, ')
          ..write('finalidadeEmissao: $finalidadeEmissao, ')
          ..write('consumidorOperacao: $consumidorOperacao, ')
          ..write('consumidorPresenca: $consumidorPresenca, ')
          ..write('processoEmissao: $processoEmissao, ')
          ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
          ..write('dataEntradaContingencia: $dataEntradaContingencia, ')
          ..write('justificativaContingencia: $justificativaContingencia, ')
          ..write('baseCalculoIcms: $baseCalculoIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('valorIcmsDesonerado: $valorIcmsDesonerado, ')
          ..write('totalIcmsFcpUfDestino: $totalIcmsFcpUfDestino, ')
          ..write(
              'totalIcmsInterestadualUfDestino: $totalIcmsInterestadualUfDestino, ')
          ..write(
              'totalIcmsInterestadualUfRemetente: $totalIcmsInterestadualUfRemetente, ')
          ..write('valorTotalFcp: $valorTotalFcp, ')
          ..write('baseCalculoIcmsSt: $baseCalculoIcmsSt, ')
          ..write('valorIcmsSt: $valorIcmsSt, ')
          ..write('valorTotalFcpSt: $valorTotalFcpSt, ')
          ..write('valorTotalFcpStRetido: $valorTotalFcpStRetido, ')
          ..write('valorTotalProdutos: $valorTotalProdutos, ')
          ..write('valorFrete: $valorFrete, ')
          ..write('valorSeguro: $valorSeguro, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorImpostoImportacao: $valorImpostoImportacao, ')
          ..write('valorIpi: $valorIpi, ')
          ..write('valorIpiDevolvido: $valorIpiDevolvido, ')
          ..write('valorPis: $valorPis, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('valorDespesasAcessorias: $valorDespesasAcessorias, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalTributos: $valorTotalTributos, ')
          ..write('valorServicos: $valorServicos, ')
          ..write('baseCalculoIssqn: $baseCalculoIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('valorPisIssqn: $valorPisIssqn, ')
          ..write('valorCofinsIssqn: $valorCofinsIssqn, ')
          ..write('dataPrestacaoServico: $dataPrestacaoServico, ')
          ..write('valorDeducaoIssqn: $valorDeducaoIssqn, ')
          ..write('outrasRetencoesIssqn: $outrasRetencoesIssqn, ')
          ..write('descontoIncondicionadoIssqn: $descontoIncondicionadoIssqn, ')
          ..write('descontoCondicionadoIssqn: $descontoCondicionadoIssqn, ')
          ..write('totalRetencaoIssqn: $totalRetencaoIssqn, ')
          ..write('regimeEspecialTributacao: $regimeEspecialTributacao, ')
          ..write('valorRetidoPis: $valorRetidoPis, ')
          ..write('valorRetidoCofins: $valorRetidoCofins, ')
          ..write('valorRetidoCsll: $valorRetidoCsll, ')
          ..write('baseCalculoIrrf: $baseCalculoIrrf, ')
          ..write('valorRetidoIrrf: $valorRetidoIrrf, ')
          ..write('baseCalculoPrevidencia: $baseCalculoPrevidencia, ')
          ..write('valorRetidoPrevidencia: $valorRetidoPrevidencia, ')
          ..write('informacoesAddFisco: $informacoesAddFisco, ')
          ..write('informacoesAddContribuinte: $informacoesAddContribuinte, ')
          ..write('comexUfEmbarque: $comexUfEmbarque, ')
          ..write('comexLocalEmbarque: $comexLocalEmbarque, ')
          ..write('comexLocalDespacho: $comexLocalDespacho, ')
          ..write('compraNotaEmpenho: $compraNotaEmpenho, ')
          ..write('compraPedido: $compraPedido, ')
          ..write('compraContrato: $compraContrato, ')
          ..write('qrcode: $qrcode, ')
          ..write('urlChave: $urlChave, ')
          ..write('statusNota: $statusNota, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho')
          ..write(')'))
        .toString();
  }
}

class $NfeCabecalhosTable extends NfeCabecalhos
    with TableInfo<$NfeCabecalhosTable, NfeCabecalho> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCabecalhosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idTributOperacaoFiscalMeta =
      const VerificationMeta('idTributOperacaoFiscal');
  @override
  late final GeneratedColumn<int> idTributOperacaoFiscal =
      GeneratedColumn<int>('ID_TRIBUT_OPERACAO_FISCAL', aliasedName, true,
          type: DriftSqlType.int,
          requiredDuringInsert: false,
          $customConstraints: 'NULLABLE REFERENCES TRIBUT_OPERACAO_FISCAL(ID)');
  final VerificationMeta _ufEmitenteMeta = const VerificationMeta('ufEmitente');
  @override
  late final GeneratedColumn<int> ufEmitente = GeneratedColumn<int>(
      'UF_EMITENTE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _codigoNumericoMeta =
      const VerificationMeta('codigoNumerico');
  @override
  late final GeneratedColumn<String> codigoNumerico = GeneratedColumn<String>(
      'CODIGO_NUMERICO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _naturezaOperacaoMeta =
      const VerificationMeta('naturezaOperacao');
  @override
  late final GeneratedColumn<String> naturezaOperacao =
      GeneratedColumn<String>('NATUREZA_OPERACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 60),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _codigoModeloMeta =
      const VerificationMeta('codigoModelo');
  @override
  late final GeneratedColumn<String> codigoModelo = GeneratedColumn<String>(
      'CODIGO_MODELO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _serieMeta = const VerificationMeta('serie');
  @override
  late final GeneratedColumn<String> serie = GeneratedColumn<String>(
      'SERIE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 3),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataHoraEmissaoMeta =
      const VerificationMeta('dataHoraEmissao');
  @override
  late final GeneratedColumn<DateTime> dataHoraEmissao =
      GeneratedColumn<DateTime>('DATA_HORA_EMISSAO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _dataHoraEntradaSaidaMeta =
      const VerificationMeta('dataHoraEntradaSaida');
  @override
  late final GeneratedColumn<DateTime> dataHoraEntradaSaida =
      GeneratedColumn<DateTime>('DATA_HORA_ENTRADA_SAIDA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _tipoOperacaoMeta =
      const VerificationMeta('tipoOperacao');
  @override
  late final GeneratedColumn<String> tipoOperacao = GeneratedColumn<String>(
      'TIPO_OPERACAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _localDestinoMeta =
      const VerificationMeta('localDestino');
  @override
  late final GeneratedColumn<String> localDestino = GeneratedColumn<String>(
      'LOCAL_DESTINO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoMunicipioMeta =
      const VerificationMeta('codigoMunicipio');
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
      'CODIGO_MUNICIPIO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _formatoImpressaoDanfeMeta =
      const VerificationMeta('formatoImpressaoDanfe');
  @override
  late final GeneratedColumn<String> formatoImpressaoDanfe =
      GeneratedColumn<String>('FORMATO_IMPRESSAO_DANFE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _tipoEmissaoMeta =
      const VerificationMeta('tipoEmissao');
  @override
  late final GeneratedColumn<String> tipoEmissao = GeneratedColumn<String>(
      'TIPO_EMISSAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _chaveAcessoMeta =
      const VerificationMeta('chaveAcesso');
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
      'CHAVE_ACESSO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 44),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _digitoChaveAcessoMeta =
      const VerificationMeta('digitoChaveAcesso');
  @override
  late final GeneratedColumn<String> digitoChaveAcesso =
      GeneratedColumn<String>('DIGITO_CHAVE_ACESSO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _ambienteMeta = const VerificationMeta('ambiente');
  @override
  late final GeneratedColumn<String> ambiente = GeneratedColumn<String>(
      'AMBIENTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _finalidadeEmissaoMeta =
      const VerificationMeta('finalidadeEmissao');
  @override
  late final GeneratedColumn<String> finalidadeEmissao =
      GeneratedColumn<String>('FINALIDADE_EMISSAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _consumidorOperacaoMeta =
      const VerificationMeta('consumidorOperacao');
  @override
  late final GeneratedColumn<String> consumidorOperacao =
      GeneratedColumn<String>(
          'CONSUMIDOR_OPERACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _consumidorPresencaMeta =
      const VerificationMeta('consumidorPresenca');
  @override
  late final GeneratedColumn<String> consumidorPresenca =
      GeneratedColumn<String>(
          'CONSUMIDOR_PRESENCA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _processoEmissaoMeta =
      const VerificationMeta('processoEmissao');
  @override
  late final GeneratedColumn<String> processoEmissao =
      GeneratedColumn<String>('PROCESSO_EMISSAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _versaoProcessoEmissaoMeta =
      const VerificationMeta('versaoProcessoEmissao');
  @override
  late final GeneratedColumn<String> versaoProcessoEmissao =
      GeneratedColumn<String>('VERSAO_PROCESSO_EMISSAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _dataEntradaContingenciaMeta =
      const VerificationMeta('dataEntradaContingencia');
  @override
  late final GeneratedColumn<DateTime> dataEntradaContingencia =
      GeneratedColumn<DateTime>('DATA_ENTRADA_CONTINGENCIA', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _justificativaContingenciaMeta =
      const VerificationMeta('justificativaContingencia');
  @override
  late final GeneratedColumn<String> justificativaContingencia =
      GeneratedColumn<String>('JUSTIFICATIVA_CONTINGENCIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 255),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _baseCalculoIcmsMeta =
      const VerificationMeta('baseCalculoIcms');
  @override
  late final GeneratedColumn<double> baseCalculoIcms =
      GeneratedColumn<double>('BASE_CALCULO_ICMS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
  @override
  late final GeneratedColumn<double> valorIcms = GeneratedColumn<double>(
      'VALOR_ICMS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsDesoneradoMeta =
      const VerificationMeta('valorIcmsDesonerado');
  @override
  late final GeneratedColumn<double> valorIcmsDesonerado =
      GeneratedColumn<double>('VALOR_ICMS_DESONERADO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalIcmsFcpUfDestinoMeta =
      const VerificationMeta('totalIcmsFcpUfDestino');
  @override
  late final GeneratedColumn<double> totalIcmsFcpUfDestino =
      GeneratedColumn<double>('TOTAL_ICMS_FCP_UF_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalIcmsInterestadualUfDestinoMeta =
      const VerificationMeta('totalIcmsInterestadualUfDestino');
  @override
  late final GeneratedColumn<double> totalIcmsInterestadualUfDestino =
      GeneratedColumn<double>(
          'TOTAL_ICMS_INTERESTADUAL_UF_DESTINO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalIcmsInterestadualUfRemetenteMeta =
      const VerificationMeta('totalIcmsInterestadualUfRemetente');
  @override
  late final GeneratedColumn<double> totalIcmsInterestadualUfRemetente =
      GeneratedColumn<double>(
          'TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalFcpMeta =
      const VerificationMeta('valorTotalFcp');
  @override
  late final GeneratedColumn<double> valorTotalFcp = GeneratedColumn<double>(
      'VALOR_TOTAL_FCP', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _baseCalculoIcmsStMeta =
      const VerificationMeta('baseCalculoIcmsSt');
  @override
  late final GeneratedColumn<double> baseCalculoIcmsSt =
      GeneratedColumn<double>('BASE_CALCULO_ICMS_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIcmsStMeta =
      const VerificationMeta('valorIcmsSt');
  @override
  late final GeneratedColumn<double> valorIcmsSt = GeneratedColumn<double>(
      'VALOR_ICMS_ST', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalFcpStMeta =
      const VerificationMeta('valorTotalFcpSt');
  @override
  late final GeneratedColumn<double> valorTotalFcpSt =
      GeneratedColumn<double>('VALOR_TOTAL_FCP_ST', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalFcpStRetidoMeta =
      const VerificationMeta('valorTotalFcpStRetido');
  @override
  late final GeneratedColumn<double> valorTotalFcpStRetido =
      GeneratedColumn<double>('VALOR_TOTAL_FCP_ST_RETIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalProdutosMeta =
      const VerificationMeta('valorTotalProdutos');
  @override
  late final GeneratedColumn<double> valorTotalProdutos =
      GeneratedColumn<double>('VALOR_TOTAL_PRODUTOS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorFreteMeta = const VerificationMeta('valorFrete');
  @override
  late final GeneratedColumn<double> valorFrete = GeneratedColumn<double>(
      'VALOR_FRETE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorSeguroMeta =
      const VerificationMeta('valorSeguro');
  @override
  late final GeneratedColumn<double> valorSeguro = GeneratedColumn<double>(
      'VALOR_SEGURO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  @override
  late final GeneratedColumn<double> valorDesconto = GeneratedColumn<double>(
      'VALOR_DESCONTO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorImpostoImportacaoMeta =
      const VerificationMeta('valorImpostoImportacao');
  @override
  late final GeneratedColumn<double> valorImpostoImportacao =
      GeneratedColumn<double>('VALOR_IMPOSTO_IMPORTACAO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIpiMeta = const VerificationMeta('valorIpi');
  @override
  late final GeneratedColumn<double> valorIpi = GeneratedColumn<double>(
      'VALOR_IPI', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIpiDevolvidoMeta =
      const VerificationMeta('valorIpiDevolvido');
  @override
  late final GeneratedColumn<double> valorIpiDevolvido =
      GeneratedColumn<double>('VALOR_IPI_DEVOLVIDO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
  @override
  late final GeneratedColumn<double> valorPis = GeneratedColumn<double>(
      'VALOR_PIS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCofinsMeta =
      const VerificationMeta('valorCofins');
  @override
  late final GeneratedColumn<double> valorCofins = GeneratedColumn<double>(
      'VALOR_COFINS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorDespesasAcessoriasMeta =
      const VerificationMeta('valorDespesasAcessorias');
  @override
  late final GeneratedColumn<double> valorDespesasAcessorias =
      GeneratedColumn<double>('VALOR_DESPESAS_ACESSORIAS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  @override
  late final GeneratedColumn<double> valorTotal = GeneratedColumn<double>(
      'VALOR_TOTAL', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalTributosMeta =
      const VerificationMeta('valorTotalTributos');
  @override
  late final GeneratedColumn<double> valorTotalTributos =
      GeneratedColumn<double>('VALOR_TOTAL_TRIBUTOS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorServicosMeta =
      const VerificationMeta('valorServicos');
  @override
  late final GeneratedColumn<double> valorServicos = GeneratedColumn<double>(
      'VALOR_SERVICOS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _baseCalculoIssqnMeta =
      const VerificationMeta('baseCalculoIssqn');
  @override
  late final GeneratedColumn<double> baseCalculoIssqn =
      GeneratedColumn<double>('BASE_CALCULO_ISSQN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
  @override
  late final GeneratedColumn<double> valorIssqn = GeneratedColumn<double>(
      'VALOR_ISSQN', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorPisIssqnMeta =
      const VerificationMeta('valorPisIssqn');
  @override
  late final GeneratedColumn<double> valorPisIssqn = GeneratedColumn<double>(
      'VALOR_PIS_ISSQN', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorCofinsIssqnMeta =
      const VerificationMeta('valorCofinsIssqn');
  @override
  late final GeneratedColumn<double> valorCofinsIssqn =
      GeneratedColumn<double>('VALOR_COFINS_ISSQN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _dataPrestacaoServicoMeta =
      const VerificationMeta('dataPrestacaoServico');
  @override
  late final GeneratedColumn<DateTime> dataPrestacaoServico =
      GeneratedColumn<DateTime>('DATA_PRESTACAO_SERVICO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _valorDeducaoIssqnMeta =
      const VerificationMeta('valorDeducaoIssqn');
  @override
  late final GeneratedColumn<double> valorDeducaoIssqn =
      GeneratedColumn<double>('VALOR_DEDUCAO_ISSQN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _outrasRetencoesIssqnMeta =
      const VerificationMeta('outrasRetencoesIssqn');
  @override
  late final GeneratedColumn<double> outrasRetencoesIssqn =
      GeneratedColumn<double>('OUTRAS_RETENCOES_ISSQN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _descontoIncondicionadoIssqnMeta =
      const VerificationMeta('descontoIncondicionadoIssqn');
  @override
  late final GeneratedColumn<double> descontoIncondicionadoIssqn =
      GeneratedColumn<double>(
          'DESCONTO_INCONDICIONADO_ISSQN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _descontoCondicionadoIssqnMeta =
      const VerificationMeta('descontoCondicionadoIssqn');
  @override
  late final GeneratedColumn<double> descontoCondicionadoIssqn =
      GeneratedColumn<double>('DESCONTO_CONDICIONADO_ISSQN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _totalRetencaoIssqnMeta =
      const VerificationMeta('totalRetencaoIssqn');
  @override
  late final GeneratedColumn<double> totalRetencaoIssqn =
      GeneratedColumn<double>('TOTAL_RETENCAO_ISSQN', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _regimeEspecialTributacaoMeta =
      const VerificationMeta('regimeEspecialTributacao');
  @override
  late final GeneratedColumn<String> regimeEspecialTributacao =
      GeneratedColumn<String>('REGIME_ESPECIAL_TRIBUTACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _valorRetidoPisMeta =
      const VerificationMeta('valorRetidoPis');
  @override
  late final GeneratedColumn<double> valorRetidoPis = GeneratedColumn<double>(
      'VALOR_RETIDO_PIS', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorRetidoCofinsMeta =
      const VerificationMeta('valorRetidoCofins');
  @override
  late final GeneratedColumn<double> valorRetidoCofins =
      GeneratedColumn<double>('VALOR_RETIDO_COFINS', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorRetidoCsllMeta =
      const VerificationMeta('valorRetidoCsll');
  @override
  late final GeneratedColumn<double> valorRetidoCsll =
      GeneratedColumn<double>('VALOR_RETIDO_CSLL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _baseCalculoIrrfMeta =
      const VerificationMeta('baseCalculoIrrf');
  @override
  late final GeneratedColumn<double> baseCalculoIrrf =
      GeneratedColumn<double>('BASE_CALCULO_IRRF', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorRetidoIrrfMeta =
      const VerificationMeta('valorRetidoIrrf');
  @override
  late final GeneratedColumn<double> valorRetidoIrrf =
      GeneratedColumn<double>('VALOR_RETIDO_IRRF', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _baseCalculoPrevidenciaMeta =
      const VerificationMeta('baseCalculoPrevidencia');
  @override
  late final GeneratedColumn<double> baseCalculoPrevidencia =
      GeneratedColumn<double>('BASE_CALCULO_PREVIDENCIA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorRetidoPrevidenciaMeta =
      const VerificationMeta('valorRetidoPrevidencia');
  @override
  late final GeneratedColumn<double> valorRetidoPrevidencia =
      GeneratedColumn<double>('VALOR_RETIDO_PREVIDENCIA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _informacoesAddFiscoMeta =
      const VerificationMeta('informacoesAddFisco');
  @override
  late final GeneratedColumn<String> informacoesAddFisco =
      GeneratedColumn<String>('INFORMACOES_ADD_FISCO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _informacoesAddContribuinteMeta =
      const VerificationMeta('informacoesAddContribuinte');
  @override
  late final GeneratedColumn<String> informacoesAddContribuinte =
      GeneratedColumn<String>(
          'INFORMACOES_ADD_CONTRIBUINTE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _comexUfEmbarqueMeta =
      const VerificationMeta('comexUfEmbarque');
  @override
  late final GeneratedColumn<String> comexUfEmbarque =
      GeneratedColumn<String>('COMEX_UF_EMBARQUE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _comexLocalEmbarqueMeta =
      const VerificationMeta('comexLocalEmbarque');
  @override
  late final GeneratedColumn<String> comexLocalEmbarque =
      GeneratedColumn<String>(
          'COMEX_LOCAL_EMBARQUE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 60),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _comexLocalDespachoMeta =
      const VerificationMeta('comexLocalDespacho');
  @override
  late final GeneratedColumn<String> comexLocalDespacho =
      GeneratedColumn<String>(
          'COMEX_LOCAL_DESPACHO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 60),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _compraNotaEmpenhoMeta =
      const VerificationMeta('compraNotaEmpenho');
  @override
  late final GeneratedColumn<String> compraNotaEmpenho =
      GeneratedColumn<String>('COMPRA_NOTA_EMPENHO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 22),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _compraPedidoMeta =
      const VerificationMeta('compraPedido');
  @override
  late final GeneratedColumn<String> compraPedido = GeneratedColumn<String>(
      'COMPRA_PEDIDO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _compraContratoMeta =
      const VerificationMeta('compraContrato');
  @override
  late final GeneratedColumn<String> compraContrato = GeneratedColumn<String>(
      'COMPRA_CONTRATO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _qrcodeMeta = const VerificationMeta('qrcode');
  @override
  late final GeneratedColumn<String> qrcode = GeneratedColumn<String>(
      'QRCODE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _urlChaveMeta = const VerificationMeta('urlChave');
  @override
  late final GeneratedColumn<String> urlChave = GeneratedColumn<String>(
      'URL_CHAVE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 85),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _statusNotaMeta = const VerificationMeta('statusNota');
  @override
  late final GeneratedColumn<String> statusNota = GeneratedColumn<String>(
      'STATUS_NOTA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _idPdvVendaCabecalhoMeta =
      const VerificationMeta('idPdvVendaCabecalho');
  @override
  late final GeneratedColumn<int> idPdvVendaCabecalho = GeneratedColumn<int>(
      'ID_PDV_VENDA_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idTributOperacaoFiscal,
        ufEmitente,
        codigoNumerico,
        naturezaOperacao,
        codigoModelo,
        serie,
        numero,
        dataHoraEmissao,
        dataHoraEntradaSaida,
        tipoOperacao,
        localDestino,
        codigoMunicipio,
        formatoImpressaoDanfe,
        tipoEmissao,
        chaveAcesso,
        digitoChaveAcesso,
        ambiente,
        finalidadeEmissao,
        consumidorOperacao,
        consumidorPresenca,
        processoEmissao,
        versaoProcessoEmissao,
        dataEntradaContingencia,
        justificativaContingencia,
        baseCalculoIcms,
        valorIcms,
        valorIcmsDesonerado,
        totalIcmsFcpUfDestino,
        totalIcmsInterestadualUfDestino,
        totalIcmsInterestadualUfRemetente,
        valorTotalFcp,
        baseCalculoIcmsSt,
        valorIcmsSt,
        valorTotalFcpSt,
        valorTotalFcpStRetido,
        valorTotalProdutos,
        valorFrete,
        valorSeguro,
        valorDesconto,
        valorImpostoImportacao,
        valorIpi,
        valorIpiDevolvido,
        valorPis,
        valorCofins,
        valorDespesasAcessorias,
        valorTotal,
        valorTotalTributos,
        valorServicos,
        baseCalculoIssqn,
        valorIssqn,
        valorPisIssqn,
        valorCofinsIssqn,
        dataPrestacaoServico,
        valorDeducaoIssqn,
        outrasRetencoesIssqn,
        descontoIncondicionadoIssqn,
        descontoCondicionadoIssqn,
        totalRetencaoIssqn,
        regimeEspecialTributacao,
        valorRetidoPis,
        valorRetidoCofins,
        valorRetidoCsll,
        baseCalculoIrrf,
        valorRetidoIrrf,
        baseCalculoPrevidencia,
        valorRetidoPrevidencia,
        informacoesAddFisco,
        informacoesAddContribuinte,
        comexUfEmbarque,
        comexLocalEmbarque,
        comexLocalDespacho,
        compraNotaEmpenho,
        compraPedido,
        compraContrato,
        qrcode,
        urlChave,
        statusNota,
        idPdvVendaCabecalho
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_CABECALHO';
  @override
  String get actualTableName => 'NFE_CABECALHO';
  @override
  VerificationContext validateIntegrity(Insertable<NfeCabecalho> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_TRIBUT_OPERACAO_FISCAL')) {
      context.handle(
          _idTributOperacaoFiscalMeta,
          idTributOperacaoFiscal.isAcceptableOrUnknown(
              data['ID_TRIBUT_OPERACAO_FISCAL']!, _idTributOperacaoFiscalMeta));
    }
    if (data.containsKey('UF_EMITENTE')) {
      context.handle(
          _ufEmitenteMeta,
          ufEmitente.isAcceptableOrUnknown(
              data['UF_EMITENTE']!, _ufEmitenteMeta));
    }
    if (data.containsKey('CODIGO_NUMERICO')) {
      context.handle(
          _codigoNumericoMeta,
          codigoNumerico.isAcceptableOrUnknown(
              data['CODIGO_NUMERICO']!, _codigoNumericoMeta));
    }
    if (data.containsKey('NATUREZA_OPERACAO')) {
      context.handle(
          _naturezaOperacaoMeta,
          naturezaOperacao.isAcceptableOrUnknown(
              data['NATUREZA_OPERACAO']!, _naturezaOperacaoMeta));
    }
    if (data.containsKey('CODIGO_MODELO')) {
      context.handle(
          _codigoModeloMeta,
          codigoModelo.isAcceptableOrUnknown(
              data['CODIGO_MODELO']!, _codigoModeloMeta));
    }
    if (data.containsKey('SERIE')) {
      context.handle(
          _serieMeta, serie.isAcceptableOrUnknown(data['SERIE']!, _serieMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('DATA_HORA_EMISSAO')) {
      context.handle(
          _dataHoraEmissaoMeta,
          dataHoraEmissao.isAcceptableOrUnknown(
              data['DATA_HORA_EMISSAO']!, _dataHoraEmissaoMeta));
    }
    if (data.containsKey('DATA_HORA_ENTRADA_SAIDA')) {
      context.handle(
          _dataHoraEntradaSaidaMeta,
          dataHoraEntradaSaida.isAcceptableOrUnknown(
              data['DATA_HORA_ENTRADA_SAIDA']!, _dataHoraEntradaSaidaMeta));
    }
    if (data.containsKey('TIPO_OPERACAO')) {
      context.handle(
          _tipoOperacaoMeta,
          tipoOperacao.isAcceptableOrUnknown(
              data['TIPO_OPERACAO']!, _tipoOperacaoMeta));
    }
    if (data.containsKey('LOCAL_DESTINO')) {
      context.handle(
          _localDestinoMeta,
          localDestino.isAcceptableOrUnknown(
              data['LOCAL_DESTINO']!, _localDestinoMeta));
    }
    if (data.containsKey('CODIGO_MUNICIPIO')) {
      context.handle(
          _codigoMunicipioMeta,
          codigoMunicipio.isAcceptableOrUnknown(
              data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
    }
    if (data.containsKey('FORMATO_IMPRESSAO_DANFE')) {
      context.handle(
          _formatoImpressaoDanfeMeta,
          formatoImpressaoDanfe.isAcceptableOrUnknown(
              data['FORMATO_IMPRESSAO_DANFE']!, _formatoImpressaoDanfeMeta));
    }
    if (data.containsKey('TIPO_EMISSAO')) {
      context.handle(
          _tipoEmissaoMeta,
          tipoEmissao.isAcceptableOrUnknown(
              data['TIPO_EMISSAO']!, _tipoEmissaoMeta));
    }
    if (data.containsKey('CHAVE_ACESSO')) {
      context.handle(
          _chaveAcessoMeta,
          chaveAcesso.isAcceptableOrUnknown(
              data['CHAVE_ACESSO']!, _chaveAcessoMeta));
    }
    if (data.containsKey('DIGITO_CHAVE_ACESSO')) {
      context.handle(
          _digitoChaveAcessoMeta,
          digitoChaveAcesso.isAcceptableOrUnknown(
              data['DIGITO_CHAVE_ACESSO']!, _digitoChaveAcessoMeta));
    }
    if (data.containsKey('AMBIENTE')) {
      context.handle(_ambienteMeta,
          ambiente.isAcceptableOrUnknown(data['AMBIENTE']!, _ambienteMeta));
    }
    if (data.containsKey('FINALIDADE_EMISSAO')) {
      context.handle(
          _finalidadeEmissaoMeta,
          finalidadeEmissao.isAcceptableOrUnknown(
              data['FINALIDADE_EMISSAO']!, _finalidadeEmissaoMeta));
    }
    if (data.containsKey('CONSUMIDOR_OPERACAO')) {
      context.handle(
          _consumidorOperacaoMeta,
          consumidorOperacao.isAcceptableOrUnknown(
              data['CONSUMIDOR_OPERACAO']!, _consumidorOperacaoMeta));
    }
    if (data.containsKey('CONSUMIDOR_PRESENCA')) {
      context.handle(
          _consumidorPresencaMeta,
          consumidorPresenca.isAcceptableOrUnknown(
              data['CONSUMIDOR_PRESENCA']!, _consumidorPresencaMeta));
    }
    if (data.containsKey('PROCESSO_EMISSAO')) {
      context.handle(
          _processoEmissaoMeta,
          processoEmissao.isAcceptableOrUnknown(
              data['PROCESSO_EMISSAO']!, _processoEmissaoMeta));
    }
    if (data.containsKey('VERSAO_PROCESSO_EMISSAO')) {
      context.handle(
          _versaoProcessoEmissaoMeta,
          versaoProcessoEmissao.isAcceptableOrUnknown(
              data['VERSAO_PROCESSO_EMISSAO']!, _versaoProcessoEmissaoMeta));
    }
    if (data.containsKey('DATA_ENTRADA_CONTINGENCIA')) {
      context.handle(
          _dataEntradaContingenciaMeta,
          dataEntradaContingencia.isAcceptableOrUnknown(
              data['DATA_ENTRADA_CONTINGENCIA']!,
              _dataEntradaContingenciaMeta));
    }
    if (data.containsKey('JUSTIFICATIVA_CONTINGENCIA')) {
      context.handle(
          _justificativaContingenciaMeta,
          justificativaContingencia.isAcceptableOrUnknown(
              data['JUSTIFICATIVA_CONTINGENCIA']!,
              _justificativaContingenciaMeta));
    }
    if (data.containsKey('BASE_CALCULO_ICMS')) {
      context.handle(
          _baseCalculoIcmsMeta,
          baseCalculoIcms.isAcceptableOrUnknown(
              data['BASE_CALCULO_ICMS']!, _baseCalculoIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS')) {
      context.handle(_valorIcmsMeta,
          valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS']!, _valorIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS_DESONERADO')) {
      context.handle(
          _valorIcmsDesoneradoMeta,
          valorIcmsDesonerado.isAcceptableOrUnknown(
              data['VALOR_ICMS_DESONERADO']!, _valorIcmsDesoneradoMeta));
    }
    if (data.containsKey('TOTAL_ICMS_FCP_UF_DESTINO')) {
      context.handle(
          _totalIcmsFcpUfDestinoMeta,
          totalIcmsFcpUfDestino.isAcceptableOrUnknown(
              data['TOTAL_ICMS_FCP_UF_DESTINO']!, _totalIcmsFcpUfDestinoMeta));
    }
    if (data.containsKey('TOTAL_ICMS_INTERESTADUAL_UF_DESTINO')) {
      context.handle(
          _totalIcmsInterestadualUfDestinoMeta,
          totalIcmsInterestadualUfDestino.isAcceptableOrUnknown(
              data['TOTAL_ICMS_INTERESTADUAL_UF_DESTINO']!,
              _totalIcmsInterestadualUfDestinoMeta));
    }
    if (data.containsKey('TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE')) {
      context.handle(
          _totalIcmsInterestadualUfRemetenteMeta,
          totalIcmsInterestadualUfRemetente.isAcceptableOrUnknown(
              data['TOTAL_ICMS_INTERESTADUAL_UF_REMETENTE']!,
              _totalIcmsInterestadualUfRemetenteMeta));
    }
    if (data.containsKey('VALOR_TOTAL_FCP')) {
      context.handle(
          _valorTotalFcpMeta,
          valorTotalFcp.isAcceptableOrUnknown(
              data['VALOR_TOTAL_FCP']!, _valorTotalFcpMeta));
    }
    if (data.containsKey('BASE_CALCULO_ICMS_ST')) {
      context.handle(
          _baseCalculoIcmsStMeta,
          baseCalculoIcmsSt.isAcceptableOrUnknown(
              data['BASE_CALCULO_ICMS_ST']!, _baseCalculoIcmsStMeta));
    }
    if (data.containsKey('VALOR_ICMS_ST')) {
      context.handle(
          _valorIcmsStMeta,
          valorIcmsSt.isAcceptableOrUnknown(
              data['VALOR_ICMS_ST']!, _valorIcmsStMeta));
    }
    if (data.containsKey('VALOR_TOTAL_FCP_ST')) {
      context.handle(
          _valorTotalFcpStMeta,
          valorTotalFcpSt.isAcceptableOrUnknown(
              data['VALOR_TOTAL_FCP_ST']!, _valorTotalFcpStMeta));
    }
    if (data.containsKey('VALOR_TOTAL_FCP_ST_RETIDO')) {
      context.handle(
          _valorTotalFcpStRetidoMeta,
          valorTotalFcpStRetido.isAcceptableOrUnknown(
              data['VALOR_TOTAL_FCP_ST_RETIDO']!, _valorTotalFcpStRetidoMeta));
    }
    if (data.containsKey('VALOR_TOTAL_PRODUTOS')) {
      context.handle(
          _valorTotalProdutosMeta,
          valorTotalProdutos.isAcceptableOrUnknown(
              data['VALOR_TOTAL_PRODUTOS']!, _valorTotalProdutosMeta));
    }
    if (data.containsKey('VALOR_FRETE')) {
      context.handle(
          _valorFreteMeta,
          valorFrete.isAcceptableOrUnknown(
              data['VALOR_FRETE']!, _valorFreteMeta));
    }
    if (data.containsKey('VALOR_SEGURO')) {
      context.handle(
          _valorSeguroMeta,
          valorSeguro.isAcceptableOrUnknown(
              data['VALOR_SEGURO']!, _valorSeguroMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO']!, _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_IMPOSTO_IMPORTACAO')) {
      context.handle(
          _valorImpostoImportacaoMeta,
          valorImpostoImportacao.isAcceptableOrUnknown(
              data['VALOR_IMPOSTO_IMPORTACAO']!, _valorImpostoImportacaoMeta));
    }
    if (data.containsKey('VALOR_IPI')) {
      context.handle(_valorIpiMeta,
          valorIpi.isAcceptableOrUnknown(data['VALOR_IPI']!, _valorIpiMeta));
    }
    if (data.containsKey('VALOR_IPI_DEVOLVIDO')) {
      context.handle(
          _valorIpiDevolvidoMeta,
          valorIpiDevolvido.isAcceptableOrUnknown(
              data['VALOR_IPI_DEVOLVIDO']!, _valorIpiDevolvidoMeta));
    }
    if (data.containsKey('VALOR_PIS')) {
      context.handle(_valorPisMeta,
          valorPis.isAcceptableOrUnknown(data['VALOR_PIS']!, _valorPisMeta));
    }
    if (data.containsKey('VALOR_COFINS')) {
      context.handle(
          _valorCofinsMeta,
          valorCofins.isAcceptableOrUnknown(
              data['VALOR_COFINS']!, _valorCofinsMeta));
    }
    if (data.containsKey('VALOR_DESPESAS_ACESSORIAS')) {
      context.handle(
          _valorDespesasAcessoriasMeta,
          valorDespesasAcessorias.isAcceptableOrUnknown(
              data['VALOR_DESPESAS_ACESSORIAS']!,
              _valorDespesasAcessoriasMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL']!, _valorTotalMeta));
    }
    if (data.containsKey('VALOR_TOTAL_TRIBUTOS')) {
      context.handle(
          _valorTotalTributosMeta,
          valorTotalTributos.isAcceptableOrUnknown(
              data['VALOR_TOTAL_TRIBUTOS']!, _valorTotalTributosMeta));
    }
    if (data.containsKey('VALOR_SERVICOS')) {
      context.handle(
          _valorServicosMeta,
          valorServicos.isAcceptableOrUnknown(
              data['VALOR_SERVICOS']!, _valorServicosMeta));
    }
    if (data.containsKey('BASE_CALCULO_ISSQN')) {
      context.handle(
          _baseCalculoIssqnMeta,
          baseCalculoIssqn.isAcceptableOrUnknown(
              data['BASE_CALCULO_ISSQN']!, _baseCalculoIssqnMeta));
    }
    if (data.containsKey('VALOR_ISSQN')) {
      context.handle(
          _valorIssqnMeta,
          valorIssqn.isAcceptableOrUnknown(
              data['VALOR_ISSQN']!, _valorIssqnMeta));
    }
    if (data.containsKey('VALOR_PIS_ISSQN')) {
      context.handle(
          _valorPisIssqnMeta,
          valorPisIssqn.isAcceptableOrUnknown(
              data['VALOR_PIS_ISSQN']!, _valorPisIssqnMeta));
    }
    if (data.containsKey('VALOR_COFINS_ISSQN')) {
      context.handle(
          _valorCofinsIssqnMeta,
          valorCofinsIssqn.isAcceptableOrUnknown(
              data['VALOR_COFINS_ISSQN']!, _valorCofinsIssqnMeta));
    }
    if (data.containsKey('DATA_PRESTACAO_SERVICO')) {
      context.handle(
          _dataPrestacaoServicoMeta,
          dataPrestacaoServico.isAcceptableOrUnknown(
              data['DATA_PRESTACAO_SERVICO']!, _dataPrestacaoServicoMeta));
    }
    if (data.containsKey('VALOR_DEDUCAO_ISSQN')) {
      context.handle(
          _valorDeducaoIssqnMeta,
          valorDeducaoIssqn.isAcceptableOrUnknown(
              data['VALOR_DEDUCAO_ISSQN']!, _valorDeducaoIssqnMeta));
    }
    if (data.containsKey('OUTRAS_RETENCOES_ISSQN')) {
      context.handle(
          _outrasRetencoesIssqnMeta,
          outrasRetencoesIssqn.isAcceptableOrUnknown(
              data['OUTRAS_RETENCOES_ISSQN']!, _outrasRetencoesIssqnMeta));
    }
    if (data.containsKey('DESCONTO_INCONDICIONADO_ISSQN')) {
      context.handle(
          _descontoIncondicionadoIssqnMeta,
          descontoIncondicionadoIssqn.isAcceptableOrUnknown(
              data['DESCONTO_INCONDICIONADO_ISSQN']!,
              _descontoIncondicionadoIssqnMeta));
    }
    if (data.containsKey('DESCONTO_CONDICIONADO_ISSQN')) {
      context.handle(
          _descontoCondicionadoIssqnMeta,
          descontoCondicionadoIssqn.isAcceptableOrUnknown(
              data['DESCONTO_CONDICIONADO_ISSQN']!,
              _descontoCondicionadoIssqnMeta));
    }
    if (data.containsKey('TOTAL_RETENCAO_ISSQN')) {
      context.handle(
          _totalRetencaoIssqnMeta,
          totalRetencaoIssqn.isAcceptableOrUnknown(
              data['TOTAL_RETENCAO_ISSQN']!, _totalRetencaoIssqnMeta));
    }
    if (data.containsKey('REGIME_ESPECIAL_TRIBUTACAO')) {
      context.handle(
          _regimeEspecialTributacaoMeta,
          regimeEspecialTributacao.isAcceptableOrUnknown(
              data['REGIME_ESPECIAL_TRIBUTACAO']!,
              _regimeEspecialTributacaoMeta));
    }
    if (data.containsKey('VALOR_RETIDO_PIS')) {
      context.handle(
          _valorRetidoPisMeta,
          valorRetidoPis.isAcceptableOrUnknown(
              data['VALOR_RETIDO_PIS']!, _valorRetidoPisMeta));
    }
    if (data.containsKey('VALOR_RETIDO_COFINS')) {
      context.handle(
          _valorRetidoCofinsMeta,
          valorRetidoCofins.isAcceptableOrUnknown(
              data['VALOR_RETIDO_COFINS']!, _valorRetidoCofinsMeta));
    }
    if (data.containsKey('VALOR_RETIDO_CSLL')) {
      context.handle(
          _valorRetidoCsllMeta,
          valorRetidoCsll.isAcceptableOrUnknown(
              data['VALOR_RETIDO_CSLL']!, _valorRetidoCsllMeta));
    }
    if (data.containsKey('BASE_CALCULO_IRRF')) {
      context.handle(
          _baseCalculoIrrfMeta,
          baseCalculoIrrf.isAcceptableOrUnknown(
              data['BASE_CALCULO_IRRF']!, _baseCalculoIrrfMeta));
    }
    if (data.containsKey('VALOR_RETIDO_IRRF')) {
      context.handle(
          _valorRetidoIrrfMeta,
          valorRetidoIrrf.isAcceptableOrUnknown(
              data['VALOR_RETIDO_IRRF']!, _valorRetidoIrrfMeta));
    }
    if (data.containsKey('BASE_CALCULO_PREVIDENCIA')) {
      context.handle(
          _baseCalculoPrevidenciaMeta,
          baseCalculoPrevidencia.isAcceptableOrUnknown(
              data['BASE_CALCULO_PREVIDENCIA']!, _baseCalculoPrevidenciaMeta));
    }
    if (data.containsKey('VALOR_RETIDO_PREVIDENCIA')) {
      context.handle(
          _valorRetidoPrevidenciaMeta,
          valorRetidoPrevidencia.isAcceptableOrUnknown(
              data['VALOR_RETIDO_PREVIDENCIA']!, _valorRetidoPrevidenciaMeta));
    }
    if (data.containsKey('INFORMACOES_ADD_FISCO')) {
      context.handle(
          _informacoesAddFiscoMeta,
          informacoesAddFisco.isAcceptableOrUnknown(
              data['INFORMACOES_ADD_FISCO']!, _informacoesAddFiscoMeta));
    }
    if (data.containsKey('INFORMACOES_ADD_CONTRIBUINTE')) {
      context.handle(
          _informacoesAddContribuinteMeta,
          informacoesAddContribuinte.isAcceptableOrUnknown(
              data['INFORMACOES_ADD_CONTRIBUINTE']!,
              _informacoesAddContribuinteMeta));
    }
    if (data.containsKey('COMEX_UF_EMBARQUE')) {
      context.handle(
          _comexUfEmbarqueMeta,
          comexUfEmbarque.isAcceptableOrUnknown(
              data['COMEX_UF_EMBARQUE']!, _comexUfEmbarqueMeta));
    }
    if (data.containsKey('COMEX_LOCAL_EMBARQUE')) {
      context.handle(
          _comexLocalEmbarqueMeta,
          comexLocalEmbarque.isAcceptableOrUnknown(
              data['COMEX_LOCAL_EMBARQUE']!, _comexLocalEmbarqueMeta));
    }
    if (data.containsKey('COMEX_LOCAL_DESPACHO')) {
      context.handle(
          _comexLocalDespachoMeta,
          comexLocalDespacho.isAcceptableOrUnknown(
              data['COMEX_LOCAL_DESPACHO']!, _comexLocalDespachoMeta));
    }
    if (data.containsKey('COMPRA_NOTA_EMPENHO')) {
      context.handle(
          _compraNotaEmpenhoMeta,
          compraNotaEmpenho.isAcceptableOrUnknown(
              data['COMPRA_NOTA_EMPENHO']!, _compraNotaEmpenhoMeta));
    }
    if (data.containsKey('COMPRA_PEDIDO')) {
      context.handle(
          _compraPedidoMeta,
          compraPedido.isAcceptableOrUnknown(
              data['COMPRA_PEDIDO']!, _compraPedidoMeta));
    }
    if (data.containsKey('COMPRA_CONTRATO')) {
      context.handle(
          _compraContratoMeta,
          compraContrato.isAcceptableOrUnknown(
              data['COMPRA_CONTRATO']!, _compraContratoMeta));
    }
    if (data.containsKey('QRCODE')) {
      context.handle(_qrcodeMeta,
          qrcode.isAcceptableOrUnknown(data['QRCODE']!, _qrcodeMeta));
    }
    if (data.containsKey('URL_CHAVE')) {
      context.handle(_urlChaveMeta,
          urlChave.isAcceptableOrUnknown(data['URL_CHAVE']!, _urlChaveMeta));
    }
    if (data.containsKey('STATUS_NOTA')) {
      context.handle(
          _statusNotaMeta,
          statusNota.isAcceptableOrUnknown(
              data['STATUS_NOTA']!, _statusNotaMeta));
    }
    if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
      context.handle(
          _idPdvVendaCabecalhoMeta,
          idPdvVendaCabecalho.isAcceptableOrUnknown(
              data['ID_PDV_VENDA_CABECALHO']!, _idPdvVendaCabecalhoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCabecalho map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeCabecalho.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeCabecalhosTable createAlias(String alias) {
    return $NfeCabecalhosTable(attachedDatabase, alias);
  }
}

class NfeCana extends DataClass implements Insertable<NfeCana> {
  final int? id;
  final int? idNfeCabecalho;
  final String? safra;
  final String? mesAnoReferencia;
  NfeCana({this.id, this.idNfeCabecalho, this.safra, this.mesAnoReferencia});
  factory NfeCana.fromData(Map<String, dynamic> data, {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeCana(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      safra: ValueSqlType.stringType(data['${effectivePrefix}SAFRA']),
      mesAnoReferencia: ValueSqlType.stringType(
          data['${effectivePrefix}MES_ANO_REFERENCIA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || safra != null) {
      map['SAFRA'] = Variable<String>(safra);
    }
    if (!nullToAbsent || mesAnoReferencia != null) {
      map['MES_ANO_REFERENCIA'] = Variable<String>(mesAnoReferencia);
    }
    return map;
  }

  NfeCanasCompanion toCompanion(bool nullToAbsent) {
    return NfeCanasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      safra:
          safra == null && nullToAbsent ? const Value.absent() : Value(safra),
      mesAnoReferencia: mesAnoReferencia == null && nullToAbsent
          ? const Value.absent()
          : Value(mesAnoReferencia),
    );
  }

  factory NfeCana.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCana(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      safra: serializer.fromJson<String?>(json['safra']),
      mesAnoReferencia: serializer.fromJson<String?>(json['mesAnoReferencia']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'safra': serializer.toJson<String?>(safra),
      'mesAnoReferencia': serializer.toJson<String?>(mesAnoReferencia),
    };
  }

  NfeCana copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? safra,
          String? mesAnoReferencia}) =>
      NfeCana(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        safra: safra ?? this.safra,
        mesAnoReferencia: mesAnoReferencia ?? this.mesAnoReferencia,
      );
  @override
  String toString() {
    return (StringBuffer('NfeCana(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('safra: $safra, ')
          ..write('mesAnoReferencia: $mesAnoReferencia')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, safra, mesAnoReferencia);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCana &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.safra == this.safra &&
          other.mesAnoReferencia == this.mesAnoReferencia);
}

class NfeCanasCompanion extends UpdateCompanion<NfeCana> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> safra;
  final Value<String?> mesAnoReferencia;
  const NfeCanasCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.safra = const Value.absent(),
    this.mesAnoReferencia = const Value.absent(),
  });
  NfeCanasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.safra = const Value.absent(),
    this.mesAnoReferencia = const Value.absent(),
  });
  static Insertable<NfeCana> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? safra,
    Expression<String>? mesAnoReferencia,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (safra != null) 'SAFRA': safra,
      if (mesAnoReferencia != null) 'MES_ANO_REFERENCIA': mesAnoReferencia,
    });
  }

  NfeCanasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? safra,
      Value<String?>? mesAnoReferencia}) {
    return NfeCanasCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      safra: safra ?? this.safra,
      mesAnoReferencia: mesAnoReferencia ?? this.mesAnoReferencia,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (safra.present) {
      map['SAFRA'] = Variable<String>(safra.value);
    }
    if (mesAnoReferencia.present) {
      map['MES_ANO_REFERENCIA'] = Variable<String>(mesAnoReferencia.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCanasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('safra: $safra, ')
          ..write('mesAnoReferencia: $mesAnoReferencia')
          ..write(')'))
        .toString();
  }
}

class $NfeCanasTable extends NfeCanas with TableInfo<$NfeCanasTable, NfeCana> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCanasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _safraMeta = const VerificationMeta('safra');
  @override
  late final GeneratedColumn<String> safra = GeneratedColumn<String>(
      'SAFRA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 9),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _mesAnoReferenciaMeta =
      const VerificationMeta('mesAnoReferencia');
  @override
  late final GeneratedColumn<String> mesAnoReferencia =
      GeneratedColumn<String>('MES_ANO_REFERENCIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 7),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeCabecalho, safra, mesAnoReferencia];
  @override
  String get aliasedName => _alias ?? 'NFE_CANA';
  @override
  String get actualTableName => 'NFE_CANA';
  @override
  VerificationContext validateIntegrity(Insertable<NfeCana> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('SAFRA')) {
      context.handle(
          _safraMeta, safra.isAcceptableOrUnknown(data['SAFRA']!, _safraMeta));
    }
    if (data.containsKey('MES_ANO_REFERENCIA')) {
      context.handle(
          _mesAnoReferenciaMeta,
          mesAnoReferencia.isAcceptableOrUnknown(
              data['MES_ANO_REFERENCIA']!, _mesAnoReferenciaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCana map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeCana.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeCanasTable createAlias(String alias) {
    return $NfeCanasTable(attachedDatabase, alias);
  }
}

class NfeCanaDeducoesSafra extends DataClass
    implements Insertable<NfeCanaDeducoesSafra> {
  final int? id;
  final int? idNfeCana;
  final String? decricao;
  final double? valorDeducao;
  final double? valorFornecimento;
  final double? valorTotalDeducao;
  final double? valorLiquidoFornecimento;
  NfeCanaDeducoesSafra(
      {this.id,
      this.idNfeCana,
      this.decricao,
      this.valorDeducao,
      this.valorFornecimento,
      this.valorTotalDeducao,
      this.valorLiquidoFornecimento});
  factory NfeCanaDeducoesSafra.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeCanaDeducoesSafra(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCana: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CANA']),
      decricao: ValueSqlType.stringType(data['${effectivePrefix}DECRICAO']),
      valorDeducao: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_DEDUCAO']),
      valorFornecimento: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_FORNECIMENTO']),
      valorTotalDeducao: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_TOTAL_DEDUCAO']),
      valorLiquidoFornecimento: ValueSqlType.doubleType(
          data['${effectivePrefix}VALOR_LIQUIDO_FORNECIMENTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCana != null) {
      map['ID_NFE_CANA'] = Variable<int>(idNfeCana);
    }
    if (!nullToAbsent || decricao != null) {
      map['DECRICAO'] = Variable<String>(decricao);
    }
    if (!nullToAbsent || valorDeducao != null) {
      map['VALOR_DEDUCAO'] = Variable<double>(valorDeducao);
    }
    if (!nullToAbsent || valorFornecimento != null) {
      map['VALOR_FORNECIMENTO'] = Variable<double>(valorFornecimento);
    }
    if (!nullToAbsent || valorTotalDeducao != null) {
      map['VALOR_TOTAL_DEDUCAO'] = Variable<double>(valorTotalDeducao);
    }
    if (!nullToAbsent || valorLiquidoFornecimento != null) {
      map['VALOR_LIQUIDO_FORNECIMENTO'] =
          Variable<double>(valorLiquidoFornecimento);
    }
    return map;
  }

  NfeCanaDeducoesSafrasCompanion toCompanion(bool nullToAbsent) {
    return NfeCanaDeducoesSafrasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCana: idNfeCana == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCana),
      decricao: decricao == null && nullToAbsent
          ? const Value.absent()
          : Value(decricao),
      valorDeducao: valorDeducao == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDeducao),
      valorFornecimento: valorFornecimento == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFornecimento),
      valorTotalDeducao: valorTotalDeducao == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalDeducao),
      valorLiquidoFornecimento: valorLiquidoFornecimento == null && nullToAbsent
          ? const Value.absent()
          : Value(valorLiquidoFornecimento),
    );
  }

  factory NfeCanaDeducoesSafra.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCanaDeducoesSafra(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCana: serializer.fromJson<int?>(json['idNfeCana']),
      decricao: serializer.fromJson<String?>(json['decricao']),
      valorDeducao: serializer.fromJson<double?>(json['valorDeducao']),
      valorFornecimento:
          serializer.fromJson<double?>(json['valorFornecimento']),
      valorTotalDeducao:
          serializer.fromJson<double?>(json['valorTotalDeducao']),
      valorLiquidoFornecimento:
          serializer.fromJson<double?>(json['valorLiquidoFornecimento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCana': serializer.toJson<int?>(idNfeCana),
      'decricao': serializer.toJson<String?>(decricao),
      'valorDeducao': serializer.toJson<double?>(valorDeducao),
      'valorFornecimento': serializer.toJson<double?>(valorFornecimento),
      'valorTotalDeducao': serializer.toJson<double?>(valorTotalDeducao),
      'valorLiquidoFornecimento':
          serializer.toJson<double?>(valorLiquidoFornecimento),
    };
  }

  NfeCanaDeducoesSafra copyWith(
          {int? id,
          int? idNfeCana,
          String? decricao,
          double? valorDeducao,
          double? valorFornecimento,
          double? valorTotalDeducao,
          double? valorLiquidoFornecimento}) =>
      NfeCanaDeducoesSafra(
        id: id ?? this.id,
        idNfeCana: idNfeCana ?? this.idNfeCana,
        decricao: decricao ?? this.decricao,
        valorDeducao: valorDeducao ?? this.valorDeducao,
        valorFornecimento: valorFornecimento ?? this.valorFornecimento,
        valorTotalDeducao: valorTotalDeducao ?? this.valorTotalDeducao,
        valorLiquidoFornecimento:
            valorLiquidoFornecimento ?? this.valorLiquidoFornecimento,
      );
  @override
  String toString() {
    return (StringBuffer('NfeCanaDeducoesSafra(')
          ..write('id: $id, ')
          ..write('idNfeCana: $idNfeCana, ')
          ..write('decricao: $decricao, ')
          ..write('valorDeducao: $valorDeducao, ')
          ..write('valorFornecimento: $valorFornecimento, ')
          ..write('valorTotalDeducao: $valorTotalDeducao, ')
          ..write('valorLiquidoFornecimento: $valorLiquidoFornecimento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCana, decricao, valorDeducao,
      valorFornecimento, valorTotalDeducao, valorLiquidoFornecimento);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCanaDeducoesSafra &&
          other.id == this.id &&
          other.idNfeCana == this.idNfeCana &&
          other.decricao == this.decricao &&
          other.valorDeducao == this.valorDeducao &&
          other.valorFornecimento == this.valorFornecimento &&
          other.valorTotalDeducao == this.valorTotalDeducao &&
          other.valorLiquidoFornecimento == this.valorLiquidoFornecimento);
}

class NfeCanaDeducoesSafrasCompanion
    extends UpdateCompanion<NfeCanaDeducoesSafra> {
  final Value<int?> id;
  final Value<int?> idNfeCana;
  final Value<String?> decricao;
  final Value<double?> valorDeducao;
  final Value<double?> valorFornecimento;
  final Value<double?> valorTotalDeducao;
  final Value<double?> valorLiquidoFornecimento;
  const NfeCanaDeducoesSafrasCompanion({
    this.id = const Value.absent(),
    this.idNfeCana = const Value.absent(),
    this.decricao = const Value.absent(),
    this.valorDeducao = const Value.absent(),
    this.valorFornecimento = const Value.absent(),
    this.valorTotalDeducao = const Value.absent(),
    this.valorLiquidoFornecimento = const Value.absent(),
  });
  NfeCanaDeducoesSafrasCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCana = const Value.absent(),
    this.decricao = const Value.absent(),
    this.valorDeducao = const Value.absent(),
    this.valorFornecimento = const Value.absent(),
    this.valorTotalDeducao = const Value.absent(),
    this.valorLiquidoFornecimento = const Value.absent(),
  });
  static Insertable<NfeCanaDeducoesSafra> custom({
    Expression<int>? id,
    Expression<int>? idNfeCana,
    Expression<String>? decricao,
    Expression<double>? valorDeducao,
    Expression<double>? valorFornecimento,
    Expression<double>? valorTotalDeducao,
    Expression<double>? valorLiquidoFornecimento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCana != null) 'ID_NFE_CANA': idNfeCana,
      if (decricao != null) 'DECRICAO': decricao,
      if (valorDeducao != null) 'VALOR_DEDUCAO': valorDeducao,
      if (valorFornecimento != null) 'VALOR_FORNECIMENTO': valorFornecimento,
      if (valorTotalDeducao != null) 'VALOR_TOTAL_DEDUCAO': valorTotalDeducao,
      if (valorLiquidoFornecimento != null)
        'VALOR_LIQUIDO_FORNECIMENTO': valorLiquidoFornecimento,
    });
  }

  NfeCanaDeducoesSafrasCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCana,
      Value<String?>? decricao,
      Value<double?>? valorDeducao,
      Value<double?>? valorFornecimento,
      Value<double?>? valorTotalDeducao,
      Value<double?>? valorLiquidoFornecimento}) {
    return NfeCanaDeducoesSafrasCompanion(
      id: id ?? this.id,
      idNfeCana: idNfeCana ?? this.idNfeCana,
      decricao: decricao ?? this.decricao,
      valorDeducao: valorDeducao ?? this.valorDeducao,
      valorFornecimento: valorFornecimento ?? this.valorFornecimento,
      valorTotalDeducao: valorTotalDeducao ?? this.valorTotalDeducao,
      valorLiquidoFornecimento:
          valorLiquidoFornecimento ?? this.valorLiquidoFornecimento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCana.present) {
      map['ID_NFE_CANA'] = Variable<int>(idNfeCana.value);
    }
    if (decricao.present) {
      map['DECRICAO'] = Variable<String>(decricao.value);
    }
    if (valorDeducao.present) {
      map['VALOR_DEDUCAO'] = Variable<double>(valorDeducao.value);
    }
    if (valorFornecimento.present) {
      map['VALOR_FORNECIMENTO'] = Variable<double>(valorFornecimento.value);
    }
    if (valorTotalDeducao.present) {
      map['VALOR_TOTAL_DEDUCAO'] = Variable<double>(valorTotalDeducao.value);
    }
    if (valorLiquidoFornecimento.present) {
      map['VALOR_LIQUIDO_FORNECIMENTO'] =
          Variable<double>(valorLiquidoFornecimento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCanaDeducoesSafrasCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCana: $idNfeCana, ')
          ..write('decricao: $decricao, ')
          ..write('valorDeducao: $valorDeducao, ')
          ..write('valorFornecimento: $valorFornecimento, ')
          ..write('valorTotalDeducao: $valorTotalDeducao, ')
          ..write('valorLiquidoFornecimento: $valorLiquidoFornecimento')
          ..write(')'))
        .toString();
  }
}

class $NfeCanaDeducoesSafrasTable extends NfeCanaDeducoesSafras
    with TableInfo<$NfeCanaDeducoesSafrasTable, NfeCanaDeducoesSafra> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCanaDeducoesSafrasTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCanaMeta = const VerificationMeta('idNfeCana');
  @override
  late final GeneratedColumn<int> idNfeCana = GeneratedColumn<int>(
      'ID_NFE_CANA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CANA(ID)');
  final VerificationMeta _decricaoMeta = const VerificationMeta('decricao');
  @override
  late final GeneratedColumn<String> decricao = GeneratedColumn<String>(
      'DECRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorDeducaoMeta =
      const VerificationMeta('valorDeducao');
  @override
  late final GeneratedColumn<double> valorDeducao = GeneratedColumn<double>(
      'VALOR_DEDUCAO', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorFornecimentoMeta =
      const VerificationMeta('valorFornecimento');
  @override
  late final GeneratedColumn<double> valorFornecimento =
      GeneratedColumn<double>('VALOR_FORNECIMENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorTotalDeducaoMeta =
      const VerificationMeta('valorTotalDeducao');
  @override
  late final GeneratedColumn<double> valorTotalDeducao =
      GeneratedColumn<double>('VALOR_TOTAL_DEDUCAO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _valorLiquidoFornecimentoMeta =
      const VerificationMeta('valorLiquidoFornecimento');
  @override
  late final GeneratedColumn<double> valorLiquidoFornecimento =
      GeneratedColumn<double>('VALOR_LIQUIDO_FORNECIMENTO', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCana,
        decricao,
        valorDeducao,
        valorFornecimento,
        valorTotalDeducao,
        valorLiquidoFornecimento
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_CANA_DEDUCOES_SAFRA';
  @override
  String get actualTableName => 'NFE_CANA_DEDUCOES_SAFRA';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeCanaDeducoesSafra> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CANA')) {
      context.handle(
          _idNfeCanaMeta,
          idNfeCana.isAcceptableOrUnknown(
              data['ID_NFE_CANA']!, _idNfeCanaMeta));
    }
    if (data.containsKey('DECRICAO')) {
      context.handle(_decricaoMeta,
          decricao.isAcceptableOrUnknown(data['DECRICAO']!, _decricaoMeta));
    }
    if (data.containsKey('VALOR_DEDUCAO')) {
      context.handle(
          _valorDeducaoMeta,
          valorDeducao.isAcceptableOrUnknown(
              data['VALOR_DEDUCAO']!, _valorDeducaoMeta));
    }
    if (data.containsKey('VALOR_FORNECIMENTO')) {
      context.handle(
          _valorFornecimentoMeta,
          valorFornecimento.isAcceptableOrUnknown(
              data['VALOR_FORNECIMENTO']!, _valorFornecimentoMeta));
    }
    if (data.containsKey('VALOR_TOTAL_DEDUCAO')) {
      context.handle(
          _valorTotalDeducaoMeta,
          valorTotalDeducao.isAcceptableOrUnknown(
              data['VALOR_TOTAL_DEDUCAO']!, _valorTotalDeducaoMeta));
    }
    if (data.containsKey('VALOR_LIQUIDO_FORNECIMENTO')) {
      context.handle(
          _valorLiquidoFornecimentoMeta,
          valorLiquidoFornecimento.isAcceptableOrUnknown(
              data['VALOR_LIQUIDO_FORNECIMENTO']!,
              _valorLiquidoFornecimentoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCanaDeducoesSafra map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeCanaDeducoesSafra.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeCanaDeducoesSafrasTable createAlias(String alias) {
    return $NfeCanaDeducoesSafrasTable(attachedDatabase, alias);
  }
}

class NfeCanaFornecimentoDiario extends DataClass
    implements Insertable<NfeCanaFornecimentoDiario> {
  final int? id;
  final int? idNfeCana;
  final String? dia;
  final double? quantidade;
  final double? quantidadeTotalMes;
  final double? quantidadeTotalAnterior;
  final double? quantidadeTotalGeral;
  NfeCanaFornecimentoDiario(
      {this.id,
      this.idNfeCana,
      this.dia,
      this.quantidade,
      this.quantidadeTotalMes,
      this.quantidadeTotalAnterior,
      this.quantidadeTotalGeral});
  factory NfeCanaFornecimentoDiario.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeCanaFornecimentoDiario(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCana: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CANA']),
      dia: ValueSqlType.stringType(data['${effectivePrefix}DIA']),
      quantidade: ValueSqlType.doubleType(data['${effectivePrefix}QUANTIDADE']),
      quantidadeTotalMes: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_TOTAL_MES']),
      quantidadeTotalAnterior: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_TOTAL_ANTERIOR']),
      quantidadeTotalGeral: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_TOTAL_GERAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCana != null) {
      map['ID_NFE_CANA'] = Variable<int>(idNfeCana);
    }
    if (!nullToAbsent || dia != null) {
      map['DIA'] = Variable<String>(dia);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || quantidadeTotalMes != null) {
      map['QUANTIDADE_TOTAL_MES'] = Variable<double>(quantidadeTotalMes);
    }
    if (!nullToAbsent || quantidadeTotalAnterior != null) {
      map['QUANTIDADE_TOTAL_ANTERIOR'] =
          Variable<double>(quantidadeTotalAnterior);
    }
    if (!nullToAbsent || quantidadeTotalGeral != null) {
      map['QUANTIDADE_TOTAL_GERAL'] = Variable<double>(quantidadeTotalGeral);
    }
    return map;
  }

  NfeCanaFornecimentoDiariosCompanion toCompanion(bool nullToAbsent) {
    return NfeCanaFornecimentoDiariosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCana: idNfeCana == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCana),
      dia: dia == null && nullToAbsent ? const Value.absent() : Value(dia),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      quantidadeTotalMes: quantidadeTotalMes == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeTotalMes),
      quantidadeTotalAnterior: quantidadeTotalAnterior == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeTotalAnterior),
      quantidadeTotalGeral: quantidadeTotalGeral == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeTotalGeral),
    );
  }

  factory NfeCanaFornecimentoDiario.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCanaFornecimentoDiario(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCana: serializer.fromJson<int?>(json['idNfeCana']),
      dia: serializer.fromJson<String?>(json['dia']),
      quantidade: serializer.fromJson<double?>(json['quantidade']),
      quantidadeTotalMes:
          serializer.fromJson<double?>(json['quantidadeTotalMes']),
      quantidadeTotalAnterior:
          serializer.fromJson<double?>(json['quantidadeTotalAnterior']),
      quantidadeTotalGeral:
          serializer.fromJson<double?>(json['quantidadeTotalGeral']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCana': serializer.toJson<int?>(idNfeCana),
      'dia': serializer.toJson<String?>(dia),
      'quantidade': serializer.toJson<double?>(quantidade),
      'quantidadeTotalMes': serializer.toJson<double?>(quantidadeTotalMes),
      'quantidadeTotalAnterior':
          serializer.toJson<double?>(quantidadeTotalAnterior),
      'quantidadeTotalGeral': serializer.toJson<double?>(quantidadeTotalGeral),
    };
  }

  NfeCanaFornecimentoDiario copyWith(
          {int? id,
          int? idNfeCana,
          String? dia,
          double? quantidade,
          double? quantidadeTotalMes,
          double? quantidadeTotalAnterior,
          double? quantidadeTotalGeral}) =>
      NfeCanaFornecimentoDiario(
        id: id ?? this.id,
        idNfeCana: idNfeCana ?? this.idNfeCana,
        dia: dia ?? this.dia,
        quantidade: quantidade ?? this.quantidade,
        quantidadeTotalMes: quantidadeTotalMes ?? this.quantidadeTotalMes,
        quantidadeTotalAnterior:
            quantidadeTotalAnterior ?? this.quantidadeTotalAnterior,
        quantidadeTotalGeral: quantidadeTotalGeral ?? this.quantidadeTotalGeral,
      );
  @override
  String toString() {
    return (StringBuffer('NfeCanaFornecimentoDiario(')
          ..write('id: $id, ')
          ..write('idNfeCana: $idNfeCana, ')
          ..write('dia: $dia, ')
          ..write('quantidade: $quantidade, ')
          ..write('quantidadeTotalMes: $quantidadeTotalMes, ')
          ..write('quantidadeTotalAnterior: $quantidadeTotalAnterior, ')
          ..write('quantidadeTotalGeral: $quantidadeTotalGeral')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCana, dia, quantidade,
      quantidadeTotalMes, quantidadeTotalAnterior, quantidadeTotalGeral);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCanaFornecimentoDiario &&
          other.id == this.id &&
          other.idNfeCana == this.idNfeCana &&
          other.dia == this.dia &&
          other.quantidade == this.quantidade &&
          other.quantidadeTotalMes == this.quantidadeTotalMes &&
          other.quantidadeTotalAnterior == this.quantidadeTotalAnterior &&
          other.quantidadeTotalGeral == this.quantidadeTotalGeral);
}

class NfeCanaFornecimentoDiariosCompanion
    extends UpdateCompanion<NfeCanaFornecimentoDiario> {
  final Value<int?> id;
  final Value<int?> idNfeCana;
  final Value<String?> dia;
  final Value<double?> quantidade;
  final Value<double?> quantidadeTotalMes;
  final Value<double?> quantidadeTotalAnterior;
  final Value<double?> quantidadeTotalGeral;
  const NfeCanaFornecimentoDiariosCompanion({
    this.id = const Value.absent(),
    this.idNfeCana = const Value.absent(),
    this.dia = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.quantidadeTotalMes = const Value.absent(),
    this.quantidadeTotalAnterior = const Value.absent(),
    this.quantidadeTotalGeral = const Value.absent(),
  });
  NfeCanaFornecimentoDiariosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCana = const Value.absent(),
    this.dia = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.quantidadeTotalMes = const Value.absent(),
    this.quantidadeTotalAnterior = const Value.absent(),
    this.quantidadeTotalGeral = const Value.absent(),
  });
  static Insertable<NfeCanaFornecimentoDiario> custom({
    Expression<int>? id,
    Expression<int>? idNfeCana,
    Expression<String>? dia,
    Expression<double>? quantidade,
    Expression<double>? quantidadeTotalMes,
    Expression<double>? quantidadeTotalAnterior,
    Expression<double>? quantidadeTotalGeral,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCana != null) 'ID_NFE_CANA': idNfeCana,
      if (dia != null) 'DIA': dia,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (quantidadeTotalMes != null)
        'QUANTIDADE_TOTAL_MES': quantidadeTotalMes,
      if (quantidadeTotalAnterior != null)
        'QUANTIDADE_TOTAL_ANTERIOR': quantidadeTotalAnterior,
      if (quantidadeTotalGeral != null)
        'QUANTIDADE_TOTAL_GERAL': quantidadeTotalGeral,
    });
  }

  NfeCanaFornecimentoDiariosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCana,
      Value<String?>? dia,
      Value<double?>? quantidade,
      Value<double?>? quantidadeTotalMes,
      Value<double?>? quantidadeTotalAnterior,
      Value<double?>? quantidadeTotalGeral}) {
    return NfeCanaFornecimentoDiariosCompanion(
      id: id ?? this.id,
      idNfeCana: idNfeCana ?? this.idNfeCana,
      dia: dia ?? this.dia,
      quantidade: quantidade ?? this.quantidade,
      quantidadeTotalMes: quantidadeTotalMes ?? this.quantidadeTotalMes,
      quantidadeTotalAnterior:
          quantidadeTotalAnterior ?? this.quantidadeTotalAnterior,
      quantidadeTotalGeral: quantidadeTotalGeral ?? this.quantidadeTotalGeral,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCana.present) {
      map['ID_NFE_CANA'] = Variable<int>(idNfeCana.value);
    }
    if (dia.present) {
      map['DIA'] = Variable<String>(dia.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    if (quantidadeTotalMes.present) {
      map['QUANTIDADE_TOTAL_MES'] = Variable<double>(quantidadeTotalMes.value);
    }
    if (quantidadeTotalAnterior.present) {
      map['QUANTIDADE_TOTAL_ANTERIOR'] =
          Variable<double>(quantidadeTotalAnterior.value);
    }
    if (quantidadeTotalGeral.present) {
      map['QUANTIDADE_TOTAL_GERAL'] =
          Variable<double>(quantidadeTotalGeral.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCanaFornecimentoDiariosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCana: $idNfeCana, ')
          ..write('dia: $dia, ')
          ..write('quantidade: $quantidade, ')
          ..write('quantidadeTotalMes: $quantidadeTotalMes, ')
          ..write('quantidadeTotalAnterior: $quantidadeTotalAnterior, ')
          ..write('quantidadeTotalGeral: $quantidadeTotalGeral')
          ..write(')'))
        .toString();
  }
}

class $NfeCanaFornecimentoDiariosTable extends NfeCanaFornecimentoDiarios
    with
        TableInfo<$NfeCanaFornecimentoDiariosTable, NfeCanaFornecimentoDiario> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCanaFornecimentoDiariosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCanaMeta = const VerificationMeta('idNfeCana');
  @override
  late final GeneratedColumn<int> idNfeCana = GeneratedColumn<int>(
      'ID_NFE_CANA', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CANA(ID)');
  final VerificationMeta _diaMeta = const VerificationMeta('dia');
  @override
  late final GeneratedColumn<String> dia = GeneratedColumn<String>(
      'DIA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  @override
  late final GeneratedColumn<double> quantidade = GeneratedColumn<double>(
      'QUANTIDADE', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeTotalMesMeta =
      const VerificationMeta('quantidadeTotalMes');
  @override
  late final GeneratedColumn<double> quantidadeTotalMes =
      GeneratedColumn<double>('QUANTIDADE_TOTAL_MES', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeTotalAnteriorMeta =
      const VerificationMeta('quantidadeTotalAnterior');
  @override
  late final GeneratedColumn<double> quantidadeTotalAnterior =
      GeneratedColumn<double>('QUANTIDADE_TOTAL_ANTERIOR', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _quantidadeTotalGeralMeta =
      const VerificationMeta('quantidadeTotalGeral');
  @override
  late final GeneratedColumn<double> quantidadeTotalGeral =
      GeneratedColumn<double>('QUANTIDADE_TOTAL_GERAL', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCana,
        dia,
        quantidade,
        quantidadeTotalMes,
        quantidadeTotalAnterior,
        quantidadeTotalGeral
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_CANA_FORNECIMENTO_DIARIO';
  @override
  String get actualTableName => 'NFE_CANA_FORNECIMENTO_DIARIO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeCanaFornecimentoDiario> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CANA')) {
      context.handle(
          _idNfeCanaMeta,
          idNfeCana.isAcceptableOrUnknown(
              data['ID_NFE_CANA']!, _idNfeCanaMeta));
    }
    if (data.containsKey('DIA')) {
      context.handle(
          _diaMeta, dia.isAcceptableOrUnknown(data['DIA']!, _diaMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE']!, _quantidadeMeta));
    }
    if (data.containsKey('QUANTIDADE_TOTAL_MES')) {
      context.handle(
          _quantidadeTotalMesMeta,
          quantidadeTotalMes.isAcceptableOrUnknown(
              data['QUANTIDADE_TOTAL_MES']!, _quantidadeTotalMesMeta));
    }
    if (data.containsKey('QUANTIDADE_TOTAL_ANTERIOR')) {
      context.handle(
          _quantidadeTotalAnteriorMeta,
          quantidadeTotalAnterior.isAcceptableOrUnknown(
              data['QUANTIDADE_TOTAL_ANTERIOR']!,
              _quantidadeTotalAnteriorMeta));
    }
    if (data.containsKey('QUANTIDADE_TOTAL_GERAL')) {
      context.handle(
          _quantidadeTotalGeralMeta,
          quantidadeTotalGeral.isAcceptableOrUnknown(
              data['QUANTIDADE_TOTAL_GERAL']!, _quantidadeTotalGeralMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCanaFornecimentoDiario map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeCanaFornecimentoDiario.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeCanaFornecimentoDiariosTable createAlias(String alias) {
    return $NfeCanaFornecimentoDiariosTable(attachedDatabase, alias);
  }
}

class NfeConfiguracao extends DataClass implements Insertable<NfeConfiguracao> {
  final int? id;
  final String? certificadoDigitalSerie;
  final String? certificadoDigitalCaminho;
  final String? certificadoDigitalSenha;
  final int? tipoEmissao;
  final int? formatoImpressaoDanfe;
  final int? processoEmissao;
  final String? versaoProcessoEmissao;
  final String? caminhoLogomarca;
  final String? salvarXml;
  final String? caminhoSalvarXml;
  final String? caminhoSchemas;
  final String? caminhoArquivoDanfe;
  final String? caminhoSalvarPdf;
  final String? webserviceUf;
  final int? webserviceAmbiente;
  final String? webserviceProxyHost;
  final int? webserviceProxyPorta;
  final String? webserviceProxyUsuario;
  final String? webserviceProxySenha;
  final String? webserviceVisualizar;
  final String? emailServidorSmtp;
  final int? emailPorta;
  final String? emailUsuario;
  final String? emailSenha;
  final String? emailAssunto;
  final String? emailAutenticaSsl;
  final String? emailTexto;
  final String? nfceIdCsc;
  final String? nfceCsc;
  final String? nfceModeloImpressao;
  final String? nfceImprimirItensUmaLinha;
  final String? nfceImprimirDescontoPorItem;
  final String? nfceImprimirQrcodeLateral;
  final String? nfceImprimirGtin;
  final String? nfceImprimirNomeFantasia;
  final String? nfceImpressaoTributos;
  final double? nfceMargemSuperior;
  final double? nfceMargemInferior;
  final double? nfceMargemDireita;
  final double? nfceMargemEsquerda;
  final int? nfceResolucaoImpressao;
  final String? respTecCnpj;
  final String? respTecContato;
  final String? respTecEmail;
  final String? respTecFone;
  final String? respTecIdCsrt;
  final String? respTecHashCsrt;
  final int? nfceTamanhoFonteItem;
  NfeConfiguracao(
      {this.id,
      this.certificadoDigitalSerie,
      this.certificadoDigitalCaminho,
      this.certificadoDigitalSenha,
      this.tipoEmissao,
      this.formatoImpressaoDanfe,
      this.processoEmissao,
      this.versaoProcessoEmissao,
      this.caminhoLogomarca,
      this.salvarXml,
      this.caminhoSalvarXml,
      this.caminhoSchemas,
      this.caminhoArquivoDanfe,
      this.caminhoSalvarPdf,
      this.webserviceUf,
      this.webserviceAmbiente,
      this.webserviceProxyHost,
      this.webserviceProxyPorta,
      this.webserviceProxyUsuario,
      this.webserviceProxySenha,
      this.webserviceVisualizar,
      this.emailServidorSmtp,
      this.emailPorta,
      this.emailUsuario,
      this.emailSenha,
      this.emailAssunto,
      this.emailAutenticaSsl,
      this.emailTexto,
      this.nfceIdCsc,
      this.nfceCsc,
      this.nfceModeloImpressao,
      this.nfceImprimirItensUmaLinha,
      this.nfceImprimirDescontoPorItem,
      this.nfceImprimirQrcodeLateral,
      this.nfceImprimirGtin,
      this.nfceImprimirNomeFantasia,
      this.nfceImpressaoTributos,
      this.nfceMargemSuperior,
      this.nfceMargemInferior,
      this.nfceMargemDireita,
      this.nfceMargemEsquerda,
      this.nfceResolucaoImpressao,
      this.respTecCnpj,
      this.respTecContato,
      this.respTecEmail,
      this.respTecFone,
      this.respTecIdCsrt,
      this.respTecHashCsrt,
      this.nfceTamanhoFonteItem});
  factory NfeConfiguracao.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeConfiguracao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      certificadoDigitalSerie: ValueSqlType.stringType(
          data['${effectivePrefix}CERTIFICADO_DIGITAL_SERIE']),
      certificadoDigitalCaminho: ValueSqlType.stringType(
          data['${effectivePrefix}CERTIFICADO_DIGITAL_CAMINHO']),
      certificadoDigitalSenha: ValueSqlType.stringType(
          data['${effectivePrefix}CERTIFICADO_DIGITAL_SENHA']),
      tipoEmissao: ValueSqlType.intType(data['${effectivePrefix}TIPO_EMISSAO']),
      formatoImpressaoDanfe: ValueSqlType.intType(
          data['${effectivePrefix}FORMATO_IMPRESSAO_DANFE']),
      processoEmissao: ValueSqlType.intType(data['${effectivePrefix}PROCESSO_EMISSAO']),
      versaoProcessoEmissao: ValueSqlType.stringType(
          data['${effectivePrefix}VERSAO_PROCESSO_EMISSAO']),
      caminhoLogomarca: ValueSqlType.stringType(data['${effectivePrefix}CAMINHO_LOGOMARCA']),
      salvarXml: ValueSqlType.stringType(data['${effectivePrefix}SALVAR_XML']),
      caminhoSalvarXml: ValueSqlType.stringType(
          data['${effectivePrefix}CAMINHO_SALVAR_XML']),
      caminhoSchemas: ValueSqlType.stringType(data['${effectivePrefix}CAMINHO_SCHEMAS']),
      caminhoArquivoDanfe: ValueSqlType.stringType(
          data['${effectivePrefix}CAMINHO_ARQUIVO_DANFE']),
      caminhoSalvarPdf: ValueSqlType.stringType(
          data['${effectivePrefix}CAMINHO_SALVAR_PDF']),
      webserviceUf: ValueSqlType.stringType(data['${effectivePrefix}WEBSERVICE_UF']),
      webserviceAmbiente: ValueSqlType.intType(
          data['${effectivePrefix}WEBSERVICE_AMBIENTE']),
      webserviceProxyHost: ValueSqlType.stringType(
          data['${effectivePrefix}WEBSERVICE_PROXY_HOST']),
      webserviceProxyPorta: ValueSqlType.intType(
          data['${effectivePrefix}WEBSERVICE_PROXY_PORTA']),
      webserviceProxyUsuario: ValueSqlType.stringType(
          data['${effectivePrefix}WEBSERVICE_PROXY_USUARIO']),
      webserviceProxySenha: ValueSqlType.stringType(
          data['${effectivePrefix}WEBSERVICE_PROXY_SENHA']),
      webserviceVisualizar: ValueSqlType.stringType(
          data['${effectivePrefix}WEBSERVICE_VISUALIZAR']),
      emailServidorSmtp: ValueSqlType.stringType(
          data['${effectivePrefix}EMAIL_SERVIDOR_SMTP']),
      emailPorta: ValueSqlType.intType(data['${effectivePrefix}EMAIL_PORTA']),
      emailUsuario: ValueSqlType.stringType(data['${effectivePrefix}EMAIL_USUARIO']),
      emailSenha: ValueSqlType.stringType(data['${effectivePrefix}EMAIL_SENHA']),
      emailAssunto: ValueSqlType.stringType(data['${effectivePrefix}EMAIL_ASSUNTO']),
      emailAutenticaSsl: ValueSqlType.stringType(
          data['${effectivePrefix}EMAIL_AUTENTICA_SSL']),
      emailTexto: ValueSqlType.stringType(data['${effectivePrefix}EMAIL_TEXTO']),
      nfceIdCsc: ValueSqlType.stringType(data['${effectivePrefix}NFCE_ID_CSC']),
      nfceCsc: ValueSqlType.stringType(data['${effectivePrefix}NFCE_CSC']),
      nfceModeloImpressao: ValueSqlType.stringType(
          data['${effectivePrefix}NFCE_MODELO_IMPRESSAO']),
      nfceImprimirItensUmaLinha: ValueSqlType.stringType(
          data['${effectivePrefix}NFCE_IMPRIMIR_ITENS_UMA_LINHA']),
      nfceImprimirDescontoPorItem: ValueSqlType.stringType(
          data['${effectivePrefix}NFCE_IMPRIMIR_DESCONTO_POR_ITEM']),
      nfceImprimirQrcodeLateral: ValueSqlType.stringType(
          data['${effectivePrefix}NFCE_IMPRIMIR_QRCODE_LATERAL']),
      nfceImprimirGtin: ValueSqlType.stringType(
          data['${effectivePrefix}NFCE_IMPRIMIR_GTIN']),
      nfceImprimirNomeFantasia: ValueSqlType.stringType(
          data['${effectivePrefix}NFCE_IMPRIMIR_NOME_FANTASIA']),
      nfceImpressaoTributos: ValueSqlType.stringType(
          data['${effectivePrefix}NFCE_IMPRESSAO_TRIBUTOS']),
      nfceMargemSuperior: ValueSqlType.doubleType(
          data['${effectivePrefix}NFCE_MARGEM_SUPERIOR']),
      nfceMargemInferior: ValueSqlType.doubleType(
          data['${effectivePrefix}NFCE_MARGEM_INFERIOR']),
      nfceMargemDireita: ValueSqlType.doubleType(
          data['${effectivePrefix}NFCE_MARGEM_DIREITA']),
      nfceMargemEsquerda: ValueSqlType.doubleType(
          data['${effectivePrefix}NFCE_MARGEM_ESQUERDA']),
      nfceResolucaoImpressao: ValueSqlType.intType(
          data['${effectivePrefix}NFCE_RESOLUCAO_IMPRESSAO']),
      respTecCnpj: ValueSqlType.stringType(data['${effectivePrefix}RESP_TEC_CNPJ']),
      respTecContato: ValueSqlType.stringType(data['${effectivePrefix}RESP_TEC_CONTATO']),
      respTecEmail: ValueSqlType.stringType(data['${effectivePrefix}RESP_TEC_EMAIL']),
      respTecFone: ValueSqlType.stringType(data['${effectivePrefix}RESP_TEC_FONE']),
      respTecIdCsrt: ValueSqlType.stringType(data['${effectivePrefix}RESP_TEC_ID_CSRT']),
      respTecHashCsrt: ValueSqlType.stringType(
          data['${effectivePrefix}RESP_TEC_HASH_CSRT']),
      nfceTamanhoFonteItem: ValueSqlType.intType(
          data['${effectivePrefix}NFCE_TAMANHO_FONTE_ITEM']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || certificadoDigitalSerie != null) {
      map['CERTIFICADO_DIGITAL_SERIE'] =
          Variable<String>(certificadoDigitalSerie);
    }
    if (!nullToAbsent || certificadoDigitalCaminho != null) {
      map['CERTIFICADO_DIGITAL_CAMINHO'] =
          Variable<String>(certificadoDigitalCaminho);
    }
    if (!nullToAbsent || certificadoDigitalSenha != null) {
      map['CERTIFICADO_DIGITAL_SENHA'] =
          Variable<String>(certificadoDigitalSenha);
    }
    if (!nullToAbsent || tipoEmissao != null) {
      map['TIPO_EMISSAO'] = Variable<int>(tipoEmissao);
    }
    if (!nullToAbsent || formatoImpressaoDanfe != null) {
      map['FORMATO_IMPRESSAO_DANFE'] = Variable<int>(formatoImpressaoDanfe);
    }
    if (!nullToAbsent || processoEmissao != null) {
      map['PROCESSO_EMISSAO'] = Variable<int>(processoEmissao);
    }
    if (!nullToAbsent || versaoProcessoEmissao != null) {
      map['VERSAO_PROCESSO_EMISSAO'] = Variable<String>(versaoProcessoEmissao);
    }
    if (!nullToAbsent || caminhoLogomarca != null) {
      map['CAMINHO_LOGOMARCA'] = Variable<String>(caminhoLogomarca);
    }
    if (!nullToAbsent || salvarXml != null) {
      map['SALVAR_XML'] = Variable<String>(salvarXml);
    }
    if (!nullToAbsent || caminhoSalvarXml != null) {
      map['CAMINHO_SALVAR_XML'] = Variable<String>(caminhoSalvarXml);
    }
    if (!nullToAbsent || caminhoSchemas != null) {
      map['CAMINHO_SCHEMAS'] = Variable<String>(caminhoSchemas);
    }
    if (!nullToAbsent || caminhoArquivoDanfe != null) {
      map['CAMINHO_ARQUIVO_DANFE'] = Variable<String>(caminhoArquivoDanfe);
    }
    if (!nullToAbsent || caminhoSalvarPdf != null) {
      map['CAMINHO_SALVAR_PDF'] = Variable<String>(caminhoSalvarPdf);
    }
    if (!nullToAbsent || webserviceUf != null) {
      map['WEBSERVICE_UF'] = Variable<String>(webserviceUf);
    }
    if (!nullToAbsent || webserviceAmbiente != null) {
      map['WEBSERVICE_AMBIENTE'] = Variable<int>(webserviceAmbiente);
    }
    if (!nullToAbsent || webserviceProxyHost != null) {
      map['WEBSERVICE_PROXY_HOST'] = Variable<String>(webserviceProxyHost);
    }
    if (!nullToAbsent || webserviceProxyPorta != null) {
      map['WEBSERVICE_PROXY_PORTA'] = Variable<int>(webserviceProxyPorta);
    }
    if (!nullToAbsent || webserviceProxyUsuario != null) {
      map['WEBSERVICE_PROXY_USUARIO'] =
          Variable<String>(webserviceProxyUsuario);
    }
    if (!nullToAbsent || webserviceProxySenha != null) {
      map['WEBSERVICE_PROXY_SENHA'] = Variable<String>(webserviceProxySenha);
    }
    if (!nullToAbsent || webserviceVisualizar != null) {
      map['WEBSERVICE_VISUALIZAR'] = Variable<String>(webserviceVisualizar);
    }
    if (!nullToAbsent || emailServidorSmtp != null) {
      map['EMAIL_SERVIDOR_SMTP'] = Variable<String>(emailServidorSmtp);
    }
    if (!nullToAbsent || emailPorta != null) {
      map['EMAIL_PORTA'] = Variable<int>(emailPorta);
    }
    if (!nullToAbsent || emailUsuario != null) {
      map['EMAIL_USUARIO'] = Variable<String>(emailUsuario);
    }
    if (!nullToAbsent || emailSenha != null) {
      map['EMAIL_SENHA'] = Variable<String>(emailSenha);
    }
    if (!nullToAbsent || emailAssunto != null) {
      map['EMAIL_ASSUNTO'] = Variable<String>(emailAssunto);
    }
    if (!nullToAbsent || emailAutenticaSsl != null) {
      map['EMAIL_AUTENTICA_SSL'] = Variable<String>(emailAutenticaSsl);
    }
    if (!nullToAbsent || emailTexto != null) {
      map['EMAIL_TEXTO'] = Variable<String>(emailTexto);
    }
    if (!nullToAbsent || nfceIdCsc != null) {
      map['NFCE_ID_CSC'] = Variable<String>(nfceIdCsc);
    }
    if (!nullToAbsent || nfceCsc != null) {
      map['NFCE_CSC'] = Variable<String>(nfceCsc);
    }
    if (!nullToAbsent || nfceModeloImpressao != null) {
      map['NFCE_MODELO_IMPRESSAO'] = Variable<String>(nfceModeloImpressao);
    }
    if (!nullToAbsent || nfceImprimirItensUmaLinha != null) {
      map['NFCE_IMPRIMIR_ITENS_UMA_LINHA'] =
          Variable<String>(nfceImprimirItensUmaLinha);
    }
    if (!nullToAbsent || nfceImprimirDescontoPorItem != null) {
      map['NFCE_IMPRIMIR_DESCONTO_POR_ITEM'] =
          Variable<String>(nfceImprimirDescontoPorItem);
    }
    if (!nullToAbsent || nfceImprimirQrcodeLateral != null) {
      map['NFCE_IMPRIMIR_QRCODE_LATERAL'] =
          Variable<String>(nfceImprimirQrcodeLateral);
    }
    if (!nullToAbsent || nfceImprimirGtin != null) {
      map['NFCE_IMPRIMIR_GTIN'] = Variable<String>(nfceImprimirGtin);
    }
    if (!nullToAbsent || nfceImprimirNomeFantasia != null) {
      map['NFCE_IMPRIMIR_NOME_FANTASIA'] =
          Variable<String>(nfceImprimirNomeFantasia);
    }
    if (!nullToAbsent || nfceImpressaoTributos != null) {
      map['NFCE_IMPRESSAO_TRIBUTOS'] = Variable<String>(nfceImpressaoTributos);
    }
    if (!nullToAbsent || nfceMargemSuperior != null) {
      map['NFCE_MARGEM_SUPERIOR'] = Variable<double>(nfceMargemSuperior);
    }
    if (!nullToAbsent || nfceMargemInferior != null) {
      map['NFCE_MARGEM_INFERIOR'] = Variable<double>(nfceMargemInferior);
    }
    if (!nullToAbsent || nfceMargemDireita != null) {
      map['NFCE_MARGEM_DIREITA'] = Variable<double>(nfceMargemDireita);
    }
    if (!nullToAbsent || nfceMargemEsquerda != null) {
      map['NFCE_MARGEM_ESQUERDA'] = Variable<double>(nfceMargemEsquerda);
    }
    if (!nullToAbsent || nfceResolucaoImpressao != null) {
      map['NFCE_RESOLUCAO_IMPRESSAO'] = Variable<int>(nfceResolucaoImpressao);
    }
    if (!nullToAbsent || respTecCnpj != null) {
      map['RESP_TEC_CNPJ'] = Variable<String>(respTecCnpj);
    }
    if (!nullToAbsent || respTecContato != null) {
      map['RESP_TEC_CONTATO'] = Variable<String>(respTecContato);
    }
    if (!nullToAbsent || respTecEmail != null) {
      map['RESP_TEC_EMAIL'] = Variable<String>(respTecEmail);
    }
    if (!nullToAbsent || respTecFone != null) {
      map['RESP_TEC_FONE'] = Variable<String>(respTecFone);
    }
    if (!nullToAbsent || respTecIdCsrt != null) {
      map['RESP_TEC_ID_CSRT'] = Variable<String>(respTecIdCsrt);
    }
    if (!nullToAbsent || respTecHashCsrt != null) {
      map['RESP_TEC_HASH_CSRT'] = Variable<String>(respTecHashCsrt);
    }
    if (!nullToAbsent || nfceTamanhoFonteItem != null) {
      map['NFCE_TAMANHO_FONTE_ITEM'] = Variable<int>(nfceTamanhoFonteItem);
    }
    return map;
  }

  NfeConfiguracaosCompanion toCompanion(bool nullToAbsent) {
    return NfeConfiguracaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      certificadoDigitalSerie: certificadoDigitalSerie == null && nullToAbsent
          ? const Value.absent()
          : Value(certificadoDigitalSerie),
      certificadoDigitalCaminho:
          certificadoDigitalCaminho == null && nullToAbsent
              ? const Value.absent()
              : Value(certificadoDigitalCaminho),
      certificadoDigitalSenha: certificadoDigitalSenha == null && nullToAbsent
          ? const Value.absent()
          : Value(certificadoDigitalSenha),
      tipoEmissao: tipoEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoEmissao),
      formatoImpressaoDanfe: formatoImpressaoDanfe == null && nullToAbsent
          ? const Value.absent()
          : Value(formatoImpressaoDanfe),
      processoEmissao: processoEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(processoEmissao),
      versaoProcessoEmissao: versaoProcessoEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(versaoProcessoEmissao),
      caminhoLogomarca: caminhoLogomarca == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoLogomarca),
      salvarXml: salvarXml == null && nullToAbsent
          ? const Value.absent()
          : Value(salvarXml),
      caminhoSalvarXml: caminhoSalvarXml == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoSalvarXml),
      caminhoSchemas: caminhoSchemas == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoSchemas),
      caminhoArquivoDanfe: caminhoArquivoDanfe == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoArquivoDanfe),
      caminhoSalvarPdf: caminhoSalvarPdf == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoSalvarPdf),
      webserviceUf: webserviceUf == null && nullToAbsent
          ? const Value.absent()
          : Value(webserviceUf),
      webserviceAmbiente: webserviceAmbiente == null && nullToAbsent
          ? const Value.absent()
          : Value(webserviceAmbiente),
      webserviceProxyHost: webserviceProxyHost == null && nullToAbsent
          ? const Value.absent()
          : Value(webserviceProxyHost),
      webserviceProxyPorta: webserviceProxyPorta == null && nullToAbsent
          ? const Value.absent()
          : Value(webserviceProxyPorta),
      webserviceProxyUsuario: webserviceProxyUsuario == null && nullToAbsent
          ? const Value.absent()
          : Value(webserviceProxyUsuario),
      webserviceProxySenha: webserviceProxySenha == null && nullToAbsent
          ? const Value.absent()
          : Value(webserviceProxySenha),
      webserviceVisualizar: webserviceVisualizar == null && nullToAbsent
          ? const Value.absent()
          : Value(webserviceVisualizar),
      emailServidorSmtp: emailServidorSmtp == null && nullToAbsent
          ? const Value.absent()
          : Value(emailServidorSmtp),
      emailPorta: emailPorta == null && nullToAbsent
          ? const Value.absent()
          : Value(emailPorta),
      emailUsuario: emailUsuario == null && nullToAbsent
          ? const Value.absent()
          : Value(emailUsuario),
      emailSenha: emailSenha == null && nullToAbsent
          ? const Value.absent()
          : Value(emailSenha),
      emailAssunto: emailAssunto == null && nullToAbsent
          ? const Value.absent()
          : Value(emailAssunto),
      emailAutenticaSsl: emailAutenticaSsl == null && nullToAbsent
          ? const Value.absent()
          : Value(emailAutenticaSsl),
      emailTexto: emailTexto == null && nullToAbsent
          ? const Value.absent()
          : Value(emailTexto),
      nfceIdCsc: nfceIdCsc == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceIdCsc),
      nfceCsc: nfceCsc == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceCsc),
      nfceModeloImpressao: nfceModeloImpressao == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceModeloImpressao),
      nfceImprimirItensUmaLinha:
          nfceImprimirItensUmaLinha == null && nullToAbsent
              ? const Value.absent()
              : Value(nfceImprimirItensUmaLinha),
      nfceImprimirDescontoPorItem:
          nfceImprimirDescontoPorItem == null && nullToAbsent
              ? const Value.absent()
              : Value(nfceImprimirDescontoPorItem),
      nfceImprimirQrcodeLateral:
          nfceImprimirQrcodeLateral == null && nullToAbsent
              ? const Value.absent()
              : Value(nfceImprimirQrcodeLateral),
      nfceImprimirGtin: nfceImprimirGtin == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceImprimirGtin),
      nfceImprimirNomeFantasia: nfceImprimirNomeFantasia == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceImprimirNomeFantasia),
      nfceImpressaoTributos: nfceImpressaoTributos == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceImpressaoTributos),
      nfceMargemSuperior: nfceMargemSuperior == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceMargemSuperior),
      nfceMargemInferior: nfceMargemInferior == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceMargemInferior),
      nfceMargemDireita: nfceMargemDireita == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceMargemDireita),
      nfceMargemEsquerda: nfceMargemEsquerda == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceMargemEsquerda),
      nfceResolucaoImpressao: nfceResolucaoImpressao == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceResolucaoImpressao),
      respTecCnpj: respTecCnpj == null && nullToAbsent
          ? const Value.absent()
          : Value(respTecCnpj),
      respTecContato: respTecContato == null && nullToAbsent
          ? const Value.absent()
          : Value(respTecContato),
      respTecEmail: respTecEmail == null && nullToAbsent
          ? const Value.absent()
          : Value(respTecEmail),
      respTecFone: respTecFone == null && nullToAbsent
          ? const Value.absent()
          : Value(respTecFone),
      respTecIdCsrt: respTecIdCsrt == null && nullToAbsent
          ? const Value.absent()
          : Value(respTecIdCsrt),
      respTecHashCsrt: respTecHashCsrt == null && nullToAbsent
          ? const Value.absent()
          : Value(respTecHashCsrt),
      nfceTamanhoFonteItem: nfceTamanhoFonteItem == null && nullToAbsent
          ? const Value.absent()
          : Value(nfceTamanhoFonteItem),
    );
  }

  factory NfeConfiguracao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeConfiguracao(
      id: serializer.fromJson<int?>(json['id']),
      certificadoDigitalSerie:
          serializer.fromJson<String?>(json['certificadoDigitalSerie']),
      certificadoDigitalCaminho:
          serializer.fromJson<String?>(json['certificadoDigitalCaminho']),
      certificadoDigitalSenha:
          serializer.fromJson<String?>(json['certificadoDigitalSenha']),
      tipoEmissao: serializer.fromJson<int?>(json['tipoEmissao']),
      formatoImpressaoDanfe:
          serializer.fromJson<int?>(json['formatoImpressaoDanfe']),
      processoEmissao: serializer.fromJson<int?>(json['processoEmissao']),
      versaoProcessoEmissao:
          serializer.fromJson<String?>(json['versaoProcessoEmissao']),
      caminhoLogomarca: serializer.fromJson<String?>(json['caminhoLogomarca']),
      salvarXml: serializer.fromJson<String?>(json['salvarXml']),
      caminhoSalvarXml: serializer.fromJson<String?>(json['caminhoSalvarXml']),
      caminhoSchemas: serializer.fromJson<String?>(json['caminhoSchemas']),
      caminhoArquivoDanfe:
          serializer.fromJson<String?>(json['caminhoArquivoDanfe']),
      caminhoSalvarPdf: serializer.fromJson<String?>(json['caminhoSalvarPdf']),
      webserviceUf: serializer.fromJson<String?>(json['webserviceUf']),
      webserviceAmbiente: serializer.fromJson<int?>(json['webserviceAmbiente']),
      webserviceProxyHost:
          serializer.fromJson<String?>(json['webserviceProxyHost']),
      webserviceProxyPorta:
          serializer.fromJson<int?>(json['webserviceProxyPorta']),
      webserviceProxyUsuario:
          serializer.fromJson<String?>(json['webserviceProxyUsuario']),
      webserviceProxySenha:
          serializer.fromJson<String?>(json['webserviceProxySenha']),
      webserviceVisualizar:
          serializer.fromJson<String?>(json['webserviceVisualizar']),
      emailServidorSmtp:
          serializer.fromJson<String?>(json['emailServidorSmtp']),
      emailPorta: serializer.fromJson<int?>(json['emailPorta']),
      emailUsuario: serializer.fromJson<String?>(json['emailUsuario']),
      emailSenha: serializer.fromJson<String?>(json['emailSenha']),
      emailAssunto: serializer.fromJson<String?>(json['emailAssunto']),
      emailAutenticaSsl:
          serializer.fromJson<String?>(json['emailAutenticaSsl']),
      emailTexto: serializer.fromJson<String?>(json['emailTexto']),
      nfceIdCsc: serializer.fromJson<String?>(json['nfceIdCsc']),
      nfceCsc: serializer.fromJson<String?>(json['nfceCsc']),
      nfceModeloImpressao:
          serializer.fromJson<String?>(json['nfceModeloImpressao']),
      nfceImprimirItensUmaLinha:
          serializer.fromJson<String?>(json['nfceImprimirItensUmaLinha']),
      nfceImprimirDescontoPorItem:
          serializer.fromJson<String?>(json['nfceImprimirDescontoPorItem']),
      nfceImprimirQrcodeLateral:
          serializer.fromJson<String?>(json['nfceImprimirQrcodeLateral']),
      nfceImprimirGtin: serializer.fromJson<String?>(json['nfceImprimirGtin']),
      nfceImprimirNomeFantasia:
          serializer.fromJson<String?>(json['nfceImprimirNomeFantasia']),
      nfceImpressaoTributos:
          serializer.fromJson<String?>(json['nfceImpressaoTributos']),
      nfceMargemSuperior:
          serializer.fromJson<double?>(json['nfceMargemSuperior']),
      nfceMargemInferior:
          serializer.fromJson<double?>(json['nfceMargemInferior']),
      nfceMargemDireita:
          serializer.fromJson<double?>(json['nfceMargemDireita']),
      nfceMargemEsquerda:
          serializer.fromJson<double?>(json['nfceMargemEsquerda']),
      nfceResolucaoImpressao:
          serializer.fromJson<int?>(json['nfceResolucaoImpressao']),
      respTecCnpj: serializer.fromJson<String?>(json['respTecCnpj']),
      respTecContato: serializer.fromJson<String?>(json['respTecContato']),
      respTecEmail: serializer.fromJson<String?>(json['respTecEmail']),
      respTecFone: serializer.fromJson<String?>(json['respTecFone']),
      respTecIdCsrt: serializer.fromJson<String?>(json['respTecIdCsrt']),
      respTecHashCsrt: serializer.fromJson<String?>(json['respTecHashCsrt']),
      nfceTamanhoFonteItem:
          serializer.fromJson<int?>(json['nfceTamanhoFonteItem']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'certificadoDigitalSerie':
          serializer.toJson<String?>(certificadoDigitalSerie),
      'certificadoDigitalCaminho':
          serializer.toJson<String?>(certificadoDigitalCaminho),
      'certificadoDigitalSenha':
          serializer.toJson<String?>(certificadoDigitalSenha),
      'tipoEmissao': serializer.toJson<int?>(tipoEmissao),
      'formatoImpressaoDanfe': serializer.toJson<int?>(formatoImpressaoDanfe),
      'processoEmissao': serializer.toJson<int?>(processoEmissao),
      'versaoProcessoEmissao':
          serializer.toJson<String?>(versaoProcessoEmissao),
      'caminhoLogomarca': serializer.toJson<String?>(caminhoLogomarca),
      'salvarXml': serializer.toJson<String?>(salvarXml),
      'caminhoSalvarXml': serializer.toJson<String?>(caminhoSalvarXml),
      'caminhoSchemas': serializer.toJson<String?>(caminhoSchemas),
      'caminhoArquivoDanfe': serializer.toJson<String?>(caminhoArquivoDanfe),
      'caminhoSalvarPdf': serializer.toJson<String?>(caminhoSalvarPdf),
      'webserviceUf': serializer.toJson<String?>(webserviceUf),
      'webserviceAmbiente': serializer.toJson<int?>(webserviceAmbiente),
      'webserviceProxyHost': serializer.toJson<String?>(webserviceProxyHost),
      'webserviceProxyPorta': serializer.toJson<int?>(webserviceProxyPorta),
      'webserviceProxyUsuario':
          serializer.toJson<String?>(webserviceProxyUsuario),
      'webserviceProxySenha': serializer.toJson<String?>(webserviceProxySenha),
      'webserviceVisualizar': serializer.toJson<String?>(webserviceVisualizar),
      'emailServidorSmtp': serializer.toJson<String?>(emailServidorSmtp),
      'emailPorta': serializer.toJson<int?>(emailPorta),
      'emailUsuario': serializer.toJson<String?>(emailUsuario),
      'emailSenha': serializer.toJson<String?>(emailSenha),
      'emailAssunto': serializer.toJson<String?>(emailAssunto),
      'emailAutenticaSsl': serializer.toJson<String?>(emailAutenticaSsl),
      'emailTexto': serializer.toJson<String?>(emailTexto),
      'nfceIdCsc': serializer.toJson<String?>(nfceIdCsc),
      'nfceCsc': serializer.toJson<String?>(nfceCsc),
      'nfceModeloImpressao': serializer.toJson<String?>(nfceModeloImpressao),
      'nfceImprimirItensUmaLinha':
          serializer.toJson<String?>(nfceImprimirItensUmaLinha),
      'nfceImprimirDescontoPorItem':
          serializer.toJson<String?>(nfceImprimirDescontoPorItem),
      'nfceImprimirQrcodeLateral':
          serializer.toJson<String?>(nfceImprimirQrcodeLateral),
      'nfceImprimirGtin': serializer.toJson<String?>(nfceImprimirGtin),
      'nfceImprimirNomeFantasia':
          serializer.toJson<String?>(nfceImprimirNomeFantasia),
      'nfceImpressaoTributos':
          serializer.toJson<String?>(nfceImpressaoTributos),
      'nfceMargemSuperior': serializer.toJson<double?>(nfceMargemSuperior),
      'nfceMargemInferior': serializer.toJson<double?>(nfceMargemInferior),
      'nfceMargemDireita': serializer.toJson<double?>(nfceMargemDireita),
      'nfceMargemEsquerda': serializer.toJson<double?>(nfceMargemEsquerda),
      'nfceResolucaoImpressao': serializer.toJson<int?>(nfceResolucaoImpressao),
      'respTecCnpj': serializer.toJson<String?>(respTecCnpj),
      'respTecContato': serializer.toJson<String?>(respTecContato),
      'respTecEmail': serializer.toJson<String?>(respTecEmail),
      'respTecFone': serializer.toJson<String?>(respTecFone),
      'respTecIdCsrt': serializer.toJson<String?>(respTecIdCsrt),
      'respTecHashCsrt': serializer.toJson<String?>(respTecHashCsrt),
      'nfceTamanhoFonteItem': serializer.toJson<int?>(nfceTamanhoFonteItem),
    };
  }

  NfeConfiguracao copyWith(
          {int? id,
          String? certificadoDigitalSerie,
          String? certificadoDigitalCaminho,
          String? certificadoDigitalSenha,
          int? tipoEmissao,
          int? formatoImpressaoDanfe,
          int? processoEmissao,
          String? versaoProcessoEmissao,
          String? caminhoLogomarca,
          String? salvarXml,
          String? caminhoSalvarXml,
          String? caminhoSchemas,
          String? caminhoArquivoDanfe,
          String? caminhoSalvarPdf,
          String? webserviceUf,
          int? webserviceAmbiente,
          String? webserviceProxyHost,
          int? webserviceProxyPorta,
          String? webserviceProxyUsuario,
          String? webserviceProxySenha,
          String? webserviceVisualizar,
          String? emailServidorSmtp,
          int? emailPorta,
          String? emailUsuario,
          String? emailSenha,
          String? emailAssunto,
          String? emailAutenticaSsl,
          String? emailTexto,
          String? nfceIdCsc,
          String? nfceCsc,
          String? nfceModeloImpressao,
          String? nfceImprimirItensUmaLinha,
          String? nfceImprimirDescontoPorItem,
          String? nfceImprimirQrcodeLateral,
          String? nfceImprimirGtin,
          String? nfceImprimirNomeFantasia,
          String? nfceImpressaoTributos,
          double? nfceMargemSuperior,
          double? nfceMargemInferior,
          double? nfceMargemDireita,
          double? nfceMargemEsquerda,
          int? nfceResolucaoImpressao,
          String? respTecCnpj,
          String? respTecContato,
          String? respTecEmail,
          String? respTecFone,
          String? respTecIdCsrt,
          String? respTecHashCsrt,
          int? nfceTamanhoFonteItem}) =>
      NfeConfiguracao(
        id: id ?? this.id,
        certificadoDigitalSerie:
            certificadoDigitalSerie ?? this.certificadoDigitalSerie,
        certificadoDigitalCaminho:
            certificadoDigitalCaminho ?? this.certificadoDigitalCaminho,
        certificadoDigitalSenha:
            certificadoDigitalSenha ?? this.certificadoDigitalSenha,
        tipoEmissao: tipoEmissao ?? this.tipoEmissao,
        formatoImpressaoDanfe:
            formatoImpressaoDanfe ?? this.formatoImpressaoDanfe,
        processoEmissao: processoEmissao ?? this.processoEmissao,
        versaoProcessoEmissao:
            versaoProcessoEmissao ?? this.versaoProcessoEmissao,
        caminhoLogomarca: caminhoLogomarca ?? this.caminhoLogomarca,
        salvarXml: salvarXml ?? this.salvarXml,
        caminhoSalvarXml: caminhoSalvarXml ?? this.caminhoSalvarXml,
        caminhoSchemas: caminhoSchemas ?? this.caminhoSchemas,
        caminhoArquivoDanfe: caminhoArquivoDanfe ?? this.caminhoArquivoDanfe,
        caminhoSalvarPdf: caminhoSalvarPdf ?? this.caminhoSalvarPdf,
        webserviceUf: webserviceUf ?? this.webserviceUf,
        webserviceAmbiente: webserviceAmbiente ?? this.webserviceAmbiente,
        webserviceProxyHost: webserviceProxyHost ?? this.webserviceProxyHost,
        webserviceProxyPorta: webserviceProxyPorta ?? this.webserviceProxyPorta,
        webserviceProxyUsuario:
            webserviceProxyUsuario ?? this.webserviceProxyUsuario,
        webserviceProxySenha: webserviceProxySenha ?? this.webserviceProxySenha,
        webserviceVisualizar: webserviceVisualizar ?? this.webserviceVisualizar,
        emailServidorSmtp: emailServidorSmtp ?? this.emailServidorSmtp,
        emailPorta: emailPorta ?? this.emailPorta,
        emailUsuario: emailUsuario ?? this.emailUsuario,
        emailSenha: emailSenha ?? this.emailSenha,
        emailAssunto: emailAssunto ?? this.emailAssunto,
        emailAutenticaSsl: emailAutenticaSsl ?? this.emailAutenticaSsl,
        emailTexto: emailTexto ?? this.emailTexto,
        nfceIdCsc: nfceIdCsc ?? this.nfceIdCsc,
        nfceCsc: nfceCsc ?? this.nfceCsc,
        nfceModeloImpressao: nfceModeloImpressao ?? this.nfceModeloImpressao,
        nfceImprimirItensUmaLinha:
            nfceImprimirItensUmaLinha ?? this.nfceImprimirItensUmaLinha,
        nfceImprimirDescontoPorItem:
            nfceImprimirDescontoPorItem ?? this.nfceImprimirDescontoPorItem,
        nfceImprimirQrcodeLateral:
            nfceImprimirQrcodeLateral ?? this.nfceImprimirQrcodeLateral,
        nfceImprimirGtin: nfceImprimirGtin ?? this.nfceImprimirGtin,
        nfceImprimirNomeFantasia:
            nfceImprimirNomeFantasia ?? this.nfceImprimirNomeFantasia,
        nfceImpressaoTributos:
            nfceImpressaoTributos ?? this.nfceImpressaoTributos,
        nfceMargemSuperior: nfceMargemSuperior ?? this.nfceMargemSuperior,
        nfceMargemInferior: nfceMargemInferior ?? this.nfceMargemInferior,
        nfceMargemDireita: nfceMargemDireita ?? this.nfceMargemDireita,
        nfceMargemEsquerda: nfceMargemEsquerda ?? this.nfceMargemEsquerda,
        nfceResolucaoImpressao:
            nfceResolucaoImpressao ?? this.nfceResolucaoImpressao,
        respTecCnpj: respTecCnpj ?? this.respTecCnpj,
        respTecContato: respTecContato ?? this.respTecContato,
        respTecEmail: respTecEmail ?? this.respTecEmail,
        respTecFone: respTecFone ?? this.respTecFone,
        respTecIdCsrt: respTecIdCsrt ?? this.respTecIdCsrt,
        respTecHashCsrt: respTecHashCsrt ?? this.respTecHashCsrt,
        nfceTamanhoFonteItem: nfceTamanhoFonteItem ?? this.nfceTamanhoFonteItem,
      );
  @override
  String toString() {
    return (StringBuffer('NfeConfiguracao(')
          ..write('id: $id, ')
          ..write('certificadoDigitalSerie: $certificadoDigitalSerie, ')
          ..write('certificadoDigitalCaminho: $certificadoDigitalCaminho, ')
          ..write('certificadoDigitalSenha: $certificadoDigitalSenha, ')
          ..write('tipoEmissao: $tipoEmissao, ')
          ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
          ..write('processoEmissao: $processoEmissao, ')
          ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
          ..write('caminhoLogomarca: $caminhoLogomarca, ')
          ..write('salvarXml: $salvarXml, ')
          ..write('caminhoSalvarXml: $caminhoSalvarXml, ')
          ..write('caminhoSchemas: $caminhoSchemas, ')
          ..write('caminhoArquivoDanfe: $caminhoArquivoDanfe, ')
          ..write('caminhoSalvarPdf: $caminhoSalvarPdf, ')
          ..write('webserviceUf: $webserviceUf, ')
          ..write('webserviceAmbiente: $webserviceAmbiente, ')
          ..write('webserviceProxyHost: $webserviceProxyHost, ')
          ..write('webserviceProxyPorta: $webserviceProxyPorta, ')
          ..write('webserviceProxyUsuario: $webserviceProxyUsuario, ')
          ..write('webserviceProxySenha: $webserviceProxySenha, ')
          ..write('webserviceVisualizar: $webserviceVisualizar, ')
          ..write('emailServidorSmtp: $emailServidorSmtp, ')
          ..write('emailPorta: $emailPorta, ')
          ..write('emailUsuario: $emailUsuario, ')
          ..write('emailSenha: $emailSenha, ')
          ..write('emailAssunto: $emailAssunto, ')
          ..write('emailAutenticaSsl: $emailAutenticaSsl, ')
          ..write('emailTexto: $emailTexto, ')
          ..write('nfceIdCsc: $nfceIdCsc, ')
          ..write('nfceCsc: $nfceCsc, ')
          ..write('nfceModeloImpressao: $nfceModeloImpressao, ')
          ..write('nfceImprimirItensUmaLinha: $nfceImprimirItensUmaLinha, ')
          ..write('nfceImprimirDescontoPorItem: $nfceImprimirDescontoPorItem, ')
          ..write('nfceImprimirQrcodeLateral: $nfceImprimirQrcodeLateral, ')
          ..write('nfceImprimirGtin: $nfceImprimirGtin, ')
          ..write('nfceImprimirNomeFantasia: $nfceImprimirNomeFantasia, ')
          ..write('nfceImpressaoTributos: $nfceImpressaoTributos, ')
          ..write('nfceMargemSuperior: $nfceMargemSuperior, ')
          ..write('nfceMargemInferior: $nfceMargemInferior, ')
          ..write('nfceMargemDireita: $nfceMargemDireita, ')
          ..write('nfceMargemEsquerda: $nfceMargemEsquerda, ')
          ..write('nfceResolucaoImpressao: $nfceResolucaoImpressao, ')
          ..write('respTecCnpj: $respTecCnpj, ')
          ..write('respTecContato: $respTecContato, ')
          ..write('respTecEmail: $respTecEmail, ')
          ..write('respTecFone: $respTecFone, ')
          ..write('respTecIdCsrt: $respTecIdCsrt, ')
          ..write('respTecHashCsrt: $respTecHashCsrt, ')
          ..write('nfceTamanhoFonteItem: $nfceTamanhoFonteItem')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        certificadoDigitalSerie,
        certificadoDigitalCaminho,
        certificadoDigitalSenha,
        tipoEmissao,
        formatoImpressaoDanfe,
        processoEmissao,
        versaoProcessoEmissao,
        caminhoLogomarca,
        salvarXml,
        caminhoSalvarXml,
        caminhoSchemas,
        caminhoArquivoDanfe,
        caminhoSalvarPdf,
        webserviceUf,
        webserviceAmbiente,
        webserviceProxyHost,
        webserviceProxyPorta,
        webserviceProxyUsuario,
        webserviceProxySenha,
        webserviceVisualizar,
        emailServidorSmtp,
        emailPorta,
        emailUsuario,
        emailSenha,
        emailAssunto,
        emailAutenticaSsl,
        emailTexto,
        nfceIdCsc,
        nfceCsc,
        nfceModeloImpressao,
        nfceImprimirItensUmaLinha,
        nfceImprimirDescontoPorItem,
        nfceImprimirQrcodeLateral,
        nfceImprimirGtin,
        nfceImprimirNomeFantasia,
        nfceImpressaoTributos,
        nfceMargemSuperior,
        nfceMargemInferior,
        nfceMargemDireita,
        nfceMargemEsquerda,
        nfceResolucaoImpressao,
        respTecCnpj,
        respTecContato,
        respTecEmail,
        respTecFone,
        respTecIdCsrt,
        respTecHashCsrt,
        nfceTamanhoFonteItem
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeConfiguracao &&
          other.id == this.id &&
          other.certificadoDigitalSerie == this.certificadoDigitalSerie &&
          other.certificadoDigitalCaminho == this.certificadoDigitalCaminho &&
          other.certificadoDigitalSenha == this.certificadoDigitalSenha &&
          other.tipoEmissao == this.tipoEmissao &&
          other.formatoImpressaoDanfe == this.formatoImpressaoDanfe &&
          other.processoEmissao == this.processoEmissao &&
          other.versaoProcessoEmissao == this.versaoProcessoEmissao &&
          other.caminhoLogomarca == this.caminhoLogomarca &&
          other.salvarXml == this.salvarXml &&
          other.caminhoSalvarXml == this.caminhoSalvarXml &&
          other.caminhoSchemas == this.caminhoSchemas &&
          other.caminhoArquivoDanfe == this.caminhoArquivoDanfe &&
          other.caminhoSalvarPdf == this.caminhoSalvarPdf &&
          other.webserviceUf == this.webserviceUf &&
          other.webserviceAmbiente == this.webserviceAmbiente &&
          other.webserviceProxyHost == this.webserviceProxyHost &&
          other.webserviceProxyPorta == this.webserviceProxyPorta &&
          other.webserviceProxyUsuario == this.webserviceProxyUsuario &&
          other.webserviceProxySenha == this.webserviceProxySenha &&
          other.webserviceVisualizar == this.webserviceVisualizar &&
          other.emailServidorSmtp == this.emailServidorSmtp &&
          other.emailPorta == this.emailPorta &&
          other.emailUsuario == this.emailUsuario &&
          other.emailSenha == this.emailSenha &&
          other.emailAssunto == this.emailAssunto &&
          other.emailAutenticaSsl == this.emailAutenticaSsl &&
          other.emailTexto == this.emailTexto &&
          other.nfceIdCsc == this.nfceIdCsc &&
          other.nfceCsc == this.nfceCsc &&
          other.nfceModeloImpressao == this.nfceModeloImpressao &&
          other.nfceImprimirItensUmaLinha == this.nfceImprimirItensUmaLinha &&
          other.nfceImprimirDescontoPorItem ==
              this.nfceImprimirDescontoPorItem &&
          other.nfceImprimirQrcodeLateral == this.nfceImprimirQrcodeLateral &&
          other.nfceImprimirGtin == this.nfceImprimirGtin &&
          other.nfceImprimirNomeFantasia == this.nfceImprimirNomeFantasia &&
          other.nfceImpressaoTributos == this.nfceImpressaoTributos &&
          other.nfceMargemSuperior == this.nfceMargemSuperior &&
          other.nfceMargemInferior == this.nfceMargemInferior &&
          other.nfceMargemDireita == this.nfceMargemDireita &&
          other.nfceMargemEsquerda == this.nfceMargemEsquerda &&
          other.nfceResolucaoImpressao == this.nfceResolucaoImpressao &&
          other.respTecCnpj == this.respTecCnpj &&
          other.respTecContato == this.respTecContato &&
          other.respTecEmail == this.respTecEmail &&
          other.respTecFone == this.respTecFone &&
          other.respTecIdCsrt == this.respTecIdCsrt &&
          other.respTecHashCsrt == this.respTecHashCsrt &&
          other.nfceTamanhoFonteItem == this.nfceTamanhoFonteItem);
}

class NfeConfiguracaosCompanion extends UpdateCompanion<NfeConfiguracao> {
  final Value<int?> id;
  final Value<String?> certificadoDigitalSerie;
  final Value<String?> certificadoDigitalCaminho;
  final Value<String?> certificadoDigitalSenha;
  final Value<int?> tipoEmissao;
  final Value<int?> formatoImpressaoDanfe;
  final Value<int?> processoEmissao;
  final Value<String?> versaoProcessoEmissao;
  final Value<String?> caminhoLogomarca;
  final Value<String?> salvarXml;
  final Value<String?> caminhoSalvarXml;
  final Value<String?> caminhoSchemas;
  final Value<String?> caminhoArquivoDanfe;
  final Value<String?> caminhoSalvarPdf;
  final Value<String?> webserviceUf;
  final Value<int?> webserviceAmbiente;
  final Value<String?> webserviceProxyHost;
  final Value<int?> webserviceProxyPorta;
  final Value<String?> webserviceProxyUsuario;
  final Value<String?> webserviceProxySenha;
  final Value<String?> webserviceVisualizar;
  final Value<String?> emailServidorSmtp;
  final Value<int?> emailPorta;
  final Value<String?> emailUsuario;
  final Value<String?> emailSenha;
  final Value<String?> emailAssunto;
  final Value<String?> emailAutenticaSsl;
  final Value<String?> emailTexto;
  final Value<String?> nfceIdCsc;
  final Value<String?> nfceCsc;
  final Value<String?> nfceModeloImpressao;
  final Value<String?> nfceImprimirItensUmaLinha;
  final Value<String?> nfceImprimirDescontoPorItem;
  final Value<String?> nfceImprimirQrcodeLateral;
  final Value<String?> nfceImprimirGtin;
  final Value<String?> nfceImprimirNomeFantasia;
  final Value<String?> nfceImpressaoTributos;
  final Value<double?> nfceMargemSuperior;
  final Value<double?> nfceMargemInferior;
  final Value<double?> nfceMargemDireita;
  final Value<double?> nfceMargemEsquerda;
  final Value<int?> nfceResolucaoImpressao;
  final Value<String?> respTecCnpj;
  final Value<String?> respTecContato;
  final Value<String?> respTecEmail;
  final Value<String?> respTecFone;
  final Value<String?> respTecIdCsrt;
  final Value<String?> respTecHashCsrt;
  final Value<int?> nfceTamanhoFonteItem;
  const NfeConfiguracaosCompanion({
    this.id = const Value.absent(),
    this.certificadoDigitalSerie = const Value.absent(),
    this.certificadoDigitalCaminho = const Value.absent(),
    this.certificadoDigitalSenha = const Value.absent(),
    this.tipoEmissao = const Value.absent(),
    this.formatoImpressaoDanfe = const Value.absent(),
    this.processoEmissao = const Value.absent(),
    this.versaoProcessoEmissao = const Value.absent(),
    this.caminhoLogomarca = const Value.absent(),
    this.salvarXml = const Value.absent(),
    this.caminhoSalvarXml = const Value.absent(),
    this.caminhoSchemas = const Value.absent(),
    this.caminhoArquivoDanfe = const Value.absent(),
    this.caminhoSalvarPdf = const Value.absent(),
    this.webserviceUf = const Value.absent(),
    this.webserviceAmbiente = const Value.absent(),
    this.webserviceProxyHost = const Value.absent(),
    this.webserviceProxyPorta = const Value.absent(),
    this.webserviceProxyUsuario = const Value.absent(),
    this.webserviceProxySenha = const Value.absent(),
    this.webserviceVisualizar = const Value.absent(),
    this.emailServidorSmtp = const Value.absent(),
    this.emailPorta = const Value.absent(),
    this.emailUsuario = const Value.absent(),
    this.emailSenha = const Value.absent(),
    this.emailAssunto = const Value.absent(),
    this.emailAutenticaSsl = const Value.absent(),
    this.emailTexto = const Value.absent(),
    this.nfceIdCsc = const Value.absent(),
    this.nfceCsc = const Value.absent(),
    this.nfceModeloImpressao = const Value.absent(),
    this.nfceImprimirItensUmaLinha = const Value.absent(),
    this.nfceImprimirDescontoPorItem = const Value.absent(),
    this.nfceImprimirQrcodeLateral = const Value.absent(),
    this.nfceImprimirGtin = const Value.absent(),
    this.nfceImprimirNomeFantasia = const Value.absent(),
    this.nfceImpressaoTributos = const Value.absent(),
    this.nfceMargemSuperior = const Value.absent(),
    this.nfceMargemInferior = const Value.absent(),
    this.nfceMargemDireita = const Value.absent(),
    this.nfceMargemEsquerda = const Value.absent(),
    this.nfceResolucaoImpressao = const Value.absent(),
    this.respTecCnpj = const Value.absent(),
    this.respTecContato = const Value.absent(),
    this.respTecEmail = const Value.absent(),
    this.respTecFone = const Value.absent(),
    this.respTecIdCsrt = const Value.absent(),
    this.respTecHashCsrt = const Value.absent(),
    this.nfceTamanhoFonteItem = const Value.absent(),
  });
  NfeConfiguracaosCompanion.insert({
    this.id = const Value.absent(),
    this.certificadoDigitalSerie = const Value.absent(),
    this.certificadoDigitalCaminho = const Value.absent(),
    this.certificadoDigitalSenha = const Value.absent(),
    this.tipoEmissao = const Value.absent(),
    this.formatoImpressaoDanfe = const Value.absent(),
    this.processoEmissao = const Value.absent(),
    this.versaoProcessoEmissao = const Value.absent(),
    this.caminhoLogomarca = const Value.absent(),
    this.salvarXml = const Value.absent(),
    this.caminhoSalvarXml = const Value.absent(),
    this.caminhoSchemas = const Value.absent(),
    this.caminhoArquivoDanfe = const Value.absent(),
    this.caminhoSalvarPdf = const Value.absent(),
    this.webserviceUf = const Value.absent(),
    this.webserviceAmbiente = const Value.absent(),
    this.webserviceProxyHost = const Value.absent(),
    this.webserviceProxyPorta = const Value.absent(),
    this.webserviceProxyUsuario = const Value.absent(),
    this.webserviceProxySenha = const Value.absent(),
    this.webserviceVisualizar = const Value.absent(),
    this.emailServidorSmtp = const Value.absent(),
    this.emailPorta = const Value.absent(),
    this.emailUsuario = const Value.absent(),
    this.emailSenha = const Value.absent(),
    this.emailAssunto = const Value.absent(),
    this.emailAutenticaSsl = const Value.absent(),
    this.emailTexto = const Value.absent(),
    this.nfceIdCsc = const Value.absent(),
    this.nfceCsc = const Value.absent(),
    this.nfceModeloImpressao = const Value.absent(),
    this.nfceImprimirItensUmaLinha = const Value.absent(),
    this.nfceImprimirDescontoPorItem = const Value.absent(),
    this.nfceImprimirQrcodeLateral = const Value.absent(),
    this.nfceImprimirGtin = const Value.absent(),
    this.nfceImprimirNomeFantasia = const Value.absent(),
    this.nfceImpressaoTributos = const Value.absent(),
    this.nfceMargemSuperior = const Value.absent(),
    this.nfceMargemInferior = const Value.absent(),
    this.nfceMargemDireita = const Value.absent(),
    this.nfceMargemEsquerda = const Value.absent(),
    this.nfceResolucaoImpressao = const Value.absent(),
    this.respTecCnpj = const Value.absent(),
    this.respTecContato = const Value.absent(),
    this.respTecEmail = const Value.absent(),
    this.respTecFone = const Value.absent(),
    this.respTecIdCsrt = const Value.absent(),
    this.respTecHashCsrt = const Value.absent(),
    this.nfceTamanhoFonteItem = const Value.absent(),
  });
  static Insertable<NfeConfiguracao> custom({
    Expression<int>? id,
    Expression<String>? certificadoDigitalSerie,
    Expression<String>? certificadoDigitalCaminho,
    Expression<String>? certificadoDigitalSenha,
    Expression<int>? tipoEmissao,
    Expression<int>? formatoImpressaoDanfe,
    Expression<int>? processoEmissao,
    Expression<String>? versaoProcessoEmissao,
    Expression<String>? caminhoLogomarca,
    Expression<String>? salvarXml,
    Expression<String>? caminhoSalvarXml,
    Expression<String>? caminhoSchemas,
    Expression<String>? caminhoArquivoDanfe,
    Expression<String>? caminhoSalvarPdf,
    Expression<String>? webserviceUf,
    Expression<int>? webserviceAmbiente,
    Expression<String>? webserviceProxyHost,
    Expression<int>? webserviceProxyPorta,
    Expression<String>? webserviceProxyUsuario,
    Expression<String>? webserviceProxySenha,
    Expression<String>? webserviceVisualizar,
    Expression<String>? emailServidorSmtp,
    Expression<int>? emailPorta,
    Expression<String>? emailUsuario,
    Expression<String>? emailSenha,
    Expression<String>? emailAssunto,
    Expression<String>? emailAutenticaSsl,
    Expression<String>? emailTexto,
    Expression<String>? nfceIdCsc,
    Expression<String>? nfceCsc,
    Expression<String>? nfceModeloImpressao,
    Expression<String>? nfceImprimirItensUmaLinha,
    Expression<String>? nfceImprimirDescontoPorItem,
    Expression<String>? nfceImprimirQrcodeLateral,
    Expression<String>? nfceImprimirGtin,
    Expression<String>? nfceImprimirNomeFantasia,
    Expression<String>? nfceImpressaoTributos,
    Expression<double>? nfceMargemSuperior,
    Expression<double>? nfceMargemInferior,
    Expression<double>? nfceMargemDireita,
    Expression<double>? nfceMargemEsquerda,
    Expression<int>? nfceResolucaoImpressao,
    Expression<String>? respTecCnpj,
    Expression<String>? respTecContato,
    Expression<String>? respTecEmail,
    Expression<String>? respTecFone,
    Expression<String>? respTecIdCsrt,
    Expression<String>? respTecHashCsrt,
    Expression<int>? nfceTamanhoFonteItem,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (certificadoDigitalSerie != null)
        'CERTIFICADO_DIGITAL_SERIE': certificadoDigitalSerie,
      if (certificadoDigitalCaminho != null)
        'CERTIFICADO_DIGITAL_CAMINHO': certificadoDigitalCaminho,
      if (certificadoDigitalSenha != null)
        'CERTIFICADO_DIGITAL_SENHA': certificadoDigitalSenha,
      if (tipoEmissao != null) 'TIPO_EMISSAO': tipoEmissao,
      if (formatoImpressaoDanfe != null)
        'FORMATO_IMPRESSAO_DANFE': formatoImpressaoDanfe,
      if (processoEmissao != null) 'PROCESSO_EMISSAO': processoEmissao,
      if (versaoProcessoEmissao != null)
        'VERSAO_PROCESSO_EMISSAO': versaoProcessoEmissao,
      if (caminhoLogomarca != null) 'CAMINHO_LOGOMARCA': caminhoLogomarca,
      if (salvarXml != null) 'SALVAR_XML': salvarXml,
      if (caminhoSalvarXml != null) 'CAMINHO_SALVAR_XML': caminhoSalvarXml,
      if (caminhoSchemas != null) 'CAMINHO_SCHEMAS': caminhoSchemas,
      if (caminhoArquivoDanfe != null)
        'CAMINHO_ARQUIVO_DANFE': caminhoArquivoDanfe,
      if (caminhoSalvarPdf != null) 'CAMINHO_SALVAR_PDF': caminhoSalvarPdf,
      if (webserviceUf != null) 'WEBSERVICE_UF': webserviceUf,
      if (webserviceAmbiente != null) 'WEBSERVICE_AMBIENTE': webserviceAmbiente,
      if (webserviceProxyHost != null)
        'WEBSERVICE_PROXY_HOST': webserviceProxyHost,
      if (webserviceProxyPorta != null)
        'WEBSERVICE_PROXY_PORTA': webserviceProxyPorta,
      if (webserviceProxyUsuario != null)
        'WEBSERVICE_PROXY_USUARIO': webserviceProxyUsuario,
      if (webserviceProxySenha != null)
        'WEBSERVICE_PROXY_SENHA': webserviceProxySenha,
      if (webserviceVisualizar != null)
        'WEBSERVICE_VISUALIZAR': webserviceVisualizar,
      if (emailServidorSmtp != null) 'EMAIL_SERVIDOR_SMTP': emailServidorSmtp,
      if (emailPorta != null) 'EMAIL_PORTA': emailPorta,
      if (emailUsuario != null) 'EMAIL_USUARIO': emailUsuario,
      if (emailSenha != null) 'EMAIL_SENHA': emailSenha,
      if (emailAssunto != null) 'EMAIL_ASSUNTO': emailAssunto,
      if (emailAutenticaSsl != null) 'EMAIL_AUTENTICA_SSL': emailAutenticaSsl,
      if (emailTexto != null) 'EMAIL_TEXTO': emailTexto,
      if (nfceIdCsc != null) 'NFCE_ID_CSC': nfceIdCsc,
      if (nfceCsc != null) 'NFCE_CSC': nfceCsc,
      if (nfceModeloImpressao != null)
        'NFCE_MODELO_IMPRESSAO': nfceModeloImpressao,
      if (nfceImprimirItensUmaLinha != null)
        'NFCE_IMPRIMIR_ITENS_UMA_LINHA': nfceImprimirItensUmaLinha,
      if (nfceImprimirDescontoPorItem != null)
        'NFCE_IMPRIMIR_DESCONTO_POR_ITEM': nfceImprimirDescontoPorItem,
      if (nfceImprimirQrcodeLateral != null)
        'NFCE_IMPRIMIR_QRCODE_LATERAL': nfceImprimirQrcodeLateral,
      if (nfceImprimirGtin != null) 'NFCE_IMPRIMIR_GTIN': nfceImprimirGtin,
      if (nfceImprimirNomeFantasia != null)
        'NFCE_IMPRIMIR_NOME_FANTASIA': nfceImprimirNomeFantasia,
      if (nfceImpressaoTributos != null)
        'NFCE_IMPRESSAO_TRIBUTOS': nfceImpressaoTributos,
      if (nfceMargemSuperior != null)
        'NFCE_MARGEM_SUPERIOR': nfceMargemSuperior,
      if (nfceMargemInferior != null)
        'NFCE_MARGEM_INFERIOR': nfceMargemInferior,
      if (nfceMargemDireita != null) 'NFCE_MARGEM_DIREITA': nfceMargemDireita,
      if (nfceMargemEsquerda != null)
        'NFCE_MARGEM_ESQUERDA': nfceMargemEsquerda,
      if (nfceResolucaoImpressao != null)
        'NFCE_RESOLUCAO_IMPRESSAO': nfceResolucaoImpressao,
      if (respTecCnpj != null) 'RESP_TEC_CNPJ': respTecCnpj,
      if (respTecContato != null) 'RESP_TEC_CONTATO': respTecContato,
      if (respTecEmail != null) 'RESP_TEC_EMAIL': respTecEmail,
      if (respTecFone != null) 'RESP_TEC_FONE': respTecFone,
      if (respTecIdCsrt != null) 'RESP_TEC_ID_CSRT': respTecIdCsrt,
      if (respTecHashCsrt != null) 'RESP_TEC_HASH_CSRT': respTecHashCsrt,
      if (nfceTamanhoFonteItem != null)
        'NFCE_TAMANHO_FONTE_ITEM': nfceTamanhoFonteItem,
    });
  }

  NfeConfiguracaosCompanion copyWith(
      {Value<int?>? id,
      Value<String?>? certificadoDigitalSerie,
      Value<String?>? certificadoDigitalCaminho,
      Value<String?>? certificadoDigitalSenha,
      Value<int?>? tipoEmissao,
      Value<int?>? formatoImpressaoDanfe,
      Value<int?>? processoEmissao,
      Value<String?>? versaoProcessoEmissao,
      Value<String?>? caminhoLogomarca,
      Value<String?>? salvarXml,
      Value<String?>? caminhoSalvarXml,
      Value<String?>? caminhoSchemas,
      Value<String?>? caminhoArquivoDanfe,
      Value<String?>? caminhoSalvarPdf,
      Value<String?>? webserviceUf,
      Value<int?>? webserviceAmbiente,
      Value<String?>? webserviceProxyHost,
      Value<int?>? webserviceProxyPorta,
      Value<String?>? webserviceProxyUsuario,
      Value<String?>? webserviceProxySenha,
      Value<String?>? webserviceVisualizar,
      Value<String?>? emailServidorSmtp,
      Value<int?>? emailPorta,
      Value<String?>? emailUsuario,
      Value<String?>? emailSenha,
      Value<String?>? emailAssunto,
      Value<String?>? emailAutenticaSsl,
      Value<String?>? emailTexto,
      Value<String?>? nfceIdCsc,
      Value<String?>? nfceCsc,
      Value<String?>? nfceModeloImpressao,
      Value<String?>? nfceImprimirItensUmaLinha,
      Value<String?>? nfceImprimirDescontoPorItem,
      Value<String?>? nfceImprimirQrcodeLateral,
      Value<String?>? nfceImprimirGtin,
      Value<String?>? nfceImprimirNomeFantasia,
      Value<String?>? nfceImpressaoTributos,
      Value<double?>? nfceMargemSuperior,
      Value<double?>? nfceMargemInferior,
      Value<double?>? nfceMargemDireita,
      Value<double?>? nfceMargemEsquerda,
      Value<int?>? nfceResolucaoImpressao,
      Value<String?>? respTecCnpj,
      Value<String?>? respTecContato,
      Value<String?>? respTecEmail,
      Value<String?>? respTecFone,
      Value<String?>? respTecIdCsrt,
      Value<String?>? respTecHashCsrt,
      Value<int?>? nfceTamanhoFonteItem}) {
    return NfeConfiguracaosCompanion(
      id: id ?? this.id,
      certificadoDigitalSerie:
          certificadoDigitalSerie ?? this.certificadoDigitalSerie,
      certificadoDigitalCaminho:
          certificadoDigitalCaminho ?? this.certificadoDigitalCaminho,
      certificadoDigitalSenha:
          certificadoDigitalSenha ?? this.certificadoDigitalSenha,
      tipoEmissao: tipoEmissao ?? this.tipoEmissao,
      formatoImpressaoDanfe:
          formatoImpressaoDanfe ?? this.formatoImpressaoDanfe,
      processoEmissao: processoEmissao ?? this.processoEmissao,
      versaoProcessoEmissao:
          versaoProcessoEmissao ?? this.versaoProcessoEmissao,
      caminhoLogomarca: caminhoLogomarca ?? this.caminhoLogomarca,
      salvarXml: salvarXml ?? this.salvarXml,
      caminhoSalvarXml: caminhoSalvarXml ?? this.caminhoSalvarXml,
      caminhoSchemas: caminhoSchemas ?? this.caminhoSchemas,
      caminhoArquivoDanfe: caminhoArquivoDanfe ?? this.caminhoArquivoDanfe,
      caminhoSalvarPdf: caminhoSalvarPdf ?? this.caminhoSalvarPdf,
      webserviceUf: webserviceUf ?? this.webserviceUf,
      webserviceAmbiente: webserviceAmbiente ?? this.webserviceAmbiente,
      webserviceProxyHost: webserviceProxyHost ?? this.webserviceProxyHost,
      webserviceProxyPorta: webserviceProxyPorta ?? this.webserviceProxyPorta,
      webserviceProxyUsuario:
          webserviceProxyUsuario ?? this.webserviceProxyUsuario,
      webserviceProxySenha: webserviceProxySenha ?? this.webserviceProxySenha,
      webserviceVisualizar: webserviceVisualizar ?? this.webserviceVisualizar,
      emailServidorSmtp: emailServidorSmtp ?? this.emailServidorSmtp,
      emailPorta: emailPorta ?? this.emailPorta,
      emailUsuario: emailUsuario ?? this.emailUsuario,
      emailSenha: emailSenha ?? this.emailSenha,
      emailAssunto: emailAssunto ?? this.emailAssunto,
      emailAutenticaSsl: emailAutenticaSsl ?? this.emailAutenticaSsl,
      emailTexto: emailTexto ?? this.emailTexto,
      nfceIdCsc: nfceIdCsc ?? this.nfceIdCsc,
      nfceCsc: nfceCsc ?? this.nfceCsc,
      nfceModeloImpressao: nfceModeloImpressao ?? this.nfceModeloImpressao,
      nfceImprimirItensUmaLinha:
          nfceImprimirItensUmaLinha ?? this.nfceImprimirItensUmaLinha,
      nfceImprimirDescontoPorItem:
          nfceImprimirDescontoPorItem ?? this.nfceImprimirDescontoPorItem,
      nfceImprimirQrcodeLateral:
          nfceImprimirQrcodeLateral ?? this.nfceImprimirQrcodeLateral,
      nfceImprimirGtin: nfceImprimirGtin ?? this.nfceImprimirGtin,
      nfceImprimirNomeFantasia:
          nfceImprimirNomeFantasia ?? this.nfceImprimirNomeFantasia,
      nfceImpressaoTributos:
          nfceImpressaoTributos ?? this.nfceImpressaoTributos,
      nfceMargemSuperior: nfceMargemSuperior ?? this.nfceMargemSuperior,
      nfceMargemInferior: nfceMargemInferior ?? this.nfceMargemInferior,
      nfceMargemDireita: nfceMargemDireita ?? this.nfceMargemDireita,
      nfceMargemEsquerda: nfceMargemEsquerda ?? this.nfceMargemEsquerda,
      nfceResolucaoImpressao:
          nfceResolucaoImpressao ?? this.nfceResolucaoImpressao,
      respTecCnpj: respTecCnpj ?? this.respTecCnpj,
      respTecContato: respTecContato ?? this.respTecContato,
      respTecEmail: respTecEmail ?? this.respTecEmail,
      respTecFone: respTecFone ?? this.respTecFone,
      respTecIdCsrt: respTecIdCsrt ?? this.respTecIdCsrt,
      respTecHashCsrt: respTecHashCsrt ?? this.respTecHashCsrt,
      nfceTamanhoFonteItem: nfceTamanhoFonteItem ?? this.nfceTamanhoFonteItem,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (certificadoDigitalSerie.present) {
      map['CERTIFICADO_DIGITAL_SERIE'] =
          Variable<String>(certificadoDigitalSerie.value);
    }
    if (certificadoDigitalCaminho.present) {
      map['CERTIFICADO_DIGITAL_CAMINHO'] =
          Variable<String>(certificadoDigitalCaminho.value);
    }
    if (certificadoDigitalSenha.present) {
      map['CERTIFICADO_DIGITAL_SENHA'] =
          Variable<String>(certificadoDigitalSenha.value);
    }
    if (tipoEmissao.present) {
      map['TIPO_EMISSAO'] = Variable<int>(tipoEmissao.value);
    }
    if (formatoImpressaoDanfe.present) {
      map['FORMATO_IMPRESSAO_DANFE'] =
          Variable<int>(formatoImpressaoDanfe.value);
    }
    if (processoEmissao.present) {
      map['PROCESSO_EMISSAO'] = Variable<int>(processoEmissao.value);
    }
    if (versaoProcessoEmissao.present) {
      map['VERSAO_PROCESSO_EMISSAO'] =
          Variable<String>(versaoProcessoEmissao.value);
    }
    if (caminhoLogomarca.present) {
      map['CAMINHO_LOGOMARCA'] = Variable<String>(caminhoLogomarca.value);
    }
    if (salvarXml.present) {
      map['SALVAR_XML'] = Variable<String>(salvarXml.value);
    }
    if (caminhoSalvarXml.present) {
      map['CAMINHO_SALVAR_XML'] = Variable<String>(caminhoSalvarXml.value);
    }
    if (caminhoSchemas.present) {
      map['CAMINHO_SCHEMAS'] = Variable<String>(caminhoSchemas.value);
    }
    if (caminhoArquivoDanfe.present) {
      map['CAMINHO_ARQUIVO_DANFE'] =
          Variable<String>(caminhoArquivoDanfe.value);
    }
    if (caminhoSalvarPdf.present) {
      map['CAMINHO_SALVAR_PDF'] = Variable<String>(caminhoSalvarPdf.value);
    }
    if (webserviceUf.present) {
      map['WEBSERVICE_UF'] = Variable<String>(webserviceUf.value);
    }
    if (webserviceAmbiente.present) {
      map['WEBSERVICE_AMBIENTE'] = Variable<int>(webserviceAmbiente.value);
    }
    if (webserviceProxyHost.present) {
      map['WEBSERVICE_PROXY_HOST'] =
          Variable<String>(webserviceProxyHost.value);
    }
    if (webserviceProxyPorta.present) {
      map['WEBSERVICE_PROXY_PORTA'] =
          Variable<int>(webserviceProxyPorta.value);
    }
    if (webserviceProxyUsuario.present) {
      map['WEBSERVICE_PROXY_USUARIO'] =
          Variable<String>(webserviceProxyUsuario.value);
    }
    if (webserviceProxySenha.present) {
      map['WEBSERVICE_PROXY_SENHA'] =
          Variable<String>(webserviceProxySenha.value);
    }
    if (webserviceVisualizar.present) {
      map['WEBSERVICE_VISUALIZAR'] =
          Variable<String>(webserviceVisualizar.value);
    }
    if (emailServidorSmtp.present) {
      map['EMAIL_SERVIDOR_SMTP'] = Variable<String>(emailServidorSmtp.value);
    }
    if (emailPorta.present) {
      map['EMAIL_PORTA'] = Variable<int>(emailPorta.value);
    }
    if (emailUsuario.present) {
      map['EMAIL_USUARIO'] = Variable<String>(emailUsuario.value);
    }
    if (emailSenha.present) {
      map['EMAIL_SENHA'] = Variable<String>(emailSenha.value);
    }
    if (emailAssunto.present) {
      map['EMAIL_ASSUNTO'] = Variable<String>(emailAssunto.value);
    }
    if (emailAutenticaSsl.present) {
      map['EMAIL_AUTENTICA_SSL'] = Variable<String>(emailAutenticaSsl.value);
    }
    if (emailTexto.present) {
      map['EMAIL_TEXTO'] = Variable<String>(emailTexto.value);
    }
    if (nfceIdCsc.present) {
      map['NFCE_ID_CSC'] = Variable<String>(nfceIdCsc.value);
    }
    if (nfceCsc.present) {
      map['NFCE_CSC'] = Variable<String>(nfceCsc.value);
    }
    if (nfceModeloImpressao.present) {
      map['NFCE_MODELO_IMPRESSAO'] =
          Variable<String>(nfceModeloImpressao.value);
    }
    if (nfceImprimirItensUmaLinha.present) {
      map['NFCE_IMPRIMIR_ITENS_UMA_LINHA'] =
          Variable<String>(nfceImprimirItensUmaLinha.value);
    }
    if (nfceImprimirDescontoPorItem.present) {
      map['NFCE_IMPRIMIR_DESCONTO_POR_ITEM'] =
          Variable<String>(nfceImprimirDescontoPorItem.value);
    }
    if (nfceImprimirQrcodeLateral.present) {
      map['NFCE_IMPRIMIR_QRCODE_LATERAL'] =
          Variable<String>(nfceImprimirQrcodeLateral.value);
    }
    if (nfceImprimirGtin.present) {
      map['NFCE_IMPRIMIR_GTIN'] = Variable<String>(nfceImprimirGtin.value);
    }
    if (nfceImprimirNomeFantasia.present) {
      map['NFCE_IMPRIMIR_NOME_FANTASIA'] =
          Variable<String>(nfceImprimirNomeFantasia.value);
    }
    if (nfceImpressaoTributos.present) {
      map['NFCE_IMPRESSAO_TRIBUTOS'] =
          Variable<String>(nfceImpressaoTributos.value);
    }
    if (nfceMargemSuperior.present) {
      map['NFCE_MARGEM_SUPERIOR'] = Variable<double>(nfceMargemSuperior.value);
    }
    if (nfceMargemInferior.present) {
      map['NFCE_MARGEM_INFERIOR'] = Variable<double>(nfceMargemInferior.value);
    }
    if (nfceMargemDireita.present) {
      map['NFCE_MARGEM_DIREITA'] = Variable<double>(nfceMargemDireita.value);
    }
    if (nfceMargemEsquerda.present) {
      map['NFCE_MARGEM_ESQUERDA'] = Variable<double>(nfceMargemEsquerda.value);
    }
    if (nfceResolucaoImpressao.present) {
      map['NFCE_RESOLUCAO_IMPRESSAO'] =
          Variable<int>(nfceResolucaoImpressao.value);
    }
    if (respTecCnpj.present) {
      map['RESP_TEC_CNPJ'] = Variable<String>(respTecCnpj.value);
    }
    if (respTecContato.present) {
      map['RESP_TEC_CONTATO'] = Variable<String>(respTecContato.value);
    }
    if (respTecEmail.present) {
      map['RESP_TEC_EMAIL'] = Variable<String>(respTecEmail.value);
    }
    if (respTecFone.present) {
      map['RESP_TEC_FONE'] = Variable<String>(respTecFone.value);
    }
    if (respTecIdCsrt.present) {
      map['RESP_TEC_ID_CSRT'] = Variable<String>(respTecIdCsrt.value);
    }
    if (respTecHashCsrt.present) {
      map['RESP_TEC_HASH_CSRT'] = Variable<String>(respTecHashCsrt.value);
    }
    if (nfceTamanhoFonteItem.present) {
      map['NFCE_TAMANHO_FONTE_ITEM'] =
          Variable<int>(nfceTamanhoFonteItem.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeConfiguracaosCompanion(')
          ..write('id: $id, ')
          ..write('certificadoDigitalSerie: $certificadoDigitalSerie, ')
          ..write('certificadoDigitalCaminho: $certificadoDigitalCaminho, ')
          ..write('certificadoDigitalSenha: $certificadoDigitalSenha, ')
          ..write('tipoEmissao: $tipoEmissao, ')
          ..write('formatoImpressaoDanfe: $formatoImpressaoDanfe, ')
          ..write('processoEmissao: $processoEmissao, ')
          ..write('versaoProcessoEmissao: $versaoProcessoEmissao, ')
          ..write('caminhoLogomarca: $caminhoLogomarca, ')
          ..write('salvarXml: $salvarXml, ')
          ..write('caminhoSalvarXml: $caminhoSalvarXml, ')
          ..write('caminhoSchemas: $caminhoSchemas, ')
          ..write('caminhoArquivoDanfe: $caminhoArquivoDanfe, ')
          ..write('caminhoSalvarPdf: $caminhoSalvarPdf, ')
          ..write('webserviceUf: $webserviceUf, ')
          ..write('webserviceAmbiente: $webserviceAmbiente, ')
          ..write('webserviceProxyHost: $webserviceProxyHost, ')
          ..write('webserviceProxyPorta: $webserviceProxyPorta, ')
          ..write('webserviceProxyUsuario: $webserviceProxyUsuario, ')
          ..write('webserviceProxySenha: $webserviceProxySenha, ')
          ..write('webserviceVisualizar: $webserviceVisualizar, ')
          ..write('emailServidorSmtp: $emailServidorSmtp, ')
          ..write('emailPorta: $emailPorta, ')
          ..write('emailUsuario: $emailUsuario, ')
          ..write('emailSenha: $emailSenha, ')
          ..write('emailAssunto: $emailAssunto, ')
          ..write('emailAutenticaSsl: $emailAutenticaSsl, ')
          ..write('emailTexto: $emailTexto, ')
          ..write('nfceIdCsc: $nfceIdCsc, ')
          ..write('nfceCsc: $nfceCsc, ')
          ..write('nfceModeloImpressao: $nfceModeloImpressao, ')
          ..write('nfceImprimirItensUmaLinha: $nfceImprimirItensUmaLinha, ')
          ..write('nfceImprimirDescontoPorItem: $nfceImprimirDescontoPorItem, ')
          ..write('nfceImprimirQrcodeLateral: $nfceImprimirQrcodeLateral, ')
          ..write('nfceImprimirGtin: $nfceImprimirGtin, ')
          ..write('nfceImprimirNomeFantasia: $nfceImprimirNomeFantasia, ')
          ..write('nfceImpressaoTributos: $nfceImpressaoTributos, ')
          ..write('nfceMargemSuperior: $nfceMargemSuperior, ')
          ..write('nfceMargemInferior: $nfceMargemInferior, ')
          ..write('nfceMargemDireita: $nfceMargemDireita, ')
          ..write('nfceMargemEsquerda: $nfceMargemEsquerda, ')
          ..write('nfceResolucaoImpressao: $nfceResolucaoImpressao, ')
          ..write('respTecCnpj: $respTecCnpj, ')
          ..write('respTecContato: $respTecContato, ')
          ..write('respTecEmail: $respTecEmail, ')
          ..write('respTecFone: $respTecFone, ')
          ..write('respTecIdCsrt: $respTecIdCsrt, ')
          ..write('respTecHashCsrt: $respTecHashCsrt, ')
          ..write('nfceTamanhoFonteItem: $nfceTamanhoFonteItem')
          ..write(')'))
        .toString();
  }
}

class $NfeConfiguracaosTable extends NfeConfiguracaos
    with TableInfo<$NfeConfiguracaosTable, NfeConfiguracao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeConfiguracaosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _certificadoDigitalSerieMeta =
      const VerificationMeta('certificadoDigitalSerie');
  @override
  late final GeneratedColumn<String> certificadoDigitalSerie =
      GeneratedColumn<String>('CERTIFICADO_DIGITAL_SERIE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _certificadoDigitalCaminhoMeta =
      const VerificationMeta('certificadoDigitalCaminho');
  @override
  late final GeneratedColumn<String> certificadoDigitalCaminho =
      GeneratedColumn<String>('CERTIFICADO_DIGITAL_CAMINHO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _certificadoDigitalSenhaMeta =
      const VerificationMeta('certificadoDigitalSenha');
  @override
  late final GeneratedColumn<String> certificadoDigitalSenha =
      GeneratedColumn<String>('CERTIFICADO_DIGITAL_SENHA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _tipoEmissaoMeta =
      const VerificationMeta('tipoEmissao');
  @override
  late final GeneratedColumn<int> tipoEmissao = GeneratedColumn<int>(
      'TIPO_EMISSAO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _formatoImpressaoDanfeMeta =
      const VerificationMeta('formatoImpressaoDanfe');
  @override
  late final GeneratedColumn<int> formatoImpressaoDanfe =
      GeneratedColumn<int>('FORMATO_IMPRESSAO_DANFE', aliasedName, true,
          type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _processoEmissaoMeta =
      const VerificationMeta('processoEmissao');
  @override
  late final GeneratedColumn<int> processoEmissao = GeneratedColumn<int>(
      'PROCESSO_EMISSAO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _versaoProcessoEmissaoMeta =
      const VerificationMeta('versaoProcessoEmissao');
  @override
  late final GeneratedColumn<String> versaoProcessoEmissao =
      GeneratedColumn<String>('VERSAO_PROCESSO_EMISSAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _caminhoLogomarcaMeta =
      const VerificationMeta('caminhoLogomarca');
  @override
  late final GeneratedColumn<String> caminhoLogomarca =
      GeneratedColumn<String>('CAMINHO_LOGOMARCA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _salvarXmlMeta = const VerificationMeta('salvarXml');
  @override
  late final GeneratedColumn<String> salvarXml = GeneratedColumn<String>(
      'SALVAR_XML', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _caminhoSalvarXmlMeta =
      const VerificationMeta('caminhoSalvarXml');
  @override
  late final GeneratedColumn<String> caminhoSalvarXml =
      GeneratedColumn<String>('CAMINHO_SALVAR_XML', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _caminhoSchemasMeta =
      const VerificationMeta('caminhoSchemas');
  @override
  late final GeneratedColumn<String> caminhoSchemas = GeneratedColumn<String>(
      'CAMINHO_SCHEMAS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _caminhoArquivoDanfeMeta =
      const VerificationMeta('caminhoArquivoDanfe');
  @override
  late final GeneratedColumn<String> caminhoArquivoDanfe =
      GeneratedColumn<String>('CAMINHO_ARQUIVO_DANFE', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _caminhoSalvarPdfMeta =
      const VerificationMeta('caminhoSalvarPdf');
  @override
  late final GeneratedColumn<String> caminhoSalvarPdf =
      GeneratedColumn<String>('CAMINHO_SALVAR_PDF', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 250),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _webserviceUfMeta =
      const VerificationMeta('webserviceUf');
  @override
  late final GeneratedColumn<String> webserviceUf = GeneratedColumn<String>(
      'WEBSERVICE_UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _webserviceAmbienteMeta =
      const VerificationMeta('webserviceAmbiente');
  @override
  late final GeneratedColumn<int> webserviceAmbiente = GeneratedColumn<int>(
      'WEBSERVICE_AMBIENTE', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _webserviceProxyHostMeta =
      const VerificationMeta('webserviceProxyHost');
  @override
  late final GeneratedColumn<String> webserviceProxyHost =
      GeneratedColumn<String>('WEBSERVICE_PROXY_HOST', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _webserviceProxyPortaMeta =
      const VerificationMeta('webserviceProxyPorta');
  @override
  late final GeneratedColumn<int> webserviceProxyPorta = GeneratedColumn<int>(
      'WEBSERVICE_PROXY_PORTA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _webserviceProxyUsuarioMeta =
      const VerificationMeta('webserviceProxyUsuario');
  @override
  late final GeneratedColumn<String> webserviceProxyUsuario =
      GeneratedColumn<String>('WEBSERVICE_PROXY_USUARIO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _webserviceProxySenhaMeta =
      const VerificationMeta('webserviceProxySenha');
  @override
  late final GeneratedColumn<String> webserviceProxySenha =
      GeneratedColumn<String>('WEBSERVICE_PROXY_SENHA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _webserviceVisualizarMeta =
      const VerificationMeta('webserviceVisualizar');
  @override
  late final GeneratedColumn<String> webserviceVisualizar =
      GeneratedColumn<String>('WEBSERVICE_VISUALIZAR', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _emailServidorSmtpMeta =
      const VerificationMeta('emailServidorSmtp');
  @override
  late final GeneratedColumn<String> emailServidorSmtp =
      GeneratedColumn<String>('EMAIL_SERVIDOR_SMTP', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 100),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _emailPortaMeta = const VerificationMeta('emailPorta');
  @override
  late final GeneratedColumn<int> emailPorta = GeneratedColumn<int>(
      'EMAIL_PORTA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _emailUsuarioMeta =
      const VerificationMeta('emailUsuario');
  @override
  late final GeneratedColumn<String> emailUsuario = GeneratedColumn<String>(
      'EMAIL_USUARIO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailSenhaMeta = const VerificationMeta('emailSenha');
  @override
  late final GeneratedColumn<String> emailSenha = GeneratedColumn<String>(
      'EMAIL_SENHA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailAssuntoMeta =
      const VerificationMeta('emailAssunto');
  @override
  late final GeneratedColumn<String> emailAssunto = GeneratedColumn<String>(
      'EMAIL_ASSUNTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 100),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _emailAutenticaSslMeta =
      const VerificationMeta('emailAutenticaSsl');
  @override
  late final GeneratedColumn<String> emailAutenticaSsl =
      GeneratedColumn<String>('EMAIL_AUTENTICA_SSL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _emailTextoMeta = const VerificationMeta('emailTexto');
  @override
  late final GeneratedColumn<String> emailTexto = GeneratedColumn<String>(
      'EMAIL_TEXTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nfceIdCscMeta = const VerificationMeta('nfceIdCsc');
  @override
  late final GeneratedColumn<String> nfceIdCsc = GeneratedColumn<String>(
      'NFCE_ID_CSC', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 6),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nfceCscMeta = const VerificationMeta('nfceCsc');
  @override
  late final GeneratedColumn<String> nfceCsc = GeneratedColumn<String>(
      'NFCE_CSC', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _nfceModeloImpressaoMeta =
      const VerificationMeta('nfceModeloImpressao');
  @override
  late final GeneratedColumn<String> nfceModeloImpressao =
      GeneratedColumn<String>('NFCE_MODELO_IMPRESSAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nfceImprimirItensUmaLinhaMeta =
      const VerificationMeta('nfceImprimirItensUmaLinha');
  @override
  late final GeneratedColumn<String> nfceImprimirItensUmaLinha =
      GeneratedColumn<String>(
          'NFCE_IMPRIMIR_ITENS_UMA_LINHA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nfceImprimirDescontoPorItemMeta =
      const VerificationMeta('nfceImprimirDescontoPorItem');
  @override
  late final GeneratedColumn<String> nfceImprimirDescontoPorItem =
      GeneratedColumn<String>(
          'NFCE_IMPRIMIR_DESCONTO_POR_ITEM', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nfceImprimirQrcodeLateralMeta =
      const VerificationMeta('nfceImprimirQrcodeLateral');
  @override
  late final GeneratedColumn<String> nfceImprimirQrcodeLateral =
      GeneratedColumn<String>(
          'NFCE_IMPRIMIR_QRCODE_LATERAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nfceImprimirGtinMeta =
      const VerificationMeta('nfceImprimirGtin');
  @override
  late final GeneratedColumn<String> nfceImprimirGtin =
      GeneratedColumn<String>('NFCE_IMPRIMIR_GTIN', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nfceImprimirNomeFantasiaMeta =
      const VerificationMeta('nfceImprimirNomeFantasia');
  @override
  late final GeneratedColumn<String> nfceImprimirNomeFantasia =
      GeneratedColumn<String>('NFCE_IMPRIMIR_NOME_FANTASIA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nfceImpressaoTributosMeta =
      const VerificationMeta('nfceImpressaoTributos');
  @override
  late final GeneratedColumn<String> nfceImpressaoTributos =
      GeneratedColumn<String>('NFCE_IMPRESSAO_TRIBUTOS', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nfceMargemSuperiorMeta =
      const VerificationMeta('nfceMargemSuperior');
  @override
  late final GeneratedColumn<double> nfceMargemSuperior =
      GeneratedColumn<double>('NFCE_MARGEM_SUPERIOR', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _nfceMargemInferiorMeta =
      const VerificationMeta('nfceMargemInferior');
  @override
  late final GeneratedColumn<double> nfceMargemInferior =
      GeneratedColumn<double>('NFCE_MARGEM_INFERIOR', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _nfceMargemDireitaMeta =
      const VerificationMeta('nfceMargemDireita');
  @override
  late final GeneratedColumn<double> nfceMargemDireita =
      GeneratedColumn<double>('NFCE_MARGEM_DIREITA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _nfceMargemEsquerdaMeta =
      const VerificationMeta('nfceMargemEsquerda');
  @override
  late final GeneratedColumn<double> nfceMargemEsquerda =
      GeneratedColumn<double>('NFCE_MARGEM_ESQUERDA', aliasedName, true,
          type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _nfceResolucaoImpressaoMeta =
      const VerificationMeta('nfceResolucaoImpressao');
  @override
  late final GeneratedColumn<int> nfceResolucaoImpressao =
      GeneratedColumn<int>('NFCE_RESOLUCAO_IMPRESSAO', aliasedName, true,
          type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _respTecCnpjMeta =
      const VerificationMeta('respTecCnpj');
  @override
  late final GeneratedColumn<String> respTecCnpj = GeneratedColumn<String>(
      'RESP_TEC_CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _respTecContatoMeta =
      const VerificationMeta('respTecContato');
  @override
  late final GeneratedColumn<String> respTecContato = GeneratedColumn<String>(
      'RESP_TEC_CONTATO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _respTecEmailMeta =
      const VerificationMeta('respTecEmail');
  @override
  late final GeneratedColumn<String> respTecEmail = GeneratedColumn<String>(
      'RESP_TEC_EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _respTecFoneMeta =
      const VerificationMeta('respTecFone');
  @override
  late final GeneratedColumn<String> respTecFone = GeneratedColumn<String>(
      'RESP_TEC_FONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 15),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _respTecIdCsrtMeta =
      const VerificationMeta('respTecIdCsrt');
  @override
  late final GeneratedColumn<String> respTecIdCsrt = GeneratedColumn<String>(
      'RESP_TEC_ID_CSRT', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _respTecHashCsrtMeta =
      const VerificationMeta('respTecHashCsrt');
  @override
  late final GeneratedColumn<String> respTecHashCsrt =
      GeneratedColumn<String>('RESP_TEC_HASH_CSRT', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 28),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nfceTamanhoFonteItemMeta =
      const VerificationMeta('nfceTamanhoFonteItem');
  @override
  late final GeneratedColumn<int> nfceTamanhoFonteItem = GeneratedColumn<int>(
      'NFCE_TAMANHO_FONTE_ITEM', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        certificadoDigitalSerie,
        certificadoDigitalCaminho,
        certificadoDigitalSenha,
        tipoEmissao,
        formatoImpressaoDanfe,
        processoEmissao,
        versaoProcessoEmissao,
        caminhoLogomarca,
        salvarXml,
        caminhoSalvarXml,
        caminhoSchemas,
        caminhoArquivoDanfe,
        caminhoSalvarPdf,
        webserviceUf,
        webserviceAmbiente,
        webserviceProxyHost,
        webserviceProxyPorta,
        webserviceProxyUsuario,
        webserviceProxySenha,
        webserviceVisualizar,
        emailServidorSmtp,
        emailPorta,
        emailUsuario,
        emailSenha,
        emailAssunto,
        emailAutenticaSsl,
        emailTexto,
        nfceIdCsc,
        nfceCsc,
        nfceModeloImpressao,
        nfceImprimirItensUmaLinha,
        nfceImprimirDescontoPorItem,
        nfceImprimirQrcodeLateral,
        nfceImprimirGtin,
        nfceImprimirNomeFantasia,
        nfceImpressaoTributos,
        nfceMargemSuperior,
        nfceMargemInferior,
        nfceMargemDireita,
        nfceMargemEsquerda,
        nfceResolucaoImpressao,
        respTecCnpj,
        respTecContato,
        respTecEmail,
        respTecFone,
        respTecIdCsrt,
        respTecHashCsrt,
        nfceTamanhoFonteItem
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_CONFIGURACAO';
  @override
  String get actualTableName => 'NFE_CONFIGURACAO';
  @override
  VerificationContext validateIntegrity(Insertable<NfeConfiguracao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('CERTIFICADO_DIGITAL_SERIE')) {
      context.handle(
          _certificadoDigitalSerieMeta,
          certificadoDigitalSerie.isAcceptableOrUnknown(
              data['CERTIFICADO_DIGITAL_SERIE']!,
              _certificadoDigitalSerieMeta));
    }
    if (data.containsKey('CERTIFICADO_DIGITAL_CAMINHO')) {
      context.handle(
          _certificadoDigitalCaminhoMeta,
          certificadoDigitalCaminho.isAcceptableOrUnknown(
              data['CERTIFICADO_DIGITAL_CAMINHO']!,
              _certificadoDigitalCaminhoMeta));
    }
    if (data.containsKey('CERTIFICADO_DIGITAL_SENHA')) {
      context.handle(
          _certificadoDigitalSenhaMeta,
          certificadoDigitalSenha.isAcceptableOrUnknown(
              data['CERTIFICADO_DIGITAL_SENHA']!,
              _certificadoDigitalSenhaMeta));
    }
    if (data.containsKey('TIPO_EMISSAO')) {
      context.handle(
          _tipoEmissaoMeta,
          tipoEmissao.isAcceptableOrUnknown(
              data['TIPO_EMISSAO']!, _tipoEmissaoMeta));
    }
    if (data.containsKey('FORMATO_IMPRESSAO_DANFE')) {
      context.handle(
          _formatoImpressaoDanfeMeta,
          formatoImpressaoDanfe.isAcceptableOrUnknown(
              data['FORMATO_IMPRESSAO_DANFE']!, _formatoImpressaoDanfeMeta));
    }
    if (data.containsKey('PROCESSO_EMISSAO')) {
      context.handle(
          _processoEmissaoMeta,
          processoEmissao.isAcceptableOrUnknown(
              data['PROCESSO_EMISSAO']!, _processoEmissaoMeta));
    }
    if (data.containsKey('VERSAO_PROCESSO_EMISSAO')) {
      context.handle(
          _versaoProcessoEmissaoMeta,
          versaoProcessoEmissao.isAcceptableOrUnknown(
              data['VERSAO_PROCESSO_EMISSAO']!, _versaoProcessoEmissaoMeta));
    }
    if (data.containsKey('CAMINHO_LOGOMARCA')) {
      context.handle(
          _caminhoLogomarcaMeta,
          caminhoLogomarca.isAcceptableOrUnknown(
              data['CAMINHO_LOGOMARCA']!, _caminhoLogomarcaMeta));
    }
    if (data.containsKey('SALVAR_XML')) {
      context.handle(_salvarXmlMeta,
          salvarXml.isAcceptableOrUnknown(data['SALVAR_XML']!, _salvarXmlMeta));
    }
    if (data.containsKey('CAMINHO_SALVAR_XML')) {
      context.handle(
          _caminhoSalvarXmlMeta,
          caminhoSalvarXml.isAcceptableOrUnknown(
              data['CAMINHO_SALVAR_XML']!, _caminhoSalvarXmlMeta));
    }
    if (data.containsKey('CAMINHO_SCHEMAS')) {
      context.handle(
          _caminhoSchemasMeta,
          caminhoSchemas.isAcceptableOrUnknown(
              data['CAMINHO_SCHEMAS']!, _caminhoSchemasMeta));
    }
    if (data.containsKey('CAMINHO_ARQUIVO_DANFE')) {
      context.handle(
          _caminhoArquivoDanfeMeta,
          caminhoArquivoDanfe.isAcceptableOrUnknown(
              data['CAMINHO_ARQUIVO_DANFE']!, _caminhoArquivoDanfeMeta));
    }
    if (data.containsKey('CAMINHO_SALVAR_PDF')) {
      context.handle(
          _caminhoSalvarPdfMeta,
          caminhoSalvarPdf.isAcceptableOrUnknown(
              data['CAMINHO_SALVAR_PDF']!, _caminhoSalvarPdfMeta));
    }
    if (data.containsKey('WEBSERVICE_UF')) {
      context.handle(
          _webserviceUfMeta,
          webserviceUf.isAcceptableOrUnknown(
              data['WEBSERVICE_UF']!, _webserviceUfMeta));
    }
    if (data.containsKey('WEBSERVICE_AMBIENTE')) {
      context.handle(
          _webserviceAmbienteMeta,
          webserviceAmbiente.isAcceptableOrUnknown(
              data['WEBSERVICE_AMBIENTE']!, _webserviceAmbienteMeta));
    }
    if (data.containsKey('WEBSERVICE_PROXY_HOST')) {
      context.handle(
          _webserviceProxyHostMeta,
          webserviceProxyHost.isAcceptableOrUnknown(
              data['WEBSERVICE_PROXY_HOST']!, _webserviceProxyHostMeta));
    }
    if (data.containsKey('WEBSERVICE_PROXY_PORTA')) {
      context.handle(
          _webserviceProxyPortaMeta,
          webserviceProxyPorta.isAcceptableOrUnknown(
              data['WEBSERVICE_PROXY_PORTA']!, _webserviceProxyPortaMeta));
    }
    if (data.containsKey('WEBSERVICE_PROXY_USUARIO')) {
      context.handle(
          _webserviceProxyUsuarioMeta,
          webserviceProxyUsuario.isAcceptableOrUnknown(
              data['WEBSERVICE_PROXY_USUARIO']!, _webserviceProxyUsuarioMeta));
    }
    if (data.containsKey('WEBSERVICE_PROXY_SENHA')) {
      context.handle(
          _webserviceProxySenhaMeta,
          webserviceProxySenha.isAcceptableOrUnknown(
              data['WEBSERVICE_PROXY_SENHA']!, _webserviceProxySenhaMeta));
    }
    if (data.containsKey('WEBSERVICE_VISUALIZAR')) {
      context.handle(
          _webserviceVisualizarMeta,
          webserviceVisualizar.isAcceptableOrUnknown(
              data['WEBSERVICE_VISUALIZAR']!, _webserviceVisualizarMeta));
    }
    if (data.containsKey('EMAIL_SERVIDOR_SMTP')) {
      context.handle(
          _emailServidorSmtpMeta,
          emailServidorSmtp.isAcceptableOrUnknown(
              data['EMAIL_SERVIDOR_SMTP']!, _emailServidorSmtpMeta));
    }
    if (data.containsKey('EMAIL_PORTA')) {
      context.handle(
          _emailPortaMeta,
          emailPorta.isAcceptableOrUnknown(
              data['EMAIL_PORTA']!, _emailPortaMeta));
    }
    if (data.containsKey('EMAIL_USUARIO')) {
      context.handle(
          _emailUsuarioMeta,
          emailUsuario.isAcceptableOrUnknown(
              data['EMAIL_USUARIO']!, _emailUsuarioMeta));
    }
    if (data.containsKey('EMAIL_SENHA')) {
      context.handle(
          _emailSenhaMeta,
          emailSenha.isAcceptableOrUnknown(
              data['EMAIL_SENHA']!, _emailSenhaMeta));
    }
    if (data.containsKey('EMAIL_ASSUNTO')) {
      context.handle(
          _emailAssuntoMeta,
          emailAssunto.isAcceptableOrUnknown(
              data['EMAIL_ASSUNTO']!, _emailAssuntoMeta));
    }
    if (data.containsKey('EMAIL_AUTENTICA_SSL')) {
      context.handle(
          _emailAutenticaSslMeta,
          emailAutenticaSsl.isAcceptableOrUnknown(
              data['EMAIL_AUTENTICA_SSL']!, _emailAutenticaSslMeta));
    }
    if (data.containsKey('EMAIL_TEXTO')) {
      context.handle(
          _emailTextoMeta,
          emailTexto.isAcceptableOrUnknown(
              data['EMAIL_TEXTO']!, _emailTextoMeta));
    }
    if (data.containsKey('NFCE_ID_CSC')) {
      context.handle(
          _nfceIdCscMeta,
          nfceIdCsc.isAcceptableOrUnknown(
              data['NFCE_ID_CSC']!, _nfceIdCscMeta));
    }
    if (data.containsKey('NFCE_CSC')) {
      context.handle(_nfceCscMeta,
          nfceCsc.isAcceptableOrUnknown(data['NFCE_CSC']!, _nfceCscMeta));
    }
    if (data.containsKey('NFCE_MODELO_IMPRESSAO')) {
      context.handle(
          _nfceModeloImpressaoMeta,
          nfceModeloImpressao.isAcceptableOrUnknown(
              data['NFCE_MODELO_IMPRESSAO']!, _nfceModeloImpressaoMeta));
    }
    if (data.containsKey('NFCE_IMPRIMIR_ITENS_UMA_LINHA')) {
      context.handle(
          _nfceImprimirItensUmaLinhaMeta,
          nfceImprimirItensUmaLinha.isAcceptableOrUnknown(
              data['NFCE_IMPRIMIR_ITENS_UMA_LINHA']!,
              _nfceImprimirItensUmaLinhaMeta));
    }
    if (data.containsKey('NFCE_IMPRIMIR_DESCONTO_POR_ITEM')) {
      context.handle(
          _nfceImprimirDescontoPorItemMeta,
          nfceImprimirDescontoPorItem.isAcceptableOrUnknown(
              data['NFCE_IMPRIMIR_DESCONTO_POR_ITEM']!,
              _nfceImprimirDescontoPorItemMeta));
    }
    if (data.containsKey('NFCE_IMPRIMIR_QRCODE_LATERAL')) {
      context.handle(
          _nfceImprimirQrcodeLateralMeta,
          nfceImprimirQrcodeLateral.isAcceptableOrUnknown(
              data['NFCE_IMPRIMIR_QRCODE_LATERAL']!,
              _nfceImprimirQrcodeLateralMeta));
    }
    if (data.containsKey('NFCE_IMPRIMIR_GTIN')) {
      context.handle(
          _nfceImprimirGtinMeta,
          nfceImprimirGtin.isAcceptableOrUnknown(
              data['NFCE_IMPRIMIR_GTIN']!, _nfceImprimirGtinMeta));
    }
    if (data.containsKey('NFCE_IMPRIMIR_NOME_FANTASIA')) {
      context.handle(
          _nfceImprimirNomeFantasiaMeta,
          nfceImprimirNomeFantasia.isAcceptableOrUnknown(
              data['NFCE_IMPRIMIR_NOME_FANTASIA']!,
              _nfceImprimirNomeFantasiaMeta));
    }
    if (data.containsKey('NFCE_IMPRESSAO_TRIBUTOS')) {
      context.handle(
          _nfceImpressaoTributosMeta,
          nfceImpressaoTributos.isAcceptableOrUnknown(
              data['NFCE_IMPRESSAO_TRIBUTOS']!, _nfceImpressaoTributosMeta));
    }
    if (data.containsKey('NFCE_MARGEM_SUPERIOR')) {
      context.handle(
          _nfceMargemSuperiorMeta,
          nfceMargemSuperior.isAcceptableOrUnknown(
              data['NFCE_MARGEM_SUPERIOR']!, _nfceMargemSuperiorMeta));
    }
    if (data.containsKey('NFCE_MARGEM_INFERIOR')) {
      context.handle(
          _nfceMargemInferiorMeta,
          nfceMargemInferior.isAcceptableOrUnknown(
              data['NFCE_MARGEM_INFERIOR']!, _nfceMargemInferiorMeta));
    }
    if (data.containsKey('NFCE_MARGEM_DIREITA')) {
      context.handle(
          _nfceMargemDireitaMeta,
          nfceMargemDireita.isAcceptableOrUnknown(
              data['NFCE_MARGEM_DIREITA']!, _nfceMargemDireitaMeta));
    }
    if (data.containsKey('NFCE_MARGEM_ESQUERDA')) {
      context.handle(
          _nfceMargemEsquerdaMeta,
          nfceMargemEsquerda.isAcceptableOrUnknown(
              data['NFCE_MARGEM_ESQUERDA']!, _nfceMargemEsquerdaMeta));
    }
    if (data.containsKey('NFCE_RESOLUCAO_IMPRESSAO')) {
      context.handle(
          _nfceResolucaoImpressaoMeta,
          nfceResolucaoImpressao.isAcceptableOrUnknown(
              data['NFCE_RESOLUCAO_IMPRESSAO']!, _nfceResolucaoImpressaoMeta));
    }
    if (data.containsKey('RESP_TEC_CNPJ')) {
      context.handle(
          _respTecCnpjMeta,
          respTecCnpj.isAcceptableOrUnknown(
              data['RESP_TEC_CNPJ']!, _respTecCnpjMeta));
    }
    if (data.containsKey('RESP_TEC_CONTATO')) {
      context.handle(
          _respTecContatoMeta,
          respTecContato.isAcceptableOrUnknown(
              data['RESP_TEC_CONTATO']!, _respTecContatoMeta));
    }
    if (data.containsKey('RESP_TEC_EMAIL')) {
      context.handle(
          _respTecEmailMeta,
          respTecEmail.isAcceptableOrUnknown(
              data['RESP_TEC_EMAIL']!, _respTecEmailMeta));
    }
    if (data.containsKey('RESP_TEC_FONE')) {
      context.handle(
          _respTecFoneMeta,
          respTecFone.isAcceptableOrUnknown(
              data['RESP_TEC_FONE']!, _respTecFoneMeta));
    }
    if (data.containsKey('RESP_TEC_ID_CSRT')) {
      context.handle(
          _respTecIdCsrtMeta,
          respTecIdCsrt.isAcceptableOrUnknown(
              data['RESP_TEC_ID_CSRT']!, _respTecIdCsrtMeta));
    }
    if (data.containsKey('RESP_TEC_HASH_CSRT')) {
      context.handle(
          _respTecHashCsrtMeta,
          respTecHashCsrt.isAcceptableOrUnknown(
              data['RESP_TEC_HASH_CSRT']!, _respTecHashCsrtMeta));
    }
    if (data.containsKey('NFCE_TAMANHO_FONTE_ITEM')) {
      context.handle(
          _nfceTamanhoFonteItemMeta,
          nfceTamanhoFonteItem.isAcceptableOrUnknown(
              data['NFCE_TAMANHO_FONTE_ITEM']!, _nfceTamanhoFonteItemMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeConfiguracao map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeConfiguracao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeConfiguracaosTable createAlias(String alias) {
    return $NfeConfiguracaosTable(attachedDatabase, alias);
  }
}

class NfeCteReferenciado extends DataClass
    implements Insertable<NfeCteReferenciado> {
  final int? id;
  final int? idNfeCabecalho;
  final String? chaveAcesso;
  NfeCteReferenciado({this.id, this.idNfeCabecalho, this.chaveAcesso});
  factory NfeCteReferenciado.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeCteReferenciado(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      chaveAcesso: ValueSqlType.stringType(data['${effectivePrefix}CHAVE_ACESSO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || chaveAcesso != null) {
      map['CHAVE_ACESSO'] = Variable<String>(chaveAcesso);
    }
    return map;
  }

  NfeCteReferenciadosCompanion toCompanion(bool nullToAbsent) {
    return NfeCteReferenciadosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      chaveAcesso: chaveAcesso == null && nullToAbsent
          ? const Value.absent()
          : Value(chaveAcesso),
    );
  }

  factory NfeCteReferenciado.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCteReferenciado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      chaveAcesso: serializer.fromJson<String?>(json['chaveAcesso']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'chaveAcesso': serializer.toJson<String?>(chaveAcesso),
    };
  }

  NfeCteReferenciado copyWith(
          {int? id, int? idNfeCabecalho, String? chaveAcesso}) =>
      NfeCteReferenciado(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        chaveAcesso: chaveAcesso ?? this.chaveAcesso,
      );
  @override
  String toString() {
    return (StringBuffer('NfeCteReferenciado(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, chaveAcesso);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCteReferenciado &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.chaveAcesso == this.chaveAcesso);
}

class NfeCteReferenciadosCompanion extends UpdateCompanion<NfeCteReferenciado> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> chaveAcesso;
  const NfeCteReferenciadosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
  });
  NfeCteReferenciadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.chaveAcesso = const Value.absent(),
  });
  static Insertable<NfeCteReferenciado> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? chaveAcesso,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (chaveAcesso != null) 'CHAVE_ACESSO': chaveAcesso,
    });
  }

  NfeCteReferenciadosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? chaveAcesso}) {
    return NfeCteReferenciadosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      chaveAcesso: chaveAcesso ?? this.chaveAcesso,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (chaveAcesso.present) {
      map['CHAVE_ACESSO'] = Variable<String>(chaveAcesso.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCteReferenciadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('chaveAcesso: $chaveAcesso')
          ..write(')'))
        .toString();
  }
}

class $NfeCteReferenciadosTable extends NfeCteReferenciados
    with TableInfo<$NfeCteReferenciadosTable, NfeCteReferenciado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCteReferenciadosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _chaveAcessoMeta =
      const VerificationMeta('chaveAcesso');
  @override
  late final GeneratedColumn<String> chaveAcesso = GeneratedColumn<String>(
      'CHAVE_ACESSO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 44),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [id, idNfeCabecalho, chaveAcesso];
  @override
  String get aliasedName => _alias ?? 'NFE_CTE_REFERENCIADO';
  @override
  String get actualTableName => 'NFE_CTE_REFERENCIADO';
  @override
  VerificationContext validateIntegrity(Insertable<NfeCteReferenciado> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CHAVE_ACESSO')) {
      context.handle(
          _chaveAcessoMeta,
          chaveAcesso.isAcceptableOrUnknown(
              data['CHAVE_ACESSO']!, _chaveAcessoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCteReferenciado map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeCteReferenciado.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeCteReferenciadosTable createAlias(String alias) {
    return $NfeCteReferenciadosTable(attachedDatabase, alias);
  }
}

class NfeCupomFiscalReferenciado extends DataClass
    implements Insertable<NfeCupomFiscalReferenciado> {
  final int? id;
  final int? idNfeCabecalho;
  final String? modeloDocumentoFiscal;
  final int? numeroOrdemEcf;
  final int? coo;
  final DateTime? dataEmissaoCupom;
  final int? numeroCaixa;
  final String? numeroSerieEcf;
  NfeCupomFiscalReferenciado(
      {this.id,
      this.idNfeCabecalho,
      this.modeloDocumentoFiscal,
      this.numeroOrdemEcf,
      this.coo,
      this.dataEmissaoCupom,
      this.numeroCaixa,
      this.numeroSerieEcf});
  factory NfeCupomFiscalReferenciado.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeCupomFiscalReferenciado(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      modeloDocumentoFiscal: ValueSqlType.stringType(
          data['${effectivePrefix}MODELO_DOCUMENTO_FISCAL']),
      numeroOrdemEcf: ValueSqlType.intType(data['${effectivePrefix}NUMERO_ORDEM_ECF']),
      coo: ValueSqlType.intType(data['${effectivePrefix}COO']),
      dataEmissaoCupom: ValueSqlType.dateTimeType(
          data['${effectivePrefix}DATA_EMISSAO_CUPOM']),
      numeroCaixa: ValueSqlType.intType(data['${effectivePrefix}NUMERO_CAIXA']),
      numeroSerieEcf: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_SERIE_ECF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || modeloDocumentoFiscal != null) {
      map['MODELO_DOCUMENTO_FISCAL'] = Variable<String>(modeloDocumentoFiscal);
    }
    if (!nullToAbsent || numeroOrdemEcf != null) {
      map['NUMERO_ORDEM_ECF'] = Variable<int>(numeroOrdemEcf);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || dataEmissaoCupom != null) {
      map['DATA_EMISSAO_CUPOM'] = Variable<DateTime>(dataEmissaoCupom);
    }
    if (!nullToAbsent || numeroCaixa != null) {
      map['NUMERO_CAIXA'] = Variable<int>(numeroCaixa);
    }
    if (!nullToAbsent || numeroSerieEcf != null) {
      map['NUMERO_SERIE_ECF'] = Variable<String>(numeroSerieEcf);
    }
    return map;
  }

  NfeCupomFiscalReferenciadosCompanion toCompanion(bool nullToAbsent) {
    return NfeCupomFiscalReferenciadosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      modeloDocumentoFiscal: modeloDocumentoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloDocumentoFiscal),
      numeroOrdemEcf: numeroOrdemEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroOrdemEcf),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      dataEmissaoCupom: dataEmissaoCupom == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissaoCupom),
      numeroCaixa: numeroCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroCaixa),
      numeroSerieEcf: numeroSerieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSerieEcf),
    );
  }

  factory NfeCupomFiscalReferenciado.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeCupomFiscalReferenciado(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      modeloDocumentoFiscal:
          serializer.fromJson<String?>(json['modeloDocumentoFiscal']),
      numeroOrdemEcf: serializer.fromJson<int?>(json['numeroOrdemEcf']),
      coo: serializer.fromJson<int?>(json['coo']),
      dataEmissaoCupom:
          serializer.fromJson<DateTime?>(json['dataEmissaoCupom']),
      numeroCaixa: serializer.fromJson<int?>(json['numeroCaixa']),
      numeroSerieEcf: serializer.fromJson<String?>(json['numeroSerieEcf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'modeloDocumentoFiscal':
          serializer.toJson<String?>(modeloDocumentoFiscal),
      'numeroOrdemEcf': serializer.toJson<int?>(numeroOrdemEcf),
      'coo': serializer.toJson<int?>(coo),
      'dataEmissaoCupom': serializer.toJson<DateTime?>(dataEmissaoCupom),
      'numeroCaixa': serializer.toJson<int?>(numeroCaixa),
      'numeroSerieEcf': serializer.toJson<String?>(numeroSerieEcf),
    };
  }

  NfeCupomFiscalReferenciado copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? modeloDocumentoFiscal,
          int? numeroOrdemEcf,
          int? coo,
          DateTime? dataEmissaoCupom,
          int? numeroCaixa,
          String? numeroSerieEcf}) =>
      NfeCupomFiscalReferenciado(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        modeloDocumentoFiscal:
            modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
        numeroOrdemEcf: numeroOrdemEcf ?? this.numeroOrdemEcf,
        coo: coo ?? this.coo,
        dataEmissaoCupom: dataEmissaoCupom ?? this.dataEmissaoCupom,
        numeroCaixa: numeroCaixa ?? this.numeroCaixa,
        numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
      );
  @override
  String toString() {
    return (StringBuffer('NfeCupomFiscalReferenciado(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('numeroOrdemEcf: $numeroOrdemEcf, ')
          ..write('coo: $coo, ')
          ..write('dataEmissaoCupom: $dataEmissaoCupom, ')
          ..write('numeroCaixa: $numeroCaixa, ')
          ..write('numeroSerieEcf: $numeroSerieEcf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(id, idNfeCabecalho, modeloDocumentoFiscal,
      numeroOrdemEcf, coo, dataEmissaoCupom, numeroCaixa, numeroSerieEcf);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeCupomFiscalReferenciado &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.modeloDocumentoFiscal == this.modeloDocumentoFiscal &&
          other.numeroOrdemEcf == this.numeroOrdemEcf &&
          other.coo == this.coo &&
          other.dataEmissaoCupom == this.dataEmissaoCupom &&
          other.numeroCaixa == this.numeroCaixa &&
          other.numeroSerieEcf == this.numeroSerieEcf);
}

class NfeCupomFiscalReferenciadosCompanion
    extends UpdateCompanion<NfeCupomFiscalReferenciado> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> modeloDocumentoFiscal;
  final Value<int?> numeroOrdemEcf;
  final Value<int?> coo;
  final Value<DateTime?> dataEmissaoCupom;
  final Value<int?> numeroCaixa;
  final Value<String?> numeroSerieEcf;
  const NfeCupomFiscalReferenciadosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.numeroOrdemEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.dataEmissaoCupom = const Value.absent(),
    this.numeroCaixa = const Value.absent(),
    this.numeroSerieEcf = const Value.absent(),
  });
  NfeCupomFiscalReferenciadosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.numeroOrdemEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.dataEmissaoCupom = const Value.absent(),
    this.numeroCaixa = const Value.absent(),
    this.numeroSerieEcf = const Value.absent(),
  });
  static Insertable<NfeCupomFiscalReferenciado> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? modeloDocumentoFiscal,
    Expression<int>? numeroOrdemEcf,
    Expression<int>? coo,
    Expression<DateTime>? dataEmissaoCupom,
    Expression<int>? numeroCaixa,
    Expression<String>? numeroSerieEcf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (modeloDocumentoFiscal != null)
        'MODELO_DOCUMENTO_FISCAL': modeloDocumentoFiscal,
      if (numeroOrdemEcf != null) 'NUMERO_ORDEM_ECF': numeroOrdemEcf,
      if (coo != null) 'COO': coo,
      if (dataEmissaoCupom != null) 'DATA_EMISSAO_CUPOM': dataEmissaoCupom,
      if (numeroCaixa != null) 'NUMERO_CAIXA': numeroCaixa,
      if (numeroSerieEcf != null) 'NUMERO_SERIE_ECF': numeroSerieEcf,
    });
  }

  NfeCupomFiscalReferenciadosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? modeloDocumentoFiscal,
      Value<int?>? numeroOrdemEcf,
      Value<int?>? coo,
      Value<DateTime?>? dataEmissaoCupom,
      Value<int?>? numeroCaixa,
      Value<String?>? numeroSerieEcf}) {
    return NfeCupomFiscalReferenciadosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      modeloDocumentoFiscal:
          modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
      numeroOrdemEcf: numeroOrdemEcf ?? this.numeroOrdemEcf,
      coo: coo ?? this.coo,
      dataEmissaoCupom: dataEmissaoCupom ?? this.dataEmissaoCupom,
      numeroCaixa: numeroCaixa ?? this.numeroCaixa,
      numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (modeloDocumentoFiscal.present) {
      map['MODELO_DOCUMENTO_FISCAL'] =
          Variable<String>(modeloDocumentoFiscal.value);
    }
    if (numeroOrdemEcf.present) {
      map['NUMERO_ORDEM_ECF'] = Variable<int>(numeroOrdemEcf.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (dataEmissaoCupom.present) {
      map['DATA_EMISSAO_CUPOM'] = Variable<DateTime>(dataEmissaoCupom.value);
    }
    if (numeroCaixa.present) {
      map['NUMERO_CAIXA'] = Variable<int>(numeroCaixa.value);
    }
    if (numeroSerieEcf.present) {
      map['NUMERO_SERIE_ECF'] = Variable<String>(numeroSerieEcf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeCupomFiscalReferenciadosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('numeroOrdemEcf: $numeroOrdemEcf, ')
          ..write('coo: $coo, ')
          ..write('dataEmissaoCupom: $dataEmissaoCupom, ')
          ..write('numeroCaixa: $numeroCaixa, ')
          ..write('numeroSerieEcf: $numeroSerieEcf')
          ..write(')'))
        .toString();
  }
}

class $NfeCupomFiscalReferenciadosTable extends NfeCupomFiscalReferenciados
    with
        TableInfo<$NfeCupomFiscalReferenciadosTable,
            NfeCupomFiscalReferenciado> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeCupomFiscalReferenciadosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _modeloDocumentoFiscalMeta =
      const VerificationMeta('modeloDocumentoFiscal');
  @override
  late final GeneratedColumn<String> modeloDocumentoFiscal =
      GeneratedColumn<String>('MODELO_DOCUMENTO_FISCAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 2),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _numeroOrdemEcfMeta =
      const VerificationMeta('numeroOrdemEcf');
  @override
  late final GeneratedColumn<int> numeroOrdemEcf = GeneratedColumn<int>(
      'NUMERO_ORDEM_ECF', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  @override
  late final GeneratedColumn<int> coo = GeneratedColumn<int>(
      'COO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _dataEmissaoCupomMeta =
      const VerificationMeta('dataEmissaoCupom');
  @override
  late final GeneratedColumn<DateTime> dataEmissaoCupom =
      GeneratedColumn<DateTime>('DATA_EMISSAO_CUPOM', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _numeroCaixaMeta =
      const VerificationMeta('numeroCaixa');
  @override
  late final GeneratedColumn<int> numeroCaixa = GeneratedColumn<int>(
      'NUMERO_CAIXA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _numeroSerieEcfMeta =
      const VerificationMeta('numeroSerieEcf');
  @override
  late final GeneratedColumn<String> numeroSerieEcf = GeneratedColumn<String>(
      'NUMERO_SERIE_ECF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 21),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        modeloDocumentoFiscal,
        numeroOrdemEcf,
        coo,
        dataEmissaoCupom,
        numeroCaixa,
        numeroSerieEcf
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_CUPOM_FISCAL_REFERENCIADO';
  @override
  String get actualTableName => 'NFE_CUPOM_FISCAL_REFERENCIADO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeCupomFiscalReferenciado> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('MODELO_DOCUMENTO_FISCAL')) {
      context.handle(
          _modeloDocumentoFiscalMeta,
          modeloDocumentoFiscal.isAcceptableOrUnknown(
              data['MODELO_DOCUMENTO_FISCAL']!, _modeloDocumentoFiscalMeta));
    }
    if (data.containsKey('NUMERO_ORDEM_ECF')) {
      context.handle(
          _numeroOrdemEcfMeta,
          numeroOrdemEcf.isAcceptableOrUnknown(
              data['NUMERO_ORDEM_ECF']!, _numeroOrdemEcfMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO']!, _cooMeta));
    }
    if (data.containsKey('DATA_EMISSAO_CUPOM')) {
      context.handle(
          _dataEmissaoCupomMeta,
          dataEmissaoCupom.isAcceptableOrUnknown(
              data['DATA_EMISSAO_CUPOM']!, _dataEmissaoCupomMeta));
    }
    if (data.containsKey('NUMERO_CAIXA')) {
      context.handle(
          _numeroCaixaMeta,
          numeroCaixa.isAcceptableOrUnknown(
              data['NUMERO_CAIXA']!, _numeroCaixaMeta));
    }
    if (data.containsKey('NUMERO_SERIE_ECF')) {
      context.handle(
          _numeroSerieEcfMeta,
          numeroSerieEcf.isAcceptableOrUnknown(
              data['NUMERO_SERIE_ECF']!, _numeroSerieEcfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeCupomFiscalReferenciado map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeCupomFiscalReferenciado.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeCupomFiscalReferenciadosTable createAlias(String alias) {
    return $NfeCupomFiscalReferenciadosTable(attachedDatabase, alias);
  }
}

class NfeDeclaracaoImportacao extends DataClass
    implements Insertable<NfeDeclaracaoImportacao> {
  final int? id;
  final int? idNfeDetalhe;
  final String? numeroDocumento;
  final DateTime? dataRegistro;
  final String? localDesembaraco;
  final String? ufDesembaraco;
  final DateTime? dataDesembaraco;
  final String? viaTransporte;
  final double? valorAfrmm;
  final String? formaIntermediacao;
  final String? cnpj;
  final String? ufTerceiro;
  final String? codigoExportador;
  NfeDeclaracaoImportacao(
      {this.id,
      this.idNfeDetalhe,
      this.numeroDocumento,
      this.dataRegistro,
      this.localDesembaraco,
      this.ufDesembaraco,
      this.dataDesembaraco,
      this.viaTransporte,
      this.valorAfrmm,
      this.formaIntermediacao,
      this.cnpj,
      this.ufTerceiro,
      this.codigoExportador});
  factory NfeDeclaracaoImportacao.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDeclaracaoImportacao(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      numeroDocumento: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_DOCUMENTO']),
      dataRegistro: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_REGISTRO']),
      localDesembaraco: ValueSqlType.stringType(data['${effectivePrefix}LOCAL_DESEMBARACO']),
      ufDesembaraco: ValueSqlType.stringType(data['${effectivePrefix}UF_DESEMBARACO']),
      dataDesembaraco: ValueSqlType.dateTimeType(data['${effectivePrefix}DATA_DESEMBARACO']),
      viaTransporte: ValueSqlType.stringType(data['${effectivePrefix}VIA_TRANSPORTE']),
      valorAfrmm: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_AFRMM']),
      formaIntermediacao: ValueSqlType.stringType(
          data['${effectivePrefix}FORMA_INTERMEDIACAO']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      ufTerceiro: ValueSqlType.stringType(data['${effectivePrefix}UF_TERCEIRO']),
      codigoExportador: ValueSqlType.stringType(data['${effectivePrefix}CODIGO_EXPORTADOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || numeroDocumento != null) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento);
    }
    if (!nullToAbsent || dataRegistro != null) {
      map['DATA_REGISTRO'] = Variable<DateTime>(dataRegistro);
    }
    if (!nullToAbsent || localDesembaraco != null) {
      map['LOCAL_DESEMBARACO'] = Variable<String>(localDesembaraco);
    }
    if (!nullToAbsent || ufDesembaraco != null) {
      map['UF_DESEMBARACO'] = Variable<String>(ufDesembaraco);
    }
    if (!nullToAbsent || dataDesembaraco != null) {
      map['DATA_DESEMBARACO'] = Variable<DateTime>(dataDesembaraco);
    }
    if (!nullToAbsent || viaTransporte != null) {
      map['VIA_TRANSPORTE'] = Variable<String>(viaTransporte);
    }
    if (!nullToAbsent || valorAfrmm != null) {
      map['VALOR_AFRMM'] = Variable<double>(valorAfrmm);
    }
    if (!nullToAbsent || formaIntermediacao != null) {
      map['FORMA_INTERMEDIACAO'] = Variable<String>(formaIntermediacao);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || ufTerceiro != null) {
      map['UF_TERCEIRO'] = Variable<String>(ufTerceiro);
    }
    if (!nullToAbsent || codigoExportador != null) {
      map['CODIGO_EXPORTADOR'] = Variable<String>(codigoExportador);
    }
    return map;
  }

  NfeDeclaracaoImportacaosCompanion toCompanion(bool nullToAbsent) {
    return NfeDeclaracaoImportacaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      numeroDocumento: numeroDocumento == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroDocumento),
      dataRegistro: dataRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRegistro),
      localDesembaraco: localDesembaraco == null && nullToAbsent
          ? const Value.absent()
          : Value(localDesembaraco),
      ufDesembaraco: ufDesembaraco == null && nullToAbsent
          ? const Value.absent()
          : Value(ufDesembaraco),
      dataDesembaraco: dataDesembaraco == null && nullToAbsent
          ? const Value.absent()
          : Value(dataDesembaraco),
      viaTransporte: viaTransporte == null && nullToAbsent
          ? const Value.absent()
          : Value(viaTransporte),
      valorAfrmm: valorAfrmm == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAfrmm),
      formaIntermediacao: formaIntermediacao == null && nullToAbsent
          ? const Value.absent()
          : Value(formaIntermediacao),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      ufTerceiro: ufTerceiro == null && nullToAbsent
          ? const Value.absent()
          : Value(ufTerceiro),
      codigoExportador: codigoExportador == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoExportador),
    );
  }

  factory NfeDeclaracaoImportacao.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDeclaracaoImportacao(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      numeroDocumento: serializer.fromJson<String?>(json['numeroDocumento']),
      dataRegistro: serializer.fromJson<DateTime?>(json['dataRegistro']),
      localDesembaraco: serializer.fromJson<String?>(json['localDesembaraco']),
      ufDesembaraco: serializer.fromJson<String?>(json['ufDesembaraco']),
      dataDesembaraco: serializer.fromJson<DateTime?>(json['dataDesembaraco']),
      viaTransporte: serializer.fromJson<String?>(json['viaTransporte']),
      valorAfrmm: serializer.fromJson<double?>(json['valorAfrmm']),
      formaIntermediacao:
          serializer.fromJson<String?>(json['formaIntermediacao']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      ufTerceiro: serializer.fromJson<String?>(json['ufTerceiro']),
      codigoExportador: serializer.fromJson<String?>(json['codigoExportador']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'numeroDocumento': serializer.toJson<String?>(numeroDocumento),
      'dataRegistro': serializer.toJson<DateTime?>(dataRegistro),
      'localDesembaraco': serializer.toJson<String?>(localDesembaraco),
      'ufDesembaraco': serializer.toJson<String?>(ufDesembaraco),
      'dataDesembaraco': serializer.toJson<DateTime?>(dataDesembaraco),
      'viaTransporte': serializer.toJson<String?>(viaTransporte),
      'valorAfrmm': serializer.toJson<double?>(valorAfrmm),
      'formaIntermediacao': serializer.toJson<String?>(formaIntermediacao),
      'cnpj': serializer.toJson<String?>(cnpj),
      'ufTerceiro': serializer.toJson<String?>(ufTerceiro),
      'codigoExportador': serializer.toJson<String?>(codigoExportador),
    };
  }

  NfeDeclaracaoImportacao copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? numeroDocumento,
          DateTime? dataRegistro,
          String? localDesembaraco,
          String? ufDesembaraco,
          DateTime? dataDesembaraco,
          String? viaTransporte,
          double? valorAfrmm,
          String? formaIntermediacao,
          String? cnpj,
          String? ufTerceiro,
          String? codigoExportador}) =>
      NfeDeclaracaoImportacao(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        numeroDocumento: numeroDocumento ?? this.numeroDocumento,
        dataRegistro: dataRegistro ?? this.dataRegistro,
        localDesembaraco: localDesembaraco ?? this.localDesembaraco,
        ufDesembaraco: ufDesembaraco ?? this.ufDesembaraco,
        dataDesembaraco: dataDesembaraco ?? this.dataDesembaraco,
        viaTransporte: viaTransporte ?? this.viaTransporte,
        valorAfrmm: valorAfrmm ?? this.valorAfrmm,
        formaIntermediacao: formaIntermediacao ?? this.formaIntermediacao,
        cnpj: cnpj ?? this.cnpj,
        ufTerceiro: ufTerceiro ?? this.ufTerceiro,
        codigoExportador: codigoExportador ?? this.codigoExportador,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDeclaracaoImportacao(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('dataRegistro: $dataRegistro, ')
          ..write('localDesembaraco: $localDesembaraco, ')
          ..write('ufDesembaraco: $ufDesembaraco, ')
          ..write('dataDesembaraco: $dataDesembaraco, ')
          ..write('viaTransporte: $viaTransporte, ')
          ..write('valorAfrmm: $valorAfrmm, ')
          ..write('formaIntermediacao: $formaIntermediacao, ')
          ..write('cnpj: $cnpj, ')
          ..write('ufTerceiro: $ufTerceiro, ')
          ..write('codigoExportador: $codigoExportador')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeDetalhe,
      numeroDocumento,
      dataRegistro,
      localDesembaraco,
      ufDesembaraco,
      dataDesembaraco,
      viaTransporte,
      valorAfrmm,
      formaIntermediacao,
      cnpj,
      ufTerceiro,
      codigoExportador);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDeclaracaoImportacao &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.numeroDocumento == this.numeroDocumento &&
          other.dataRegistro == this.dataRegistro &&
          other.localDesembaraco == this.localDesembaraco &&
          other.ufDesembaraco == this.ufDesembaraco &&
          other.dataDesembaraco == this.dataDesembaraco &&
          other.viaTransporte == this.viaTransporte &&
          other.valorAfrmm == this.valorAfrmm &&
          other.formaIntermediacao == this.formaIntermediacao &&
          other.cnpj == this.cnpj &&
          other.ufTerceiro == this.ufTerceiro &&
          other.codigoExportador == this.codigoExportador);
}

class NfeDeclaracaoImportacaosCompanion
    extends UpdateCompanion<NfeDeclaracaoImportacao> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> numeroDocumento;
  final Value<DateTime?> dataRegistro;
  final Value<String?> localDesembaraco;
  final Value<String?> ufDesembaraco;
  final Value<DateTime?> dataDesembaraco;
  final Value<String?> viaTransporte;
  final Value<double?> valorAfrmm;
  final Value<String?> formaIntermediacao;
  final Value<String?> cnpj;
  final Value<String?> ufTerceiro;
  final Value<String?> codigoExportador;
  const NfeDeclaracaoImportacaosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.dataRegistro = const Value.absent(),
    this.localDesembaraco = const Value.absent(),
    this.ufDesembaraco = const Value.absent(),
    this.dataDesembaraco = const Value.absent(),
    this.viaTransporte = const Value.absent(),
    this.valorAfrmm = const Value.absent(),
    this.formaIntermediacao = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.ufTerceiro = const Value.absent(),
    this.codigoExportador = const Value.absent(),
  });
  NfeDeclaracaoImportacaosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.dataRegistro = const Value.absent(),
    this.localDesembaraco = const Value.absent(),
    this.ufDesembaraco = const Value.absent(),
    this.dataDesembaraco = const Value.absent(),
    this.viaTransporte = const Value.absent(),
    this.valorAfrmm = const Value.absent(),
    this.formaIntermediacao = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.ufTerceiro = const Value.absent(),
    this.codigoExportador = const Value.absent(),
  });
  static Insertable<NfeDeclaracaoImportacao> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? numeroDocumento,
    Expression<DateTime>? dataRegistro,
    Expression<String>? localDesembaraco,
    Expression<String>? ufDesembaraco,
    Expression<DateTime>? dataDesembaraco,
    Expression<String>? viaTransporte,
    Expression<double>? valorAfrmm,
    Expression<String>? formaIntermediacao,
    Expression<String>? cnpj,
    Expression<String>? ufTerceiro,
    Expression<String>? codigoExportador,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (numeroDocumento != null) 'NUMERO_DOCUMENTO': numeroDocumento,
      if (dataRegistro != null) 'DATA_REGISTRO': dataRegistro,
      if (localDesembaraco != null) 'LOCAL_DESEMBARACO': localDesembaraco,
      if (ufDesembaraco != null) 'UF_DESEMBARACO': ufDesembaraco,
      if (dataDesembaraco != null) 'DATA_DESEMBARACO': dataDesembaraco,
      if (viaTransporte != null) 'VIA_TRANSPORTE': viaTransporte,
      if (valorAfrmm != null) 'VALOR_AFRMM': valorAfrmm,
      if (formaIntermediacao != null) 'FORMA_INTERMEDIACAO': formaIntermediacao,
      if (cnpj != null) 'CNPJ': cnpj,
      if (ufTerceiro != null) 'UF_TERCEIRO': ufTerceiro,
      if (codigoExportador != null) 'CODIGO_EXPORTADOR': codigoExportador,
    });
  }

  NfeDeclaracaoImportacaosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? numeroDocumento,
      Value<DateTime?>? dataRegistro,
      Value<String?>? localDesembaraco,
      Value<String?>? ufDesembaraco,
      Value<DateTime?>? dataDesembaraco,
      Value<String?>? viaTransporte,
      Value<double?>? valorAfrmm,
      Value<String?>? formaIntermediacao,
      Value<String?>? cnpj,
      Value<String?>? ufTerceiro,
      Value<String?>? codigoExportador}) {
    return NfeDeclaracaoImportacaosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      numeroDocumento: numeroDocumento ?? this.numeroDocumento,
      dataRegistro: dataRegistro ?? this.dataRegistro,
      localDesembaraco: localDesembaraco ?? this.localDesembaraco,
      ufDesembaraco: ufDesembaraco ?? this.ufDesembaraco,
      dataDesembaraco: dataDesembaraco ?? this.dataDesembaraco,
      viaTransporte: viaTransporte ?? this.viaTransporte,
      valorAfrmm: valorAfrmm ?? this.valorAfrmm,
      formaIntermediacao: formaIntermediacao ?? this.formaIntermediacao,
      cnpj: cnpj ?? this.cnpj,
      ufTerceiro: ufTerceiro ?? this.ufTerceiro,
      codigoExportador: codigoExportador ?? this.codigoExportador,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (numeroDocumento.present) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento.value);
    }
    if (dataRegistro.present) {
      map['DATA_REGISTRO'] = Variable<DateTime>(dataRegistro.value);
    }
    if (localDesembaraco.present) {
      map['LOCAL_DESEMBARACO'] = Variable<String>(localDesembaraco.value);
    }
    if (ufDesembaraco.present) {
      map['UF_DESEMBARACO'] = Variable<String>(ufDesembaraco.value);
    }
    if (dataDesembaraco.present) {
      map['DATA_DESEMBARACO'] = Variable<DateTime>(dataDesembaraco.value);
    }
    if (viaTransporte.present) {
      map['VIA_TRANSPORTE'] = Variable<String>(viaTransporte.value);
    }
    if (valorAfrmm.present) {
      map['VALOR_AFRMM'] = Variable<double>(valorAfrmm.value);
    }
    if (formaIntermediacao.present) {
      map['FORMA_INTERMEDIACAO'] = Variable<String>(formaIntermediacao.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (ufTerceiro.present) {
      map['UF_TERCEIRO'] = Variable<String>(ufTerceiro.value);
    }
    if (codigoExportador.present) {
      map['CODIGO_EXPORTADOR'] = Variable<String>(codigoExportador.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDeclaracaoImportacaosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('dataRegistro: $dataRegistro, ')
          ..write('localDesembaraco: $localDesembaraco, ')
          ..write('ufDesembaraco: $ufDesembaraco, ')
          ..write('dataDesembaraco: $dataDesembaraco, ')
          ..write('viaTransporte: $viaTransporte, ')
          ..write('valorAfrmm: $valorAfrmm, ')
          ..write('formaIntermediacao: $formaIntermediacao, ')
          ..write('cnpj: $cnpj, ')
          ..write('ufTerceiro: $ufTerceiro, ')
          ..write('codigoExportador: $codigoExportador')
          ..write(')'))
        .toString();
  }
}

class $NfeDeclaracaoImportacaosTable extends NfeDeclaracaoImportacaos
    with TableInfo<$NfeDeclaracaoImportacaosTable, NfeDeclaracaoImportacao> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDeclaracaoImportacaosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _numeroDocumentoMeta =
      const VerificationMeta('numeroDocumento');
  @override
  late final GeneratedColumn<String> numeroDocumento =
      GeneratedColumn<String>('NUMERO_DOCUMENTO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 12),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _dataRegistroMeta =
      const VerificationMeta('dataRegistro');
  @override
  late final GeneratedColumn<DateTime> dataRegistro =
      GeneratedColumn<DateTime>('DATA_REGISTRO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _localDesembaracoMeta =
      const VerificationMeta('localDesembaraco');
  @override
  late final GeneratedColumn<String> localDesembaraco =
      GeneratedColumn<String>('LOCAL_DESEMBARACO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 60),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _ufDesembaracoMeta =
      const VerificationMeta('ufDesembaraco');
  @override
  late final GeneratedColumn<String> ufDesembaraco = GeneratedColumn<String>(
      'UF_DESEMBARACO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _dataDesembaracoMeta =
      const VerificationMeta('dataDesembaraco');
  @override
  late final GeneratedColumn<DateTime> dataDesembaraco =
      GeneratedColumn<DateTime>('DATA_DESEMBARACO', aliasedName, true,
          type: DriftSqlType.dateTime, requiredDuringInsert: false);
  final VerificationMeta _viaTransporteMeta =
      const VerificationMeta('viaTransporte');
  @override
  late final GeneratedColumn<String> viaTransporte = GeneratedColumn<String>(
      'VIA_TRANSPORTE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _valorAfrmmMeta = const VerificationMeta('valorAfrmm');
  @override
  late final GeneratedColumn<double> valorAfrmm = GeneratedColumn<double>(
      'VALOR_AFRMM', aliasedName, true,
      type: DriftSqlType.double, requiredDuringInsert: false);
  final VerificationMeta _formaIntermediacaoMeta =
      const VerificationMeta('formaIntermediacao');
  @override
  late final GeneratedColumn<String> formaIntermediacao =
      GeneratedColumn<String>(
          'FORMA_INTERMEDIACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 1),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufTerceiroMeta = const VerificationMeta('ufTerceiro');
  @override
  late final GeneratedColumn<String> ufTerceiro = GeneratedColumn<String>(
      'UF_TERCEIRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoExportadorMeta =
      const VerificationMeta('codigoExportador');
  @override
  late final GeneratedColumn<String> codigoExportador =
      GeneratedColumn<String>('CODIGO_EXPORTADOR', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 60),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeDetalhe,
        numeroDocumento,
        dataRegistro,
        localDesembaraco,
        ufDesembaraco,
        dataDesembaraco,
        viaTransporte,
        valorAfrmm,
        formaIntermediacao,
        cnpj,
        ufTerceiro,
        codigoExportador
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DECLARACAO_IMPORTACAO';
  @override
  String get actualTableName => 'NFE_DECLARACAO_IMPORTACAO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDeclaracaoImportacao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('NUMERO_DOCUMENTO')) {
      context.handle(
          _numeroDocumentoMeta,
          numeroDocumento.isAcceptableOrUnknown(
              data['NUMERO_DOCUMENTO']!, _numeroDocumentoMeta));
    }
    if (data.containsKey('DATA_REGISTRO')) {
      context.handle(
          _dataRegistroMeta,
          dataRegistro.isAcceptableOrUnknown(
              data['DATA_REGISTRO']!, _dataRegistroMeta));
    }
    if (data.containsKey('LOCAL_DESEMBARACO')) {
      context.handle(
          _localDesembaracoMeta,
          localDesembaraco.isAcceptableOrUnknown(
              data['LOCAL_DESEMBARACO']!, _localDesembaracoMeta));
    }
    if (data.containsKey('UF_DESEMBARACO')) {
      context.handle(
          _ufDesembaracoMeta,
          ufDesembaraco.isAcceptableOrUnknown(
              data['UF_DESEMBARACO']!, _ufDesembaracoMeta));
    }
    if (data.containsKey('DATA_DESEMBARACO')) {
      context.handle(
          _dataDesembaracoMeta,
          dataDesembaraco.isAcceptableOrUnknown(
              data['DATA_DESEMBARACO']!, _dataDesembaracoMeta));
    }
    if (data.containsKey('VIA_TRANSPORTE')) {
      context.handle(
          _viaTransporteMeta,
          viaTransporte.isAcceptableOrUnknown(
              data['VIA_TRANSPORTE']!, _viaTransporteMeta));
    }
    if (data.containsKey('VALOR_AFRMM')) {
      context.handle(
          _valorAfrmmMeta,
          valorAfrmm.isAcceptableOrUnknown(
              data['VALOR_AFRMM']!, _valorAfrmmMeta));
    }
    if (data.containsKey('FORMA_INTERMEDIACAO')) {
      context.handle(
          _formaIntermediacaoMeta,
          formaIntermediacao.isAcceptableOrUnknown(
              data['FORMA_INTERMEDIACAO']!, _formaIntermediacaoMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('UF_TERCEIRO')) {
      context.handle(
          _ufTerceiroMeta,
          ufTerceiro.isAcceptableOrUnknown(
              data['UF_TERCEIRO']!, _ufTerceiroMeta));
    }
    if (data.containsKey('CODIGO_EXPORTADOR')) {
      context.handle(
          _codigoExportadorMeta,
          codigoExportador.isAcceptableOrUnknown(
              data['CODIGO_EXPORTADOR']!, _codigoExportadorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDeclaracaoImportacao map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeDeclaracaoImportacao.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDeclaracaoImportacaosTable createAlias(String alias) {
    return $NfeDeclaracaoImportacaosTable(attachedDatabase, alias);
  }
}

class NfeDestinatario extends DataClass implements Insertable<NfeDestinatario> {
  final int? id;
  final int? idNfeCabecalho;
  final String? cnpj;
  final String? cpf;
  final String? estrangeiroIdentificacao;
  final String? nome;
  final String? logradouro;
  final String? numero;
  final String? complemento;
  final String? bairro;
  final int? codigoMunicipio;
  final String? nomeMunicipio;
  final String? uf;
  final String? cep;
  final int? codigoPais;
  final String? nomePais;
  final String? telefone;
  final String? indicadorIe;
  final String? inscricaoEstadual;
  final int? suframa;
  final String? inscricaoMunicipal;
  final String? email;
  NfeDestinatario(
      {this.id,
      this.idNfeCabecalho,
      this.cnpj,
      this.cpf,
      this.estrangeiroIdentificacao,
      this.nome,
      this.logradouro,
      this.numero,
      this.complemento,
      this.bairro,
      this.codigoMunicipio,
      this.nomeMunicipio,
      this.uf,
      this.cep,
      this.codigoPais,
      this.nomePais,
      this.telefone,
      this.indicadorIe,
      this.inscricaoEstadual,
      this.suframa,
      this.inscricaoMunicipal,
      this.email});
  factory NfeDestinatario.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDestinatario(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeCabecalho: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_CABECALHO']),
      cnpj: ValueSqlType.stringType(data['${effectivePrefix}CNPJ']),
      cpf: ValueSqlType.stringType(data['${effectivePrefix}CPF']),
      estrangeiroIdentificacao: ValueSqlType.stringType(
          data['${effectivePrefix}ESTRANGEIRO_IDENTIFICACAO']),
      nome: ValueSqlType.stringType(data['${effectivePrefix}NOME']),
      logradouro: ValueSqlType.stringType(data['${effectivePrefix}LOGRADOURO']),
      numero: ValueSqlType.stringType(data['${effectivePrefix}NUMERO']),
      complemento: ValueSqlType.stringType(data['${effectivePrefix}COMPLEMENTO']),
      bairro: ValueSqlType.stringType(data['${effectivePrefix}BAIRRO']),
      codigoMunicipio: ValueSqlType.intType(data['${effectivePrefix}CODIGO_MUNICIPIO']),
      nomeMunicipio: ValueSqlType.stringType(data['${effectivePrefix}NOME_MUNICIPIO']),
      uf: ValueSqlType.stringType(data['${effectivePrefix}UF']),
      cep: ValueSqlType.stringType(data['${effectivePrefix}CEP']),
      codigoPais: ValueSqlType.intType(data['${effectivePrefix}CODIGO_PAIS']),
      nomePais: ValueSqlType.stringType(data['${effectivePrefix}NOME_PAIS']),
      telefone: ValueSqlType.stringType(data['${effectivePrefix}TELEFONE']),
      indicadorIe: ValueSqlType.stringType(data['${effectivePrefix}INDICADOR_IE']),
      inscricaoEstadual: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      suframa: ValueSqlType.intType(data['${effectivePrefix}SUFRAMA']),
      inscricaoMunicipal: ValueSqlType.stringType(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
      email: ValueSqlType.stringType(data['${effectivePrefix}EMAIL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeCabecalho != null) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || estrangeiroIdentificacao != null) {
      map['ESTRANGEIRO_IDENTIFICACAO'] =
          Variable<String>(estrangeiroIdentificacao);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || codigoMunicipio != null) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio);
    }
    if (!nullToAbsent || nomeMunicipio != null) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoPais != null) {
      map['CODIGO_PAIS'] = Variable<int>(codigoPais);
    }
    if (!nullToAbsent || nomePais != null) {
      map['NOME_PAIS'] = Variable<String>(nomePais);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || indicadorIe != null) {
      map['INDICADOR_IE'] = Variable<String>(indicadorIe);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || suframa != null) {
      map['SUFRAMA'] = Variable<int>(suframa);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    return map;
  }

  NfeDestinatariosCompanion toCompanion(bool nullToAbsent) {
    return NfeDestinatariosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeCabecalho: idNfeCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeCabecalho),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      estrangeiroIdentificacao: estrangeiroIdentificacao == null && nullToAbsent
          ? const Value.absent()
          : Value(estrangeiroIdentificacao),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      codigoMunicipio: codigoMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoMunicipio),
      nomeMunicipio: nomeMunicipio == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeMunicipio),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      codigoPais: codigoPais == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoPais),
      nomePais: nomePais == null && nullToAbsent
          ? const Value.absent()
          : Value(nomePais),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      indicadorIe: indicadorIe == null && nullToAbsent
          ? const Value.absent()
          : Value(indicadorIe),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      suframa: suframa == null && nullToAbsent
          ? const Value.absent()
          : Value(suframa),
      inscricaoMunicipal: inscricaoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipal),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
    );
  }

  factory NfeDestinatario.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDestinatario(
      id: serializer.fromJson<int?>(json['id']),
      idNfeCabecalho: serializer.fromJson<int?>(json['idNfeCabecalho']),
      cnpj: serializer.fromJson<String?>(json['cnpj']),
      cpf: serializer.fromJson<String?>(json['cpf']),
      estrangeiroIdentificacao:
          serializer.fromJson<String?>(json['estrangeiroIdentificacao']),
      nome: serializer.fromJson<String?>(json['nome']),
      logradouro: serializer.fromJson<String?>(json['logradouro']),
      numero: serializer.fromJson<String?>(json['numero']),
      complemento: serializer.fromJson<String?>(json['complemento']),
      bairro: serializer.fromJson<String?>(json['bairro']),
      codigoMunicipio: serializer.fromJson<int?>(json['codigoMunicipio']),
      nomeMunicipio: serializer.fromJson<String?>(json['nomeMunicipio']),
      uf: serializer.fromJson<String?>(json['uf']),
      cep: serializer.fromJson<String?>(json['cep']),
      codigoPais: serializer.fromJson<int?>(json['codigoPais']),
      nomePais: serializer.fromJson<String?>(json['nomePais']),
      telefone: serializer.fromJson<String?>(json['telefone']),
      indicadorIe: serializer.fromJson<String?>(json['indicadorIe']),
      inscricaoEstadual:
          serializer.fromJson<String?>(json['inscricaoEstadual']),
      suframa: serializer.fromJson<int?>(json['suframa']),
      inscricaoMunicipal:
          serializer.fromJson<String?>(json['inscricaoMunicipal']),
      email: serializer.fromJson<String?>(json['email']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeCabecalho': serializer.toJson<int?>(idNfeCabecalho),
      'cnpj': serializer.toJson<String?>(cnpj),
      'cpf': serializer.toJson<String?>(cpf),
      'estrangeiroIdentificacao':
          serializer.toJson<String?>(estrangeiroIdentificacao),
      'nome': serializer.toJson<String?>(nome),
      'logradouro': serializer.toJson<String?>(logradouro),
      'numero': serializer.toJson<String?>(numero),
      'complemento': serializer.toJson<String?>(complemento),
      'bairro': serializer.toJson<String?>(bairro),
      'codigoMunicipio': serializer.toJson<int?>(codigoMunicipio),
      'nomeMunicipio': serializer.toJson<String?>(nomeMunicipio),
      'uf': serializer.toJson<String?>(uf),
      'cep': serializer.toJson<String?>(cep),
      'codigoPais': serializer.toJson<int?>(codigoPais),
      'nomePais': serializer.toJson<String?>(nomePais),
      'telefone': serializer.toJson<String?>(telefone),
      'indicadorIe': serializer.toJson<String?>(indicadorIe),
      'inscricaoEstadual': serializer.toJson<String?>(inscricaoEstadual),
      'suframa': serializer.toJson<int?>(suframa),
      'inscricaoMunicipal': serializer.toJson<String?>(inscricaoMunicipal),
      'email': serializer.toJson<String?>(email),
    };
  }

  NfeDestinatario copyWith(
          {int? id,
          int? idNfeCabecalho,
          String? cnpj,
          String? cpf,
          String? estrangeiroIdentificacao,
          String? nome,
          String? logradouro,
          String? numero,
          String? complemento,
          String? bairro,
          int? codigoMunicipio,
          String? nomeMunicipio,
          String? uf,
          String? cep,
          int? codigoPais,
          String? nomePais,
          String? telefone,
          String? indicadorIe,
          String? inscricaoEstadual,
          int? suframa,
          String? inscricaoMunicipal,
          String? email}) =>
      NfeDestinatario(
        id: id ?? this.id,
        idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
        cnpj: cnpj ?? this.cnpj,
        cpf: cpf ?? this.cpf,
        estrangeiroIdentificacao:
            estrangeiroIdentificacao ?? this.estrangeiroIdentificacao,
        nome: nome ?? this.nome,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        bairro: bairro ?? this.bairro,
        codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
        nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
        uf: uf ?? this.uf,
        cep: cep ?? this.cep,
        codigoPais: codigoPais ?? this.codigoPais,
        nomePais: nomePais ?? this.nomePais,
        telefone: telefone ?? this.telefone,
        indicadorIe: indicadorIe ?? this.indicadorIe,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        suframa: suframa ?? this.suframa,
        inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
        email: email ?? this.email,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDestinatario(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('estrangeiroIdentificacao: $estrangeiroIdentificacao, ')
          ..write('nome: $nome, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('indicadorIe: $indicadorIe, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('suframa: $suframa, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('email: $email')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hashAll([
        id,
        idNfeCabecalho,
        cnpj,
        cpf,
        estrangeiroIdentificacao,
        nome,
        logradouro,
        numero,
        complemento,
        bairro,
        codigoMunicipio,
        nomeMunicipio,
        uf,
        cep,
        codigoPais,
        nomePais,
        telefone,
        indicadorIe,
        inscricaoEstadual,
        suframa,
        inscricaoMunicipal,
        email
      ]);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDestinatario &&
          other.id == this.id &&
          other.idNfeCabecalho == this.idNfeCabecalho &&
          other.cnpj == this.cnpj &&
          other.cpf == this.cpf &&
          other.estrangeiroIdentificacao == this.estrangeiroIdentificacao &&
          other.nome == this.nome &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.codigoMunicipio == this.codigoMunicipio &&
          other.nomeMunicipio == this.nomeMunicipio &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoPais == this.codigoPais &&
          other.nomePais == this.nomePais &&
          other.telefone == this.telefone &&
          other.indicadorIe == this.indicadorIe &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.suframa == this.suframa &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.email == this.email);
}

class NfeDestinatariosCompanion extends UpdateCompanion<NfeDestinatario> {
  final Value<int?> id;
  final Value<int?> idNfeCabecalho;
  final Value<String?> cnpj;
  final Value<String?> cpf;
  final Value<String?> estrangeiroIdentificacao;
  final Value<String?> nome;
  final Value<String?> logradouro;
  final Value<String?> numero;
  final Value<String?> complemento;
  final Value<String?> bairro;
  final Value<int?> codigoMunicipio;
  final Value<String?> nomeMunicipio;
  final Value<String?> uf;
  final Value<String?> cep;
  final Value<int?> codigoPais;
  final Value<String?> nomePais;
  final Value<String?> telefone;
  final Value<String?> indicadorIe;
  final Value<String?> inscricaoEstadual;
  final Value<int?> suframa;
  final Value<String?> inscricaoMunicipal;
  final Value<String?> email;
  const NfeDestinatariosCompanion({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.estrangeiroIdentificacao = const Value.absent(),
    this.nome = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.indicadorIe = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.suframa = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.email = const Value.absent(),
  });
  NfeDestinatariosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeCabecalho = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.cpf = const Value.absent(),
    this.estrangeiroIdentificacao = const Value.absent(),
    this.nome = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.codigoMunicipio = const Value.absent(),
    this.nomeMunicipio = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoPais = const Value.absent(),
    this.nomePais = const Value.absent(),
    this.telefone = const Value.absent(),
    this.indicadorIe = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.suframa = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.email = const Value.absent(),
  });
  static Insertable<NfeDestinatario> custom({
    Expression<int>? id,
    Expression<int>? idNfeCabecalho,
    Expression<String>? cnpj,
    Expression<String>? cpf,
    Expression<String>? estrangeiroIdentificacao,
    Expression<String>? nome,
    Expression<String>? logradouro,
    Expression<String>? numero,
    Expression<String>? complemento,
    Expression<String>? bairro,
    Expression<int>? codigoMunicipio,
    Expression<String>? nomeMunicipio,
    Expression<String>? uf,
    Expression<String>? cep,
    Expression<int>? codigoPais,
    Expression<String>? nomePais,
    Expression<String>? telefone,
    Expression<String>? indicadorIe,
    Expression<String>? inscricaoEstadual,
    Expression<int>? suframa,
    Expression<String>? inscricaoMunicipal,
    Expression<String>? email,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeCabecalho != null) 'ID_NFE_CABECALHO': idNfeCabecalho,
      if (cnpj != null) 'CNPJ': cnpj,
      if (cpf != null) 'CPF': cpf,
      if (estrangeiroIdentificacao != null)
        'ESTRANGEIRO_IDENTIFICACAO': estrangeiroIdentificacao,
      if (nome != null) 'NOME': nome,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (bairro != null) 'BAIRRO': bairro,
      if (codigoMunicipio != null) 'CODIGO_MUNICIPIO': codigoMunicipio,
      if (nomeMunicipio != null) 'NOME_MUNICIPIO': nomeMunicipio,
      if (uf != null) 'UF': uf,
      if (cep != null) 'CEP': cep,
      if (codigoPais != null) 'CODIGO_PAIS': codigoPais,
      if (nomePais != null) 'NOME_PAIS': nomePais,
      if (telefone != null) 'TELEFONE': telefone,
      if (indicadorIe != null) 'INDICADOR_IE': indicadorIe,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (suframa != null) 'SUFRAMA': suframa,
      if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
      if (email != null) 'EMAIL': email,
    });
  }

  NfeDestinatariosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeCabecalho,
      Value<String?>? cnpj,
      Value<String?>? cpf,
      Value<String?>? estrangeiroIdentificacao,
      Value<String?>? nome,
      Value<String?>? logradouro,
      Value<String?>? numero,
      Value<String?>? complemento,
      Value<String?>? bairro,
      Value<int?>? codigoMunicipio,
      Value<String?>? nomeMunicipio,
      Value<String?>? uf,
      Value<String?>? cep,
      Value<int?>? codigoPais,
      Value<String?>? nomePais,
      Value<String?>? telefone,
      Value<String?>? indicadorIe,
      Value<String?>? inscricaoEstadual,
      Value<int?>? suframa,
      Value<String?>? inscricaoMunicipal,
      Value<String?>? email}) {
    return NfeDestinatariosCompanion(
      id: id ?? this.id,
      idNfeCabecalho: idNfeCabecalho ?? this.idNfeCabecalho,
      cnpj: cnpj ?? this.cnpj,
      cpf: cpf ?? this.cpf,
      estrangeiroIdentificacao:
          estrangeiroIdentificacao ?? this.estrangeiroIdentificacao,
      nome: nome ?? this.nome,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      codigoMunicipio: codigoMunicipio ?? this.codigoMunicipio,
      nomeMunicipio: nomeMunicipio ?? this.nomeMunicipio,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoPais: codigoPais ?? this.codigoPais,
      nomePais: nomePais ?? this.nomePais,
      telefone: telefone ?? this.telefone,
      indicadorIe: indicadorIe ?? this.indicadorIe,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      suframa: suframa ?? this.suframa,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      email: email ?? this.email,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeCabecalho.present) {
      map['ID_NFE_CABECALHO'] = Variable<int>(idNfeCabecalho.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (estrangeiroIdentificacao.present) {
      map['ESTRANGEIRO_IDENTIFICACAO'] =
          Variable<String>(estrangeiroIdentificacao.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (codigoMunicipio.present) {
      map['CODIGO_MUNICIPIO'] = Variable<int>(codigoMunicipio.value);
    }
    if (nomeMunicipio.present) {
      map['NOME_MUNICIPIO'] = Variable<String>(nomeMunicipio.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (codigoPais.present) {
      map['CODIGO_PAIS'] = Variable<int>(codigoPais.value);
    }
    if (nomePais.present) {
      map['NOME_PAIS'] = Variable<String>(nomePais.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (indicadorIe.present) {
      map['INDICADOR_IE'] = Variable<String>(indicadorIe.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (suframa.present) {
      map['SUFRAMA'] = Variable<int>(suframa.value);
    }
    if (inscricaoMunicipal.present) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDestinatariosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeCabecalho: $idNfeCabecalho, ')
          ..write('cnpj: $cnpj, ')
          ..write('cpf: $cpf, ')
          ..write('estrangeiroIdentificacao: $estrangeiroIdentificacao, ')
          ..write('nome: $nome, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('codigoMunicipio: $codigoMunicipio, ')
          ..write('nomeMunicipio: $nomeMunicipio, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoPais: $codigoPais, ')
          ..write('nomePais: $nomePais, ')
          ..write('telefone: $telefone, ')
          ..write('indicadorIe: $indicadorIe, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('suframa: $suframa, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('email: $email')
          ..write(')'))
        .toString();
  }
}

class $NfeDestinatariosTable extends NfeDestinatarios
    with TableInfo<$NfeDestinatariosTable, NfeDestinatario> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDestinatariosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeCabecalhoMeta =
      const VerificationMeta('idNfeCabecalho');
  @override
  late final GeneratedColumn<int> idNfeCabecalho = GeneratedColumn<int>(
      'ID_NFE_CABECALHO', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_CABECALHO(ID)');
  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  @override
  late final GeneratedColumn<String> cnpj = GeneratedColumn<String>(
      'CNPJ', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  @override
  late final GeneratedColumn<String> cpf = GeneratedColumn<String>(
      'CPF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 11),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _estrangeiroIdentificacaoMeta =
      const VerificationMeta('estrangeiroIdentificacao');
  @override
  late final GeneratedColumn<String> estrangeiroIdentificacao =
      GeneratedColumn<String>('ESTRANGEIRO_IDENTIFICACAO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 20),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  @override
  late final GeneratedColumn<String> nome = GeneratedColumn<String>(
      'NOME', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  @override
  late final GeneratedColumn<String> logradouro = GeneratedColumn<String>(
      'LOGRADOURO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  @override
  late final GeneratedColumn<String> numero = GeneratedColumn<String>(
      'NUMERO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  @override
  late final GeneratedColumn<String> complemento = GeneratedColumn<String>(
      'COMPLEMENTO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  @override
  late final GeneratedColumn<String> bairro = GeneratedColumn<String>(
      'BAIRRO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoMunicipioMeta =
      const VerificationMeta('codigoMunicipio');
  @override
  late final GeneratedColumn<int> codigoMunicipio = GeneratedColumn<int>(
      'CODIGO_MUNICIPIO', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomeMunicipioMeta =
      const VerificationMeta('nomeMunicipio');
  @override
  late final GeneratedColumn<String> nomeMunicipio = GeneratedColumn<String>(
      'NOME_MUNICIPIO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  @override
  late final GeneratedColumn<String> uf = GeneratedColumn<String>(
      'UF', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 2),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  @override
  late final GeneratedColumn<String> cep = GeneratedColumn<String>(
      'CEP', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 8),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _codigoPaisMeta = const VerificationMeta('codigoPais');
  @override
  late final GeneratedColumn<int> codigoPais = GeneratedColumn<int>(
      'CODIGO_PAIS', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _nomePaisMeta = const VerificationMeta('nomePais');
  @override
  late final GeneratedColumn<String> nomePais = GeneratedColumn<String>(
      'NOME_PAIS', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  @override
  late final GeneratedColumn<String> telefone = GeneratedColumn<String>(
      'TELEFONE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 14),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _indicadorIeMeta =
      const VerificationMeta('indicadorIe');
  @override
  late final GeneratedColumn<String> indicadorIe = GeneratedColumn<String>(
      'INDICADOR_IE', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  @override
  late final GeneratedColumn<String> inscricaoEstadual =
      GeneratedColumn<String>('INSCRICAO_ESTADUAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 14),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _suframaMeta = const VerificationMeta('suframa');
  @override
  late final GeneratedColumn<int> suframa = GeneratedColumn<int>(
      'SUFRAMA', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  @override
  late final GeneratedColumn<String> inscricaoMunicipal =
      GeneratedColumn<String>(
          'INSCRICAO_MUNICIPAL', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 15),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _emailMeta = const VerificationMeta('email');
  @override
  late final GeneratedColumn<String> email = GeneratedColumn<String>(
      'EMAIL', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 60),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns => [
        id,
        idNfeCabecalho,
        cnpj,
        cpf,
        estrangeiroIdentificacao,
        nome,
        logradouro,
        numero,
        complemento,
        bairro,
        codigoMunicipio,
        nomeMunicipio,
        uf,
        cep,
        codigoPais,
        nomePais,
        telefone,
        indicadorIe,
        inscricaoEstadual,
        suframa,
        inscricaoMunicipal,
        email
      ];
  @override
  String get aliasedName => _alias ?? 'NFE_DESTINATARIO';
  @override
  String get actualTableName => 'NFE_DESTINATARIO';
  @override
  VerificationContext validateIntegrity(Insertable<NfeDestinatario> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_CABECALHO')) {
      context.handle(
          _idNfeCabecalhoMeta,
          idNfeCabecalho.isAcceptableOrUnknown(
              data['ID_NFE_CABECALHO']!, _idNfeCabecalhoMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ']!, _cnpjMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF']!, _cpfMeta));
    }
    if (data.containsKey('ESTRANGEIRO_IDENTIFICACAO')) {
      context.handle(
          _estrangeiroIdentificacaoMeta,
          estrangeiroIdentificacao.isAcceptableOrUnknown(
              data['ESTRANGEIRO_IDENTIFICACAO']!,
              _estrangeiroIdentificacaoMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME']!, _nomeMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO']!, _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO']!, _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO']!, _complementoMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO']!, _bairroMeta));
    }
    if (data.containsKey('CODIGO_MUNICIPIO')) {
      context.handle(
          _codigoMunicipioMeta,
          codigoMunicipio.isAcceptableOrUnknown(
              data['CODIGO_MUNICIPIO']!, _codigoMunicipioMeta));
    }
    if (data.containsKey('NOME_MUNICIPIO')) {
      context.handle(
          _nomeMunicipioMeta,
          nomeMunicipio.isAcceptableOrUnknown(
              data['NOME_MUNICIPIO']!, _nomeMunicipioMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF']!, _ufMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP']!, _cepMeta));
    }
    if (data.containsKey('CODIGO_PAIS')) {
      context.handle(
          _codigoPaisMeta,
          codigoPais.isAcceptableOrUnknown(
              data['CODIGO_PAIS']!, _codigoPaisMeta));
    }
    if (data.containsKey('NOME_PAIS')) {
      context.handle(_nomePaisMeta,
          nomePais.isAcceptableOrUnknown(data['NOME_PAIS']!, _nomePaisMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE']!, _telefoneMeta));
    }
    if (data.containsKey('INDICADOR_IE')) {
      context.handle(
          _indicadorIeMeta,
          indicadorIe.isAcceptableOrUnknown(
              data['INDICADOR_IE']!, _indicadorIeMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL']!, _inscricaoEstadualMeta));
    }
    if (data.containsKey('SUFRAMA')) {
      context.handle(_suframaMeta,
          suframa.isAcceptableOrUnknown(data['SUFRAMA']!, _suframaMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL')) {
      context.handle(
          _inscricaoMunicipalMeta,
          inscricaoMunicipal.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL']!, _inscricaoMunicipalMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL']!, _emailMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDestinatario map(Map<String, dynamic> data, {String? tablePrefix}) {
    return NfeDestinatario.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDestinatariosTable createAlias(String alias) {
    return $NfeDestinatariosTable(attachedDatabase, alias);
  }
}

class NfeDetEspecificoArmamento extends DataClass
    implements Insertable<NfeDetEspecificoArmamento> {
  final int? id;
  final int? idNfeDetalhe;
  final String? tipoArma;
  final String? numeroSerieArma;
  final String? numeroSerieCano;
  final String? descricao;
  NfeDetEspecificoArmamento(
      {this.id,
      this.idNfeDetalhe,
      this.tipoArma,
      this.numeroSerieArma,
      this.numeroSerieCano,
      this.descricao});
  factory NfeDetEspecificoArmamento.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetEspecificoArmamento(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      tipoArma: ValueSqlType.stringType(data['${effectivePrefix}TIPO_ARMA']),
      numeroSerieArma: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_SERIE_ARMA']),
      numeroSerieCano: ValueSqlType.stringType(data['${effectivePrefix}NUMERO_SERIE_CANO']),
      descricao: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || tipoArma != null) {
      map['TIPO_ARMA'] = Variable<String>(tipoArma);
    }
    if (!nullToAbsent || numeroSerieArma != null) {
      map['NUMERO_SERIE_ARMA'] = Variable<String>(numeroSerieArma);
    }
    if (!nullToAbsent || numeroSerieCano != null) {
      map['NUMERO_SERIE_CANO'] = Variable<String>(numeroSerieCano);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    return map;
  }

  NfeDetEspecificoArmamentosCompanion toCompanion(bool nullToAbsent) {
    return NfeDetEspecificoArmamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      tipoArma: tipoArma == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoArma),
      numeroSerieArma: numeroSerieArma == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSerieArma),
      numeroSerieCano: numeroSerieCano == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSerieCano),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
    );
  }

  factory NfeDetEspecificoArmamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetEspecificoArmamento(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      tipoArma: serializer.fromJson<String?>(json['tipoArma']),
      numeroSerieArma: serializer.fromJson<String?>(json['numeroSerieArma']),
      numeroSerieCano: serializer.fromJson<String?>(json['numeroSerieCano']),
      descricao: serializer.fromJson<String?>(json['descricao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'tipoArma': serializer.toJson<String?>(tipoArma),
      'numeroSerieArma': serializer.toJson<String?>(numeroSerieArma),
      'numeroSerieCano': serializer.toJson<String?>(numeroSerieCano),
      'descricao': serializer.toJson<String?>(descricao),
    };
  }

  NfeDetEspecificoArmamento copyWith(
          {int? id,
          int? idNfeDetalhe,
          String? tipoArma,
          String? numeroSerieArma,
          String? numeroSerieCano,
          String? descricao}) =>
      NfeDetEspecificoArmamento(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        tipoArma: tipoArma ?? this.tipoArma,
        numeroSerieArma: numeroSerieArma ?? this.numeroSerieArma,
        numeroSerieCano: numeroSerieCano ?? this.numeroSerieCano,
        descricao: descricao ?? this.descricao,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoArmamento(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoArma: $tipoArma, ')
          ..write('numeroSerieArma: $numeroSerieArma, ')
          ..write('numeroSerieCano: $numeroSerieCano, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id, idNfeDetalhe, tipoArma, numeroSerieArma, numeroSerieCano, descricao);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetEspecificoArmamento &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.tipoArma == this.tipoArma &&
          other.numeroSerieArma == this.numeroSerieArma &&
          other.numeroSerieCano == this.numeroSerieCano &&
          other.descricao == this.descricao);
}

class NfeDetEspecificoArmamentosCompanion
    extends UpdateCompanion<NfeDetEspecificoArmamento> {
  final Value<int?> id;
  final Value<int?> idNfeDetalhe;
  final Value<String?> tipoArma;
  final Value<String?> numeroSerieArma;
  final Value<String?> numeroSerieCano;
  final Value<String?> descricao;
  const NfeDetEspecificoArmamentosCompanion({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoArma = const Value.absent(),
    this.numeroSerieArma = const Value.absent(),
    this.numeroSerieCano = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  NfeDetEspecificoArmamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idNfeDetalhe = const Value.absent(),
    this.tipoArma = const Value.absent(),
    this.numeroSerieArma = const Value.absent(),
    this.numeroSerieCano = const Value.absent(),
    this.descricao = const Value.absent(),
  });
  static Insertable<NfeDetEspecificoArmamento> custom({
    Expression<int>? id,
    Expression<int>? idNfeDetalhe,
    Expression<String>? tipoArma,
    Expression<String>? numeroSerieArma,
    Expression<String>? numeroSerieCano,
    Expression<String>? descricao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idNfeDetalhe != null) 'ID_NFE_DETALHE': idNfeDetalhe,
      if (tipoArma != null) 'TIPO_ARMA': tipoArma,
      if (numeroSerieArma != null) 'NUMERO_SERIE_ARMA': numeroSerieArma,
      if (numeroSerieCano != null) 'NUMERO_SERIE_CANO': numeroSerieCano,
      if (descricao != null) 'DESCRICAO': descricao,
    });
  }

  NfeDetEspecificoArmamentosCompanion copyWith(
      {Value<int?>? id,
      Value<int?>? idNfeDetalhe,
      Value<String?>? tipoArma,
      Value<String?>? numeroSerieArma,
      Value<String?>? numeroSerieCano,
      Value<String?>? descricao}) {
    return NfeDetEspecificoArmamentosCompanion(
      id: id ?? this.id,
      idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
      tipoArma: tipoArma ?? this.tipoArma,
      numeroSerieArma: numeroSerieArma ?? this.numeroSerieArma,
      numeroSerieCano: numeroSerieCano ?? this.numeroSerieCano,
      descricao: descricao ?? this.descricao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idNfeDetalhe.present) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe.value);
    }
    if (tipoArma.present) {
      map['TIPO_ARMA'] = Variable<String>(tipoArma.value);
    }
    if (numeroSerieArma.present) {
      map['NUMERO_SERIE_ARMA'] = Variable<String>(numeroSerieArma.value);
    }
    if (numeroSerieCano.present) {
      map['NUMERO_SERIE_CANO'] = Variable<String>(numeroSerieCano.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoArmamentosCompanion(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('tipoArma: $tipoArma, ')
          ..write('numeroSerieArma: $numeroSerieArma, ')
          ..write('numeroSerieCano: $numeroSerieCano, ')
          ..write('descricao: $descricao')
          ..write(')'))
        .toString();
  }
}

class $NfeDetEspecificoArmamentosTable extends NfeDetEspecificoArmamentos
    with
        TableInfo<$NfeDetEspecificoArmamentosTable, NfeDetEspecificoArmamento> {
  @override
  final GeneratedDatabase attachedDatabase;
  final String? _alias;
  $NfeDetEspecificoArmamentosTable(this.attachedDatabase, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  @override
  late final GeneratedColumn<int> id = GeneratedColumn<int>(
      'ID', aliasedName, true,
      type: DriftSqlType.int, requiredDuringInsert: false);
  final VerificationMeta _idNfeDetalheMeta =
      const VerificationMeta('idNfeDetalhe');
  @override
  late final GeneratedColumn<int> idNfeDetalhe = GeneratedColumn<int>(
      'ID_NFE_DETALHE', aliasedName, true,
      type: DriftSqlType.int,
      requiredDuringInsert: false,
      $customConstraints: 'NULLABLE REFERENCES NFE_DETALHE(ID)');
  final VerificationMeta _tipoArmaMeta = const VerificationMeta('tipoArma');
  @override
  late final GeneratedColumn<String> tipoArma = GeneratedColumn<String>(
      'TIPO_ARMA', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 1),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  final VerificationMeta _numeroSerieArmaMeta =
      const VerificationMeta('numeroSerieArma');
  @override
  late final GeneratedColumn<String> numeroSerieArma =
      GeneratedColumn<String>('NUMERO_SERIE_ARMA', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 15),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _numeroSerieCanoMeta =
      const VerificationMeta('numeroSerieCano');
  @override
  late final GeneratedColumn<String> numeroSerieCano =
      GeneratedColumn<String>('NUMERO_SERIE_CANO', aliasedName, true,
          additionalChecks: GeneratedColumn.checkTextLength(
              minTextLength: 0, maxTextLength: 15),
          type: DriftSqlType.string,
          requiredDuringInsert: false);
  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  @override
  late final GeneratedColumn<String> descricao = GeneratedColumn<String>(
      'DESCRICAO', aliasedName, true,
      additionalChecks:
          GeneratedColumn.checkTextLength(minTextLength: 0, maxTextLength: 250),
      type: DriftSqlType.string,
      requiredDuringInsert: false);
  @override
  List<GeneratedColumn> get $columns =>
      [id, idNfeDetalhe, tipoArma, numeroSerieArma, numeroSerieCano, descricao];
  @override
  String get aliasedName => _alias ?? 'NFE_DET_ESPECIFICO_ARMAMENTO';
  @override
  String get actualTableName => 'NFE_DET_ESPECIFICO_ARMAMENTO';
  @override
  VerificationContext validateIntegrity(
      Insertable<NfeDetEspecificoArmamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID']!, _idMeta));
    }
    if (data.containsKey('ID_NFE_DETALHE')) {
      context.handle(
          _idNfeDetalheMeta,
          idNfeDetalhe.isAcceptableOrUnknown(
              data['ID_NFE_DETALHE']!, _idNfeDetalheMeta));
    }
    if (data.containsKey('TIPO_ARMA')) {
      context.handle(_tipoArmaMeta,
          tipoArma.isAcceptableOrUnknown(data['TIPO_ARMA']!, _tipoArmaMeta));
    }
    if (data.containsKey('NUMERO_SERIE_ARMA')) {
      context.handle(
          _numeroSerieArmaMeta,
          numeroSerieArma.isAcceptableOrUnknown(
              data['NUMERO_SERIE_ARMA']!, _numeroSerieArmaMeta));
    }
    if (data.containsKey('NUMERO_SERIE_CANO')) {
      context.handle(
          _numeroSerieCanoMeta,
          numeroSerieCano.isAcceptableOrUnknown(
              data['NUMERO_SERIE_CANO']!, _numeroSerieCanoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO']!, _descricaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  NfeDetEspecificoArmamento map(Map<String, dynamic> data,
      {String? tablePrefix}) {
    return NfeDetEspecificoArmamento.fromData(data,
        prefix: tablePrefix != null ? '$tablePrefix.' : null);
  }

  @override
  $NfeDetEspecificoArmamentosTable createAlias(String alias) {
    return $NfeDetEspecificoArmamentosTable(attachedDatabase, alias);
  }
}

class NfeDetEspecificoCombustivel extends DataClass
    implements Insertable<NfeDetEspecificoCombustivel> {
  final int? id;
  final int? idNfeDetalhe;
  final int? codigoAnp;
  final String? descricaoAnp;
  final double? percentualGlp;
  final double? percentualGasNacional;
  final double? percentualGasImportado;
  final double? valorPartida;
  final String? codif;
  final double? quantidadeTempAmbiente;
  final String? ufConsumo;
  final double? cideBaseCalculo;
  final double? cideAliquota;
  final double? cideValor;
  final int? encerranteBico;
  final int? encerranteBomba;
  final int? encerranteTanque;
  final double? encerranteValorInicio;
  final double? encerranteValorFim;
  NfeDetEspecificoCombustivel(
      {this.id,
      this.idNfeDetalhe,
      this.codigoAnp,
      this.descricaoAnp,
      this.percentualGlp,
      this.percentualGasNacional,
      this.percentualGasImportado,
      this.valorPartida,
      this.codif,
      this.quantidadeTempAmbiente,
      this.ufConsumo,
      this.cideBaseCalculo,
      this.cideAliquota,
      this.cideValor,
      this.encerranteBico,
      this.encerranteBomba,
      this.encerranteTanque,
      this.encerranteValorInicio,
      this.encerranteValorFim});
  factory NfeDetEspecificoCombustivel.fromData(Map<String, dynamic> data,
      {String? prefix}) {
    final effectivePrefix = prefix ?? '';
    return NfeDetEspecificoCombustivel(
      id: ValueSqlType.intType(data['${effectivePrefix}ID']),
      idNfeDetalhe: ValueSqlType.intType(data['${effectivePrefix}ID_NFE_DETALHE']),
      codigoAnp: ValueSqlType.intType(data['${effectivePrefix}CODIGO_ANP']),
      descricaoAnp: ValueSqlType.stringType(data['${effectivePrefix}DESCRICAO_ANP']),
      percentualGlp: ValueSqlType.doubleType(data['${effectivePrefix}PERCENTUAL_GLP']),
      percentualGasNacional: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_GAS_NACIONAL']),
      percentualGasImportado: ValueSqlType.doubleType(
          data['${effectivePrefix}PERCENTUAL_GAS_IMPORTADO']),
      valorPartida: ValueSqlType.doubleType(data['${effectivePrefix}VALOR_PARTIDA']),
      codif: ValueSqlType.stringType(data['${effectivePrefix}CODIF']),
      quantidadeTempAmbiente: ValueSqlType.doubleType(
          data['${effectivePrefix}QUANTIDADE_TEMP_AMBIENTE']),
      ufConsumo: ValueSqlType.stringType(data['${effectivePrefix}UF_CONSUMO']),
      cideBaseCalculo: ValueSqlType.doubleType(data['${effectivePrefix}CIDE_BASE_CALCULO']),
      cideAliquota: ValueSqlType.doubleType(data['${effectivePrefix}CIDE_ALIQUOTA']),
      cideValor: ValueSqlType.doubleType(data['${effectivePrefix}CIDE_VALOR']),
      encerranteBico: ValueSqlType.intType(data['${effectivePrefix}ENCERRANTE_BICO']),
      encerranteBomba: ValueSqlType.intType(data['${effectivePrefix}ENCERRANTE_BOMBA']),
      encerranteTanque: ValueSqlType.intType(data['${effectivePrefix}ENCERRANTE_TANQUE']),
      encerranteValorInicio: ValueSqlType.doubleType(
          data['${effectivePrefix}ENCERRANTE_VALOR_INICIO']),
      encerranteValorFim: ValueSqlType.doubleType(
          data['${effectivePrefix}ENCERRANTE_VALOR_FIM']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idNfeDetalhe != null) {
      map['ID_NFE_DETALHE'] = Variable<int>(idNfeDetalhe);
    }
    if (!nullToAbsent || codigoAnp != null) {
      map['CODIGO_ANP'] = Variable<int>(codigoAnp);
    }
    if (!nullToAbsent || descricaoAnp != null) {
      map['DESCRICAO_ANP'] = Variable<String>(descricaoAnp);
    }
    if (!nullToAbsent || percentualGlp != null) {
      map['PERCENTUAL_GLP'] = Variable<double>(percentualGlp);
    }
    if (!nullToAbsent || percentualGasNacional != null) {
      map['PERCENTUAL_GAS_NACIONAL'] = Variable<double>(percentualGasNacional);
    }
    if (!nullToAbsent || percentualGasImportado != null) {
      map['PERCENTUAL_GAS_IMPORTADO'] =
          Variable<double>(percentualGasImportado);
    }
    if (!nullToAbsent || valorPartida != null) {
      map['VALOR_PARTIDA'] = Variable<double>(valorPartida);
    }
    if (!nullToAbsent || codif != null) {
      map['CODIF'] = Variable<String>(codif);
    }
    if (!nullToAbsent || quantidadeTempAmbiente != null) {
      map['QUANTIDADE_TEMP_AMBIENTE'] =
          Variable<double>(quantidadeTempAmbiente);
    }
    if (!nullToAbsent || ufConsumo != null) {
      map['UF_CONSUMO'] = Variable<String>(ufConsumo);
    }
    if (!nullToAbsent || cideBaseCalculo != null) {
      map['CIDE_BASE_CALCULO'] = Variable<double>(cideBaseCalculo);
    }
    if (!nullToAbsent || cideAliquota != null) {
      map['CIDE_ALIQUOTA'] = Variable<double>(cideAliquota);
    }
    if (!nullToAbsent || cideValor != null) {
      map['CIDE_VALOR'] = Variable<double>(cideValor);
    }
    if (!nullToAbsent || encerranteBico != null) {
      map['ENCERRANTE_BICO'] = Variable<int>(encerranteBico);
    }
    if (!nullToAbsent || encerranteBomba != null) {
      map['ENCERRANTE_BOMBA'] = Variable<int>(encerranteBomba);
    }
    if (!nullToAbsent || encerranteTanque != null) {
      map['ENCERRANTE_TANQUE'] = Variable<int>(encerranteTanque);
    }
    if (!nullToAbsent || encerranteValorInicio != null) {
      map['ENCERRANTE_VALOR_INICIO'] = Variable<double>(encerranteValorInicio);
    }
    if (!nullToAbsent || encerranteValorFim != null) {
      map['ENCERRANTE_VALOR_FIM'] = Variable<double>(encerranteValorFim);
    }
    return map;
  }

  NfeDetEspecificoCombustivelsCompanion toCompanion(bool nullToAbsent) {
    return NfeDetEspecificoCombustivelsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idNfeDetalhe: idNfeDetalhe == null && nullToAbsent
          ? const Value.absent()
          : Value(idNfeDetalhe),
      codigoAnp: codigoAnp == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoAnp),
      descricaoAnp: descricaoAnp == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoAnp),
      percentualGlp: percentualGlp == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualGlp),
      percentualGasNacional: percentualGasNacional == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualGasNacional),
      percentualGasImportado: percentualGasImportado == null && nullToAbsent
          ? const Value.absent()
          : Value(percentualGasImportado),
      valorPartida: valorPartida == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPartida),
      codif:
          codif == null && nullToAbsent ? const Value.absent() : Value(codif),
      quantidadeTempAmbiente: quantidadeTempAmbiente == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeTempAmbiente),
      ufConsumo: ufConsumo == null && nullToAbsent
          ? const Value.absent()
          : Value(ufConsumo),
      cideBaseCalculo: cideBaseCalculo == null && nullToAbsent
          ? const Value.absent()
          : Value(cideBaseCalculo),
      cideAliquota: cideAliquota == null && nullToAbsent
          ? const Value.absent()
          : Value(cideAliquota),
      cideValor: cideValor == null && nullToAbsent
          ? const Value.absent()
          : Value(cideValor),
      encerranteBico: encerranteBico == null && nullToAbsent
          ? const Value.absent()
          : Value(encerranteBico),
      encerranteBomba: encerranteBomba == null && nullToAbsent
          ? const Value.absent()
          : Value(encerranteBomba),
      encerranteTanque: encerranteTanque == null && nullToAbsent
          ? const Value.absent()
          : Value(encerranteTanque),
      encerranteValorInicio: encerranteValorInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(encerranteValorInicio),
      encerranteValorFim: encerranteValorFim == null && nullToAbsent
          ? const Value.absent()
          : Value(encerranteValorFim),
    );
  }

  factory NfeDetEspecificoCombustivel.fromJson(Map<String, dynamic> json,
      {ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return NfeDetEspecificoCombustivel(
      id: serializer.fromJson<int?>(json['id']),
      idNfeDetalhe: serializer.fromJson<int?>(json['idNfeDetalhe']),
      codigoAnp: serializer.fromJson<int?>(json['codigoAnp']),
      descricaoAnp: serializer.fromJson<String?>(json['descricaoAnp']),
      percentualGlp: serializer.fromJson<double?>(json['percentualGlp']),
      percentualGasNacional:
          serializer.fromJson<double?>(json['percentualGasNacional']),
      percentualGasImportado:
          serializer.fromJson<double?>(json['percentualGasImportado']),
      valorPartida: serializer.fromJson<double?>(json['valorPartida']),
      codif: serializer.fromJson<String?>(json['codif']),
      quantidadeTempAmbiente:
          serializer.fromJson<double?>(json['quantidadeTempAmbiente']),
      ufConsumo: serializer.fromJson<String?>(json['ufConsumo']),
      cideBaseCalculo: serializer.fromJson<double?>(json['cideBaseCalculo']),
      cideAliquota: serializer.fromJson<double?>(json['cideAliquota']),
      cideValor: serializer.fromJson<double?>(json['cideValor']),
      encerranteBico: serializer.fromJson<int?>(json['encerranteBico']),
      encerranteBomba: serializer.fromJson<int?>(json['encerranteBomba']),
      encerranteTanque: serializer.fromJson<int?>(json['encerranteTanque']),
      encerranteValorInicio:
          serializer.fromJson<double?>(json['encerranteValorInicio']),
      encerranteValorFim:
          serializer.fromJson<double?>(json['encerranteValorFim']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer? serializer}) {
    serializer ??= driftRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int?>(id),
      'idNfeDetalhe': serializer.toJson<int?>(idNfeDetalhe),
      'codigoAnp': serializer.toJson<int?>(codigoAnp),
      'descricaoAnp': serializer.toJson<String?>(descricaoAnp),
      'percentualGlp': serializer.toJson<double?>(percentualGlp),
      'percentualGasNacional':
          serializer.toJson<double?>(percentualGasNacional),
      'percentualGasImportado':
          serializer.toJson<double?>(percentualGasImportado),
      'valorPartida': serializer.toJson<double?>(valorPartida),
      'codif': serializer.toJson<String?>(codif),
      'quantidadeTempAmbiente':
          serializer.toJson<double?>(quantidadeTempAmbiente),
      'ufConsumo': serializer.toJson<String?>(ufConsumo),
      'cideBaseCalculo': serializer.toJson<double?>(cideBaseCalculo),
      'cideAliquota': serializer.toJson<double?>(cideAliquota),
      'cideValor': serializer.toJson<double?>(cideValor),
      'encerranteBico': serializer.toJson<int?>(encerranteBico),
      'encerranteBomba': serializer.toJson<int?>(encerranteBomba),
      'encerranteTanque': serializer.toJson<int?>(encerranteTanque),
      'encerranteValorInicio':
          serializer.toJson<double?>(encerranteValorInicio),
      'encerranteValorFim': serializer.toJson<double?>(encerranteValorFim),
    };
  }

  NfeDetEspecificoCombustivel copyWith(
          {int? id,
          int? idNfeDetalhe,
          int? codigoAnp,
          String? descricaoAnp,
          double? percentualGlp,
          double? percentualGasNacional,
          double? percentualGasImportado,
          double? valorPartida,
          String? codif,
          double? quantidadeTempAmbiente,
          String? ufConsumo,
          double? cideBaseCalculo,
          double? cideAliquota,
          double? cideValor,
          int? encerranteBico,
          int? encerranteBomba,
          int? encerranteTanque,
          double? encerranteValorInicio,
          double? encerranteValorFim}) =>
      NfeDetEspecificoCombustivel(
        id: id ?? this.id,
        idNfeDetalhe: idNfeDetalhe ?? this.idNfeDetalhe,
        codigoAnp: codigoAnp ?? this.codigoAnp,
        descricaoAnp: descricaoAnp ?? this.descricaoAnp,
        percentualGlp: percentualGlp ?? this.percentualGlp,
        percentualGasNacional:
            percentualGasNacional ?? this.percentualGasNacional,
        percentualGasImportado:
            percentualGasImportado ?? this.percentualGasImportado,
        valorPartida: valorPartida ?? this.valorPartida,
        codif: codif ?? this.codif,
        quantidadeTempAmbiente:
            quantidadeTempAmbiente ?? this.quantidadeTempAmbiente,
        ufConsumo: ufConsumo ?? this.ufConsumo,
        cideBaseCalculo: cideBaseCalculo ?? this.cideBaseCalculo,
        cideAliquota: cideAliquota ?? this.cideAliquota,
        cideValor: cideValor ?? this.cideValor,
        encerranteBico: encerranteBico ?? this.encerranteBico,
        encerranteBomba: encerranteBomba ?? this.encerranteBomba,
        encerranteTanque: encerranteTanque ?? this.encerranteTanque,
        encerranteValorInicio:
            encerranteValorInicio ?? this.encerranteValorInicio,
        encerranteValorFim: encerranteValorFim ?? this.encerranteValorFim,
      );
  @override
  String toString() {
    return (StringBuffer('NfeDetEspecificoCombustivel(')
          ..write('id: $id, ')
          ..write('idNfeDetalhe: $idNfeDetalhe, ')
          ..write('codigoAnp: $codigoAnp, ')
          ..write('descricaoAnp: $descricaoAnp, ')
          ..write('percentualGlp: $percentualGlp, ')
          ..write('percentualGasNacional: $percentualGasNacional, ')
          ..write('percentualGasImportado: $percentualGasImportado, ')
          ..write('valorPartida: $valorPartida, ')
          ..write('codif: $codif, ')
          ..write('quantidadeTempAmbiente: $quantidadeTempAmbiente, ')
          ..write('ufConsumo: $ufConsumo, ')
          ..write('cideBaseCalculo: $cideBaseCalculo, ')
          ..write('cideAliquota: $cideAliquota, ')
          ..write('cideValor: $cideValor, ')
          ..write('encerranteBico: $encerranteBico, ')
          ..write('encerranteBomba: $encerranteBomba, ')
          ..write('encerranteTanque: $encerranteTanque, ')
          ..write('encerranteValorInicio: $encerranteValorInicio, ')
          ..write('encerranteValorFim: $encerranteValorFim')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => Object.hash(
      id,
      idNfeDetalhe,
      codigoAnp,
      descricaoAnp,
      percentualGlp,
      percentualGasNacional,
      percentualGasImportado,
      valorPartida,
      codif,
      quantidadeTempAmbiente,
      ufConsumo,
      cideBaseCalculo,
      cideAliquota,
      cideValor,
      encerranteBico,
      encerranteBomba,
      encerranteTanque,
      encerranteValorInicio,
      encerranteValorFim);
  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      (other is NfeDetEspecificoCombustivel &&
          other.id == this.id &&
          other.idNfeDetalhe == this.idNfeDetalhe &&
          other.codigoAnp == this.codigoAnp &&
          other.descricaoAnp == this.descricaoAnp &&
          other.percentualGlp == this.percentualGlp &&
          other.percentualGasNacional == this.percentualGasNacional &&
          other.percentualGasImportado == this.percentualGasImportado &&
          other.valorPartida == this.valorPartida &&
          other.codif == this.codif &&
          other.quantidadeTempAmbiente == this.quantidadeTempAmbiente &&
          other.ufConsumo == this.ufConsumo &&
          other.cideBaseCalculo == this.cideBaseCalculo &&
          other.cideAliquota == this.cideAliquota &&
          other.cideValor == this.cideValor &&
          other.encerranteBico == this.encerranteBico &&
          other.encerranteBomba == this.encerranteBomba &&
          other.encerranteTanque == this.encerranteTanque &&
          other.encerranteValorInicio == this.encerranteValorInicio &&
          other.encerranteValorFim == this.encerranteValorFim);
}
